*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.21" SourceFile="apbill.scx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
#INCLUDE "..\commonincludes\appdefscommon.h"

DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*<PropValue>
		AutoOpenTables = .F.
		DataSource = .NULL.
		Height = 711
		InitialSelectedAlias = "appurchh"
		Left = 48
		Name = "Dataenvironment"
		Top = 12
		Width = 929
	*</PropValue>

ENDDEFINE

DEFINE CLASS formapbill AS frmdatamanagerformcustom OF "..\codemine\custom\cforms.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpshapecustom2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpshapecustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDispCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtwastecode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcdisperm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCvendorid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCvendname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCinvnum" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCreference" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCidterm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDinvdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDduedate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvbal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDdiscdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvbal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNinvtot" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdpostdate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTerms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVendor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDocument" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcommandbuttoncustom1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdInvDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRecur" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcVendorID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCitemdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLease" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookUnit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcDeptNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtafeno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDueDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCatCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcProdPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnExtension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCitemdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNextension" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookDept" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcUnitNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcProdYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAFENo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSlash" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookOwner" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcOwnerID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProdPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtnSaltBBL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdReverse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtdDiscDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctNo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbllabelcustom5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLookCOA" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column1.txtcWellID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column2.txtCatCode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column3.txtClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column4.txtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column5.txtAccount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column6.txtAmount" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column7.txtDeptno" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column8.txtYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column9.txtPeriod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column10.txtAllocateTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column11.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GridDetails.Column11.txtAFENo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDuplicate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPaid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcAcctDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcWellName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtcCatDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCdeptdesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grouptran" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glmaint" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: adddetail2
		*m: adddetailline
		*m: calcext		&& Calculates the detail extension total
		*m: calcext1
		*m: calcext2
		*m: calctot		&& Calculates the Invoice Totals
		*m: catlookup
		*m: checkexp		&& Check to see if expenses entered for wells have been allocated and the production period closed.
		*m: checkhist		&& Checks to see if the production period is closed.
		*m: checkpaid
		*m: coalookup
		*m: deptlookup
		*m: dmexpense		&& Disbursement Manager integration for expenses.
		*m: duplicatebill
		*m: editdetailline		&& Moves the detail line from the grid to the update area.
		*m: edititems
		*m: getprice		&& Gets the price for the item based upon the price code passed.
		*m: lookcoa
		*m: ownerlookup
		*m: pagedown
		*m: pageup
		*m: resave_expenses
		*m: reversebill
		*m: setstate		&& Resets the form state for non bound controls so that the save button still works.
		*m: valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*m: viewdocument		&& Brings up the document viewer for the attached document.
		*m: welllookup
		*m: zerotot
		*p: amtvalue
		*p: cclosedrun
		*p: cconfirmset
		*p: ldeptrequired
		*p: lf5
		*p: linvestment
		*p: ljvposting
		*p: lnoclearext
		*p: lnomessages
		*p: lpageddown
		*p: lpaid
		*p: lreversed
		*p: lsendtoallocate
		*p: lsepclose		&& Separate close for revenue and JIBs
		*p: lvalidwell		&& A valid well id was entered in the well detail field.
		*p: lwellrequired
		*p: nbilltotal
		*p: nextension
		*p: nprice
		*p: nquantity
		*p: odist		&& Distproc object
	*</DefinedPropArrayMethod>

	*<PropValue>
		amtvalue = 0
		BackColor = 255,255,255
		Caption = "Enter Bills"
		cdataenvironment = ("AP")
		cdisplayname = 
		clistexpression = appurchh.cbatch
		cnavworkarea = appurchh
		cworkarea = appurchh
		DoCreate = .T.
		Height = 550
		HelpContextID = 18
		lconfirmsave = .T.
		lexpliciteditmode = .F.
		ljvposting = .F.
		lnoclearext = .F.
		lnomessages = .F.
		lpageddown = .F.
		lreversed = .F.
		lsendtoallocate = .F.
		Name = "FormApbill"
		nbilltotal = 0
		Visible = .T.
		Width = 1000
		WindowState = 0
		_memberdata = <VFPData>
			<memberdata name="lnodataentry" type="property" display="lNoDataEntry"/>
			<memberdata name="lsendtoallocate" type="property" display="lSendToAllocate"/>
			<memberdata name="viewdocument" display="ViewDocument"/>
			<memberdata name="adddetailline" display="AddDetailLine"/>
			<memberdata name="editdetailline" display="EditDetailLine"/>
			<memberdata name="coalookup" display="CoaLookup"/>
			<memberdata name="catlookup" display="CatLookup"/>
			<memberdata name="welllookup" display="WellLookup"/>
			<memberdata name="deptlookup" display="DeptLookup"/>
			<memberdata name="ownerlookup" display="OwnerLookup"/>
			<memberdata name="ljvposting" display="lJVPosting"/>
			<memberdata name="reversebill" display="ReverseBill"/>
			<memberdata name="duplicatebill" display="DuplicateBill"/>
			<memberdata name="lreversed" display="lReversed"/>
		</VFPData>
		Mwresize1.LBLHIGHLIGHT.Name = "LBLHIGHLIGHT"
		Mwresize1.LBLSHADING.Name = "LBLSHADING"
		Mwresize1.Left = 43
		Mwresize1.Name = "Mwresize1"
		Mwresize1.TabIndex = 2
		Mwresize1.Top = 1
		Mwresize1.ZOrderSet = 7
		cmlookupmanager.Name = "cmlookupmanager"
		cmdatamanager.Name = "cmdatamanager"
		cmdatamanager.TabIndex = 1
		cmdatamanager.ZOrderSet = 0
	*</PropValue>

	ADD OBJECT 'cboClass' AS cbocomboboxcustom WITH ;
		Anchor = 0, ;
		ColumnCount = 2, ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 155, ;
		Name = "cboClass", ;
		TabIndex = 32, ;
		Top = 114, ;
		Width = 53, ;
		ZOrderSet = 59
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboTerms' AS cbocomboboxcustom WITH ;
		Anchor = 0, ;
		BoundColumn = 2, ;
		ControlSource = "appurchh.cidterm", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 621, ;
		Margin = 2, ;
		Name = "cboTerms", ;
		TabIndex = 11, ;
		Top = 34, ;
		Width = 144, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdAFENo' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "AFE No", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 563, ;
		Name = "cmdAFENo", ;
		TabIndex = 48, ;
		TabStop = .F., ;
		Top = 91, ;
		ZOrderSet = 45
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cmdcommandbuttoncustom1' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Add \<Comment", ;
		FontSize = 9, ;
		Height = 24, ;
		Left = 856, ;
		Name = "Cmdcommandbuttoncustom1", ;
		TabIndex = 19, ;
		TabStop = .F., ;
		Top = 32, ;
		Width = 132, ;
		ZOrderSet = 27
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelete' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Delete Row", ;
		FontSize = 9, ;
		Height = 36, ;
		Left = 5, ;
		Name = "cmdDelete", ;
		TabIndex = 53, ;
		Top = 495, ;
		Width = 80, ;
		ZOrderSet = 52
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDocument' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Add \<Document", ;
		FontSize = 9, ;
		Height = 24, ;
		Left = 856, ;
		Name = "cmdDocument", ;
		TabIndex = 18, ;
		TabStop = .F., ;
		Top = 7, ;
		Width = 132, ;
		ZOrderSet = 26
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDuplicate' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Duplicate Bill", ;
		FontSize = 9, ;
		Height = 36, ;
		Left = 174, ;
		Name = "cmdDuplicate", ;
		TabIndex = 53, ;
		Top = 495, ;
		Width = 80, ;
		ZOrderSet = 52
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLease' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Lease", ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 47, ;
		Name = "cmdLease", ;
		TabIndex = 25, ;
		TabStop = .F., ;
		Top = 91, ;
		Width = 42, ;
		ZOrderSet = 32
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCat' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Exp Code", ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 95, ;
		Name = "cmdLookCat", ;
		TabIndex = 26, ;
		TabStop = .F., ;
		Top = 91, ;
		Width = 60, ;
		ZOrderSet = 49
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookCOA' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Account", ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 478, ;
		Name = "cmdLookCOA", ;
		TabIndex = 23, ;
		TabStop = .F., ;
		Top = 91, ;
		Width = 72, ;
		ZOrderSet = 56
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookDept' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Dept", ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 659, ;
		Name = "cmdLookDept", ;
		TabIndex = 27, ;
		TabStop = .F., ;
		Top = 91, ;
		Width = 53, ;
		ZOrderSet = 42
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookOwner' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Allocate All To", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 800, ;
		Name = "cmdLookOwner", ;
		TabIndex = 42, ;
		TabStop = .F., ;
		Top = 139, ;
		Width = 80, ;
		ZOrderSet = 47
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLookUnit' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Well", ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 7, ;
		Name = "cmdLookUnit", ;
		TabIndex = 24, ;
		TabStop = .F., ;
		Top = 91, ;
		Width = 41, ;
		ZOrderSet = 33
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRecur' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "\<Recurring Bills", ;
		FontSize = 9, ;
		Height = 24, ;
		Left = 856, ;
		Name = "cmdRecur", ;
		TabIndex = 52, ;
		Top = 57, ;
		Width = 132, ;
		ZOrderSet = 29
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdReverse' AS cmdcommandbuttoncustom WITH ;
		Anchor = 0, ;
		Caption = "Reverse Bill", ;
		FontSize = 9, ;
		Height = 36, ;
		Left = 89, ;
		Name = "cmdReverse", ;
		TabIndex = 53, ;
		Top = 495, ;
		Width = 80, ;
		ZOrderSet = 52
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdVendor' AS swlookupbutton WITH ;
		Anchor = 0, ;
		Caption = "Select", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 164, ;
		Name = "cmdVendor", ;
		TabIndex = 5, ;
		Top = 7, ;
		Width = 50, ;
		ZOrderSet = 25
		*< END OBJECT: ClassLib="..\custompivoten\swcontrol.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Glmaint' AS glmaint WITH ;
		Height = 45, ;
		Left = 588, ;
		Name = "Glmaint", ;
		Top = 483, ;
		Width = 13
		*< END OBJECT: ClassLib="..\custompivoten\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'GridDetails' AS swgrid WITH ;
		Anchor = 0, ;
		ColumnCount = 11, ;
		FontSize = 9, ;
		Height = 307, ;
		HighlightStyle = 0, ;
		lallowedit = .T., ;
		lcolumnmemory = .F., ;
		Left = 3, ;
		Name = "GridDetails", ;
		Panel = 1, ;
		RecordSource = "appurchd", ;
		RowHeight = 18, ;
		ScrollBars = 3, ;
		TabIndex = 61, ;
		Top = 168, ;
		Width = 990, ;
		ZOrderSet = 58, ;
		Column1.ControlSource = "appurchd.cunitno", ;
		Column1.FontSize = 9, ;
		Column1.Name = "Column1", ;
		Column1.Sparse = .T., ;
		Column1.Width = 70, ;
		Column2.ControlSource = "appurchd.ccatcode", ;
		Column2.FontSize = 9, ;
		Column2.Name = "Column2", ;
		Column2.Sparse = .T., ;
		Column2.Width = 60, ;
		Column3.ControlSource = "appurchd.cexpclass", ;
		Column3.FontSize = 9, ;
		Column3.Name = "Column3", ;
		Column3.Width = 22, ;
		Column4.ControlSource = "appurchd.citemdesc", ;
		Column4.FontSize = 9, ;
		Column4.Name = "Column4", ;
		Column4.Width = 290, ;
		Column5.ColumnOrder = 5, ;
		Column5.ControlSource = "appurchd.cacctno", ;
		Column5.FontSize = 9, ;
		Column5.Name = "Column5", ;
		Column5.Sparse = .T., ;
		Column5.Width = 60, ;
		Column6.ColumnOrder = 11, ;
		Column6.ControlSource = "appurchd.nextension", ;
		Column6.FontSize = 9, ;
		Column6.Name = "Column6", ;
		Column6.Sparse = .T., ;
		Column6.Width = 115, ;
		Column7.ColumnOrder = 7, ;
		Column7.ControlSource = "appurchd.cdeptno", ;
		Column7.FontSize = 9, ;
		Column7.Name = "Column7", ;
		Column7.Sparse = .T., ;
		Column7.Width = 80, ;
		Column8.ColumnOrder = 8, ;
		Column8.ControlSource = "appurchd.cprodyear", ;
		Column8.FontSize = 9, ;
		Column8.Name = "Column8", ;
		Column8.Sparse = .T., ;
		Column8.Width = 45, ;
		Column9.ColumnOrder = 9, ;
		Column9.ControlSource = "appurchd.cprodperiod", ;
		Column9.FontSize = 9, ;
		Column9.Name = "Column9", ;
		Column9.Sparse = .T., ;
		Column9.Width = 45, ;
		Column10.ColumnOrder = 10, ;
		Column10.ControlSource = "appurchd.cownerid", ;
		Column10.FontSize = 9, ;
		Column10.Name = "Column10", ;
		Column10.Sparse = .T., ;
		Column10.Width = 80, ;
		Column11.ColumnOrder = 6, ;
		Column11.ControlSource = "appurchd.cafeno", ;
		Column11.FontSize = 9, ;
		Column11.Name = "Column11", ;
		Column11.Width = 80
		*< END OBJECT: ClassLib="..\custompivoten\swcontrol.vcx" BaseClass="grid" />

	ADD OBJECT 'GridDetails.Column1.Header1' AS header WITH ;
		Caption = "Well ID", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column1.txtcWellID' AS txtquickfill WITH ;
		Anchor = 0, ;
		clistexpression = cwellid, ;
		clistworkarea = wells, ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Name = "txtcWellID", ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column10.Header1' AS header WITH ;
		Caption = "Allocate To", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column10.txtAllocateTo' AS txtquickfill WITH ;
		clistexpression = cownerid, ;
		clistworkarea = investor, ;
		ControlSource = "appurchd.cownerid", ;
		FontName = "Arial", ;
		FontSize = 9, ;
		InputMask = "XXXXXXXXXX", ;
		MaxLength = 10, ;
		Name = "txtAllocateTo", ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column11.Header1' AS header WITH ;
		Caption = "AFE No", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column11.txtAFENo' AS txtquickfill WITH ;
		clistexpression = afehdr.cafeno, ;
		clistworkarea = afehdr, ;
		ControlSource = "appurchd.cafeno", ;
		FontSize = 9, ;
		Left = 16, ;
		Name = "txtAFENo", ;
		Top = 23, ;
		Width = 12
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column2.Header1' AS header WITH ;
		Caption = "Exp Code", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column2.txtCatCode' AS txtquickfill WITH ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Name = "txtCatCode", ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column3.Header1' AS header WITH ;
		Caption = "Cls", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column3.txtClass' AS txttextboxcustom WITH ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Name = "txtClass", ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column4.Header1' AS header WITH ;
		Caption = "Description", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column4.txtDescription' AS txttextboxcustom WITH ;
		ControlSource = "appurchd.citemdesc", ;
		FontName = "Arial", ;
		FontSize = 9, ;
		MaxLength = 40, ;
		Name = "txtDescription", ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column5.Header1' AS header WITH ;
		Caption = "Account", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column5.txtAccount' AS txtquickfill WITH ;
		clistexpression = cacctno, ;
		clistworkarea = coa, ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Left = 26, ;
		MaxLength = 6, ;
		Name = "txtAccount", ;
		Top = 33
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column6.Header1' AS header WITH ;
		Caption = "Amount", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column6.txtAmount' AS txttextboxcustom WITH ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Name = "txtAmount", ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column7.Header1' AS header WITH ;
		Caption = "Dept", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column7.txtDeptno' AS txtquickfill WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		clistexpression = gldept.cdeptno, ;
		clistworkarea = gldept, ;
		ControlSource = "appurchd.cdeptno", ;
		FontSize = 9, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "txtDeptno"
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column8.Header1' AS header WITH ;
		Caption = "Year", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column8.txtYear' AS txttextboxcustom WITH ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Name = "txtYear", ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'GridDetails.Column9.Header1' AS header WITH ;
		Caption = "Period", ;
		FontSize = 9, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'GridDetails.Column9.txtPeriod' AS txttextboxcustom WITH ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Name = "txtPeriod", ;
		Visible = .T.
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'Grouptran' AS grouptran WITH ;
		Height = 35, ;
		Left = 588, ;
		Name = "Grouptran", ;
		Top = 507, ;
		Width = 16
		*< END OBJECT: ClassLib="..\custompivoten\swgl.vcx" BaseClass="custom" />

	ADD OBJECT 'lblCidterm' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Terms", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 578, ;
		Name = "lblCidterm", ;
		TabIndex = 16, ;
		Top = 36, ;
		Width = 38, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCinvnum' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Invoice No", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 9, ;
		Name = "lblCinvnum", ;
		TabIndex = 12, ;
		Top = 36, ;
		Width = 59, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCitemdesc' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		Caption = "Description", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 220, ;
		Name = "lblCitemdesc", ;
		TabIndex = 28, ;
		Top = 93, ;
		Width = 65, ;
		ZOrderSet = 40
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCreference' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Ref:", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 216, ;
		Name = "lblCreference", ;
		TabIndex = 14, ;
		Top = 36, ;
		Width = 24, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblCvendorid' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Vendor ID", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 9, ;
		Name = "lblCvendorid", ;
		TabIndex = 7, ;
		Top = 9, ;
		Width = 56, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDdiscdate' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Disc Date", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 374, ;
		Name = "lblDdiscdate", ;
		TabIndex = 22, ;
		Top = 63, ;
		Width = 56, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDduedate' AS lblfieldlabelcustom WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Due", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 217, ;
		Name = "lblDduedate", ;
		TabIndex = 21, ;
		Top = 63, ;
		Width = 25, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDinvdate' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Invoice Date", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 9, ;
		Name = "lblDinvdate", ;
		TabIndex = 20, ;
		Top = 63, ;
		Width = 69, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblDpostdate' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		Caption = "Post Date", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 562, ;
		Name = "lblDpostdate", ;
		TabIndex = 8, ;
		Top = 9, ;
		Width = 56, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Lbllabelcustom5' AS lbllabelcustom WITH ;
		Anchor = 0, ;
		Caption = "DOI Class", ;
		FontBold = .F., ;
		FontSize = 9, ;
		Left = 157, ;
		Name = "Lbllabelcustom5", ;
		TabIndex = 59, ;
		Top = 94, ;
		ZOrderSet = 55
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNextension' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Amount", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 925, ;
		Name = "lblNextension", ;
		TabIndex = 29, ;
		Top = 93, ;
		Width = 44, ;
		ZOrderSet = 41
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvbal' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		Caption = "Invoice Balance", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 766, ;
		Name = "lblNinvbal", ;
		TabIndex = 45, ;
		Top = 516, ;
		Width = 88, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblNinvtot' AS lblfieldlabelcustom WITH ;
		Anchor = 0, ;
		Caption = "Invoice Total", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 766, ;
		Name = "lblNinvtot", ;
		TabIndex = 55, ;
		Top = 492, ;
		Width = 70, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblPaid' AS lbllabelcustom WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .F., ;
		BackColor = 255,255,255, ;
		BackStyle = 1, ;
		Caption = "This bill has been fully or partially paid.  You will be unable to change the vendor or amount of the bill.", ;
		FontBold = .T., ;
		FontSize = 9, ;
		ForeColor = 255,0,0, ;
		Height = 60, ;
		Left = 291, ;
		Name = "lblPaid", ;
		TabIndex = 60, ;
		Top = 483, ;
		Visible = .F., ;
		Width = 300, ;
		WordWrap = .T., ;
		ZOrderSet = 61
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblProdPeriod' AS lbllabelcustom WITH ;
		Anchor = 0, ;
		Caption = "Prod Period", ;
		FontSize = 9, ;
		Left = 15, ;
		Name = "lblProdPeriod", ;
		TabIndex = 50, ;
		Top = 141, ;
		ZOrderSet = 50
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'lblSlash' AS lbllabelcustom WITH ;
		Anchor = 0, ;
		Caption = "/", ;
		FontSize = 9, ;
		Left = 116, ;
		Name = "lblSlash", ;
		TabIndex = 51, ;
		Top = 140, ;
		ZOrderSet = 46
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="label" />

	ADD OBJECT 'Shpshapecustom1' AS shpshapecustom WITH ;
		Anchor = 0, ;
		BackColor = 206,230,255, ;
		Height = 84, ;
		Left = 3, ;
		Name = "Shpshapecustom1", ;
		Top = 84, ;
		Width = 990, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpshapecustom2' AS shpshapecustom WITH ;
		Anchor = 0, ;
		BackColor = 206,230,255, ;
		Height = 69, ;
		Left = 758, ;
		Name = "Shpshapecustom2", ;
		Top = 477, ;
		Width = 236, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="shape" />

	ADD OBJECT 'txtafeno' AS txtquickfill WITH ;
		Anchor = 0, ;
		clistexpression = afehdr.cafeno, ;
		clistworkarea = afehdr, ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 563, ;
		MaxLength = 10, ;
		Name = "txtafeno", ;
		TabIndex = 35, ;
		Top = 114, ;
		Width = 81, ;
		ZOrderSet = 35
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcAcctDesc' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		BackColor = 212,208,200, ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 220, ;
		lreadonly = .F., ;
		Name = "txtcAcctDesc", ;
		TabIndex = 40, ;
		TabStop = .F., ;
		Top = 140, ;
		Visible = .F., ;
		Width = 353, ;
		ZOrderSet = 62
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcAcctNo' AS txtquickfill WITH ;
		Anchor = 0, ;
		clistexpression = cacctno, ;
		clistworkarea = coa, ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 20, ;
		InputMask = "999999", ;
		Left = 478, ;
		MaxLength = 6, ;
		Name = "txtcAcctNo", ;
		SelectOnEntry = .T., ;
		TabIndex = 34, ;
		Top = 114, ;
		Width = 77, ;
		ZOrderSet = 54
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCatCode' AS txtquickfill WITH ;
		Anchor = 0, ;
		clistexpression = ccatcode, ;
		clistworkarea = expcat, ;
		Enabled = .T., ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 102, ;
		MaxLength = 4, ;
		Name = "txtcCatCode", ;
		SelectOnEntry = .T., ;
		TabIndex = 31, ;
		Top = 114, ;
		Width = 45, ;
		ZOrderSet = 37
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcCatDesc' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 220, ;
		MaxLength = 30, ;
		Name = "txtcCatDesc", ;
		TabIndex = 39, ;
		Top = 140, ;
		Visible = .F., ;
		Width = 351, ;
		ZOrderSet = 64
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCdeptdesc' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 220, ;
		MaxLength = 30, ;
		Name = "txtCdeptdesc", ;
		TabIndex = 41, ;
		Top = 140, ;
		Visible = .F., ;
		Width = 351, ;
		ZOrderSet = 65
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDeptNo' AS txtquickfill WITH ;
		Anchor = 0, ;
		clistexpression = cdeptno, ;
		clistworkarea = gldept, ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Format = "K!", ;
		Height = 20, ;
		InputMask = "", ;
		Left = 651, ;
		MaxLength = 8, ;
		Name = "txtcDeptNo", ;
		SelectOnEntry = .T., ;
		TabIndex = 36, ;
		Top = 114, ;
		Width = 73, ;
		ZOrderSet = 34
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcDispCode' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		Left = 305, ;
		Name = "txtcDispCode", ;
		TabIndex = 58, ;
		Top = 493, ;
		Visible = .F., ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcdisperm' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		Left = 286, ;
		Name = "txtcdisperm", ;
		TabIndex = 57, ;
		Top = 505, ;
		Visible = .F., ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCinvnum' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		ControlSource = "appurchh.cinvnum", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 81, ;
		Margin = 1, ;
		MaxLength = 20, ;
		Name = "txtCinvnum", ;
		TabIndex = 9, ;
		Top = 34, ;
		Width = 117, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCitemdesc' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 220, ;
		MaxLength = 40, ;
		Name = "txtCitemdesc", ;
		SelectOnEntry = .T., ;
		TabIndex = 33, ;
		Top = 114, ;
		Width = 250, ;
		ZOrderSet = 31
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcOwnerID' AS txtquickfill WITH ;
		Anchor = 0, ;
		clistexpression = investor.cownerid, ;
		clistworkarea = investor, ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 888, ;
		MaxLength = 10, ;
		Name = "txtcOwnerID", ;
		TabIndex = 49, ;
		Top = 139, ;
		Width = 81, ;
		ZOrderSet = 48
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcProdPeriod' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 85, ;
		MaxLength = 2, ;
		Name = "txtcProdPeriod", ;
		SelectOnEntry = .T., ;
		TabIndex = 44, ;
		Top = 139, ;
		Width = 29, ;
		ZOrderSet = 38
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcProdYear' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 121, ;
		MaxLength = 4, ;
		Name = "txtcProdYear", ;
		SelectOnEntry = .T., ;
		TabIndex = 46, ;
		Top = 139, ;
		Width = 44, ;
		ZOrderSet = 44
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCreference' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		ControlSource = "appurchh.creference", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 245, ;
		Margin = 1, ;
		MaxLength = 30, ;
		Name = "txtCreference", ;
		TabIndex = 10, ;
		Top = 34, ;
		Width = 249, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcUnitNo' AS txtquickfill WITH ;
		Anchor = 0, ;
		cfilter = cwellstat=[A], ;
		clistexpression = wells.cwellid, ;
		clistworkarea = wells, ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Format = "K!", ;
		Height = 20, ;
		lallowexceptions = .T., ;
		Left = 7, ;
		MaxLength = 10, ;
		Name = "txtcUnitNo", ;
		SelectOnEntry = .T., ;
		TabIndex = 30, ;
		Top = 114, ;
		Width = 82, ;
		ZOrderSet = 43
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtCvendname' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		BackColor = 212,208,200, ;
		ControlSource = "", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 228, ;
		Margin = 1, ;
		MaxLength = 40, ;
		Name = "txtCvendname", ;
		ReadOnly = .F., ;
		TabIndex = 4, ;
		Top = 7, ;
		Width = 324, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcVendorID' AS txtquickfill WITH ;
		Anchor = 0, ;
		clistexpression = vendor.cvendorid, ;
		clistworkarea = vendor, ;
		ControlSource = "appurchh.cvendorid", ;
		FontSize = 9, ;
		Format = "K!", ;
		Height = 20, ;
		InputMask = "XXXXXXXXXX", ;
		Left = 81, ;
		Name = "txtcVendorID", ;
		TabIndex = 3, ;
		Top = 7, ;
		Width = 79, ;
		ZOrderSet = 30
		*< END OBJECT: ClassLib="..\codemine\custom\cgadget.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtcWellName' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		BackColor = 212,208,200, ;
		ControlSource = " ", ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 220, ;
		MaxLength = 30, ;
		Name = "txtcWellName", ;
		TabIndex = 38, ;
		Top = 140, ;
		Visible = .F., ;
		Width = 356, ;
		ZOrderSet = 63
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDiscDate' AS dpk WITH ;
		Anchor = 0, ;
		ControlSource = "appurchh.ddiscdate", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 431, ;
		lmorethan90 = .T., ;
		Name = "txtdDiscDate", ;
		TabIndex = 17, ;
		Top = 61, ;
		Width = 75, ;
		ZOrderSet = 53
		*< END OBJECT: ClassLib="..\custompivoten\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdDueDate' AS dpk WITH ;
		Anchor = 0, ;
		ControlSource = "appurchh.dduedate", ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 245, ;
		lmorethan90 = .T., ;
		Name = "txtdDueDate", ;
		TabIndex = 15, ;
		Top = 61, ;
		Width = 75, ;
		ZOrderSet = 36
		*< END OBJECT: ClassLib="..\custompivoten\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdInvDate' AS dpk WITH ;
		Anchor = 0, ;
		ControlSource = "appurchh.dinvdate", ;
		FontSize = 9, ;
		Height = 20, ;
		InputMask = "", ;
		Left = 82, ;
		lmorethan90 = .T., ;
		Name = "txtdInvDate", ;
		TabIndex = 13, ;
		Top = 61, ;
		Width = 75, ;
		ZOrderSet = 28
		*< END OBJECT: ClassLib="..\custompivoten\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtdpostdate' AS dpk WITH ;
		Anchor = 0, ;
		ControlSource = "appurchh.dpostdate", ;
		FontSize = 9, ;
		Height = 20, ;
		lcheckdate = .T., ;
		Left = 621, ;
		lmorethan90 = .T., ;
		Name = "txtdpostdate", ;
		TabIndex = 6, ;
		Top = 7, ;
		Width = 75, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="..\custompivoten\swdate.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnExtension' AS txttextboxcustom WITH ;
		Alignment = 3, ;
		Anchor = 0, ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 860, ;
		Name = "txtnExtension", ;
		SelectOnEntry = .T., ;
		TabIndex = 37, ;
		Top = 114, ;
		Value = 0.00, ;
		Width = 109, ;
		ZOrderSet = 39
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvbal' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		ControlSource = "appurchh.ninvbal", ;
		FontSize = 9, ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 856, ;
		Margin = 1, ;
		Name = "txtNinvbal", ;
		TabIndex = 43, ;
		Top = 514, ;
		Width = 115, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNinvtot' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		ControlSource = "appurchh.ninvtot", ;
		FontSize = 9, ;
		Height = 20, ;
		InputMask = "999,999,999.99", ;
		Left = 856, ;
		Margin = 1, ;
		Name = "txtNinvtot", ;
		TabIndex = 54, ;
		Top = 490, ;
		Width = 115, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtnSaltBBL' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		FontSize = 9, ;
		Height = 20, ;
		Left = 286, ;
		Name = "txtnSaltBBL", ;
		SelectOnEntry = .T., ;
		TabIndex = 47, ;
		Top = 505, ;
		Visible = .F., ;
		Width = 36, ;
		ZOrderSet = 51
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtwastecode' AS txttextboxcustom WITH ;
		Anchor = 0, ;
		Left = 298, ;
		Name = "txtwastecode", ;
		TabIndex = 56, ;
		Top = 517, ;
		Visible = .F., ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="..\codemine\custom\ccontrol.vcx" BaseClass="textbox" />
	
	PROCEDURE Activate
		IF DODEFAULT()
		   swselect('appurchh')
		   swselect('vendor')
		   SET ORDER TO cvendorid
		   IF SEEK(appurchh.cvendorid)
		      THISFORM.txtcVendName.VALUE = cvendname
		   ELSE
		      THISFORM.txtcVendName.VALUE = ' '
		   ENDIF
		   
		   IF NOT THISFORM.lNoClearExt
		      THISFORM.txtnextension.set('value',0.00)
		   ENDIF 
		   THISFORM.lNoClearExt = .F.   
		ENDIF
		
	ENDPROC

	PROCEDURE adddetail2
	ENDPROC

	PROCEDURE adddetailline
		*
		*  Adds the detail line to the APPURCHD table
		*
		
		LOCAL m.cItemDesc, m.cAcctNo, m.cUnitno, m.cDeptNo, m.nExtension, m.cidpurd, m.cCatCode, lnCount, lnRec, llCloseRun, m.cBatch, llFoundBad
		LOCAL llReturn, lnAmount, lnSaltBBL, lnSaltWaterEnd, lnWellEnd, loError
		*:Global cAcctNo, cBatch, cCatCode, cDeptNo, cDisperm, cExtDesc, cGroup, cItemDesc, cOwnerID
		*:Global cProdPeriod, cProdYear, cTaxCode, cUnitno, cWasteCode, cWellID, cdispcode, cexpclass
		*:Global dExpDate, nDiscPct, nDiscount, nExtension, nInterest, nItemTax, nSaltBBL, temp[1]
		
		llReturn = .T.
		
		TRY
		   swselect('appurchh')
		   m.cBatch = cBatch
		
		   THISFORM.lnoclearext = .T.  &&  If any confirmation boxes popup, this will prevent the activate from wiping out the extension amount
		
		   * Set the default for property lSendToAllocate
		   THISFORM.lSendToAllocate = m.goApp.lSendToAllocate
		
		   WITH THISFORM
		
		      IF m.goApp.lAMVersion AND EmptyOrNull(THISFORM.txtcAcctNo.VALUE)
		         THISFORM.omessage.warning('The account cannot be left blank')
		         THISFORM.setnextcontrol(.txtcAcctNo)
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      m.cItemDesc   = .txtcItemDesc.VALUE
		      m.cUnitno     = .txtcUnitNo.VALUE
		      m.cDeptNo     = .txtcDeptNo.VALUE
		      m.cCatCode    = .txtcCatCode.VALUE
		      m.nExtension  = .txtnExtension.VALUE
		      m.cProdPeriod = .txtcProdPeriod.VALUE
		      m.cProdYear   = .txtcProdYear.VALUE
		      m.cOwnerID    = .txtcOwnerID.VALUE
		      m.cDisperm    = .txtcDisperm.VALUE
		      m.cdispcode   = .txtcdispCode.VALUE
		      m.cWasteCode  = .txtwastecode.VALUE
		      m.cAcctNo     = .txtcAcctNo.VALUE
		      m.cexpclass   = .cboclass.VALUE
		      m.nSaltBBL    = .txtnSaltBBL.VALUE
		      m.cAFENo      = .txtafeno.value 
		
		      * Check Water hauling variables for NULL
		      IF ISNULL(m.nSaltBBL)
		         m.nSaltBBL = 0
		      ENDIF
		      IF ISNULL(m.cDisperm)
		         m.cDisperm = ''
		      ENDIF
		      IF ISNULL(m.cdispcode)
		         m.cdispcode = ''
		      ENDIF
		      IF ISNULL(m.cWasteCode)
		         m.cWasteCode = ''
		      ENDIF
		
		      * Change all one-man items to class 0
		      IF NOT EmptyOrNull(m.cOwnerID) AND m.cexpclass # 'P'
		         m.cexpclass = '0'
		      ENDIF
		
		      *
		      *  Get the group for the well
		      *
		      swselect('wells')
		      LOCATE FOR cWellID = m.cUnitno
		      IF FOUND()
		         m.cGroup = cGroup
		      ELSE
		         m.cGroup = '00'
		      ENDIF
		
		      *
		      *  Check to see if the production or JIB period is closed. If it is, don't allow the
		      *  expense to be entered.
		      *
		
		
		      IF THISFORM.CheckExp(m.cBatch)
		         THIS.omessage.warning('The expenses on this bill have already been processed. They cannot be modified.')
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      IF NOT EmptyOrNull(m.cOwnerID)
		         IF m.cUnitno <> 'ALLOC'
		            swselect('wellinv')
		            LOCA FOR cWellID = m.cUnitno AND cOwnerID = m.cOwnerID
		            IF NOT FOUND('wellinv')
		               THISFORM.omessage.DISPLAY('You cannot allocate a well expense to an owner that has no interests in that well.')
		               THISFORM.lnoclearext = .T.
		               llReturn             = .F.
		               EXIT
		            ENDIF
		         ELSE
		            SELE wellsel
		            SCAN
		               m.cWellID = cWellID
		               swselect('wellinv')
		               LOCA FOR cWellID = m.cUnitno AND cOwnerID = m.cOwnerID
		               IF NOT FOUND('wellinv')
		                  THISFORM.omessage.DISPLAY('You cannot allocate a well expense to an owner that has no interests in well: ' + m.cWellID)
		                  THISFORM.lnoclearext = .T.
		                  llReturn             = .F.
		                  EXIT
		               ENDIF
		            ENDSCAN
		         ENDIF
		      ENDIF
		
		      IF NOT EmptyOrNull(m.cUnitno) AND EmptyOrNull(m.cCatCode) AND NOT THISFORM.lInvestment
		         THISFORM.omessage.warning('This expense has a well ID associated with it but no expense category. The ' + ;
		            'expense will not go through distribution/JIB processing.')
		      ENDIF
		
		      IF NOT EmptyOrNull(m.cUnitno)  AND ;
		         NOT EmptyOrNull(m.cCatCode) AND ;
		         NOT EmptyOrNull(m.cProdYear) AND ;
		         NOT EmptyOrNull(m.cProdPeriod) AND ;
		         m.cUnitno <> 'ALLOC' AND ;
		         NOT THISFORM.lInvestment
		         *  Make sure the well has owners
		         SELECT cWellID FROM wellinv WHERE cWellID = m.cUnitno INTO ARRAY temp
		         IF _TALLY = 0
		            THISFORM.omessage.warning('Unable to allocate to well: ' + m.cUnitno + ' This well has no owners. Expenses will be sent to allocation file.')
		            THISFORM.lSendToAllocate = .T.
		         ENDIF
		      ENDIF
		
		      IF EmptyOrNull(m.cDeptNo) AND THISFORM.lDeptRequired
		         THISFORM.omessage.DISPLAY('A valid department is required when using this account no.')
		         THISFORM.setnextcontrol(THISFORM.txtcDeptNo)
		         llReturn = .F.
		         EXIT
		      ENDIF
		      IF EmptyOrNull(m.cUnitno) AND THISFORM.lWellRequired
		         THISFORM.omessage.DISPLAY('A valid well ID is required when using this account no.')
		         THISFORM.setnextcontrol(THISFORM.txtcUnitNo)
		         llReturn = .F.
		         EXIT
		      ENDIF
		
		      IF TYPE('.txtnSaltBBL.value') <> 'N'
		         IF TYPE('.txtnSaltBBL.value') = 'C'
		            m.nSaltBBL = VAL(.txtnSaltBBL.VALUE)
		         ELSE
		            m.nSaltBBL = 0
		         ENDIF
		      ELSE
		         m.nSaltBBL    = .txtnSaltBBL.VALUE
		      ENDIF
		      IF m.nExtension = 0
		         THISFORM.omessage.warning('An amount must be entered in the extension.')
		         .setnextcontrol(.txtnExtension)
		         llReturn = .F.
		         EXIT
		      ENDIF
		      m.nDiscPct  = 0
		      m.nItemTax  = 0
		      m.nInterest = 0
		      m.cTaxCode  = ' '
		      m.dExpDate  = {}
		      m.nDiscount = 0
		      m.cExtDesc  = 0
		
		      IF m.cUnitno = 'ALLOC'
		         WAIT WINDOW NOWAIT 'Allocating expense amongst chosen wells...Please wait'
		         *  This expense is to be allocated among more than 1 well.
		         SELECT wellsel
		         COUNT FOR NOT DELETED() TO lnCount
		         lnRec      = 0
		         llFoundBad = .F.  &&  Whether there are any wells w/o a DOI set up that we need to warn them about
		
		         IF lnCount > 0
		            *  Calculate how much should go to each well.
		            lnAmount = ROUND((m.nExtension / lnCount), 2)
		            *  Calculate the amount left over in case the amount didn't divide evenly among the wells
		            lnWellEnd = m.nExtension - (lnAmount * lnCount)
		
		            *  Divide up any saltwater BBLs entered
		            IF m.nSaltBBL <> 0
		               lnSaltBBL = ROUND((m.nSaltBBL / lnCount), 0)
		
		               *  Add up any extra BBLs to give to the last well
		               lnSaltWaterEnd = m.nSaltBBL - (lnSaltBBL * lnCount)
		            ELSE
		               lnSaltBBL      = 0
		               lnSaltWaterEnd = 0
		            ENDIF
		
		            m.cOwnerID = ''
		            WAIT WIND NOWAIT 'Allocating Expenses Evenly Among The Chosen Wells...'
		            SCAN
		               m.cUnitno = cWellID
		
		               swselect('wellinv')  &&  Check wellinv for any owners, so we know whether to blank out the year/period
		               LOCATE FOR cWellID == m.cUnitno
		               IF NOT FOUND()
		                  STORE '' TO m.cProdYear, m.cProdPeriod
		                  llFoundBad = .T.
		               ELSE
		                  m.cProdPeriod = .txtcProdPeriod.VALUE  &&  It has interests, so re-assign the year/period values
		                  m.cProdYear   = .txtcProdYear.VALUE
		               ENDIF
		
		               SELECT wellsel
		               m.nExtension = lnAmount
		               m.nSaltBBL   = lnSaltBBL
		               lnRec        = lnRec + 1
		               IF lnRec = lnCount
		                  *  Adjust the last well so the total adds to the amount entered.
		                  m.nExtension = m.nExtension + lnWellEnd
		                  m.nSaltBBL   = m.nSaltBBL + lnSaltWaterEnd
		               ENDIF
		               .cmdatamanager.new('Appurchd')
		               .cmdatamanager.REPLACE('APPURCHD', 'Citemdesc', m.cItemDesc)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cacctno', m.cAcctNo)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cunitno', m.cUnitno)
		               .cmdatamanager.REPLACE('APPURCHD', 'Ccatcode', m.cCatCode)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cexpclass', m.cexpclass)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cdeptno', m.cDeptNo)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cprodyear', m.cProdYear)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cprodperiod', m.cProdPeriod)
		               .cmdatamanager.REPLACE('APPURCHD', 'Nextension', m.nExtension)
		               .cmdatamanager.REPLACE('APPURCHD', 'Nsaltbbl', m.nSaltBBL)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cdisperm', m.cDisperm)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cdispcode', m.cdispcode)
		               .cmdatamanager.REPLACE('APPURCHD', 'Cwastecode', m.cWasteCode)
		               .cmdatamanager.REPLACE('APPURCHD', 'Litemdetail', .F.)
		               .cmdatamanager.REPLACE('APPURCHD', 'cOwnerID', m.cOwnerID)
		               .cmdatamanager.REPLACE('APPURCHD', 'cAFEno', m.cAFENo)
		            ENDSCAN
		
		            WAIT CLEAR
		         ELSE
		            THISFORM.omessage.warning('There were no wells selected. You must select at least 1 well when ALLOC is used.')
		            THISFORM.setnextcontrol(.txtcUnitNo)
		            llReturn = .F.
		            EXIT
		         ENDIF
		         .setnextcontrol(.txtcVendorID)
		      ELSE
		         .cmdatamanager.new('Appurchd')
		         .cmdatamanager.REPLACE('APPURCHD', 'Citemdesc', m.cItemDesc)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cacctno', m.cAcctNo)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cunitno', m.cUnitno)
		         .cmdatamanager.REPLACE('APPURCHD', 'Ccatcode', m.cCatCode)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cexpclass', m.cexpclass)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cdeptno', m.cDeptNo)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cprodyear', m.cProdYear)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cprodperiod', m.cProdPeriod)
		         .cmdatamanager.REPLACE('APPURCHD', 'Nextension', m.nExtension)
		         .cmdatamanager.REPLACE('APPURCHD', 'Nsaltbbl', m.nSaltBBL)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cdisperm', m.cDisperm)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cdispcode', m.cdispcode)
		         .cmdatamanager.REPLACE('APPURCHD', 'Cwastecode', m.cWasteCode)
		         .cmdatamanager.REPLACE('APPURCHD', 'Litemdetail', .F.)
		         .cmdatamanager.REPLACE('APPURCHD', 'cOwnerID', m.cOwnerID)
		         .cmdatamanager.REPLACE('APPURCHD', 'cAFEno', m.cAFENo)
		         .setnextcontrol(.txtcUnitNo)
		      ENDIF
		      .txtcAcctNo.lenabled  = .T.
		      .txtcOwnerID.ENABLED  = .T.
		      .cmdLookOwner.ENABLED = .T.
		
		      IF NOT FILE(m.goApp.ccommonfolder+'keepbilldesc.txt')
		         .txtcItemDesc.VALUE   = ' '
		      ENDIF
		      IF THISFORM.txtcUnitNo.VALUE = 'ALLOC '  &&  If using ALLOC, blank out the well ID and name, so it doesn't repeatedly bring up the well list, as the focus gets set to that textbox for each line being added - BH 06/02/08
		         .txtcAcctNo.VALUE   = ' '
		         .txtcAcctNo.ENABLED = .T.
		         .txtcacctDesc.VALUE = ' '
		         .txtcUnitNo.VALUE   = ' '
		         .txtcwellName.VALUE = ' '
		      ENDIF
		      .txtcDeptNo.VALUE = ' '
		      IF NOT EmptyOrNull(THISFORM.txtcUnitNo.VALUE)
		         .txtcacctDesc.VALUE = ' '
		         .txtcAcctNo.VALUE   = ''
		      ENDIF
		      .txtcDeptDesc.VALUE = ' '
		      .txtcOwnerID.VALUE  = ' '
		      .txtcdispCode.VALUE = ' '
		      .txtcDisperm.VALUE  = ' '
		      .txtwastecode.VALUE = ' '
		      .txtafeno.value = ''
		      .cboclass.VALUE     = ''
		      .lInvestment        = .F.
		      .txtnExtension.set('value',0.00)
		      .txtnSaltBBL.SetValue(0)
		      .GridDetails.REFRESH()
		      .CalcTot()
		      .lValidWell    = .F.
		      .setstate()
		      .txtnExtension.ENABLED = .T.
		      THISFORM.txtcUnitNo.SETFOCUS()
		   ENDWITH
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'AddDetailLine', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		   HelpMessage()
		ENDTRY
		
		THISFORM.lWellRequired = .F.
		THISFORM.lDeptRequired = .F.
		
		RETURN llReturn
		
		
	ENDPROC

	PROCEDURE beforeclose
		LPARAMETERS nCloseReason
		
		IF EmptyOrNull(THISFORM.txtcvendorID.Value)
		   THISFORM.cancelallchanges()
		ELSE
		   DODEFAULT(nCloseReason)   
		ENDIF 
	ENDPROC

	PROCEDURE calcext		&& Calculates the detail extension total
	ENDPROC

	PROCEDURE calcext1
	ENDPROC

	PROCEDURE calcext2
	ENDPROC

	PROCEDURE calctot		&& Calculates the Invoice Totals
		*
		*  Calculates the invoice totals
		*
		LOCAL lnSelect, lnRecno, lnTotal, lcBatch, lnSubTotal, lnBalance, lcFilter
		LOCAL lnCount
		LOCAL llReturn, loError
		
		llReturn = .T.
		
		TRY
		   lnSelect = SELECT()
		
		   swselect('appurchh')
		   lcBatch = appurchh.cbatch
		
		   swselect('appurchd')
		   lnRecno  = RECNO()
		   lcFilter = FILTER()
		   SET FILTER TO
		
		   lnSubTotal = 0
		   swselect('appurchd')
		   SCAN
		      lnSubTotal = lnSubTotal + nExtension
		   ENDSCAN
		
		   IF lnRecno <= RECC()
		      GOTO lnRecno
		   ENDIF
		
		   lnBalance = lnSubTotal - appurchh.npayments
		
		   IF appurchh.nInvTot <> lnSubTotal
		      THIS.cmdatamanager.REPLACE('appurchh', 'nInvTot', lnSubTotal)
		      THIS.cmdatamanager.REPLACE('appurchh', 'nSubTotal', lnSubTotal)
		      THIS.cmdatamanager.REPLACE('appurchh', 'ninvbal', lnBalance)
		      THISFORM.txtnInvTot.REFRESH()
		      THISFORM.txtninvbal.REFRESH()
		   ENDIF
		
		   SELECT (lnSelect)
		
		   UNLOCK
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CalcTot', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		   HelpMessage()
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE cancelallchanges
		LPARAMETERS cWorkareaList
		
		THISFORM.Caption = 'Enter Bills'
		THISFORM.cmdDuplicate.Visible = .t.
		THISFORM.cmdReverse.Visible   = .t.
		
		DODEFAULT(cWorkAreaList)
	ENDPROC

	PROCEDURE catlookup
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		SELECT cCatCode,cCateg,cExpClass,IIF(lAFEType,'A','') AS cAFEType, IIF(lJIBOnly,'J','') as cJIBOnly  ;
		   FROM expcat INTO CURSOR exptmp readwrite
		
		SELECT exptmp
		INDEX ON cCatCode           TAG cCatCode
		INDEX ON cCateg             TAG cCateg
		INDEX ON cExpClass+cCatCode TAG cExpClass
		INDEX on cafetype           TAG cafetype
		INDEX on cjibonly           TAG cjibonly
		
		lcList = 'ccatcode\Code,ccateg\Category,cexpclass\Cls,cAFEType\AFE,cJIBOnly\JIB'
		
		DO FORM '..\custom\picklist' WITH 'exptmp', lcList, THISFORM.gridDetails.column2.txtCatCode.value, 5, .T., .T.
		
		IF llOK
		   THISFORM.cmdatamanager.replace('appurchd', 'cCatCode', exptmp.ccatcode)
		   THISFORM.setstate()
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE checkexp		&& Check to see if expenses entered for wells have been allocated and the production period closed.
		LPARA tcbatch
		
		*  Check to see if expenses entered for wells were allocated
		*  If so, and the period isn't closed, delete it.  Otherwise
		*  let the user know he can't delete this entry.
		LOCAL lcwellid, llReturn, lljibwell, llnetwell, loError
		llReturn = .F.
		
		TRY
		   swselect('expense')
		   SCAN FOR cbatch = tcbatch
		      lcwellid = cwellid
		      swselect('wellinv')
		      LOCATE FOR cwellid = lcwellid AND ctypeinv = 'W' AND ljib
		      lljibwell =  FOUND()
		      LOCATE FOR cwellid = lcwellid AND ctypeinv = 'W' AND NOT ljib
		      llnetwell =  FOUND()
		      swselect('expense')
		      IF lljibwell AND nRunNoJib <> 0
		         THISFORM.cclosedrun = 'J' + expense.crunyearjib + PADL(ALLT(STR(expense.nRunNoJib)), 3, '0')
		         llReturn            = .T.
		         EXIT
		      ENDIF
		      IF llnetwell AND nRunNoRev <> 0
		         THISFORM.cclosedrun = 'R' + expense.crunyearrev + PADL(ALLT(STR(expense.nRunNoRev)), 3, '0')
		         llReturn            = .T.
		         EXIT
		      ENDIF
		   ENDSCAN
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CheckExp', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE checkhist		&& Checks to see if the production period is closed.
		LPARA tcYear, tcPeriod, tcGroup, tcWellID
		LOCAL llHist, llSepClose, lcDeleted
		LOCAL llJIB, llReturn, llTeturn, loError
		*
		*  Checks to see if the given period is closed
		*  Returns .T. if the period is closed
		*
		llReturn = .F.
		
		TRY
		   lcDeleted = SET('DELETED')
		   SET DELETED ON
		*
		*  Check to see if there are any JIB owners in the well. We need to check to see if the JIB period
		*  is closed if there are JIB owners. Otherwise, we check the revenue period 'cause it means we're
		*  netting expenses from revenue.
		*
		   swselect('wellinv')
		   LOCATE FOR cWellID = tcWellID AND lJIB = .T.
		   IF FOUND()
		      llJIB = .T.
		   ELSE
		      llJIB = .F.
		   ENDIF
		
		   IF llJIB
		      IF tcGroup = '**'
		         swselect('sysctl')
		         LOCATE FOR cyear + cperiod = tcYear + tcPeriod AND lDisbMan AND cTypeClose = 'J'
		         IF FOUND()
		            llReturn = .T.
		         ENDIF
		      ELSE
		         swselect('sysctl')
		         SET ORDER TO yrprdgrp
		         IF SEEK(tcYear + tcPeriod + tcGroup + 'YJ')
		            llReturn = .T.
		         ENDIF
		      ENDIF
		   ELSE
		      IF tcGroup = '**'
		         swselect('sysctl')
		         LOCATE FOR cyear + cperiod = tcYear + tcPeriod AND lDisbMan AND cTypeClose = 'R'
		         IF FOUND()
		            llTeturn = .T.
		         ENDIF
		      ELSE
		         swselect('sysctl')
		         SET ORDER TO yrprdgrp
		         IF SEEK(tcYear + tcPeriod + tcGroup + 'YR')
		            llReturn = .T.
		         ENDIF
		      ENDIF
		   ENDIF
		   SET DELETED &lcDeleted
		
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'CheckHist', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE checkpaid
		**  Check to see if the bill has been paid, and if so, disable the amounts  **
		**  when editing the detail lines                                           **
		
		swselect('appmtdet')
		LOCATE FOR cBillToken = appurchh.cBatch AND nAmtPaid <> 0
		IF FOUND()
		   THISFORM.lPaid = .T.
		   IF NOT EmptyOrNull(appmtdet.ccheckno)
		      THISFORM.lblpaid.Caption = 'This bill has been paid by check no: ' + ALLTRIM(appmtdet.ccheckno) + ;
		                                 '. You will be unable to change the vendor or amount of the bill.'
		   ELSE
		      THISFORM.lblpaid.Caption = 'This bill has been paid! ' + ;
		                                 'You will be unable to change the vendor or amount of the bill.'
		   ENDIF                                
		ELSE
		   THISFORM.lPaid = .F.
		ENDIF
		
	ENDPROC

	PROCEDURE Click
		THISFORM.lblPaid.VISIBLE = .F.
		
	ENDPROC

	PROCEDURE coalookup
		LOCAL lcSelect, lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		lcSelect = SELECT()
		
		DO FORM picklist WITH 'Coa', lcList, 'cacctno', 2
		
		IF llOK
		   THISFORM.cmdatamanager.replace('appurchd', 'cAcctNo', coa.cacctno)
		   THISFORM.setstate()
		ENDIF   
		
		
	ENDPROC

	PROCEDURE deptlookup
		LOCAL lcSelect, lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cdeptno\Dept No,cdeptdesc\Department Description'
		
		lcSelect = SELECT()
		
		DO FORM picklist WITH 'Gldept', lcList, appurchd.cdeptno, 2,.f.,.t.
		
		IF llOK
		   THISFORM.cmdatamanager.replace('appurchd', 'cDeptNo', gldept.cdeptno)
		ENDIF   
		
		SELECT (lcSelect)
		
		
	ENDPROC

	PROCEDURE Destroy
		* Cleanup by releasing the distproc object
		THISFORM.grouptran.UNLOAD()
		ON KEY LABEL F5 *
		ON KEY LABEL F3 *
		ON KEY LABEL F2 *
		ON KEY LABEL TAB 
		ON KEY LABEL ENTER 
		ON KEY LABEL PGDN
		ON KEY LABEL PGUP
		DODEFAULT()
		
	ENDPROC

	PROCEDURE dmexpense		&& Disbursement Manager integration for expenses.
		LOCAL lcBatch, lcYear, lcPeriod, m.cOwnerID, llCloseRun, lcWellStat
		LOCAL lAPTran, lAllocated, lClosed, lFixed, lOneMan, lcWellID1, lcWellID2, llAllocexp, llReturn
		LOCAL loError
		*:Global cBatch, cCateg, cMemo, cPaidByCk, cPayee, cPeriod, cPrdPaid, cRunYearJIB, cRunYearRev
		*:Global cWellID, cYear, cidexpe, cidexph, cidexps, crefid, cvendorid, dExpDate, dPostDate, nAmount
		*:Global nRunNoJIB, nRunNoRev, nSaltWater
		
		llReturn = .T.
		
		llReturn = SaveAPExpense(appurchh.cbatch)
		
		RETURN llReturn 
		
		
	ENDPROC

	PROCEDURE duplicatebill
		lcBatch = appurchh.cbatch
		THISFORM.SAVE()
		THISFORM.cmdduplicate.Visible = .f.
		* Reverse the amounts
		SELECT * FROM appurchh INTO CURSOR temphdr READWRITE  WHERE cbatch = lcBatch
		REPLACE dinvdate WITH DATE(), dpostdate WITH DATE()
		
		SELECT * FROM appurchd INTO CURSOR tempdet READWRITE  WHERE cbatch = lcBatch
		
		THISFORM.new('Appurchh')
		
		SELECT temphdr
		SCATTER MEMVAR MEMO
		
		RELEASE M.cbatch
		SELECT appurchh
		m.nPayments =  0
		m.nInvBal   = m.nInvTot
		GATHER MEMVAR MEMO
		
		IF MESSAGEBOX('Do you want to change the production period on this receipt?', 36, THISFORM.CAPTION) = 6
		   DO FORM selectperiod TO lcYearPrd
		   lnLength = LEN(lcYearPrd)
		   IF lnLength < 6  &&  No valid year and period passed back, so assign it the current month and year
		      lcYear   = PADL(ALLTRIM(STR(MONTH(DATE()))), 2, '0')
		      lcPeriod = ALLTRIM(STR(YEAR(DATE())))
		   ELSE
		      lcYear   = LEFT(lcYearPrd, 4)
		      lcPeriod = RIGHT(lcYearPrd, 2)
		   ENDIF
		   llNewPeriod = .T.
		ELSE
		   llNewPeriod = .F.
		ENDIF
		SELECT tempdet
		SCAN
		   SCATTER MEMVAR MEMO
		   
		   IF llNewPeriod
		      m.cProdPeriod = lcPeriod
		      m.cProdYear   = lcYear
		   ENDIF 
		   
		   lnExtension = m.nExtension
		   RELEASE M.cidpurd
		   m.cidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		   SET DELETED OFF
		   SELECT appurchd1
		   SET ORDER TO cidpurd
		   DO WHILE SEEK(m.cidpurd)
		      m.cidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		   ENDDO
		   SET DELETED ON
		   THISFORM.cmdatamanager.new('Appurchd')
		   m.nExtension = lnExtension
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Citemdesc', m.cItemDesc)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cacctno', m.cAcctNo)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cunitno', m.cUnitno)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Ccatcode', m.cCatCode)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cexpclass', m.cexpclass)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cdeptno', m.cDeptNo)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cprodyear', m.cProdYear)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cprodperiod', m.cProdPeriod)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Nextension', m.nextension)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Nsaltbbl', m.nSaltBBL)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cdisperm', m.cDisperm)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cdispcode', m.cdispcode)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cwastecode', m.cWasteCode)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Litemdetail', .F.)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'cOwnerID', m.cOwnerID)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'cAFEno', m.cAFENo)
		   THISFORM.valterms()
		   THISFORM.setnextcontrol(THISFORM.txtcUnitNo)
		   THISFORM.gridDetails.REFRESH()
		ENDSCAN
		
		THISFORM.REFRESH()
		
		
		
	ENDPROC

	PROCEDURE editdetailline		&& Moves the detail line from the grid to the update area.
		LOCAL llReturn, loError
		llReturn = .T.
		
		TRY
		   WITH THISFORM
		
		      .txtcAcctNo.VALUE   = appurchd.cacctno
		      .txtcItemDesc.VALUE = appurchd.citemdesc
		      .txtcUnitNo.VALUE   = appurchd.cUnitNo
		      .txtcCatCode.VALUE  = appurchd.ccatcode
		      .txtcDeptNo.VALUE   = appurchd.cDeptNo
		      .txtnExtension.setvalue(appurchd.nExtension)
		      .txtcProdYear.VALUE   = appurchd.cProdYear
		      .txtcProdPeriod.VALUE = appurchd.cProdPeriod
		      .txtcOwnerID.VALUE    = appurchd.cOwnerID
		      .txtnSaltBBL.VALUE    = appurchd.nSaltBBL
		      .txtcDispCode.VALUE   = appurchd.cdisperm
		      .cboclass.VALUE       = appurchd.cexpclass
		
		* Fill in the account description
		      swselect('coa')
		      SET ORDER TO acctno
		      IF SEEK(appurchd.cacctno)
		         .txtcAcctDesc.VALUE = coa.cacctdesc
		      ENDIF
		
		*  Fill in the well name
		      swselect('wells')
		      SET ORDER TO cwellid
		      IF SEEK(appurchd.cUnitNo)
		         .txtcWellName.VALUE = wells.cwellname
		         .lValidWell         = .T.
		         .lInvestment        = IIF(wells.cwellstat = 'V', .T., .F.)
		      ELSE
		         .txtcWellName.VALUE = ''
		      ENDIF
		
		      IF THISFORM.lInvestment 
		         THISFORM.cmdlookowner.VISIBLE = .F.
		         THISFORM.txtcOwnerID.VISIBLE  = .F.
		      ELSE
		         THISFORM.cmdlookowner.VISIBLE = .T.
		         THISFORM.txtcOwnerID.VISIBLE  = .T.
		      ENDIF
		
		*  Fill in the category name
		      swselect('expcat')
		      SET ORDER TO ccatcode
		      IF SEEK(appurchd.ccatcode)
		         .txtcCatDesc.VALUE = expcat.ccateg
		      ENDIF
		
		*  Fill in the Department Name
		      swselect('gldept')
		      SET ORDER TO cDeptNo
		      IF SEEK(appurchd.cDeptNo)
		         .txtcDeptDesc.VALUE = gldept.cDeptDesc
		      ENDIF
		
		      .txtcUnitNo.SETFOCUS()
		      swselect('appurchd')
		      THISFORM.cmdatamanager.deleterecord('Appurchd')
		      THISFORM.calctot()
		      THISFORM.gridDetails.refresh()
		      THISFORM.REFRESH()
		
		      IF THISFORM.lPaid  &&  If paid, don't let them change the amount of the detail line
		         .txtnExtension.ENABLED = .F.
		      ENDIF
		
		      THISFORM.txtcCatCode.VALID()  &&  Enable/disable the account based on whether it's an AFE category & various options - BH 10/03/2008
		   ENDWITH
		
		   swselect('appurchh')
		
		*
		*  Let the form know something changed
		*
		   THISFORM.setstate()
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'EditDetailLine', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		   HelpMessage()
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE edititems
	ENDPROC

	PROCEDURE getprice		&& Gets the price for the item based upon the price code passed.
		LPARAMETERS tcPriceCode
	ENDPROC

	PROCEDURE Init
		swselect('appurchh')
		SET ORDER to INVHKEY   && DTOS(DINVDATE)+CINVNUM+CVENDORID
		
		IF DODEFAULT()
		   swselect('options')
		   GO TOP
		   THIS.lSepClose = lSepClose
		   on key label F5 _screen.activeform.zerotot()
		
		   IF m.goApp.lDocuments &&AND !m.goApp.lcloudserver
		      THISFORM.AddObject('oFileDialog','sffiledialog')
		      THISFORM.cmdDocument.visible = .t.
		   ELSE
		      THISFORM.cmdDocument.visible = .f.
		   ENDIF 
		   
		   swselect('apopt')
		   IF m.goApp.lAMVersion AND apopt.lUseInvDate
		      THISFORM.txtdpostdate.Visible = .f.
		      THISFORM.lbldpostdate.Visible = .f.
		   ENDIF 
		   
		   IF m.goapp.lPartnershipMod
		      swselect('progopt')
		      GO top
		      THISFORM.lJVPosting = lJVPosting
		   ELSE
		      THISFORM.lJVPosting = .F.
		   ENDIF 
		   
		   * Don't show certain fields when running in DM
		   IF m.goapp.lDMVersion
		      THISFORM.lbldpostdate.visible = .f.
		      THISFORM.txtdpostDate.Visible = .f.
		      THISFORM.cmdlookcoA.Visible = .f.
		      THISFORM.txtcacctno.Visible = .f.
		      THISFORM.txtcacctdesc.Visible = .f.
		      THISFORM.cmdlookdEPT.Visible = .f.
		      THISFORM.txtcdeptdesc.Visible = .f.
		      THISFORM.txtcdeptno.Visible = .f.
		      THISFORM.gridDetails.column5.Visible = .f.
		      THISFORM.gridDetails.column4.Width = THISFORM.gridDetails.column4.Width + THISFORM.gridDetails.column5.width
		   ENDIF 
		   
		   IF MESSAGEBOX('Do you want to add a new bill?',36,THISFORM.Caption) = 6
		      THISFORM.new()
		   ENDIF 
		ENDIF   
		   
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode = 3 OR nKeyCode = 18
		      THISFORM.txtcUnitno.SetFocus
		ENDIF 
		
		DODEFAULT(nKeyCode, nShiftAltCtrl)
	ENDPROC

	PROCEDURE list
		LPARAMETERS cworkarea
		
		LOCAL lcList
		LOCAL llReturn, loError
		PRIV llOK
		
		lcCaption = THISFORM.Caption
		
		llReturn = .T.
		
		* Cancel changes if nothing has been filled in yet.
		IF EmptyOrNull(THISFORM.txtcvendorID.Value)
		   THISFORM.cancelallchanges()
		   THISFORM.Refresh()
		ENDIF 
		
		TRY
		   llOK = .T.
		
		   IF THIS.flushcontrolbuffer() AND THIS.beforenav('appurchh')
			  SELECT  appurchh.cvendorid, ;
					  appurchh.cInvNum, ;
					  appurchh.dinvdate, ;
					  appurchh.ninvtot, ;
					  vendor.csortfield AS cvendname, ;
					  appurchh.cbatch ;
				  FROM appurchh, vendor ;
				  WHERE appurchh.cvendorid = vendor.cvendorid ;
					  AND NOT lItemPurch  ;  &&  No inventory purchases should show in the list
				  INTO CURSOR tempap1 ;
				  ORDER BY appurchh.cvendorid
		
		      IF _TALLY > 0
		         IF USED('tempap')
		            USE IN tempap
		         ENDIF
		         USE DBF('tempap1') AGAIN IN 0 ALIAS tempap EXCL
		         SET SAFETY OFF
		         SELECT tempap
		         INDEX ON cbatch     TAG cbatch
		         INDEX ON cvendorid + STR(YEAR(dinvdate)) + STR(MONTH(dinvdate)) + STR(DAY(dinvdate)) + cInvNum  TAG cvendorid
		         INDEX ON cInvNum + STR(YEAR(dinvdate)) + STR(MONTH(dinvdate)) + STR(DAY(dinvdate))    TAG cInvNum   
		         INDEX ON dinvdate TAG dinvdate ASCENDING 
		         INDEX ON UPPER(cvendname) + STR(YEAR(dinvdate)) + STR(MONTH(dinvdate)) + STR(DAY(dinvdate)) + cInvNum  TAG cvendname
		         INDEX ON ninvtot    TAG ninvtot
		
		         IF UPPER(m.goApp.cUser) = 'DEVELOPER'
		            lcList = 'dInvDate\Invoice Date,cinvnum\Invoice Number,cvendorid\Vendor ID,cvendname\Vendor Name,ninvtot\Invoice Total,cbatch\Batch,'
		
		            DO FORM ..\CUSTOM\picklist WITH 'tempap', lcList, appurchh.dinvdate, 6, .T., .T.
		         ELSE
		            lcList = 'dInvDate\Invoice Date,cinvnum\Invoice Number,cvendorid\Vendor ID,cvendname\Vendor Name,ninvtot\Invoice Total'
		
		            DO FORM ..\CUSTOM\picklist WITH 'tempap', lcList, appurchh.dinvdate, 5, .T., .T.
		         ENDIF
		
		         IF llOK
		            THISFORM.Caption = 'Enter Bills'
		            swselect('appurchh')
		            SET ORDER TO cbatch
		            SEEK(tempap.cbatch)
		            THISFORM.cmdatamanager.setrecordposition('Appurchh')
		            THISFORM.txtcprodPeriod.VALUE = ''
		            THISFORM.txtcprodYear.VALUE   = ''
		            THISFORM.REFRESH()
		         ENDIF
		      ENDIF
		   ELSE
		      llReturn = .F.
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'List', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		   HelpMessage()
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE lookcoa
		LOCAL lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cacctno/acctno,cacctdesc/acctdesc'
		
		DO FORM picklist WITH 'Coa', lcList, 'cacctno', 2
		
		IF llOK
		   THISFORM.grdPurchdet.column1.txtcAcctNo.value = coa.cacctno
		   THISFORM.cmdatamanager.replace('appurchd', 'cacctno', coa.cacctno)
		   THISFORM.grdPurchdet.column1.txtcAcctNo.refresh()
		ENDIF   
		
		THISFORM.grdPurchdet.column1.txtcAcctNo.SetFocus()
	ENDPROC

	PROCEDURE new
		LPARAMETERS cWorkarea
		IF VARTYPE(m.cWorkArea) # 'C'
		   m.cWorkArea = 'Appurchh'
		ENDIF 
		IF PROPER(m.cWorkArea) = 'Appurchh'
		   DODEFAULT()
		   THISFORM.CAPTION = ALLTRIM(THISFORM.CAPTION) + '  ** NEW BILL **'
		ENDIF 
		
	ENDPROC

	PROCEDURE ownerlookup
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cOwnerID\Owner ID,csortfield\Owner Name'
		
		IF USED('tempown')
		   USE IN tempown
		ENDIF
		IF USED('tempown1')
		   USE IN tempown1
		ENDIF
		
		IF NOT EmptyOrNull(appurchd.cunitno)
		   SET SAFETY OFF
		   SELECT cOwnerID, cSortField FROM investor ;
		      WHERE cOwnerID IN (SELECT cOwnerID FROM wellinv WHERE cWellID = appurchd.cunitno) ;
		      INTO CURSOR tempown1 ;
		      ORDER BY cOwnerID
		
		   IF _TALLY > 0
		
		      USE DBF('tempown1') AGAIN IN 0 ALIAS tempown
		      SELECT tempown
		      INDEX ON cOwnerID TAG cOwnerID
		      INDEX ON cSortField TAG cSortField
		
		      DO FORM ..\CUSTOM\Picklist WITH 'tempown', lcList, appurchd.cownerid, 2, .T.,.T.
		
		      IF llOK
		         THISFORM.txtcownerid.VALUE = tempown.cOwnerID
		         THISFORM.txtcownerid.REFRESH()
		      ENDIF
		
		      THISFORM.cmdatamanager.replace('appurchd','cownerid',tempown.cownerid)
		      THISFORM.setstate()
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE pagedown
		IF THISFORM.lpageddown = .f.
		   THISFORM.lpageddown = .t.
		   THISFORM.txtcunitNo.SetFocus()
		   ON KEY LABEL PGDN 
		   KEYBOARD '{PGDN}'
		ELSE    
		   THISFORM.lpageddown = .f.
		ENDIF 
		
	ENDPROC

	PROCEDURE pageup
		THISFORM.txtwUnitNo.setfocus()
		
		KEYBOARD '{PGUP}'
		
	ENDPROC

	PROCEDURE resave_expenses
		LOCAL lcBatch
		LOCAL lcrun, lctype, lcyear, llReturn, loError
		
		llReturn = .T.
		
		TRY
		   IF NOT THISFORM.omessage.CONFIRM('Are you sure you want to save the well expenses from this bill again?')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		*
		* Resave the well expenses from this bill if they haven't been processed
		*
		   lcBatch = appurchh.cbatch
		
		*
		*  Check to see if expenses have been allocated and the production period closed.
		*
		   IF THISFORM.checkexp(lcBatch)
		      lctype = SUBSTR(THISFORM.cclosedrun, 1, 1)
		      lcyear = SUBSTR(THISFORM.cclosedrun, 2, 4)
		      lcrun  = SUBSTR(THISFORM.cclosedrun, 6, 3)
		      THISFORM.omessage.warning('Expenses for one or more wells in this bill have been allocated and processed during ' + IIF(lctype = 'J', 'JIB', 'Revenue') + ' run: ' + ;
		           lcyear + '/' + lcrun + '. ' + ;
		           'You cannot resave the well expenses.')
		      llReturn = .F.
		      EXIT 
		   ENDIF
		
		   swselect('expense')
		   SCAN FOR cbatch == lcBatch
		      DELETE NEXT 1
		   ENDSCAN
		
		   THISFORM.dmexpense()
		
		   THISFORM.omessage.DISPLAY('The well expenses have been replaced.')
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'Resave_Expenses', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		   HelpMessage()
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE reversebill
		lcBatch = appurchh.cbatch
		THISFORM.SAVE()
		THISFORM.cmdreverse.Visible = .f.
		
		* Reverse the amounts
		SELECT * FROM appurchh INTO CURSOR temphdr READWRITE  WHERE cbatch = lcBatch
		lnTot = nInvTot * -1
		REPLACE nInvTot WITH lnTot, ;
		   nsubtotal WITH lnTot, ;
		   npayments WITH 0, ;
		   ninvbal WITH lnTot
		SELECT * FROM appurchd INTO CURSOR tempdet READWRITE  WHERE cbatch = lcBatch
		REPLACE nextension WITH nextension * -1 ALL
		
		THISFORM.new('Appurchh')
		
		SELECT temphdr
		SCATTER MEMVAR MEMO
		
		RELEASE M.cbatch
		SELECT appurchh
		m.cinvnum = ALLTRIM(m.cinvnum)+'-REV'
		GATHER MEMVAR MEMO
		
		SELECT tempdet
		SCAN
		   SCATTER MEMVAR MEMO
		   lnExtension = m.nExtension
		   RELEASE M.cidpurd
		   m.cidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		   SET DELETED OFF
		   SELECT appurchd1
		   SET ORDER TO cidpurd
		   DO WHILE SEEK(m.cidpurd)
		      m.cidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		   ENDDO
		   SET DELETED ON
		   THISFORM.cmdatamanager.new('Appurchd')
		   m.nExtension = lnExtension
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Citemdesc', m.cItemDesc)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cacctno', m.cAcctNo)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cunitno', m.cUnitno)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Ccatcode', m.cCatCode)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cexpclass', m.cexpclass)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cdeptno', m.cDeptNo)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cprodyear', m.cProdYear)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cprodperiod', m.cProdPeriod)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Nextension', m.nextension)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Nsaltbbl', m.nSaltBBL)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cdisperm', m.cDisperm)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cdispcode', m.cdispcode)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Cwastecode', m.cWasteCode)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'Litemdetail', .F.)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'cOwnerID', m.cOwnerID)
		   THISFORM.cmdatamanager.REPLACE('APPURCHD', 'cAFEno', m.cAFENo)
		   THISFORM.setnextcontrol(THISFORM.txtcUnitNo)
		   THISFORM.gridDetails.REFRESH()
		ENDSCAN
		
		THISFORM.REFRESH()
		
		
		
	ENDPROC

	PROCEDURE save
		LPARAMETERS cworkarealist
		
		* Make sure appurchh is still open
		swselect('Appurchh', .T.)
		
		IF DODEFAULT()
		    THISFORM.cmdreverse.Visible = .t.
		    THISFORM.cmdduplicate.Visible = .t.
		    THISFORM.txtcVendorID.SETFOCUS()
		    THISFORM.setnextcontrol(THISFORM.txtcVendorID)
		    THISFORM.activatenextcontrol()
		*    THISFORM.new('Appurchh')
		ENDIF
		WAIT CLEAR
		
		
	ENDPROC

	PROCEDURE setstate		&& Resets the form state for non bound controls so that the save button still works.
		THIS.lChanged = .T.
		m.goStateManager.RefreshAll('Form Edit')
	ENDPROC

	PROCEDURE valterms		&& Validate Terms and Set Due Date and Disc Date based on the Terms
		*
		*  Validates the terms code in the appurchh record and
		*  calculates the due date and disc date based upon
		*  the terms settings and the appurchh.dinvdate
		*
		LOCAL lcidTerm, lnNetDueIn, lnDiscIn, ldInvDate
		LOCAL llReturn, lnDiscPct, loError
		
		llReturn = .T.
		
		TRY
		   ldInvDate = appurchh.dinvdate
		*
		*  If the invoice date is empty, don't try to calculate
		*  the due date or discount date
		*
		   IF EmptyOrNull(ldInvDate)
		      llReturn = .F.
		      EXIT
		   ENDIF
		*
		*  Get the terms table primary key from the purchase header
		*  record.  
		   lcidTerm  = appurchh.cidterm
		
		*
		*  Lookup the terms code in the terms table to get the
		*  # of days the invoice is due in and the # of days
		*  set for discounts
		*
		   swselect('terms')
		   SET ORDER TO cidterm
		   IF SEEK(lcidTerm)
		      lnNetDueIn = nNetDueIn
		      lnDiscIn   = nDiscIn
		      lnDiscPct  = nDiscPct
		   ELSE
		*  Terms have not been selected for this purchase so assume
		*  COD.
		      STORE 0 TO lnNetDueIn, lnDiscIn, lnDiscPct
		   ENDIF
		
		*
		*  Calculate and set the values of the due date and
		*  discount date fields
		*
		
		   IF THISFORM.txtdDueDate.VALUE <> ldInvDate + lnNetDueIn  &&  Only replace if different, to avoid bogus changes - BH 11/10/05
		      THISFORM.cmdatamanager.REPLACE('Appurchh', 'dDueDate', ldInvDate + lnNetDueIn)
		      THISFORM.txtdDueDate.REFRESH()
		   ENDIF
		   IF THISFORM.txtdDiscDate.VALUE <> ldInvDate + lnDiscIn
		      THISFORM.cmdatamanager.REPLACE('Appurchh', 'dDiscDate', ldInvDate + lnDiscIn)
		      THISFORM.txtdDiscDate.REFRESH()
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'ValTerms', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		ENDTRY
		
		RETURN llReturn
	ENDPROC

	PROCEDURE viewdocument		&& Brings up the document viewer for the attached document.
		LPARAMETERS tcBatch
		
		LOCAL lnReturn, llReturn, lcOutputFile
		LOCAL liKey, lcPath
		
		
		swselect('documents')
		SET ORDER TO cFK
		IF SEEK(tcBatch)
		   lcOutputFile = cPath
		
		   llReturn = .T.
		
		   IF NOT FILE(lcOutputFile)
		      llReturn = .F.
		   ENDIF
		
		   viewdocument(lcOutputFile)
		
		ENDIF
	ENDPROC

	PROCEDURE welllookup
		LOCAL lcSelect, lcList
		PRIV llOK
		
		llOK = .F.
		lcList = 'cunitno\Unit No,cname\Name,ctype\Type'
		
		set safety off
		swselect('allunits')
		index on cunitno tag cunitno
		index on cname tag cname
		set safety on
		
		lcSelect = SELECT()
		
		DO FORM picklist WITH 'allunits', lcList, 'cwellid', 3, .f.,.t.
		
		IF llOK
		   THISFORM.cmdatamanager.replace('appurchd', 'cUnitNo', allunits.cunitno)
		   THISFORM.setstate()
		ENDIF   
		
		SELECT (lcSelect)
		
		
	ENDPROC

	PROCEDURE zerotot
		LOCAL lcDate
		LOCAL llReturn, loError
		*:Global cBatch, cBillToken, cacctno, cidAppmd, cinvnum, cvendorid, dDiscDate, dPmtDate, dbilldate
		*:Global dduedate, nDiscTaken, nDiscTot, nInvBal, nTotDue, nTotPaid, nTotdisc, namtpaid
		
		llReturn = .T.
		
		TRY
		   IF THISFORM.oMessage.CONFIRM('Are you sure that you want to create a payment record for this bill?')
		      TRY
		         DO FORM SOURCE\csgetdate WITH 'AP' TO lcDate
		         WAIT WIND NOWAIT 'Creating Payment Record...'
		         m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		
		         swselect('appmthdr')  &&  Create Payment Header Record
		         SET ORDER TO cBatch
		         DO WHILE SEEK(m.cBatch)
		            m.cBatch = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Batch')
		         ENDDO
		         m.dbilldate = lcDate
		         m.cacctno   = apopt.capcash
		         m.nTotdisc  = 0
		         swselect('appmtdet')
		         SUM(namtpaid + ndisctaken) FOR cBillToken == appurchh.cBatch TO m.nTotPmts
		         swselect('appmthdr')
		         m.nTotPaid = appurchh.ninvtot - m.nTotPmts
		         m.nTotDue  = m.nTotPaid
		         m.dPmtDate = lcDate
		         IF m.nTotPaid <> 0
		            INSERT INTO appmthdr FROM MEMVAR
		         ENDIF
		
		         m.cidAppmd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.AP Payment Detail')
		         swselect('appmtdet')  &&  Create Payment Detail Record
		         SET ORDER TO cidarpmd
		         DO WHILE SEEK(m.cidAppmd)
		            m.cidAppmd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.AP Payment Detail')
		         ENDDO
		         m.cinvnum    = appurchh.cinvnum
		         m.cvendorid  = appurchh.cvendorid
		         m.dduedate   = appurchh.dduedate
		         m.nInvBal    = m.nTotDue
		         m.dDiscDate  = appurchh.dDiscDate
		         m.nDiscTot   = 0
		         m.namtpaid   = m.nTotPaid
		         m.cBillToken = appurchh.cBatch
		         m.ndisctaken = 0
		         IF m.nTotPaid <> 0
		            INSERT INTO appmtdet FROM MEMVAR
		         ENDIF
		         swselect('appurchh',.t.)
		         REPLACE appurchh.nInvBal WITH 0, appurchh.npayments WITH appurchh.ninvtot
		         swselect('appurchh',.t.)
		         = TABLEUPDATE(.T.)
		         swselect('appmthdr',.t.)
		         = TABLEUPDATE(.T.)
		         swselect('appmtdet',.t.)
		         = TABLEUPDATE(.T.)
		         THISFORM.setstate()
		         THISFORM.lF5 = .T.
		      CATCH
		      ENDTRY
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'ZeroTot', loError.LINENO, 'Enter Bills-d', loError.ERRORNO, loError.MESSAGE, '', loError
		   HelpMessage()
		ENDTRY
		
		RETURN llReturn
		
	ENDPROC

	PROCEDURE cboClass.Init
		IF DODEFAULT()
		  THIS.Requery()
		ENDIF   
	ENDPROC

	PROCEDURE cboClass.Requery
		THIS.Clear()
		THIS.ADDLISTITEM('0',1,1)
		THIS.ADDLISTITEM('Working Interest',1,2)
		THIS.ADDLISTITEM('1',2,1)
		THIS.ADDLISTITEM('Class 1',2,2)
		THIS.ADDLISTITEM('2',3,1)
		THIS.ADDLISTITEM('Class 2',3,2)
		THIS.ADDLISTITEM('3',4,1)
		THIS.ADDLISTITEM('Class 3',4,2)
		THIS.ADDLISTITEM('4',5,1)
		THIS.ADDLISTITEM('Class 4',5,2)
		THIS.ADDLISTITEM('5',6,1)
		THIS.ADDLISTITEM('Class 5',6,2)
		THIS.ADDLISTITEM('A',7,1)
		THIS.ADDLISTITEM('After Casing Point',7,2)
		THIS.ADDLISTITEM('B',8,1)
		THIS.ADDLISTITEM('Before Casing Point',8,2)
		lnI = 9
		IF m.goapp.lPluggingModule
		   THIS.ADDLISTITEM('Plugging', lnI, 2)
		   THIS.ADDLISTITEM('P', lnI, 1)
		   lnI = lnI + 1 
		ENDIF    
		IF INLIST(ALLTRIM(THISFORM.txtccatcode.VALUE),'COMP','GATH')
		    THIS.ADDLISTITEM('G',lnI,1)
		    THIS.ADDLISTITEM('Net Gas Interest',lnI,2)
		ENDIF
		
	ENDPROC

	PROCEDURE cboClass.When
		RETURN NOT EmptyOrNull(THISFORM.txtccatCode.Value)
	ENDPROC

	PROCEDURE cboTerms.afterchange
		THISFORM.valterms()
		DODEFAULT()
	ENDPROC

	PROCEDURE cboTerms.Init
		LOCAL lnCount
		*
		*  Builds the data displayed in the combo list box
		*
		
		SELECT cTermDesc, cidTerm FROM terms INTO ARRAY laTerms ORDER BY cTermDesc
		lnCount = _tally
		
		This.addlistitem('NONE',1,1)
		This.addlistitem('',1,2)
		
		IF lnCount > 0
		   FOR lnX = 1 TO ALEN(laTerms,1)
		      THIS.addlistitem(laTerms[lnX,1],lnX+1,1)
		      THIS.addlistitem(laTerms[lnX,2],lnX+1,2)
		   ENDFOR   
		ENDIF   
		
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdAFENo.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cafeno,cwellid'
		
		IF NOT EmptyOrNull(THISFORM.txtcunitno.VALUE)
		
		   IF _TALLY > 0
		
		      SELECT cafeno, cwellid ;
		         FROM afehdr ;
		         WHERE cwellid = THISFORM.txtcunitno.VALUE ;
		         INTO CURSOR tempafe READWRITE ;
		         ORDER BY cafeno
		
		      INDEX ON cafeno TAG cafeno
		      INDEX ON cwellid TAG cwellid
		
		      DO FORM ..\CUSTOM\Picklist WITH 'tempafe', lcList, THISFORM.txtafeno.VALUE, 2, .T.
		
		      IF llOK
		         THISFORM.txtafeno.VALUE = afehdr.cafeno
		         THISFORM.txtafeno.REFRESH()
		      ENDIF
		
		      THISFORM.setnextcontrol(THISFORM.txtafeno)
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdAFENo.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdatamanager.afterchange
		LPARAMETERS cworkarea,cfield
		
		DO CASE
			   CASE UPPER(m.cField) + ',' $ 'NQUANTITY,NPRICE,'
			      m.nExtension = appurchd.nQuantity * appurchd.nPrice
			      RETURN THIS.Replace('ApPurchd', 'nExtension', m.nExtension )
		      
		ENDCASE
		RETURN .T.      
	ENDPROC

	PROCEDURE cmdatamanager.afterdelete
		LPARAMETERS cworkarea
		
		DODEFAULT(cworkarea)
		
		DO CASE
		   CASE m.cWorkarea = 'Appurchh'
		      TABLEUPDATE(.T.,.T.,'Appurchh')
		      TABLEUPDATE(.T.,.T.,'Appurchd')
		      SELECT appurchh
		      SET ORDER to invhkey
		      GO BOTTOM 
		   CASE m.cWorkarea = 'Appurchd'
		      * Recalculate the invoice totals
		      THISFORM.calctot()
		ENDCASE
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afternav
		LPARAMETERS cworkarea
		LOCAL lcBatch
		
		IF PROPER(m.cworkarea) == 'Appurchh'
		   swselect('appurchh')
		   lcBatch = cBatch
		
		   IF THISFORM.CheckExp(lcBatch)
		      THISFORM.CAPTION = 'Enter Bills - Processed in Run Closing'
		   ELSE
		      THISFORM.CAPTION = 'Enter Bills'
		   ENDIF
		
		   swselect('vendor')
		   SET ORDER TO cvendorid
		   IF SEEK(appurchh.cvendorid)
		      THISFORM.txtcVendName.VALUE = cvendname
		   ELSE
		      THISFORM.txtcVendName.VALUE = ' '
		   ENDIF
		   THISFORM.lF5        = .F.
		   THISFORM.nBillTotal = appurchh.nInvTot
		
		   swselect('appurchh')
		
		   THISFORM.CheckPaid()  &&  Check to see if the bill has been paid, and if so, don't let them change amounts
		
		   IF THISFORM.lPaid  &&  If paid, don't let them change the vendor
		      THISFORM.txtcVendorID.lENABLED = .F.
		      THISFORM.cmdVendor.lENABLED    = .F.
		      THISFORM.lblPaid.VISIBLE       = .T.
		   ELSE
		      THISFORM.txtcVendorID.lENABLED = .T.
		      THISFORM.cmdVendor.lENABLED    = .T.
		      THISFORM.lblPaid.VISIBLE       = .F.
		   ENDIF
		
		*  Blank out the fields in the editing area, since it always confuses people when that data stays there after switching records
		   THISFORM.txtcunitNo.VALUE   = ''
		   THISFORM.txtcwellName.VALUE = ''
		   THISFORM.txtccatCode.VALUE  = ''
		   THISFORM.txtccatDesc.VALUE  = ''
		   THISFORM.cboClass.VALUE     = '0'
		   THISFORM.txtcitemdesc.VALUE = ''
		   THISFORM.txtcacctNo.VALUE   = ''
		   THISFORM.txtcAcctDesc.VALUE = ''
		   THISFORM.txtcdeptNo.VALUE   = ''
		   THISFORM.txtcdeptdesc.VALUE = ''
		   THISFORM.txtnInvTot.REFRESH()
		   THISFORM.txtninvbal.REFRESH()
		
		   THISFORM.setnextcontrol(THISFORM.txtcVendorID)
		
		   swselect('documents')
		   m.cfk      = 'AP' + appurchh.cBatch
		   LOCATE FOR cfk == m.cfk
		   IF FOUND()
		      THISFORM.cmddocument.CAPTION = 'View Document'
		   ELSE
		      THISFORM.cmddocument.CAPTION = 'Add Document'
		   ENDIF
		ENDIF
		
		THISFORM.gridDetails.DOSCROLL(6)
		
		RETURN(DODEFAULT(cworkarea))
		
		
	ENDPROC

	PROCEDURE cmdatamanager.afternew
		LPARAMETERS cworkarea
		LOCAL llFoundTerm, lcidTerm, lcBatch, lcidpurd
		m.nextension = 0
		
		DO CASE
		   CASE UPPER(m.cworkarea) = 'APPURCHH'    && Purchases Header
		      * Look for duplicates so no uniqueness errors occur
		      lcBatch = GetNextPK('BATCH')
		      
		      swselect('appurchh')
		      REPLACE cBatch  WITH lcBatch, ;
		         dPostDate WITH DATE(), ;
		         dAdded WITH DATETIME(), ;
		         cAddedBy WITH m.goapp.cUser
		      *
		      *  Look for a default terms record so that we can set the terms
		      *  to that default
		      llFoundTerm = .F.
		      swselect('terms')
		      SCAN FOR lDefTerm = .T.
		         lcidTerm = cidTerm
		         llFoundTerm = .T.
		         EXIT
		      ENDSCAN
		      swselect('appurchh')
		      IF llFoundTerm  &&  Replace bill terms with default.  Once the vendor is selected, any default for them will overwrite this setting.
		         REPLACE cidTerm WITH lcidTerm
		      ENDIF
		
		      WITH THISFORM
		*         .cntdate1.txtDate.Value = ''
		*         .cntdate2.txtDate.Value = ''
		*         .cntdate3.txtDate.Value = ''
		         .txtcItemDesc.VALUE = ' '
		         .txtcAcctNo.VALUE = ' '
		         .txtcUnitNo.VALUE = ' '
		         .txtcDeptNo.VALUE = ' '
		         .txtcAcctDesc.VALUE = ' '
		         .txtcWellName.VALUE = ' '
		         .txtcCatDesc.VALUE = ' '
		         .txtcDeptDesc.VALUE = ' '
		*        .txtcProdYear.VALUE = ' '
		*        .txtcProdPeriod.VALUE = ' '
		         .txtcCatCode.VALUE = ' '
		         .txtcOwnerID.VALUE = ' '
		         .txtnExtension.set('value',0.00)
		         .txtnSaltBBL.SetValue(0)
		         .txtcAcctNo.SETFOCUS()
		      ENDWITH
		
		      THISFORM.txtcVendorId.SETFOCUS()
		      
		      THISFORM.lWellRequired = .F.
		      THISFORM.lDeptRequired = .F.
		      
		   CASE UPPER(m.cworkarea) = 'APPURCHD'   &&  Purchase Detail
		      * Look for duplicates so no uniqueness errors occur
		      lcidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		      SET DELETED OFF
		      SELECT appurchd1
		      SET ORDER TO cidPurd
		      DO WHILE SEEK(lcidpurd)
		         lcidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		      ENDDO
		      SET DELETED ON
		      swselect('appurchd')
		      REPLACE appurchd.cidPurd WITH lcidpurd
		ENDCASE
		
		THISFORM.txtnExtension.SET('value',0.00)
		
	ENDPROC

	PROCEDURE cmdatamanager.beforedelete
		LPARAMETERS cworkarea
		
		IF m.cworkarea = 'Appurchh'
		*  Make sure the period or year isn't closed
		    IF NOT THISFORM.glmaint.CheckPeriod(appurchh.dpostdate)
		        THISFORM.omessage.warning('Unable to delete this bill. Either the fiscal year or period represented by this date has been closed.')
		        RETURN .F.
		    ENDIF
		
		    lcBatch = appurchh.cBatch
		
		    IF THISFORM.checkexp(lcBatch)
		        THISFORM.omessage.warning('Expenses have been allocated to a production period and the period has been closed. ' + ;
		              'You cannot delete this bill.')
		        RETURN .F.
		    ENDIF
		
		* Check to see if payments have been applied to this bill.
		    swselect('appmtdet')
		    LOCATE FOR cBillToken = lcBatch AND nAmtPaid <> 0 AND cInvNum = appurchh.cInvNum
		    IF FOUND()
		        THISFORM.omessage.warning('There are payments that have been applied to this bill. It cannot be deleted until the check that paid it is voided.')
		        RETURN .F.
		    ENDIF
		
		    swselect('appurchd')
		
		    THISFORM.glmaint.delbatch(lcBatch, 'AP')
		
		    swselect('expense')
		    SCAN FOR cBatch == lcBatch
		        DELE NEXT 1
		    ENDSCAN
		
		    swselect('expsusp')
		    SCAN FOR cBatch == lcBatch
		        DELE NEXT 1
		    ENDSCAN
		
		    BEGIN TRANSACTION
		    swselect('glmaster', .T.)
		    = TABLEUPDATE(.T.)
		    swselect('expense', .T.)
		    = TABLEUPDATE(.T.)
		    swselect('expsusp', .T.)
		    = TABLEUPDATE(.T.)
		    swselect('coabal', .T.)
		    = TABLEUPDATE(.T.)
		    swselect('appurchh', .T.)
		    = TABLEUPDATE(.T.)
		    swselect('appurchd', .T.)
		    = TABLEUPDATE(.T.)
		    END TRANSACTION
		
		    THISFORM.setchanged(.F.)
		
		ENDIF
		
		DODEFAULT(cworkarea)
		
		
	ENDPROC

	PROCEDURE cmdatamanager.beforenav
		LPARAMETERS cWorkarea
		
		IF m.cWorkArea = 'Appurchh'
		   SELECT appurchh
		   SET ORDER to invhkey 
		ENDIF 
	ENDPROC

	PROCEDURE cmdatamanager.beforenew
		LPARAMETERS cWorkarea
		
		* Save the entry if they haven't clicked save in between bills
		IF m.cWorkArea == 'Appurchh' AND THISFORM.lChanged = .T.
		   IF THISFORM.flushcontrolbuffer()
		      THISFORM.save()
		   ENDIF
		ENDIF 
		
		
	ENDPROC

	PROCEDURE cmdatamanager.beforeupdate
		LPARAMETERS cworkarealist
		LOCAL lcBatch, lcAPAcct, lcTaxAcct, llReturn, lcSelect, lnRecNo, lcFilter
		LOCAL lctype, lcyear, lcrun
		LOCAL ldPostDate, llRetVal, llUseInvdate, lnBalance, loError
		*:Global cdeptno, nAmount
		
		llReturn = .T.
		
		TRY
		
		   lcBatch = appurchh.cbatch
		
		   IF NOT THISFORM.lChanged
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF EmptyOrNull(appurchh.cVendorID)
		      THISFORM.oMessage.warning('You must specify a vendor before saving a bill.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF NOT THISFORM.isnew('appurchh') AND THISFORM.nbilltotal <> appurchh.nInvTot AND THISFORM.nbilltotal <> appurchh.nInvBal AND appurchh.nPayments <> 0
		      THISFORM.oMessage.warning('The changes you are attempting to save will change the amount of this bill. You cannot change the amount of a fully or partially paid bill.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF appurchh.nInvTot = 0
		      swselect('appurchd')
		      LOCATE FOR cbatch == lcBatch AND nextension <> 0
		      IF NOT FOUND()
		         MESSAGEBOX('You cannot save a zero amount invoice....', 16, 'Missing Detail')
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		   swselect('vendor')
		   LOCATE FOR cVendorID == appurchh.cVendorID
		   IF FOUND()
		      IF vendor.lIntegGL
		         IF NOT THISFORM.oMessage.CONFIRM('This vendor is marked to post to the G/L. If this bill is saved ' + ;
		                 'it will have to be paid through Pay Bills instead of being automatically ' + ;
		                 'posted as revenue for this vendor. Do you want to continue?')
		            llReturn = .F.
		            EXIT
		         ENDIF
		      ENDIF
		   ENDIF
		
		   lcSelect = SELECT()
		
		
		   swselect('apopt')
		   IF m.goapp.lAMVersion AND apopt.lUseInvDate
		      swselect('appurchh')
		      REPLACE appurchh.dpostdate WITH appurchh.dinvdate
		   ELSE
		      IF m.goapp.lDMVersion
		         swselect('appurchh')
		         REPLACE appurchh.dpostdate WITH appurchh.dinvdate
		      ENDIF
		* Check for a missing post date
		      IF EmptyOrNull(appurchh.dpostdate)
		         THISFORM.oMessage.warning('The post date is invalid. Please enter a valid post date before saving.')
		         THISFORM.setnextcontrol(THISFORM.txtdpostDate)
		         llReturn = .F.
		         EXIT
		      ENDIF
		   ENDIF
		
		*  Make sure the period or year isn't closed
		   IF NOT THISFORM.glmaint.CheckPeriod(appurchh.dpostdate)
		      THISFORM.oMessage.warning('This post date is invalid. Either the fiscal year or period represented by this date has been closed.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		* Get the partnership options
		   IF m.goapp.lPartnershipMod
		      swselect('progopt')
		      GO TOP
		      llJVPosting = lJVPosting
		   ELSE
		      llJVPosting = .F.
		   ENDIF
		
		*  Check to see if expenses have been allocated and the production period closed.
		   IF THISFORM.checkexp(lcBatch)
		      lctype = SUBSTR(THISFORM.cclosedrun, 1, 1)
		      lcyear = SUBSTR(THISFORM.cclosedrun, 2, 4)
		      lcrun  = SUBSTR(THISFORM.cclosedrun, 6, 3)
		      THISFORM.oMessage.warning('Expenses for one or more wells in this bill have been allocated and processed during ' + IIF(lctype = 'J', 'JIB', 'Revenue') + ' run: ' + ;
		           lcyear + '/' + lcrun + '. ' + ;
		           'You cannot change this bill.')
		      llReturn = .F.
		      EXIT
		   ENDIF
		
		   IF llReturn
		      THISFORM.CAPTION = 'Enter Bills'
		      WAIT WINDOW NOWAIT 'Saving Changes, Please Wait.....'
		
		      lnBalance = appurchh.nInvTot - appurchh.nPayments
		
		      IF appurchh.nInvBal <> lnBalance
		         IF NOT THIS.isnew('Appurchh') AND NOT THISFORM.lF5
		            IF appurchh.nPayments <> 0
		               IF THISFORM.oMessage.CONFIRM('Should the invoice balance be updated to reflect the changes?')
		                  THIS.REPLACE('appurchh', 'nInvBal', lnBalance)
		               ENDIF
		            ELSE
		               THIS.REPLACE('appurchh', 'nInvBal', lnBalance)
		            ENDIF
		         ELSE
		            IF NOT THISFORM.lF5
		               THIS.REPLACE('appurchh', 'nInvBal', lnBalance)
		            ENDIF
		         ENDIF
		      ENDIF
		
		
		      IF m.goapp.lAMVersion
		*
		*  Delete the G/L journal entries for this invoice
		*
		         THISFORM.glmaint.delbatch(lcBatch, 'AP')
		
		*
		* Get the default A/P account
		*
		         swselect('apopt')
		         GO TOP
		         lcAPAcct     = cAPAcct
		         llUseInvdate = lUseInvDate
		
		*  Create the G/L journal entries for this invoice
		*
		*  A/P entry
		         THISFORM.glmaint.cSource = 'AP'
		         THISFORM.glmaint.cbatch  = lcBatch
		
		* Check the option to use the invoice date as post date
		         IF NOT llUseInvdate
		            ldPostDate    = appurchh.dpostdate
		         ELSE
		            ldPostDate    = appurchh.dinvdate
		         ENDIF
		
		         THISFORM.glmaint.dGLDate = ldPostDate
		
		         THISFORM.glmaint.cReference = ALLTRIM(appurchh.cinvnum) + ': ' + appurchh.cReference
		         THISFORM.glmaint.cBunch     = THISFORM.cBunch
		
		*  Detail Lines
		         swselect('appurchd')
		         lcFilter = FILTER()
		         SET FILTER TO
		         lnRecNo = RECNO()
		         SCAN FOR cbatch == lcBatch
		            THISFORM.glmaint.cbatch     = lcBatch
		            THISFORM.glmaint.dGLDate    = ldPostDate
		            THISFORM.glmaint.cReference = 'Pur: ' + ALLTRIM(appurchh.cinvnum)
		            THISFORM.glmaint.cDesc      = appurchd.citemdesc
		            THISFORM.glmaint.cAcctNo    = appurchd.cAcctNo
		            THISFORM.glmaint.cId        = appurchh.cVendorID
		            THISFORM.glmaint.cUnitNo    = appurchd.cUnitNo
		            THISFORM.glmaint.cCatCode   = appurchd.cCatCode
		            THISFORM.glmaint.nAmount    = appurchd.nextension
		            THISFORM.glmaint.cdeptno    = appurchd.cdeptno
		            THISFORM.glmaint.cafeno     = appurchd.cafeno
		            THISFORM.glmaint.updatebatch()
		         ENDSCAN
		
		         CREATE CURSOR tempdept ;
		            (cdeptno  C(8), ;
		              nAmount  N(12, 2))
		
		         swselect('appurchd')
		         SCAN FOR cbatch == lcBatch
		            m.cdeptno = cdeptno
		            m.nAmount = nextension
		            INSERT INTO tempdept FROM MEMVAR
		         ENDSCAN
		         GO TOP
		
		         SELECT  cdeptno,;
		                 SUM(nAmount) AS nAmount ;
		             FROM tempdept ;
		             INTO CURSOR temp ;
		             ORDER BY cdeptno ;
		             GROUP BY cdeptno
		
		*  A/P entry
		         THISFORM.glmaint.cSource    = 'AP'
		         THISFORM.glmaint.cbatch     = lcBatch
		         THISFORM.glmaint.dGLDate    = ldPostDate
		         THISFORM.glmaint.cReference = ALLTRIM(appurchh.cinvnum) + ': ' + appurchh.cReference
		         THISFORM.glmaint.cDesc      = THISFORM.txtcVendName.VALUE
		         THISFORM.glmaint.cAcctNo    = lcAPAcct
		         THISFORM.glmaint.cId        = appurchh.cVendorID
		         THISFORM.glmaint.mNotes     = 'appurchh.mnotes'
		         THISFORM.glmaint.cUnitNo    = ''
		         THISFORM.glmaint.cafeno     = ''
		         THISFORM.glmaint.cCatCode   = ''  &&  Blank out the cat code for the AP entry - BH 10/22/2008
		
		
		         SELECT temp
		         SCAN
		            SCATTER MEMVAR
		            THISFORM.glmaint.cdeptno = m.cdeptno
		            THISFORM.glmaint.nAmount = m.nAmount * -1
		            THISFORM.glmaint.updatebatch()
		         ENDSCAN
		
		*
		*  Check to make sure the batch balances
		*
		         llReturn = THISFORM.glmaint.chkBalance()
		      ENDIF && IF lAMVersion
		
		      IF llReturn
		
		         IF NOT THIS.isnew('Appurchh')
		            SELECT appurchh
		            REPLACE dChanged WITH DATETIME(), ;
		                    cChangedBy WITH m.goapp.cUser
		         ENDIF
		*
		*  Add the entries to the EXPSUSP or EXPENSE tables
		*
		         llRetVal = THISFORM.dmexpense()
		         swselect('glmaster',.T.)
		         = TABLEUPDATE(.T., .T.)
		         THISFORM.setchanged(.F.)
		         WAIT WINDOW NOWAIT 'Changes Saved....' TIMEOUT 2
		         THISFORM.nbilltotal = appurchh.nInvTot  &&  Save the bill total as the variable for future checking
		         IF m.goapp.lAMVersion
		* Check to make sure the batch made it to the G/L
		            swselect('glmaster')
		            SET ORDER TO glbatch
		            IF NOT SEEK(lcBatch)
		               MESSAGEBOX('There was a problem saving the entry to the G/L. Please try again.', 48, 'Problem Saving Bill')
		               llReturn = .F.
		            ENDIF
		         ENDIF
		      ELSE
		         MESSAGEBOX('The G/L batch for this bill was not in balance. Unable to save the bill at this time.', 16, 'Problem Saving')
		      ENDIF
		   ENDIF
		CATCH TO loError
		   llReturn = .F.
		   DO errorlog WITH 'BeforeUpdate', loError.LINENO, 'Enter Bills', loError.ERRORNO, loError.MESSAGE, '', loError
		   HelpMessage()
		ENDTRY
		
		RETURN (llReturn)
		
		
		
		
		
		
		
		
	ENDPROC

	PROCEDURE Cmdcommandbuttoncustom1.Click
		THISFORM.lnoclearext = .T.
		do form memoedit NAME memoedit LINKED with 'Vendor Bill Comments', 'appurchh.mnotes'
		RELEASE memoedit 
		THISFORM.lChanged = .T.
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdDelete.Click
		IF THISFORM.oMessage.CONFIRM('Are you sure you want to delete this detail line?')
		   THISFORM.cmdatamanager.DELETE('Appurchd')
		   THISFORM.setstate()
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdDocument.Click
		LOCAL lnx, llReturn, llNewDoc
		
		llNewDoc = .T.
		
		swSELECT('documents')
		m.cfk      = 'AP'+appurchh.cbatch
		LOCATE FOR cfk == m.cfk
		IF FOUND()
		   IF MESSAGEBOX('There is a document attached to this bill. Do you want to view the document? Choosing No will allow you to attach a new document.', 36, 'Attached Document') = 6
		      THISFORM.viewdocument(m.cfk)
		      llNewDoc = .F.
		   ELSE
		      llNewDoc = .T.
		   ENDIF
		ENDIF
		IF llNewDoc
		   THISFORM.oFileDialog.FileName = ''
		   IF m.goApp.lcloudserver
		      THISFORM.oFileDialog.InitDir='S:\'
		   ENDIF
		   llReturn = THISFORM.oFileDialog.openfile()
		   IF NOT THISFORM.oFileDialog.lcancelled
		      m.cDesc    = THISFORM.omessage.gettext('Enter a description for this file.','Get File Description')
		      m.cpath    = THISFORM.ofilEDIALOG.aFiles[1]
		      IF EmptyOrNull(m.cDesc) OR ISNULL(m.cDesc)
		         m.cDesc = ALLTRIM(m.cpath)
		      ENDIF
		
		      m.cDocLink = 'AP'
		      swSELECT('documents')
		      LOCATE FOR cfk == m.cfk
		      IF NOT FOUND()
		         INSERT INTO documents FROM MEMVAR
		      ELSE
		         REPLACE cpath WITH m.cpath, ;
		                 cdesc WITH m.cdesc
		      ENDIF
		      THISFORM.setchanged(.T., 'Documents')
		      m.gostatemanager.refreshall('Form')
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdDuplicate.Click
		IF THISFORM.oMessage.CONFIRM('Are you sure you want to duplicate this bill?')
		   THISFORM.DuplicateBill()
		   THIS.Visible = .f.
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdLease.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		swselect('options')
		go top
		llshowinact = lshowinact
		
		lcList = 'cLeaseID,cleasename'
		set safety off
		swselect('land')
		set safety on
		THISFORM.lnoclearext = .T.
		
		DO FORM ..\Custom\PickList WITH 'Land', lcList, THISFORM.txtcunitno.value, 2
		
		IF llOK
		   THISFORM.txtcUnitNo.value   = land.cleaseid
		   THISFORM.txtcWellName.value = land.cleasename
		   THISFORM.txtcUnitNo.refresh()
		   THISFORM.txtcWellName.refresh()
		ENDIF   
		
		THISFORM.setnextcontrol(This.Parent.txtcUnitNo)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdLookCat.Click
		LOCAL lcList
		PRIV llOK
		
		IF THISFORM.flushcontrolbuffer()
		    IF NOT THISFORM.lValidWell
		        RETURN .F.
		    ENDIF
		
		    llOK = .T.
		
		    SELECT cCatCode,cCateg,cExpClass,IIF(lAFEType,'A','') AS cAFEType, IIF(lJIBOnly,'J','') AS cJIBOnly  ;
		        FROM expcat INTO CURSOR exptmp READWRITE 
		
		    SELECT exptmp
		    INDEX ON cCatCode           TAG cCatCode
		    INDEX ON cCateg             TAG cCateg
		    INDEX ON cExpClass+cCatCode TAG cExpClass
		    INDEX ON cAFEType           TAG cAFEType
		    INDEX ON cJIBOnly           TAG cJIBOnly
		
		    lcList = 'ccatcode\Code,ccateg\Category,cexpclass\Cls,cAFEType\AFE,cJIBOnly\JIB'
		
		    DO FORM '..\custom\picklist' WITH 'exptmp', lcList, THISFORM.txtcCatCode.VALUE, 5, .T., .T.
		
		    IF llOK
		        THISFORM.txtcCatCode.SET('VALUE',exptmp.cCatCode)
		        THISFORM.txtcCatDesc.SET('value',exptmp.cCateg)
		        THISFORM.cboclass.VALUE = exptmp.cExpClass
		        THISFORM.cboclass.REFRESH()
		    ENDIF
		
		    THISFORM.setnextcontrol(THISFORM.txtcCatCode)
		
		    ON KEY LABEL F10 _SCREEN.ACTIVEFORM.SAVE()
		    ON KEY LABEL CTRL+A _SCREEN.ACTIVEFORM.New()
		    ON KEY LABEL CTRL+D _SCREEN.ACTIVEFORM.DELETE()
		    ON KEY LABEL CTRL+L _SCREEN.ACTIVEFORM.LIST()
		ENDIF
		
	ENDPROC

	PROCEDURE cmdLookCOA.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cAcctNo/acctno,cAcctDesc/acctdesc'
		THISFORM.lnoclearext = .T.
		
		DO FORM picklist WITH 'Coa', lcList, THISFORM.txtcacctno.value, 2
		
		IF llOK
		   THISFORM.txtcAcctNo.value = coa.cacctno
		   THISFORM.txtcAcctDesc.value = coa.cAcctDesc
		   THISFORM.txtcAcctNo.refresh()
		   THISFORM.txtcAcctDesc.refresh()
		ENDIF   
		
		THISFORM.setnextcontrol(This.Parent.txtcAcctNo)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdLookCOA.When
		RETURN (THISFORM.txtcacctno.enabled)
	ENDPROC

	PROCEDURE cmdLookDept.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cdeptno\Dept No,cdeptdesc\Department Description'
		THISFORM.lnoclearext = .T.
		
		DO FORM picklist WITH 'gldept', lcList, THISFORM.txtcdeptno.value, 2,.f.,.t.
		
		IF llOK
		   THISFORM.txtcDeptNo.value = gldept.cdeptno
		   THISFORM.txtcDeptDesc.value = gldept.cDeptDesc
		   THISFORM.txtcDeptNo.refresh()
		   THISFORM.txtcDeptDesc.refresh()
		ENDIF   
		
		THISFORM.setnextcontrol(THISFORM.txtcDeptNo)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdLookOwner.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cOwnerID\Owner ID,csortfield\Owner Name'
		
		IF USED('tempown')
		   USE IN tempown
		ENDIF
		IF USED('tempown1')
		   USE IN tempown1
		ENDIF
		
		IF NOT EmptyOrNull(THISFORM.txtcunitno.VALUE)
		   SET SAFETY OFF
		   SELECT cOwnerID, cSortField FROM investor ;
		      WHERE cOwnerID IN (SELECT cOwnerID FROM wellinv WHERE cWellID = THISFORM.txtcunitno.VALUE) ;
		      INTO CURSOR tempown1 ;
		      ORDER BY cOwnerID
		
		   IF _TALLY > 0
		
		      USE DBF('tempown1') AGAIN IN 0 ALIAS tempown
		      SELECT tempown
		      INDEX ON cOwnerID TAG cOwnerID
		      INDEX ON cSortField TAG cSortField
		
		      DO FORM ..\CUSTOM\Picklist WITH 'tempown', lcList, THISFORM.txtcownerid.VALUE, 2, .T.,.T.
		
		      IF llOK
		         THISFORM.txtcownerid.VALUE = tempown.cOwnerID
		         THISFORM.txtcownerid.REFRESH()
		      ENDIF
		
		      THISFORM.setnextcontrol(THIS.PARENT.txtcownerid)
		   ENDIF
		ENDIF
		
		THISFORM.lnoclearext = .T.
		
	ENDPROC

	PROCEDURE cmdLookOwner.When
		RETURN MDOWN()
	ENDPROC

	PROCEDURE cmdLookUnit.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		swselect('options')
		go top
		llshowinact = lshowinact
		
		lcList = 'cWellID,cwellname, cgroup'
		set safety off
		swselect('wells')
		set safety on
		THISFORM.lnoclearext = .T.
		
		DO FORM ..\Custom\PickList WITH 'Wells', lcList, THISFORM.txtcunitno.value, 3
		
		IF llOK
		   THISFORM.txtcUnitNo.value   = wells.cwellid
		   THISFORM.txtcWellName.value = wells.cwellname
		   THISFORM.txtcUnitNo.refresh()
		   THISFORM.txtcWellName.refresh()
		ENDIF   
		
		THISFORM.setnextcontrol(This.Parent.txtcUnitNo)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE cmdRecur.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		IF USED('tempap1')
		   USE IN tempap1
		ENDIF
		
		IF USED('tempap')
		   USE IN tempap
		ENDIF
		
		SELECT appurech.cvendorid, ;
		   appurech.creference, ;
		   appurech.ninvtot, ;
		   vendor.cvendname, ;
		   appurech.cbatch ;
		   FROM appurech, vendor ;
		   WHERE appurech.cvendorid = vendor.cvendorid ;
		   INTO CURSOR tempap1 ;
		   ORDER BY appurech.cvendorid
		
		IF _TALLY > 0
		
		   USE DBF('tempap1') AGAIN IN 0 ALIAS tempap EXCL
		
		   SELECT tempap
		   INDEX ON cvendorid  TAG cvendorid
		   INDEX ON creference TAG creference
		   INDEX ON cvendname  TAG cvendname
		
		   lcList = 'cvendorid,cvendname,creference,ninvtot'
		
		   DO FORM ..\CUSTOM\picklist WITH 'tempap', lcList, 'cbatch', 4, .T.
		
		   IF llOK
		      lcBatch = tempap.cbatch
		      swselect('appurech')
		      SET ORDER TO cbatch
		      SEEK(lcBatch)
		      SCATTER MEMVAR
		      m.cbatch = appurchh.cbatch
		      jcBatch  = m.cbatch
		      m.nInvBal = m.ninvtot
		      m.nSubTotal = m.ninvtot
		      swselect('appurchh')
		      GATHER MEMVAR MEMO
		
		      swselect('appurecd')
		      LOCATE FOR NOT EmptyOrNull(cUnitNo) AND NOT EmptyOrNull(ccatcode) AND cbatch = lcBatch
		      IF FOUND()  &&  Well expenses, so ask for the year and period to allocate them to
		         DO FORM apselprd TO lcYearPrd
		         lnLength = LEN(lcYearPrd)
		         IF lnLength < 6  &&  No valid year and period passed back, so send them to the allocation file
		            lcYear = ''
		            lcPeriod = ''
		         ELSE
		            lcYear = LEFT(lcYearPrd,4)
		            lcPeriod = RIGHT(lcYearPrd,2)
		         ENDIF
		      ENDIF
		      SCAN FOR cbatch = lcBatch
		         swselect('appurecd')
		         SCATTER MEMVAR
		         * Look for duplicates so no uniqueness errors occur
		         m.cidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		         SET DELETED OFF
		         SELECT appurchd1
		         SET ORDER TO cidpurd
		         DO WHILE SEEK(m.cidpurd)
		            m.cidpurd = THISFORM.oRegistry.IncrementCounter('%Shared.Counters.Purchase Detail')
		         ENDDO
		         SET DELETED ON
		         swselect('appurecd')
		         m.cbatch = jcBatch
		         IF NOT EmptyOrNull(cUnitNo) AND NOT EmptyOrNull(ccatcode)  &&  Well expense, so plug in the year and period
		            m.cProdYear = lcYear
		            m.cProdPeriod = lcPeriod
		         ELSE
		            m.cProdYear = ''
		            m.cProdPeriod = ''
		         ENDIF
		         INSERT INTO appurchd FROM MEMVAR
		      ENDSCAN
		      swselect('appurchh')
		      
		
		      THISFORM.REFRESH()
		      THISFORM.calctot()
		   ENDIF
		ELSE
		   THISFORM.omessage.DISPLAY('There are no recurring bills defined.')
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtdpostdate)
		ON KEY LABEL F10 _SCREEN.ACTIVEFORM.SAVE()
		ON KEY LABEL CTRL+A _SCREEN.ACTIVEFORM.New()
		ON KEY LABEL CTRL+D _SCREEN.ACTIVEFORM.DELETE()
		ON KEY LABEL CTRL+L _SCREEN.ACTIVEFORM.LIST()
		
	ENDPROC

	PROCEDURE cmdRecur.When
		RETURN THISFORM.cmdatamanager.isnew('Appurchh')
		
	ENDPROC

	PROCEDURE cmdReverse.Click
		IF THISFORM.oMessage.CONFIRM('Are you sure you want to reverse this bill?')
		   THISFORM.ReverseBill()
		   
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE cmdVendor.Click
		LOCAL lcList
		PRIV llOK
		
		llOK = .T.
		
		lcList = 'cVendorID,cSortfield'
		THISFORM.lnoclearext = .T.
		
		DO FORM ..\CUSTOM\picklist WITH 'Vendor', lcList, THISFORM.txtcvendorid.value, 2
		
		IF llOK
		   THISFORM.cmdatamanager.REPLACE('appurchh','cVendorId', Vendor.cVendorID)
		   THISFORM.txtcVendName.VALUE = vendor.cvendname
		   THISFORM.txtcVendName.REFRESH()
		   THISFORM.txtcVendorId.REFRESH
		   THISFORM.setstate()
		ENDIF
		
		THISFORM.setnextcontrol(THISFORM.txtcVendorId)
		
		ON KEY LABEL F10 _screen.activeform.Save()
		ON KEY LABEL CTRL+A _screen.activeform.New()
		ON KEY LABEL CTRL+D _screen.activeform.Delete()
		ON KEY LABEL CTRL+L _screen.activeform.List()
		
	ENDPROC

	PROCEDURE GridDetails.Column1.txtcWellID.GotFocus
		ON KEY LABEL F2 _screen.activeform.welllookup()
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column1.txtcWellID.LostFocus
		ON KEY LABEL F2
		IF EmptyOrNull(THIS.Value)
		   THISFORM.gridDetails.column2.txtcatcode.set('value','')
		   THISFORM.gridDetails.column3.txtclass.set('value','')
		ENDIF 
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column1.txtcWellID.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		   RETURN .f.
		ELSE
		   RETURN .t.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column10.txtAllocateTo.GotFocus
		ON KEY LABEL F2 _screen.ActiveForm.ownerlookup()
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column10.txtAllocateTo.LostFocus
		ON KEY LABEL F2
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column10.txtAllocateTo.Valid
		IF DODEFAULT()
		   IF NOT EmptyOrNull(THIS.VALUE)
		      swselect('wellinv')
		      LOCATE FOR cwellid = appurchd.cunitno AND cownerid = THIS.VALUE
		      IF NOT FOUND()
		         MESSAGEBOX("This owner doesn't have an interest in this well. You can only allocate all of this entry to an owner who is in the DOI for this well.",16,'No Interest')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE GridDetails.Column10.txtAllocateTo.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF NOT EmptyOrNull(appurchd.ccatcode)
		   IF THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		      RETURN .f.
		   ELSE
		      RETURN .t.
		   ENDIF 
		ELSE
		   RETURN .f.
		ENDIF 
		
		
	ENDPROC

	PROCEDURE GridDetails.Column11.txtAFENo.When
		THIS.Refresh()
	ENDPROC

	PROCEDURE GridDetails.Column2.txtCatCode.GotFocus
		ON KEY LABEL F2 _screen.activeform.catlookup()
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column2.txtCatCode.InteractiveChange
		IF DODEFAULT()
		   THISFORM.gridDetails.column4.txtDescription.set('value',expcat.ccateg)
		   THISFORM.gridDetails.column4.txtDescription.refresh()
		   THISFORM.gridDetails.column3.txtClass.set('value',expcat.cexpclass)
		   THISFORM.gridDetails.column3.txtClass.refresh()
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column2.txtCatCode.LostFocus
		LOCAL llAllocExp
		
		ON KEY LABEL F2
		IF EmptyOrNull(THIS.Value)
		   RETURN
		ENDIF 
		
		swselect('afeopt')
		GO TOP
		llAllocexp = lAllocExp
		
		swselect('expcat')
		SET ORDER TO ccatcode
		IF SEEK(THIS.VALUE)
		   IF (NOT lafetype OR llAllocexp)
		      swselect('glopt')
		      GO top
		      THISFORM.gridDetails.colUMN5.txtAccount.set('value',glopt.cexpclear)
		   ELSE
		      THISFORM.gridDetails.colUMN5.txtaccount.set('value',expcat.cdraccto)
		   ENDIF 
		ENDIF 
		
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column2.txtCatCode.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		   RETURN .f.
		ELSE
		   RETURN .t.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column3.txtClass.Valid
		IF DODEFAULT()
		   IF NOT EmptyOrNull(appurchd.cunitno)
		      IF NOT INLIST(THIS.VALUE,'0','1','2','3','4','5','A','B')
		         IF THIS.VALUE = 'P'
		            IF NOT m.goapp.lPluggingModule
		               WAIT WINDOW NOWAIT 'Invalid expense class entered.'
		               RETURN 0
		            ENDIF
		         ELSE
		            IF THIS.VALUE = 'G'
		               IF NOT INLIST(appurchd.ccatcode,'COMP','GATH')
		                  WAIT WINDOW NOWAIT 'Invalid expense class entered.'
		                  RETURN 0
		               ENDIF
		            ELSE
		               WAIT WINDOW NOWAIT 'Invalid expense class entered.'
		               RETURN 0
		            ENDIF
		         ENDIF
		      ENDIF
		   ENDIF
		ENDIF
		
		RETURN .T.
		
	ENDPROC

	PROCEDURE GridDetails.Column3.txtClass.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		   RETURN .f.
		ELSE
		   RETURN .t.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column4.txtDescription.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.coalookup()
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column4.txtDescription.LostFocus
		ON KEY LABEL F2
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column4.txtDescription.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		   RETURN .f.
		ELSE
		   RETURN .t.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column5.txtAccount.GotFocus
		IF DODEFAULT()
		   IF NOT EmptyOrNull(appurchd.cunitno) AND NOT EmptyOrNull(appurchd.ccatcode)
		      KEYBOARD '{TAB}'
		
		   ELSE
		      ON KEY LABEL F2 _SCREEN.ACTIVEFORM.coalookup()
		      THIS.READONLY = .F.
		      RETURN .T.
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE GridDetails.Column5.txtAccount.LostFocus
		ON KEY LABEL F2
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column5.txtAccount.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF 'closing' $ LOWER(THISFORM.caption)
		   RETURN .f.
		ELSE
		   RETURN .t.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column6.txtAmount.GotFocus
		IF DODEFAULT()
		   THISFORM.amtvalue = THIS.Value
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column6.txtAmount.LostFocus
		IF DODEFAULT()
		   IF THIS.VALUE = 0
		      IF MESSAGEBOX("A bill detail entry can't be zero. Do you want to delete this line?",36,'Delete Row?') = 6
		         THISFORM.cmdatamanager.DELETE('appurchd')
		         SELECT appurchd
		         GO BOTT
		         THISFORM.gridDetails.REFRESH()
		         GO TOP
		         THISFORM.txtcvendorID.SETFOCUS()
		         THISFORM.gridDetails.SETFOCUS()
		         THISFORM.txtcunitNo.SetFocus()
		      ELSE
		         THIS.set('value',THISFORM.amtvalue)
		         RETURN .F.
		      ENDIF
		   ENDIF
		   THISFORM.calctot()
		ENDIF
		
	ENDPROC

	PROCEDURE GridDetails.Column6.txtAmount.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF THISFORM.lpaid OR THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		   RETURN .f.
		ELSE 
		   RETURN .t.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column7.txtDeptno.GotFocus
		ON KEY LABEL F2 _screen.activeform.deptlookup()
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column7.txtDeptno.LostFocus
		ON KEY LABEL F2
		RETURN DODEFAULT()
	ENDPROC

	PROCEDURE GridDetails.Column7.txtDeptno.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		   RETURN .f.
		ELSE
		   RETURN .t.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column8.txtYear.Valid
		IF DODEFAULT()
		   IF NOT BETWEEN(THIS.VALUE,'1980','2030') AND NOT EmptyOrNull(THIS.Value)
		      WAIT WIND NOWAIT 'Invalid production year entered. Please correct.'
		      RETURN 0
		   ENDIF    
		ENDIF
	ENDPROC

	PROCEDURE GridDetails.Column8.txtYear.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF NOT EmptyOrNull(appurchd.ccatcode)
		   IF THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		      RETURN .f.
		   ELSE
		      RETURN .t.
		   ENDIF 
		ELSE
		   RETURN .f.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.Column9.txtPeriod.Valid
		IF DODEFAULT()
		   IF LEN(ALLTRIM(THIS.VALUE)) < 2
		      lcValue = PADL(ALLTRIM(THIS.VALUE),2,'0')
		      IF THIS.VALUE = '00'
		         lcValue = ''
		      ENDIF
		      THIS.set('value',lcValue)
		   ENDIF
		   IF NOT BETWEEN(THIS.VALUE,'01','12') AND NOT EmptyOrNull(THIS.VALUE)
		      WAIT WIND NOWAIT 'The period must be between 01 and 12., Please re-enter...'
		      RETURN 0
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE GridDetails.Column9.txtPeriod.When
		WITH THIS.Parent.Parent
		   .nrecno = RECNO( .RecordSource )
		ENDWITH 
		THIS.Refresh()
		IF NOT EmptyOrNull(appurchd.ccatcode)
		   IF THISFORM.caption = 'Enter Bills - Processed in Run Closing'
		      RETURN .f.
		   ELSE
		      RETURN .t.
		   ENDIF 
		ELSE
		   RETURN .f.
		ENDIF 
	ENDPROC

	PROCEDURE GridDetails.DblClick
		THISFORM.EditDetailLine()
	ENDPROC

	PROCEDURE lblPaid.Click
		THIS.Visible = .f.
		DODEFAULT()
	ENDPROC

	PROCEDURE txtafeno.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdAFENo.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtafeno.Valid
		IF DODEFAULT()
		   IF NOT EmptyOrNull(THIS.VALUE)
		      swselect('afehdr')
		      LOCATE FOR cafeno = THIS.VALUE AND cwellid = THISFORM.txtcunitNo.value
		      IF NOT FOUND()
		         MESSAGEBOX('This AFE No is not valid for well: ' + ALLTRIM(THISFORM.txtcUnitNo.VALUE) + ' Please choose a valid AFE.',0,'Invalid AFE')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtafeno.When
		RETURN THISFORM.lValidWell
	ENDPROC

	PROCEDURE txtcAcctDesc.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtcAcctNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCOA.Click()
		THISFORM.txtCacctdesc.Visible = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcAcctNo.InteractiveChange
		IF DODEFAULT()
		   swselect('coa')
		   LOCATE FOR cacctno == THIS.Value
		   IF FOUND()
		      THIS.Parent.txtcAcctDesc.set('value',coa.cacctdesc)
		   ELSE
		      THIS.Parent.txtcAcctDesc.set('value','')
		   ENDIF
		ENDIF
		      
		
	ENDPROC

	PROCEDURE txtcAcctNo.LostFocus
		ON KEY LABEL F2 *
		THISFORM.txtCacctdesc.Visible = .F.
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcAcctNo.Valid
		THISFORM.lWellRequired = .F.
		THISFORM.lDeptRequired = .F.
		
		IF NOT EmptyOrNull(THIS.VALUE)
		   swselect('coa')
		   SET ORDER TO acctno
		   IF SEEK(THIS.VALUE)
		      IF NOT lTitle AND NOT lTotalAcct
		         IF EmptyOrNull(THISFORM.txtcitemdesc.VALUE)
		            THISFORM.txtcItemDesc.VALUE = cAcctDesc
		            THISFORM.txtcItemDesc.REFRESH()
		         ENDIF
		         THISFORM.txtcAcctDesc.SET('value',coa.cAcctDesc)
		         THISFORM.lWellRequired = lAcctUnit
		         THISFORM.lDeptRequired = lAcctDept
		      ELSE
		         THISFORM.omessage.warning('You must use a detail account number. It cannot be a title or totaling account.')
		         RETURN 0
		      ENDIF
		      IF lBankAcct
		         THISFORM.oMessage.warning('A bank account cannot be used here. Use Cash Receipts or Disbursements or journal entries to transfer funds between accounts.')
		         RETURN 0
		      ENDIF 
		   ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCatCode.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookCat.Click()
		THISFORM.txtccatDesc.Visible = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcCatCode.InteractiveChange
		IF DODEFAULT()
		   swselect('expcat')
		   LOCATE FOR ccatcode == THIS.Value
		   IF FOUND()
		      THIS.Parent.txtccatDesc.set('value',expcat.ccateg)
		   ELSE
		      THIS.Parent.txtccatDesc.set('value','')
		   ENDIF
		ENDIF       
		    
	ENDPROC

	PROCEDURE txtcCatCode.LostFocus
		LOCAL odialog, lnbbl, lcdisp, lnLastKey
		ON KEY LABEL f2 *
		lnLastKey = LASTKEY()  &&  Store the last key, so if it's a tab or enter, we can set the cursor to the right field after returning from the brine lookup
		THISFORM.txtccatDesc.Visible = .F.
		WITH THISFORM
		
		   IF 'SALT'  $ UPPER(.txtccatdesc.VALUE) OR ;
		      'BRINE' $ UPPER(.txtccatdesc.VALUE) OR ;
		      'WATER' $ UPPER(.txtccatdesc.VALUE)
		      THISFORM.lnoclearext = .T.
		      *   .txtnSaltBBL.VALUE = THISFORM.oMessage.GetText('Enter the number of BBLs of water.  (4 digits max)','Amount of Water in BBL')
		         m.odialog = CREATEOBJECT('frmWaterDialog',.txtnsaltbbl.VALUE,.txtcdisperm.VALUE,.txtcdispcode.VALUE,.txtWasteCode.VALUE, !m.goapp.lPARpts)
		         m.odialog.SHOW()
		         lnbbl   = m.odialog.txtwaterbbl.VALUE
		         lcperm  = m.odialog.cbodisposal.VALUE
		         lcdisp  = m.odialog.cbodispcode.VALUE
		         lcWaste = m.odialog.cbowastecode.value
		         m.odialog.RELEASE()
		         .txtnsaltbbl.VALUE = lnbbl
		         .txtcdisperm.VALUE = lcperm
		         .txtWasteCode.value = lcWaste
		         .txtcdispcode.value = lcdisp
		
		      IF lnLastKey = 13 OR lnLastKey = 9  &&  Tab or enter, so set the cursor to the cboClass control
		         THISFORM.setnextcontrol(THISFORM.cboClass)
		      ENDIF 
		   ENDIF
		ENDWITH
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcCatCode.Valid
		DODEFAULT()
		
		swselect('afeopt')
		GO TOP
		llAllocexp = lAllocExp
		IF NOT EmptyOrNull(THIS.VALUE)
		   THISFORM.lValidWell = .T.
		   swselect('expcat')
		   SET ORDER TO ccatcode
		   IF SEEK(THIS.VALUE)
		* Look to see if the description matches an expense code description
		* If it does then change to the new expense code description
		* If it doesn't then they probably changed the description and we shouldn't
		      IF NOT USED('explookup')
		         USE expcat AGAIN IN 0 ALIAS explookup
		      ENDIF
		      SELECT explookup
		      SCAN
		         IF ccateg = ALLTRIM(THISFORM.txtcitemdesc.VALUE) AND NOT EmptyOrNull(THISFORM.txtcitemdesc.VALUE)
		            llfound = .T.  && Matches an expense code description
		            EXIT
		         ELSE
		            llfound = .F.
		         ENDIF
		      ENDSCAN
		      swclose('explookup')
		      SELECT expcat
		      IF EmptyOrNull(THISFORM.txtcitemdesc.VALUE) OR llfound
		         THISFORM.txtcitemdesc.VALUE = expcat.ccateg
		         THISFORM.txtcitemdesc.REFRESH()
		      ENDIF
		      IF expcat.cexpclass = 'P' OR expcat.ccatcode = 'PLUG'
		         MESSAGEBOX('The "PLUG" expense code is designated for the Plugging module ' + ;
		              'and cannot be processed on this window. Use the Fixed Expenses ' + ;
		              'or Well Expenses by Well (8/8th) window for any plugging fund ' + ;
		              'adjustments that need made.', 16, 'Plugging Expense')
		         RETURN 0
		      ENDIF
		
		      THISFORM.cboclass.VALUE = expcat.cexpclass
		      IF NOT lafetype OR llAllocexp
		         IF NOT EmptyOrNull(glopt.cexpclear)
		            IF NOT THISFORM.lInvestment AND NOT THISFORM.lJVPosting
		               THISFORM.txtcacctno.VALUE = glopt.cexpclear
		            ENDIF
		         ELSE
		            IF m.goApp.lAMVersion
		               THISFORM.omessage.warning('The expense clearing account must be chosen in G/L Preferences before allocating expenses to wells.')
		               RETURN
		            ENDIF
		         ENDIF
		
		* If it's an investment well, don't disable the posting account, so it can be changed, if desired - BH 04/21/08
		         IF THISFORM.lInvestment  OR THISFORM.lJVPosting
		            IF EmptyOrNull(THISFORM.txtcacctno.VALUE)
		* Only change the account if it's blank, which it should be after adding a detail line
		               THISFORM.txtcacctno.VALUE = expcat.cdraccto
		            ENDIF
		         ELSE
		            THISFORM.txtcacctno.lenabled = .F.
		         ENDIF
		         swselect('coa')
		         LOCATE FOR cacctno = THISFORM.txtcacctno.VALUE
		         IF FOUND()
		            THISFORM.txtcacctdesc.SET('value', coa.cacctdesc)
		         ELSE
		            THISFORM.txtcacctdesc.SET('value', 'Unknown')
		         ENDIF
		      ELSE  &&  Check to see whether there's an AFE account we need to fill in.
		         THISFORM.txtcacctno.lenabled = .T.
		         IF EmptyOrNull(THISFORM.txtcacctno.VALUE)
		            THISFORM.txtcacctno.SET('value', expcat.cdraccto)
		            swselect('coa')
		            LOCATE FOR cacctno = THISFORM.txtcacctno.VALUE
		            IF FOUND()
		               THISFORM.txtcacctdesc.SET('value', coa.cacctdesc)
		            ELSE
		               THISFORM.txtcacctdesc.SET('value', 'Unknown')
		            ENDIF
		         ENDIF
		         RETURN .T.
		      ENDIF
		   ENDIF
		ELSE
		   THISFORM.lValidWell          = .T.
		   THISFORM.txtccatDesc.VALUE   = ''
		   THISFORM.txtcacctno.lenabled = .T.
		   THISFORM.txtcacctno.VALUE    = ' '
		   IF LASTKEY() <> -1 &&  F2
		      IF NOT MDOWN()
		*         THISFORM.lValidWell = .f.
		      ENDIF
		   ENDIF
		ENDIF
		
		THISFORM.txtcacctno.REFRESH()
		THISFORM.cboclass.REQUERY()
		
		
		
		
	ENDPROC

	PROCEDURE txtcCatCode.When
		DODEFAULT()
		RETURN THISFORM.lValidWell
	ENDPROC

	PROCEDURE txtcCatDesc.When
		DODEFAULT()
		RETURN .F. 
	ENDPROC

	PROCEDURE txtCdeptdesc.When
		DODEFAULT()
		RETURN .F. 
	ENDPROC

	PROCEDURE txtcDeptNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookDept.Click()
		THISFORM.txtcdeptdesc.Visible = .T.
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcDeptNo.InteractiveChange
		IF DODEFAULT()
		   swselect('gldept')
		   LOCATE FOR cdeptno == THIS.value
		   IF FOUND()
		      THIS.Parent.txtcDeptDesc.set('value',gldept.cdeptdesc)
		   ELSE
		      THIS.Parent.txtcDeptDesc.set('value','')
		   ENDIF
		ENDIF
		      
		
	ENDPROC

	PROCEDURE txtcDeptNo.LostFocus
		ON KEY LABEL F2 *
		THISFORM.txtcdeptdesc.Visible = .F.
		IF NOT THISFORM.txtnExtension.Enabled AND NOT THISFORM.lValidWell  &&  If editing a paid bill and there's no well, we need to add the detail after this field
		   THISFORM.txtnExtension.GOTFOCUS()
		   THISFORM.txtnExtension.LOSTFOCUS()
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcDeptNo.Valid
		DODEFAULT()
		IF EmptyOrNull(THIS.VALUE)
		   IF NOT MDOWN()
		      IF THISFORM.lDeptRequired
		         THISFORM.omessage.DISPLAY('A valid department code is required when using this account no.')
		         RETURN 0
		      ENDIF
		   ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE txtCinvnum.LostFocus
		*
		*  Check for duplicate invoice numbers
		*
		IF THISFORM.cmdatamanager.isnew('Appurchh')
		   SELECT appurchh1
		   SET ORDER TO vendinv
		   IF SEEK(THISFORM.txtcVendorID.VALUE+THISFORM.txtcInvNum.VALUE) AND NOT EmptyOrNull(THIS.VALUE)
		      IF NOT THISFORM.oMessage.CONFIRM('This appears to be a duplicate invoice.  Do you want to continue?')
		         THISFORM.SetNextControl(THISFORM.txtcInvNum)
		      ENDIF
		   ENDIF
		ENDIF
		swselect('appurchh')
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.GotFocus
		ON KEY LABEL F2 _SCREEN.ACTIVEFORM.cmdLookOwner.CLICK()
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcOwnerID.LostFocus
		IF (LASTKEY() = 13 OR LASTKEY() = 9) AND not mDown()  &&  Tab or enter, but not a mouseclick
		   THISFORM.AddDetailLine()
		ENDIF
		
		ON KEY LABEL F2 *
		
	ENDPROC

	PROCEDURE txtcOwnerID.When
		RETURN NOT EmptyOrNull(THISFORM.txtccatCode.Value)
	ENDPROC

	PROCEDURE txtcProdPeriod.Valid
		IF NOT EmptyOrNull(THIS.VALUE)
		   THIS.VALUE = PADL(ALLTRIM(THIS.VALUE),2,'0')
		   IF NOT BETWEEN(THIS.VALUE,'01','12')
		      THISFORM.omessage.warning('Please enter a valid production period. The period must be between 01 and 12')
		      RETURN 0
		   ENDIF
		   IF EmptyOrNull(THISFORM.txtcprodyear.VALUE)
		      THISFORM.txtcprodyear.SET('value',ALLT(STR(YEAR(DATE()))))
		   ENDIF
		   THIS.REFRESH()
		ELSE
		   IF THISFORM.linvestment
		      THISFORM.omessage.warning('The given well is an investment well.  You must provide the production period for investment wells.')
		      RETURN 0
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtcProdPeriod.When
		RETURN NOT EmptyOrNull(THISFORM.txtccatCode.Value)
	ENDPROC

	PROCEDURE txtcProdYear.Valid
		IF DODEFAULT()
		   llReturn = .T.
		   IF NOT EmptyOrNull(THIS.Value)
		      llReturn = ValidateProdPeriod(THIS.Value, THISFORM.txtcprodPeriod.Value)
		   ELSE
		      THIS.set('value',TRANSFORM(YEAR(DATE())))
		   ENDIF 
		   RETURN IIF(llReturn,.T.,0)
		ENDIF
		
		
	ENDPROC

	PROCEDURE txtcProdYear.When
		RETURN NOT EmptyOrNull(THISFORM.txtccatCode.Value)
	ENDPROC

	PROCEDURE txtcUnitNo.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdLookUnit.Click()
		THISFORM.txtcwellName.Visible = .t.
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcUnitNo.InteractiveChange
		IF DODEFAULT()
		   SELECT allunits
		   LOCATE FOR cunitno == THIS.Value
		   IF FOUND()
		      THIS.Parent.txtcwellName.set('value',allunits.cname)
		   ELSE
		      THIS.Parent.txtcwellName.set('value','')
		   ENDIF
		ENDIF       
		    
	ENDPROC

	PROCEDURE txtcUnitNo.LostFocus
		ON KEY LABEL F2 *
		THISFORM.txtcwellName.Visible = .f.
		
		IF THISFORM.lInvestment OR NOT THISFORM.lvalidwell OR THISFORM.lJVPosting
		   IF NOT THISFORM.lJVPosting
		      THISFORM.cmdlookowner.visible = .F.
		      THISFORM.txtcownerid.visible  = .F.
		   ENDIF    
		   
		   THISFORM.txtcdispcode.visible = .f.
		   THISFORM.lblslash.Visible = .f.
		   
		ELSE   
		   THISFORM.cmdlookowner.visible = .T.
		   THISFORM.txtcownerid.visible  = .T.
		   THISFORM.txtcdispcode.visible = .f.
		   THISFORM.lblprodPeriod.Visible = .t.
		   THISFORM.lblslash.Visible = .t.
		   THISFORM.txtcprodPeriod.Visible = .t.
		   THISFORM.txtcprodYear.Visible = .t.
		ENDIF   
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcUnitNo.Valid
		LOCAL lnCount, llInActive
		
		IF NOT EmptyOrNull(THIS.VALUE)
		   IF THIS.Value = 'ALLOC '
		      llInactive = .F.
		      THISFORM.txtcownerID.Enabled = .t.
		      THISFORM.cmdLookOwner.Enabled = .t.
		      IF LEN(ALLTRIM(THIS.VALUE)) > 5
		         lcGroup = SUBSTR(THIS.VALUE,6,2)
		         swselect('groups')
		         LOCATE FOR cGroup = lcGroup
		         IF FOUND()
		            DO FORM dmselwells NAME selwells LINKED  WITH lcGroup
		            RELEASE selwells
		         ELSE
		            DO FORM dmselwells NAME selwells linked WITH '**'
		            RELEASE selwells
		         ENDIF
		      ELSE
		         DO FORM dmselwells NAME selwells LINKED WITH '**'
		         RELEASE selwells 
		      ENDIF
		      SELECT wellsel
		      COUNT FOR NOT DELETED() TO lnCount
		      
		      IF lnCount > 0
		         THISFORM.lValidWell = .T.
		         SELECT wellsel
		         SCAN
		            swselect('wells')
		            SET ORDER TO cwellid
		            IF SEEK(wellsel.cwellid) AND INLIST(wells.cWellStat,'I','S','P','V') AND NOT llInActive  &&  All non-active statuses except investment
		               IF wells.cWellStat = 'V'
		                  THISFORM.oMessage.Warning('You cannot choose an investment well when using the ALLOC function.  Well: ' + ALLTRIM(wells.cwellid) + ' is marked as an investment well.  No detail line will be added for it.')
		                  SELECT wellsel
		                  DELETE NEXT 1 
		                  EXIT
		               else               
		                  THISFORM.omessage.warning('One or more of the wells chosen to allocate are not active.  Those expenses will be sent to the allocation file.')
		                  llInactive = .t.
		                  THISFORM.lvalidwell = .t. 
		               ENDIF 
		            ENDIF
		         ENDSCAN
		         SELECT wellsel
		      ELSE
		         THISFORM.lValidWell = .F.
		      ENDIF
		      THISFORM.setnextcontrol(THISFORM.txtcCatCode)
		   ELSE
		      swselect('wells')
		      SET ORDER TO cwellid
		
		      IF SEEK(THIS.VALUE)
		         IF INLIST(wells.cWellStat,'I','S','P')  &&  All non-active statuses except investment
		            THISFORM.lValidWell = .t.
		            THISFORM.omessage.warning('This well is not an active well. Its expenses will be sent to the allocation file.')
		         ELSE
		            THISFORM.lValidWell = .T.
		            if wells.cWellStat = 'V'  &&  Investment well, so turn on the investment flag
		               THISFORM.lInvestment = .T.
		            else
		               THISFORM.lInvestment = .f.
		            endif
		         ENDIF
		      ELSE
		         swselect('land')
		         LOCATE FOR cleaseid = THIS.VALUE
		         IF FOUND()
		            THISFORM.lValidWell = .F.
		         ELSE
		            THISFORM.omessage.warning('The Well/Lease ID entered is not valid.  Please re-enter.')
		            RETURN 0
		         ENDIF
		      ENDIF
		   ENDIF
		ELSE
		   THISFORM.txtcacctno.lenabled = .t.
		   THISFORM.txtcAcctNo.Enabled  = .T.
		   *THISFORM.txtcAcctNo.set('value','')
		   *THISFORM.txtcAcctDesc.set('value','')
		   THISFORM.lValidWell = .F.
		   THIS.PARENT.txtcWellName.SET('value','')
		   THIS.Parent.txtccatCode.set('value','')  &&  Blank out exp cat, class, and year/period if no well is chosen
		   THIS.Parent.txtccatDesc.set('value','')
		   THIS.Parent.cboClass.set('value','')
		   THIS.Parent.txtcprodPeriod.set('value','')
		   THIS.Parent.txtcprodyear.set('value','')
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtCvendname.When
		DODEFAULT()
		RETURN .F.    
	ENDPROC

	PROCEDURE txtcVendorID.GotFocus
		ON KEY LABEL F2 _screen.activeform.cmdVendor.Click()
		DODEFAULT()
	ENDPROC

	PROCEDURE txtcVendorID.InteractiveChange
		IF DODEFAULT()
		   swselect('vendor')
		   LOCATE FOR cvendorid == THIS.value
		   IF FOUND() 
		      THISFORM.txtcVendName.SET('value',vendor.cvendname)
		   ELSE
		      THISFORM.txtcVendName.SET('value','')
		   ENDIF 
		ENDIF       
		   
		         
		
	ENDPROC

	PROCEDURE txtcVendorID.LostFocus
		ON KEY LABEL F2 *
		
		
	ENDPROC

	PROCEDURE txtcVendorID.Valid
		swselect('vendor')
		SET ORDER TO cvendorid
		IF SEEK(THIS.VALUE) AND THISFORM.isnew('Appurchh')  &&  Fill in the terms with the vendor's default
		   IF lHold  &&  Don't let them continue with a vendor marked to be on hold
		      THISFORM.oMessage.Warning('This vendor is on hold.  No bills can be entered for them.')
		      THIS.SET('value','')
		      RETURN 0
		   ENDIF
		   IF NOT EmptyOrNull(vendor.cidterm) AND vendor.cidterm <> THISFORM.cboTerms.VALUE
		      THISFORM.cboTerms.SET('value',vendor.cidterm)
		   ENDIF   
		ENDIF
		
		DODEFAULT()
		
	ENDPROC

	PROCEDURE txtcWellName.When
		RETURN .F.
	ENDPROC

	PROCEDURE txtdDiscDate.Valid
		IF DODEFAULT()
		  * We're good
		ELSE
		   RETURN 0
		ENDIF 
	ENDPROC

	PROCEDURE txtdDueDate.Valid
		IF DODEFAULT()
		  * We're good
		ELSE
		   RETURN 0
		ENDIF 
	ENDPROC

	PROCEDURE txtdInvDate.LostFocus
		
		IF DODEFAULT()
		   THISFORM.valterms()
		ENDIF 
	ENDPROC

	PROCEDURE txtdInvDate.Valid
		IF DODEFAULT()
		  * We're good
		ELSE
		   RETURN 0
		ENDIF 
	ENDPROC

	PROCEDURE txtdpostdate.LostFocus
		IF EmptyOrNull(THISFORM.txtdinvdate.value) AND THISFORM.txtdinvdate.value <> THIS.Value   &&  Only replace the invoice date if it's currently empty
		   THISFORM.txtdinvdate.set('value',THIS.Value)
		ENDIF    
		DODEFAULT()
	ENDPROC

	PROCEDURE txtdpostdate.Valid
		IF DODEFAULT()
		  * We're good
		ELSE
		   RETURN 0
		ENDIF 
	ENDPROC

	PROCEDURE txtnExtension.GotFocus
		THISFORM.cconfirmset = set('confirm')
		*set confirm on
		dodefault()
	ENDPROC

	PROCEDURE txtnExtension.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		*++
		* Key processing for text boxes
		*--
		  * Process incremental search characters if enabled for the parent grid.
		  IF THIS.lWriteLock AND BITTEST(THIS.nControlFlags, CTLFLAG_INGRID)
		    LOCAL oGrid
		    m.oGrid = THIS.Parent.Parent
		    IF PEMSTATUS(m.oGrid, 'lSearch', 5)
		      IF m.oGrid.lSearch
		        IF (m.nKeyCode > 0 AND CHR(m.nKeycode % 128) >= ' ' AND CHR(m.nKeycode %128) <= '~') ;
		        OR INLIST(m.nKeyCode, 7, 127)
		          m.oGrid.IncrementalSearch(CHR(m.nKeycode), THIS.Parent.ControlSource)
		          NODEFAULT
		          RETURN .T.
		        ENDIF
		      ENDIF
		    ENDIF
		  ENDIF
		
		  DO CASE
		    CASE m.nKeyCode = 27
		      THIS.lChanged = .F.                        && Escape resets data, so clear change flag to prevent validation
		      THIS.nControlFlags = BITSET(THIS.nControlFlags, CTLFLAG_ESCAPE) && Flag that we are processing an escape key press.
		
		    * Implement basic Copy & Paste in the control, for cases where no VFP menu is available.
		    CASE m.nShiftAltCtrl = 2 AND m.nKeyCode = 3  && Ctrl+C (Copy)
		      IF VARTYPE(THIS.Value) = 'C' AND THIS.SelLength > 0
		        _CLIPTEXT = TRIM(SUBSTR(THIS.Value, THIS.SelStart, THIS.SelLength))
		      ENDIF
		
		    CASE m.nKeyCode = 24                         && Down Arrow
		      IF BITTEST(THIS.nControlFlags, CTLFLAG_INGRID)
		        IF PEMSTATUS(THIS.Parent.Parent, 'AutoAppend', 5)
		          * Add a new record to the parent grid, if at the end.
		          IF NOT EmptyOrNull(THIS.Valid()) AND THIS.Parent.Parent.AutoAppend()
		            NODEFAULT
		          ENDIF
		        ENDIF
		      ENDIF
		
		    CASE m.nShiftAltCtrl <= 1 AND m.nKeyCode > 0 AND (m.nKeyCode % 128 >= ASC(' ') OR m.nKeyCode = 7)
		      * For data characters, check if changes are allowed before accepting the character.
		      * Any changes not caught here will be handled by THIS.InteractiveChange()
		      DO CASE
		        CASE VARTYPE(THIS.Value, .T.) $ 'C'
		          IF THIS.lChanged OR THIS.BeforeChange()
		            RETURN .T.
		          ENDIF
		        CASE VARTYPE(THIS.Value, .T.) = 'L'
		          IF UPPER(CHR(m.nKeyCode)) $ 'YNTF'
		            IF THIS.lChanged OR THIS.BeforeChange()
		              RETURN .T.
		            ENDIF
		          ENDIF
		        OTHERWISE
		          IF ((m.nKeyCode >= ASC('0') AND m.nKeyCode <= ASC('9')) ;
		          OR INLIST(m.nKeyCode, 7, 127, ASC('-'), ASC(SET('POINT')))) ;
		          OR (VARTYPE(THIS.Value, .T.) = 'T' AND UPPER(CHR(m.nKeyCode)) $ 'AMP') ;
		          OR m.nKeyCode = ASC('+') ;
		          OR m.nKeyCode = ASC('-') ;
		          OR m.nKeyCode = ASC('/') ;
		          OR m.nKeyCode = ASC('*')
		            IF THIS.lChanged OR THIS.BeforeChange()
		              RETURN .T.
		            ENDIF
		          ELSE
		            THISFORM.DisplayMessage('%msgDigitsOnly')
		          ENDIF
		      ENDCASE
		      NODEFAULT   && Ignore all invalid data characters
		
		    CASE m.nShiftAltCtrl = 0 AND m.nKeyCode = 22 && Insert mode toggle
		      =INSMODE(NOT INSMODE())
		      NODEFAULT
		
		    CASE m.nKeyCode = ASC('0') AND m.nShiftAltCtrl = 2
		      NODEFAULT
		      IF THIS.lAllowNull
		        IF THIS.BeforeChange()
		          THIS.SetValue(.NULL.)
		        ENDIF
		      ELSE
		        ??CHR(7)   && Ignore ctrl+0 keystrokes (prevent entering a .NULL. via keyboard).
		      ENDIF
		  ENDCASE
		  RETURN .T.
		
	ENDPROC

	PROCEDURE txtnExtension.LostFocus
		lcConfirm = THISFORM.cConfirmSet
		SET CONFIRM &lcConfirm
		
		IF NOT THISFORM.lvalidwell or (EmptyOrNull(ALLTRIM(THISFORM.txtcCatCode.Value)) AND THISFORM.lvalidwell)
		   *  Check to make sure the following keys were not pressed
		   *  F1 			= 28
		   *  Backspace 	= 127
		   *  Shift-Tab		= 15
		   *  Left Arrow	= 19
		   *  Up Arrow		= 5
		   IF LASTKEY() <> 28 AND ;
		         LASTKEY() <> 127 AND ;
		         LASTKEY() <> 15 AND ;
		         LASTKEY() <> 19 AND ;
		         LASTKEY() <> 5
		      THISFORM.AddDetailLine()
		   ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE txtnExtension.Valid
		
		lcValue = TRANSFORM(THIS.Value)
		IF '+' $ lcValue OR '/' $ lcValue OR '-' $ lcValue OR '*' $ lcValue
		   lnValue = &lcValue
		   THIS.set('Value',ROUND(lnValue,2))
		ENDIF 
		DODEFAULT()
	ENDPROC

	PROCEDURE txtNinvbal.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

	PROCEDURE txtNinvtot.When
		DODEFAULT()
		RETURN .F.
	ENDPROC

ENDDEFINE
