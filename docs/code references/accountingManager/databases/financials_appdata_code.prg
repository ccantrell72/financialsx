* *********************************************************
* *
* * 08/08/2025             APPDATA.DBC             14:12:35
* *
* *********************************************************
* *
* * Description:
* * This program was automatically generated by GENDBC
* * Version 2.26.67
* *
* *********************************************************


DisplayStatus([Creating database...])
CLOSE DATA ALL
CREATE DATABASE 'APPDATA.DBC'
DisplayStatus([Creating table AFEDET...])
MakeTable_AFEDET()
DisplayStatus([Creating table AFEHDR...])
MakeTable_AFEHDR()
DisplayStatus([Creating table AFEOPT...])
MakeTable_AFEOPT()
DisplayStatus([Creating table AFEOWNER...])
MakeTable_AFEOWNER()
DisplayStatus([Creating table AMI...])
MakeTable_AMI()
DisplayStatus([Creating table ANNPROD...])
MakeTable_ANNPROD()
DisplayStatus([Creating table APOPT...])
MakeTable_APOPT()
DisplayStatus([Creating table APPDATA_LOG...])
MakeTable_APPDATA_LOG()
DisplayStatus([Creating table APPDATA_LOG_K...])
MakeTable_APPDATA_LOG_K()
DisplayStatus([Creating table APPDATA_LOG_M...])
MakeTable_APPDATA_LOG_M()
DisplayStatus([Creating table APPMTDET...])
MakeTable_APPMTDET()
DisplayStatus([Creating table APPMTHDR...])
MakeTable_APPMTHDR()
DisplayStatus([Creating table APPREG01...])
MakeTable_APPREG01()
DisplayStatus([Creating table APPURCHH...])
MakeTable_APPURCHH()
DisplayStatus([Creating table APPURECD...])
MakeTable_APPURECD()
DisplayStatus([Creating table APPURECH...])
MakeTable_APPURECH()
DisplayStatus([Creating table AROPT...])
MakeTable_AROPT()
DisplayStatus([Creating table ARPMTDET...])
MakeTable_ARPMTDET()
DisplayStatus([Creating table ARPMTHDR...])
MakeTable_ARPMTHDR()
DisplayStatus([Creating table ASSETS...])
MakeTable_ASSETS()
DisplayStatus([Creating table AUDLINKS...])
MakeTable_AUDLINKS()
DisplayStatus([Creating table BRINELOG...])
MakeTable_BRINELOG()
DisplayStatus([Creating table CHECKBAL...])
MakeTable_CHECKBAL()
DisplayStatus([Creating table CHECKREC...])
MakeTable_CHECKREC()
DisplayStatus([Creating table CHECKS...])
MakeTable_CHECKS()
DisplayStatus([Creating table CHKCLEAR...])
MakeTable_CHKCLEAR()
DisplayStatus([Creating table COA...])
MakeTable_COA()
DisplayStatus([Creating table COABAL...])
MakeTable_COABAL()
DisplayStatus([Creating table COABALD...])
MakeTable_COABALD()
DisplayStatus([Creating table COABALU...])
MakeTable_COABALU()
DisplayStatus([Creating table CODR0021W...])
MakeTable_CODR0021W()
DisplayStatus([Creating table CODR0456...])
MakeTable_CODR0456()
DisplayStatus([Creating table CODR0461...])
MakeTable_CODR0461()
DisplayStatus([Creating table CSDISDET...])
MakeTable_CSDISDET()
DisplayStatus([Creating table CSDISHDR...])
MakeTable_CSDISHDR()
DisplayStatus([Creating table CSRCTDET...])
MakeTable_CSRCTDET()
DisplayStatus([Creating table CSRCTHDR...])
MakeTable_CSRCTHDR()
DisplayStatus([Creating table CUSTS...])
MakeTable_CUSTS()
DisplayStatus([Creating table DECLINE...])
MakeTable_DECLINE()
DisplayStatus([Creating table DEPLFILE...])
MakeTable_DEPLFILE()
DisplayStatus([Creating table DEPLSET...])
MakeTable_DEPLSET()
DisplayStatus([Creating table DEPOSITD...])
MakeTable_DEPOSITD()
DisplayStatus([Creating table DEPOSITS...])
MakeTable_DEPOSITS()
DisplayStatus([Creating table DISBHIST...])
MakeTable_DISBHIST()
DisplayStatus([Creating table DISPOSAL...])
MakeTable_DISPOSAL()
DisplayStatus([Creating table DOCUMENTS...])
MakeTable_DOCUMENTS()
DisplayStatus([Creating table DOICHANGES...])
MakeTable_DOICHANGES()
DisplayStatus([Creating table DOIDECKS...])
MakeTable_DOIDECKS()
DisplayStatus([Creating table EMPS...])
MakeTable_EMPS()
DisplayStatus([Creating table EXPCAT...])
MakeTable_EXPCAT()
DisplayStatus([Creating table FIELDS...])
MakeTable_FIELDS()
DisplayStatus([Creating table FINCHGS...])
MakeTable_FINCHGS()
DisplayStatus([Creating table FORM1065...])
MakeTable_FORM1065()
DisplayStatus([Creating table FORM1065B2...])
MakeTable_FORM1065B2()
DisplayStatus([Creating table FORM6...])
MakeTable_FORM6()
DisplayStatus([Creating table FORM6S...])
MakeTable_FORM6S()
DisplayStatus([Creating table FORMATIONS...])
MakeTable_FORMATIONS()
DisplayStatus([Creating table GASINV...])
MakeTable_GASINV()
DisplayStatus([Creating table GASOPT...])
MakeTable_GASOPT()
DisplayStatus([Creating table GASOWN...])
MakeTable_GASOWN()
DisplayStatus([Creating table GASUSE...])
MakeTable_GASUSE()
DisplayStatus([Creating table GLACCTYP...])
MakeTable_GLACCTYP()
DisplayStatus([Creating table GLBATCHES...])
MakeTable_GLBATCHES()
DisplayStatus([Creating table GLDEPT...])
MakeTable_GLDEPT()
DisplayStatus([Creating table GLJNDET...])
MakeTable_GLJNDET()
DisplayStatus([Creating table GLJOURN...])
MakeTable_GLJOURN()
DisplayStatus([Creating table GLMASTER...])
MakeTable_GLMASTER()
DisplayStatus([Creating table GLOPT...])
MakeTable_GLOPT()
DisplayStatus([Creating table GLRECUR...])
MakeTable_GLRECUR()
DisplayStatus([Creating table GLREDET...])
MakeTable_GLREDET()
DisplayStatus([Creating table GROUPS...])
MakeTable_GROUPS()
DisplayStatus([Creating table IMPORTBATCH...])
MakeTable_IMPORTBATCH()
DisplayStatus([Creating table IMPORTDEFS...])
MakeTable_IMPORTDEFS()
DisplayStatus([Creating table IMPORTEXPLAIN...])
MakeTable_IMPORTEXPLAIN()
DisplayStatus([Creating table IMPORTMAP...])
MakeTable_IMPORTMAP()
DisplayStatus([Creating table IMPORTTYPES...])
MakeTable_IMPORTTYPES()
DisplayStatus([Creating table INTEGRATORS...])
MakeTable_INTEGRATORS()
DisplayStatus([Creating table INVDET...])
MakeTable_INVDET()
DisplayStatus([Creating table INVESTOR...])
MakeTable_INVESTOR()
DisplayStatus([Creating table INVHDR...])
MakeTable_INVHDR()
DisplayStatus([Creating table INVRECD...])
MakeTable_INVRECD()
DisplayStatus([Creating table INVRECH...])
MakeTable_INVRECH()
DisplayStatus([Creating table INVTRANS...])
MakeTable_INVTRANS()
DisplayStatus([Creating table ITEMS...])
MakeTable_ITEMS()
DisplayStatus([Creating table K1DEDUCTS...])
MakeTable_K1DEDUCTS()
DisplayStatus([Creating table K1FILE...])
MakeTable_K1FILE()
DisplayStatus([Creating table LAND...])
MakeTable_LAND()
DisplayStatus([Creating table LANDAMI...])
MakeTable_LANDAMI()
DisplayStatus([Creating table LANDFORM...])
MakeTable_LANDFORM()
DisplayStatus([Creating table LANDHIST...])
MakeTable_LANDHIST()
DisplayStatus([Creating table LANDOPT...])
MakeTable_LANDOPT()
DisplayStatus([Creating table LANDOWNER...])
MakeTable_LANDOWNER()
DisplayStatus([Creating table LEASEAUDIT...])
MakeTable_LEASEAUDIT()
DisplayStatus([Creating table LEASEPROG...])
MakeTable_LEASEPROG()
DisplayStatus([Creating table LEASES...])
MakeTable_LEASES()
DisplayStatus([Creating table LEASEWELL...])
MakeTable_LEASEWELL()
DisplayStatus([Creating table MENUPADS...])
MakeTable_MENUPADS()
DisplayStatus([Creating table METERALL...])
MakeTable_METERALL()
DisplayStatus([Creating table METERDATA...])
MakeTable_METERDATA()
DisplayStatus([Creating table METERS...])
MakeTable_METERS()
DisplayStatus([Creating table METERSUB...])
MakeTable_METERSUB()
DisplayStatus([Creating table MICRDATA...])
MakeTable_MICRDATA()
DisplayStatus([Creating table NICKNAME...])
MakeTable_NICKNAME()
DisplayStatus([Creating table NOTES...])
MakeTable_NOTES()
DisplayStatus([Creating table ONE_MAN_TAX...])
MakeTable_ONE_MAN_TAX()
DisplayStatus([Creating table OPERATOR...])
MakeTable_OPERATOR()
DisplayStatus([Creating table OPTIONS...])
MakeTable_OPTIONS()
DisplayStatus([Creating table OTHNAMES...])
MakeTable_OTHNAMES()
DisplayStatus([Creating table OWNHISTOLD...])
MakeTable_OWNHISTOLD()
DisplayStatus([Creating table OWNPCTS...])
MakeTable_OWNPCTS()
DisplayStatus([Creating table OWNPCTSOLD...])
MakeTable_OWNPCTSOLD()
DisplayStatus([Creating table OWNTOTS...])
MakeTable_OWNTOTS()
DisplayStatus([Creating table PLUGOWNER...])
MakeTable_PLUGOWNER()
DisplayStatus([Creating table PLUGWELL...])
MakeTable_PLUGWELL()
DisplayStatus([Creating table PLUGWELLBAL...])
MakeTable_PLUGWELLBAL()
DisplayStatus([Creating table PRCODEF...])
MakeTable_PRCODEF()
DisplayStatus([Creating table PRCODES...])
MakeTable_PRCODES()
DisplayStatus([Creating table PRDATA...])
MakeTable_PRDATA()
DisplayStatus([Creating table PREMPTAX...])
MakeTable_PREMPTAX()
DisplayStatus([Creating table PREPAYD...])
MakeTable_PREPAYD()
DisplayStatus([Creating table PREPAYH...])
MakeTable_PREPAYH()
DisplayStatus([Creating table PROGHSTD...])
MakeTable_PROGHSTD()
DisplayStatus([Creating table PROGHSTH...])
MakeTable_PROGHSTH()
DisplayStatus([Creating table PROGOPT...])
MakeTable_PROGOPT()
DisplayStatus([Creating table PROGRAMS...])
MakeTable_PROGRAMS()
DisplayStatus([Creating table PROGREL...])
MakeTable_PROGREL()
DisplayStatus([Creating table PROPT...])
MakeTable_PROPT()
DisplayStatus([Creating table PRSUTA...])
MakeTable_PRSUTA()
DisplayStatus([Creating table PRTAXES...])
MakeTable_PRTAXES()
DisplayStatus([Creating table PRW2FILE...])
MakeTable_PRW2FILE()
DisplayStatus([Creating table RECONSAV...])
MakeTable_RECONSAV()
DisplayStatus([Creating table REVCAT...])
MakeTable_REVCAT()
DisplayStatus([Creating table REVSRC...])
MakeTable_REVSRC()
DisplayStatus([Creating table ROUNDTMP...])
MakeTable_ROUNDTMP()
DisplayStatus([Creating table RUNCLOSE...])
MakeTable_RUNCLOSE()
DisplayStatus([Creating table SALESTX...])
MakeTable_SALESTX()
DisplayStatus([Creating table SETTLEMENTNOTES...])
MakeTable_SETTLEMENTNOTES()
DisplayStatus([Creating table SEVTAX...])
MakeTable_SEVTAX()
DisplayStatus([Creating table STATEACCOUNTS...])
MakeTable_STATEACCOUNTS()
DisplayStatus([Creating table STMTNOTE...])
MakeTable_STMTNOTE()
DisplayStatus([Creating table STMTONE1065...])
MakeTable_STMTONE1065()
DisplayStatus([Creating table SUSAUDIT...])
MakeTable_SUSAUDIT()
DisplayStatus([Creating table SUSPENSE...])
MakeTable_SUSPENSE()
DisplayStatus([Creating table SUSPPCTS...])
MakeTable_SUSPPCTS()
DisplayStatus([Creating table SUSPREASONS...])
MakeTable_SUSPREASONS()
DisplayStatus([Creating table SYSCTL...])
MakeTable_SYSCTL()
DisplayStatus([Creating table SYSTEM_EMAIL...])
MakeTable_SYSTEM_EMAIL()
DisplayStatus([Creating table TANKS...])
MakeTable_TANKS()
DisplayStatus([Creating table TAX1099...])
MakeTable_TAX1099()
DisplayStatus([Creating table TAX1099CORRECTIONS...])
MakeTable_TAX1099CORRECTIONS()
DisplayStatus([Creating table TAX1099DET...])
MakeTable_TAX1099DET()
DisplayStatus([Creating table TAX1099STATES...])
MakeTable_TAX1099STATES()
DisplayStatus([Creating table TAXCODES...])
MakeTable_TAXCODES()
DisplayStatus([Creating table TERMS...])
MakeTable_TERMS()
DisplayStatus([Creating table TRANGROUP...])
MakeTable_TRANGROUP()
DisplayStatus([Creating table TRUCKS...])
MakeTable_TRUCKS()
DisplayStatus([Creating table TXRRCDATA...])
MakeTable_TXRRCDATA()
DisplayStatus([Creating table VENDEXP...])
MakeTable_VENDEXP()
DisplayStatus([Creating table VENDOR...])
MakeTable_VENDOR()
DisplayStatus([Creating table WELLHIST...])
MakeTable_WELLHIST()
DisplayStatus([Creating table WELLINV...])
MakeTable_WELLINV()
DisplayStatus([Creating table WELLS...])
MakeTable_WELLS()
DisplayStatus([Creating table WELLTOTS...])
MakeTable_WELLTOTS()
DisplayStatus([Creating table WORKORD...])
MakeTable_WORKORD()
DisplayStatus([Creating table MPLHIST...])
MakeTable_MPLHIST()
DisplayStatus([Creating table MPLOPT...])
MakeTable_MPLOPT()
DisplayStatus([Creating table MPLTRANS...])
MakeTable_MPLTRANS()
DisplayStatus([Creating table MPLUNITS...])
MakeTable_MPLUNITS()
DisplayStatus([Creating table P18FORMP1...])
MakeTable_P18FORMP1()
DisplayStatus([Creating table P18FORMP2...])
MakeTable_P18FORMP2()
DisplayStatus([Creating table P18GATHERSYS...])
MakeTable_P18GATHERSYS()
DisplayStatus([Creating table P18PROPERTIES...])
MakeTable_P18PROPERTIES()
DisplayStatus([Creating table PURCHASERMAP...])
MakeTable_PURCHASERMAP()
DisplayStatus([Creating table BRINEINJECTION...])
MakeTable_BRINEINJECTION()
DisplayStatus([Creating table NELCOBATCHES...])
MakeTable_NELCOBATCHES()
DisplayStatus([Creating table TAXBANDIT1099...])
MakeTable_TAXBANDIT1099()
DisplayStatus([Creating table EMAILLOG...])
MakeTable_EMAILLOG()
DisplayStatus([Creating table VERSION...])
MakeTable_VERSION()
DisplayStatus([Creating table PUMPERS...])
MakeTable_PUMPERS()
DisplayStatus([Creating table TAX1099ST...])
MakeTable_TAX1099ST()
DisplayStatus([Creating table EXPENSE...])
MakeTable_EXPENSE()
DisplayStatus([Creating table INCOME...])
MakeTable_INCOME()
DisplayStatus([Creating table EXPSUSP...])
MakeTable_EXPSUSP()
DisplayStatus([Creating table INCSUSP...])
MakeTable_INCSUSP()
DisplayStatus([Creating table CASHEXPENSES...])
MakeTable_CASHEXPENSES()
DisplayStatus([Creating table CASHTRANSFERS...])
MakeTable_CASHTRANSFERS()
DisplayStatus([Creating table APPURCHD...])
MakeTable_APPURCHD()
DisplayStatus([Creating table TINMATCHING...])
MakeTable_TINMATCHING()
DisplayStatus([Creating view AROUTINV...])
MakeView_AROUTINV()
DisplayStatus([Creating view BATCHES...])
MakeView_BATCHES()
DisplayStatus([Creating view DEDVIEW...])
MakeView_DEDVIEW()
DisplayStatus([Creating view GLBATCH...])
MakeView_GLBATCH()
DisplayStatus([Creating view INCVIEW...])
MakeView_INCVIEW()
DisplayStatus([Creating view TAXVIEW...])
MakeView_TAXVIEW()
DisplayStatus([Creating view WELLS_ATTACHED_TO_MASTER_METER...])
MakeView_WELLS_ATTACHED_TO_MASTER_METER()
DisplayStatus([Creating view ALLUNITS...])
MakeView_ALLUNITS()
DisplayStatus([Creating view CUSTVEND...])
MakeView_CUSTVEND()
DisplayStatus([Creating view CUSTOWNVEND...])
MakeView_CUSTOWNVEND()
DisplayStatus([Creating view WELLEXP...])
MakeView_WELLEXP()
DisplayStatus([Creating view WELLEXPJ...])
MakeView_WELLEXPJ()
DisplayStatus([Creating view WELLFIXED...])
MakeView_WELLFIXED()
DisplayStatus([Creating view WELLREV...])
MakeView_WELLREV()
DisplayStatus([Creating view OWNHIST...])
MakeView_OWNHIST()
DisplayStatus([Creating view UNCLEARED_CHECKS...])
MakeView_UNCLEARED_CHECKS()
DisplayStatus([Creating view UNCLEARED_CHECKSD...])
MakeView_UNCLEARED_CHECKSD()
DisplayStatus([Creating view APINVOUTD...])
MakeView_APINVOUTD()
DisplayStatus([Creating view APINVOUTDD...])
MakeView_APINVOUTDD()
DisplayStatus([Creating view APINVOUTV...])
MakeView_APINVOUTV()
DisplayStatus([Creating view APVENDCHK...])
MakeView_APVENDCHK()
DisplayStatus([Creating view EXPBYVENDOR...])
MakeView_EXPBYVENDOR()
DisplayStatus([Creating view PAYVEND...])
MakeView_PAYVEND()
DisplayStatus([Creating view DOI_AC...])
MakeView_DOI_AC()
DisplayStatus([Creating view DOI_AP...])
MakeView_DOI_AP()
DisplayStatus([Creating view DOI_BC...])
MakeView_DOI_BC()
DisplayStatus([Creating view DOI_DC...])
MakeView_DOI_DC()
DisplayStatus([Creating view DOI_E1...])
MakeView_DOI_E1()
DisplayStatus([Creating view DOI_E2...])
MakeView_DOI_E2()
DisplayStatus([Creating view DOI_E3...])
MakeView_DOI_E3()
DisplayStatus([Creating view DOI_E4...])
MakeView_DOI_E4()
DisplayStatus([Creating view DOI_E5...])
MakeView_DOI_E5()
DisplayStatus([Creating view DOI_GR...])
MakeView_DOI_GR()
DisplayStatus([Creating view DOI_GT1...])
MakeView_DOI_GT1()
DisplayStatus([Creating view DOI_GT2...])
MakeView_DOI_GT2()
DisplayStatus([Creating view DOI_GT3...])
MakeView_DOI_GT3()
DisplayStatus([Creating view DOI_GT4...])
MakeView_DOI_GT4()
DisplayStatus([Creating view DOI_M1...])
MakeView_DOI_M1()
DisplayStatus([Creating view DOI_M2...])
MakeView_DOI_M2()
DisplayStatus([Creating view DOI_OP...])
MakeView_DOI_OP()
DisplayStatus([Creating view DOI_OR...])
MakeView_DOI_OR()
DisplayStatus([Creating view DOI_OT1...])
MakeView_DOI_OT1()
DisplayStatus([Creating view DOI_OT2...])
MakeView_DOI_OT2()
DisplayStatus([Creating view DOI_OT3...])
MakeView_DOI_OT3()
DisplayStatus([Creating view DOI_OT4...])
MakeView_DOI_OT4()
DisplayStatus([Creating view DOI_OWN...])
MakeView_DOI_OWN()
DisplayStatus([Creating view DOI_PLG...])
MakeView_DOI_PLG()
DisplayStatus([Creating view DOI_PT1...])
MakeView_DOI_PT1()
DisplayStatus([Creating view DOI_PT2...])
MakeView_DOI_PT2()
DisplayStatus([Creating view DOI_PT3...])
MakeView_DOI_PT3()
DisplayStatus([Creating view DOI_PT4...])
MakeView_DOI_PT4()
DisplayStatus([Creating view DOI_TR...])
MakeView_DOI_TR()
DisplayStatus([Creating view PROGOWNERS...])
MakeView_PROGOWNERS()
DisplayStatus([Creating view PROGRAM_PCTS...])
MakeView_PROGRAM_PCTS()
DisplayStatus([Creating view WELL OWNERS...])
MakeView_WELL_OWNERS()
DisplayStatus([Creating view OWNERS_WELLS...])
MakeView_OWNERS_WELLS()
DisplayStatus([Creating view CUSTOWN...])
MakeView_CUSTOWN()
DisplayStatus([Creating view NAMELOOKUP1...])
MakeView_NAMELOOKUP1()
DisplayStatus([Creating view NAMELOOKUP...])
MakeView_NAMELOOKUP()
DisplayStatus([Creating view AFE_COSTS...])
MakeView_AFE_COSTS()
DisplayStatus([Creating view PREPAYVIEW...])
MakeView_PREPAYVIEW()
DisplayStatus([Creating view CHECKREGISTER...])
MakeView_CHECKREGISTER()
DisplayStatus([Creating persistent relations...])
MakeRelation_1()
MakeRelation_2()
MakeRelation_3()
MakeRelation_4()
MakeRelation_5()
MakeRelation_6()
MakeRelation_7()
MakeRelation_8()
MakeRelation_9()
MakeRelation_10()
MakeRelation_11()
MakeRelation_12()
MakeRelation_13()
MakeRelation_14()
MakeRelation_15()
MakeRelation_16()
MakeRelation_17()
MakeRelation_18()
MakeRelation_19()
MakeRelation_20()
MakeRelation_21()
MakeRelation_22()
MakeRelation_23()
MakeRelation_24()
MakeRelation_25()
MakeRelation_26()
MakeRelation_27()
MakeRelation_28()
MakeRelation_29()
MakeRelation_30()
MakeRelation_31()
MakeRelation_32()
MakeRelation_33()
MakeRelation_34()
MakeRelation_35()
MakeRelation_36()
MakeRelation_37()
MakeRelation_38()
MakeRelation_39()
MakeRelation_40()
MakeRelation_41()
MakeRelation_42()
MakeRelation_43()
MakeRelation_44()
MakeRelation_45()
MakeRelation_46()
MakeRelation_47()
MakeRelation_48()
MakeRelation_49()
MakeRelation_50()
MakeRelation_51()
MakeRelation_52()
MakeRelation_53()
MakeRelation_54()
MakeRelation_55()
MakeRelation_56()
MakeRelation_57()
MakeRelation_58()
MakeRelation_59()
MakeRelation_60()
MakeRelation_61()
MakeRelation_62()
MakeRelation_63()
MakeRelation_64()
MakeRelation_65()
MakeRelation_66()
MakeRelation_67()
MakeRelation_68()
MakeRelation_69()
MakeRelation_70()
MakeRelation_71()
MakeRelation_72()
MakeRelation_73()
MakeRelation_74()
MakeRelation_75()
MakeRelation_76()
MakeRelation_77()
MakeRelation_78()
MakeRelation_79()
MakeRelation_80()
MakeRelation_81()
MakeRelation_82()
MakeRelation_83()
MakeRelation_84()
MakeRelation_85()
MakeRelation_86()
MakeRelation_87()
MakeRelation_88()
MakeRelation_89()
MakeRelation_90()
MakeRelation_91()
MakeRelation_92()
MakeRelation_93()
MakeRelation_94()
MakeRelation_95()
MakeRelation_96()
MakeRelation_97()
MakeRelation_98()
MakeRelation_99()
MakeRelation_100()
MakeRelation_101()
MakeRelation_102()
MakeRelation_103()
MakeRelation_104()
MakeRelation_105()
MakeRelation_106()
MakeRelation_107()
MakeRelation_108()
MakeRelation_109()
MakeRelation_110()
MakeRelation_111()
MakeRelation_112()
MakeRelation_113()
MakeRelation_114()
MakeRelation_115()
MakeRelation_116()
MakeRelation_117()
MakeRelation_118()
MakeRelation_119()
MakeRelation_120()
MakeRelation_121()
MakeRelation_122()
DisplayStatus([Creating relational integrity rules...])
MakeRI()
DisplayStatus([Finished.])


********* Procedure Re-Creation *********
IF !FILE([FINANCIALS_APPDATA_CODE.krt])
    ? [Warning! No Procedure File Found!]
ELSE
	CLOSE DATABASE
	USE 'APPDATA.DBC'
	g_SetSafety = SET('SAFETY')
	SET SAFETY OFF
	LOCATE FOR Objectname = 'StoredProceduresSource'
	IF FOUND()
        APPEND MEMO Code FROM [FINANCIALS_APPDATA_CODE.krt] OVERWRITE
	    REPLACE Code WITH SUBSTR(Code, 70, 242050)
	ENDIF
	LOCATE FOR Objectname = 'StoredProceduresObject'
	IF FOUND()
        APPEND MEMO Code FROM [FINANCIALS_APPDATA_CODE.krt] OVERWRITE
        REPLACE Code WITH SUBSTR(Code, 242120)
	ENDIF
    SET SAFETY &g_SetSafety
	USE
	OPEN DATABASE [APPDATA.DBC]
ENDIF

FUNCTION MakeTable_AFEDET
***** Table setup for AFEDET *****
CREATE TABLE 'AFEDET.DBF' NAME 'AFEDET' (CIDAFED C(8) NOT NULL, ;
                     CIDAFEH C(8) NOT NULL, ;
                     CCATCODE C(4) NOT NULL, ;
                     NESTCOST N(12, 2) NOT NULL, ;
                     NACTCOST N(12, 2) NOT NULL, ;
                     NVARIANCE N(12, 2) NOT NULL)

***** Create each index for AFEDET *****
ALTER TABLE 'AFEDET' ADD PRIMARY KEY CIDAFED TAG CIDAFED COLLATE 'MACHINE'
INDEX ON CIDAFEH TAG CIDAFEH COLLATE 'MACHINE'
INDEX ON CCATCODE TAG CCATCODE COLLATE 'MACHINE'

***** Change properties for AFEDET *****
DBSETPROP('AFEDET.CIDAFED', 'Field', 'Caption', "Primary Key")
DBSETPROP('AFEDET.CIDAFEH', 'Field', 'Caption', "Header Foreign Key")
DBSETPROP('AFEDET.CCATCODE', 'Field', 'Caption', "Category Code")
DBSETPROP('AFEDET.NESTCOST', 'Field', 'Caption', "Estimated Cost")
DBSETPROP('AFEDET.NACTCOST', 'Field', 'Caption', "Actual Cost")
DBSETPROP('AFEDET.NVARIANCE', 'Field', 'Caption', "Variance")
CREATE TRIGGER ON 'AFEDET' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'AFEDET' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'AFEDET' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_AFEHDR
***** Table setup for AFEHDR *****
CREATE TABLE 'AFEHDR.DBF' NAME 'AFEHDR' (CIDAFEH C(8) NOT NULL, ;
                     CAFENO C(10) NOT NULL, ;
                     DAFEDATE D NOT NULL, ;
                     CWELLID C(10) NOT NULL, ;
                     DDRILLDATE D NOT NULL, ;
                     NESTTOTAL N(12, 2) NOT NULL, ;
                     NEXPOPTION I NOT NULL, ;
                     MREMARKS M NOT NULL, ;
                     NACTTOTAL N(12, 2) NOT NULL, ;
                     NVARTOTAL N(12, 2) NOT NULL, ;
                     CPROGCODE C(10) NOT NULL, ;
                     DCOMPDATE D NOT NULL, ;
                     LCLOSED L NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for AFEHDR *****
INDEX ON CAFENO TAG CAFENO COLLATE 'MACHINE'
ALTER TABLE 'AFEHDR' ADD PRIMARY KEY CIDAFEH TAG CIDAFEH COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'

***** Change properties for AFEHDR *****
DBSETPROP('AFEHDR.CIDAFEH', 'Field', 'Caption', "Primary Key")
DBSETPROP('AFEHDR.CAFENO', 'Field', 'Caption', "AFE Number")
DBSETPROP('AFEHDR.DAFEDATE', 'Field', 'Caption', "AFE Date")
DBSETPROP('AFEHDR.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('AFEHDR.DDRILLDATE', 'Field', 'Caption', "Drilling Date")
DBSETPROP('AFEHDR.NESTTOTAL', 'Field', 'Caption', "Estimated Total")
DBSETPROP('AFEHDR.NEXPOPTION', 'Field', 'Caption', "Expense Option")
DBSETPROP('AFEHDR.MREMARKS', 'Field', 'Caption', "Remarks")
DBSETPROP('AFEHDR.NACTTOTAL', 'Field', 'Caption', "Actual Total")
DBSETPROP('AFEHDR.NVARTOTAL', 'Field', 'Caption', "Variance Total")
DBSETPROP('AFEHDR.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('AFEHDR.DCOMPDATE', 'Field', 'Caption', "Completion Date")
DBSETPROP('AFEHDR.LCLOSED', 'Field', 'Caption', "AFE Closed")
DBSETPROP('AFEHDR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('AFEHDR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('AFEHDR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('AFEHDR.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('AFEHDR', 'Table', 'Comment', "Header File for AFE definitions." + CHR(13) + "Each AFE has one header record and multiple detail (afedet) records." + CHR(13) + "The tables are related on key cidafeh.")
CREATE TRIGGER ON 'AFEHDR' FOR DELETE AS __ri_delete_afehdr().AND.(foxaudit())
CREATE TRIGGER ON 'AFEHDR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'AFEHDR' FOR UPDATE AS __ri_update_afehdr().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_AFEOPT
***** Table setup for AFEOPT *****
CREATE TABLE 'AFEOPT.DBF' NAME 'AFEOPT' (PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                     NCOSTPLUS N(8, 4) NOT NULL, ;
                     NLOCATIONFEE N(12, 2) NOT NULL, ;
                     CAFERCV C(6) NOT NULL, ;
                     LALLOCEXP L NOT NULL)

***** Create each index for AFEOPT *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for AFEOPT *****
ENDFUNC

FUNCTION MakeTable_AFEOWNER
***** Table setup for AFEOWNER *****
CREATE TABLE 'AFEOWNER.DBF' NAME 'AFEOWNER' (CIDAFEO C(8) NOT NULL, ;
                       CAFENO C(10) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       NWORKINT N(11, 7) NOT NULL, ;
                       CCATCODE C(4) NOT NULL, ;
                       NSHARE N(12, 2) NOT NULL)

***** Create each index for AFEOWNER *****
ALTER TABLE 'AFEOWNER' ADD PRIMARY KEY CIDAFEO TAG CIDAFEO COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CCATCODE TAG CCATCODE COLLATE 'MACHINE'

***** Change properties for AFEOWNER *****
DBSETPROP('AFEOWNER.CIDAFEO', 'Field', 'Caption', "Primary Key")
DBSETPROP('AFEOWNER.CAFENO', 'Field', 'Caption', "AFE No")
DBSETPROP('AFEOWNER.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('AFEOWNER.NWORKINT', 'Field', 'Caption', "Working Interest")
DBSETPROP('AFEOWNER.CCATCODE', 'Field', 'Caption', "AFE Cat Code")
DBSETPROP('AFEOWNER.NSHARE', 'Field', 'Caption', "Owner Share")
CREATE TRIGGER ON 'AFEOWNER' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'AFEOWNER' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'AFEOWNER' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_AMI
***** Table setup for AMI *****
CREATE TABLE 'AMI.DBF' NAME 'AMI' (IAMIPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                  CNAME C(40) NOT NULL, ;
                  CADDRESS1 C(40) NOT NULL, ;
                  CCITY C(25) NOT NULL, ;
                  CSTATE C(2) NOT NULL, ;
                  CZIP C(10) NOT NULL, ;
                  CCONTACT C(60) NOT NULL, ;
                  CPHONE C(15) NOT NULL, ;
                  CEMAIL V(128) NOT NULL)

***** Create each index for AMI *****
INDEX ON CNAME TAG CNAME COLLATE 'MACHINE'
ALTER TABLE 'AMI' ADD PRIMARY KEY IAMIPK TAG PK COLLATE 'MACHINE'

***** Change properties for AMI *****
DBSETPROP('AMI.IAMIPK', 'Field', 'Caption', "PK")
DBSETPROP('AMI.CNAME', 'Field', 'Caption', "Name")
DBSETPROP('AMI.CADDRESS1', 'Field', 'Caption', "Address")
DBSETPROP('AMI.CCITY', 'Field', 'Caption', "City")
DBSETPROP('AMI.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('AMI.CZIP', 'Field', 'Caption', "Zip Code")
DBSETPROP('AMI.CCONTACT', 'Field', 'Caption', "Contact Name")
DBSETPROP('AMI.CPHONE', 'Field', 'Caption', "Phone Number")
DBSETPROP('AMI.CEMAIL', 'Field', 'Caption', "Email Address")
CREATE TRIGGER ON 'AMI' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'AMI' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'AMI' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_ANNPROD
***** Table setup for ANNPROD *****
CREATE TABLE 'ANNPROD.DBF' NAME 'ANNPROD' (CIDANNP C(8) NOT NULL, ;
                      CYEAR C(4) NOT NULL, ;
                      CWELLID C(10) NOT NULL, ;
                      CWELLNAME C(30) NOT NULL, ;
                      CWELLSTATE C(2) NOT NULL, ;
                      CWELLSTATUS C(2) NOT NULL, ;
                      NWELLCOUNT N(5, 0) NOT NULL, ;
                      CPERMIT C(20) NOT NULL, ;
                      CCOUNTY C(25) NOT NULL, ;
                      CTOWNSHIP C(25) NOT NULL, ;
                      CPARCEL C(30) NOT NULL, ;
                      NACRES N(12, 2) NOT NULL, ;
                      NOILBBL I NOT NULL, ;
                      NGASMCF I NOT NULL, ;
                      NMONTHS I NOT NULL, ;
                      NDAYSON I NOT NULL, ;
                      NSALTBBL I NOT NULL, ;
                      COWNERNO C(10) NOT NULL, ;
                      CREVBBL C(8) NOT NULL, ;
                      CREVMCF C(6) NOT NULL, ;
                      CPRODUCER C(40) NOT NULL, ;
                      CAGENT C(40) NOT NULL, ;
                      CADDRESS C(40) NOT NULL, ;
                      CCITY C(25) NOT NULL, ;
                      CSTATE C(2) NOT NULL, ;
                      CZIP C(10) NOT NULL, ;
                      CCONTACT C(40) NOT NULL, ;
                      CFIELD C(30) NOT NULL, ;
                      CFORMATION C(30) NOT NULL, ;
                      CMETERID C(8) NOT NULL, ;
                      CTELEPHONE C(15) NOT NULL, ;
                      CFACILITY C(20) NOT NULL, ;
                      CFACPERMIT C(10) NOT NULL, ;
                      CNRA C(20) NOT NULL, ;
                      CRPTGROUP C(1) NOT NULL, ;
                      CTAXID C(20) NOT NULL, ;
                      CTAXYEAR C(4) NOT NULL, ;
                      NOILINC N(12, 2) NOT NULL, ;
                      NGASINC N(12, 2) NOT NULL, ;
                      NWORKGAS N(12, 2) NOT NULL, ;
                      NWORKOIL N(12, 2) NOT NULL, ;
                      CPRODYR C(4) NOT NULL, ;
                      LHOUSEGAS L NOT NULL, ;
                      CSECTION C(10) NOT NULL, ;
                      CLOT C(4) NOT NULL, ;
                      CWASTECODE C(5) NOT NULL, ;
                      CDISPCODE C(4) NOT NULL, ;
                      CQTRTWP C(10) NOT NULL, ;
                      DPRODDATE D NOT NULL, ;
                      NLEASEACRES N(7, 2) NOT NULL, ;
                      CWVDISTRICT C(60) NOT NULL, ;
                      CMETERSERIALNO C(25) NOT NULL, ;
                      CMETERLOC C(25) NOT NULL, ;
                      NOILEXPENSE N(12, 2) NOT NULL, ;
                      NGASEXPENSE N(12, 2) NOT NULL, ;
                      NOTHEXPENSE N(12, 2) NOT NULL, ;
                      LNGLETHANE L NOT NULL, ;
                      LNGLPROPANE L NOT NULL, ;
                      LNGLBUTANE L NOT NULL, ;
                      LNGLISOBUTANE L NOT NULL, ;
                      LNGLPENTANE L NOT NULL, ;
                      CMETERCITY C(40) NOT NULL, ;
                      CMETERZIP C(10) NOT NULL, ;
                      CMETERSTATE C(2) NOT NULL, ;
                      NWORKNGL N(12, 2) NOT NULL, ;
                      NOTHINC N(12, 2) NOT NULL, ;
                      NROYOIL N(12, 2) NOT NULL, ;
                      NROYGAS N(12, 2) NOT NULL, ;
                      NROYNGL N(12, 2) NOT NULL, ;
                      NOTHBBL I NOT NULL)

***** Create each index for ANNPROD *****
ALTER TABLE 'ANNPROD' ADD PRIMARY KEY CIDANNP TAG CIDANNP COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CWELLNAME TAG CWELLNAME COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON CYEAR+CTOWNSHIP+CFIELD+CWELLID+CPERMIT TAG TOWN COLLATE 'MACHINE'
INDEX ON CYEAR+CWELLID TAG YEARWELL COLLATE 'MACHINE'

***** Change properties for ANNPROD *****
DBSETPROP('ANNPROD.CIDANNP', 'Field', 'Caption', "Primary Key")
DBSETPROP('ANNPROD.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('ANNPROD.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('ANNPROD.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('ANNPROD.CWELLSTATE', 'Field', 'Caption', "State")
DBSETPROP('ANNPROD.CWELLSTATUS', 'Field', 'Caption', "Well Status")
DBSETPROP('ANNPROD.NWELLCOUNT', 'Field', 'Caption', "# of Wells")
DBSETPROP('ANNPROD.CPERMIT', 'Field', 'Caption', "Permit")
DBSETPROP('ANNPROD.CCOUNTY', 'Field', 'Caption', "County")
DBSETPROP('ANNPROD.CTOWNSHIP', 'Field', 'Caption', "Township")
DBSETPROP('ANNPROD.CPARCEL', 'Field', 'Caption', "Parcel No")
DBSETPROP('ANNPROD.NACRES', 'Field', 'Caption', "Acres")
DBSETPROP('ANNPROD.NOILBBL', 'Field', 'Caption', "BBL")
DBSETPROP('ANNPROD.NGASMCF', 'Field', 'Caption', "MCF")
DBSETPROP('ANNPROD.NMONTHS', 'Field', 'Caption', "Months")
DBSETPROP('ANNPROD.NDAYSON', 'Field', 'Caption', "Days On")
DBSETPROP('ANNPROD.NSALTBBL', 'Field', 'Caption', "Water")
DBSETPROP('ANNPROD.COWNERNO', 'Field', 'Caption', "Owner No")
DBSETPROP('ANNPROD.CREVBBL', 'Field', 'Caption', "BBL Purchaser")
DBSETPROP('ANNPROD.CREVMCF', 'Field', 'Caption', "MCF Purchaser")
DBSETPROP('ANNPROD.CPRODUCER', 'Field', 'Caption', "Producer Name")
DBSETPROP('ANNPROD.CAGENT', 'Field', 'Caption', "Agent Name")
DBSETPROP('ANNPROD.CADDRESS', 'Field', 'Caption', "Address")
DBSETPROP('ANNPROD.CCITY', 'Field', 'Caption', "City")
DBSETPROP('ANNPROD.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('ANNPROD.CZIP', 'Field', 'Caption', "Zip Code")
DBSETPROP('ANNPROD.CCONTACT', 'Field', 'Caption', "Contact")
DBSETPROP('ANNPROD.CFIELD', 'Field', 'Caption', "Field Name")
DBSETPROP('ANNPROD.CFORMATION', 'Field', 'Caption', "Formation Name")
DBSETPROP('ANNPROD.CMETERID', 'Field', 'Caption', "Meter ID")
DBSETPROP('ANNPROD.CTELEPHONE', 'Field', 'Caption', "Telephone No")
DBSETPROP('ANNPROD.CFACILITY', 'Field', 'Caption', "Facility")
DBSETPROP('ANNPROD.CFACPERMIT', 'Field', 'Caption', "Facility Permit No")
DBSETPROP('ANNPROD.CNRA', 'Field', 'Caption', "Account No")
DBSETPROP('ANNPROD.CRPTGROUP', 'Field', 'Caption', "Report Group")
DBSETPROP('ANNPROD.CTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('ANNPROD.CTAXYEAR', 'Field', 'Caption', "Tax Year")
DBSETPROP('ANNPROD.NOILINC', 'Field', 'Caption', "Oil Income")
DBSETPROP('ANNPROD.NGASINC', 'Field', 'Caption', "Gas Income")
DBSETPROP('ANNPROD.NWORKGAS', 'Field', 'Caption', "Working Int Gas")
DBSETPROP('ANNPROD.NWORKOIL', 'Field', 'Caption', "Working Interest Oil")
DBSETPROP('ANNPROD.CPRODYR', 'Field', 'Caption', "Production Year")
DBSETPROP('ANNPROD.LHOUSEGAS', 'Field', 'Caption', "House Gas")
DBSETPROP('ANNPROD.CSECTION', 'Field', 'Caption', "Csection")
DBSETPROP('ANNPROD.CLOT', 'Field', 'Caption', "Lot")
DBSETPROP('ANNPROD.CWASTECODE', 'Field', 'Caption', "Waste Code")
DBSETPROP('ANNPROD.CDISPCODE', 'Field', 'Caption', "Disposal Code")
DBSETPROP('ANNPROD.CQTRTWP', 'Field', 'Caption', "Qtr Township")
DBSETPROP('ANNPROD.DPRODDATE', 'Field', 'Caption', "First Production")
DBSETPROP('ANNPROD.NLEASEACRES', 'Field', 'Caption', "WV Lease Acres")
DBSETPROP('ANNPROD.CWVDISTRICT', 'Field', 'Caption', "WV District")
DBSETPROP('ANNPROD.CMETERSERIALNO', 'Field', 'Caption', "WV Meter Serial No")
DBSETPROP('ANNPROD.CMETERLOC', 'Field', 'Caption', "Meter Location")
DBSETPROP('ANNPROD.NOILEXPENSE', 'Field', 'Caption', "Oil Expense")
DBSETPROP('ANNPROD.NGASEXPENSE', 'Field', 'Caption', "Gas Expense")
DBSETPROP('ANNPROD.NOTHEXPENSE', 'Field', 'Caption', "Other Expense")
DBSETPROP('ANNPROD.LNGLETHANE', 'Field', 'Caption', "Ethane")
DBSETPROP('ANNPROD.LNGLPROPANE', 'Field', 'Caption', "Propane")
DBSETPROP('ANNPROD.LNGLBUTANE', 'Field', 'Caption', "Butane")
DBSETPROP('ANNPROD.LNGLISOBUTANE', 'Field', 'Caption', "ISO Butane")
DBSETPROP('ANNPROD.LNGLPENTANE', 'Field', 'Caption', "Pentane")
DBSETPROP('ANNPROD.CMETERCITY', 'Field', 'Caption', "Meter City")
DBSETPROP('ANNPROD.CMETERZIP', 'Field', 'Caption', "Meter Zipcode")
DBSETPROP('ANNPROD.CMETERSTATE', 'Field', 'Caption', "Meter State")
DBSETPROP('ANNPROD.NWORKNGL', 'Field', 'Caption', "WI NGL")
DBSETPROP('ANNPROD.NOTHINC', 'Field', 'Caption', "OTH Income")
DBSETPROP('ANNPROD.NROYOIL', 'Field', 'Caption', "Oil Royalties")
DBSETPROP('ANNPROD.NROYGAS', 'Field', 'Caption', "Gas Royalties")
DBSETPROP('ANNPROD.NROYNGL', 'Field', 'Caption', "NGL Royalties")
DBSETPROP('ANNPROD.NOTHBBL', 'Field', 'Caption', "Other BBLs")
CREATE TRIGGER ON 'ANNPROD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'ANNPROD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'ANNPROD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_APOPT
***** Table setup for APOPT *****
CREATE TABLE 'APOPT.DBF' NAME 'APOPT' (CAPCASH C(6) NOT NULL, ;
                    CAPACCT C(6) NOT NULL, ;
                    CDISCACCT C(6) NOT NULL, ;
                    CAPCHECK C(10) NOT NULL, ;
                    CIDTERM C(8) NOT NULL, ;
                    CCHECKTYPE C(2) NOT NULL, ;
                    LVENDBAL L NOT NULL, ;
                    LSTUBDETAIL L NOT NULL, ;
                    LDUPSTUB L NOT NULL, ;
                    NSTUBLINE I NOT NULL, ;
                    LSKIPPERF L NOT NULL, ;
                    LVOIDNEXT L NOT NULL, ;
                    LUSEINVDATE L NOT NULL, ;
                    PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1)

***** Create each index for APOPT *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for APOPT *****
DBSETPROP('APOPT.CAPCASH', 'Field', 'Caption', "Cash Account")
DBSETPROP('APOPT.CAPACCT', 'Field', 'Caption', "A/P Account")
DBSETPROP('APOPT.CDISCACCT', 'Field', 'Caption', "Discounts Taken Account")
DBSETPROP('APOPT.CAPCHECK', 'Field', 'Caption', "Next A/P Check No")
DBSETPROP('APOPT.CIDTERM', 'Field', 'Caption', "Terms Code")
DBSETPROP('APOPT.CCHECKTYPE', 'Field', 'Caption', "Check Type")
DBSETPROP('APOPT.LVENDBAL', 'Field', 'Caption', "Calc Vendor Balances At Startup")
DBSETPROP('APOPT.LSTUBDETAIL', 'Field', 'Caption', "Print Stub Details")
DBSETPROP('APOPT.LDUPSTUB', 'Field', 'Caption', "Duplicate Stub")
DBSETPROP('APOPT.NSTUBLINE', 'Field', 'Caption', "Nstubline")
DBSETPROP('APOPT.LSKIPPERF', 'Field', 'Caption', "Lskipperf")
DBSETPROP('APOPT.LVOIDNEXT', 'Field', 'Caption', "Void Next Chk")
DBSETPROP('APOPT.LUSEINVDATE', 'Field', 'Caption', "Use Invoice Date as Post Date")
DBSETPROP('APOPT.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'APOPT' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'APOPT' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'APOPT' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_APPDATA_LOG
***** Table setup for APPDATA_LOG *****
CREATE TABLE 'APPDATA_LOG.DBF' NAME 'APPDATA_LOG' (ILOG_KEY I NOT NULL, ;
                          CTRAN_TYPE C(1) NOT NULL, ;
                          CDBC_DRIVE C(1) NOT NULL, ;
                          CDBC_PATH C(20) NOT NULL, ;
                          CDBC_NAME C(20) NOT NULL, ;
                          CTBL_DRIVE C(1) NOT NULL, ;
                          CTBL_PATH C(20) NOT NULL, ;
                          CTBL_NAME C(20) NOT NULL, ;
                          CTAG_NAME C(20) NOT NULL, ;
                          CKEY_TYPE C(1) NOT NULL, ;
                          CREC_KEY C(20) NOT NULL, ;
                          MACTIONS M NOT NULL, ;
                          LMEMOS L NOT NULL, ;
                          CUSERMSG1 C(50) NOT NULL, ;
                          CUSERMSG2 C(50) NOT NULL, ;
                          CUPD_WHO C(20) NOT NULL, ;
                          TUPD_WHEN T NOT NULL)

***** Create each index for APPDATA_LOG *****
INDEX ON ILOG_KEY TAG PKEY CANDIDATE COLLATE 'MACHINE'
INDEX ON CTBL_NAME TAG CTBL_NAME COLLATE 'MACHINE'
INDEX ON CTRAN_TYPE TAG CTRAN_TYPE COLLATE 'MACHINE'
INDEX ON CUPD_WHO TAG CUPD_WHO COLLATE 'MACHINE'
INDEX ON TUPD_WHEN TAG TUPD_WHEN COLLATE 'MACHINE'
INDEX ON ILOG_KEY TAG ILOG_KEY2 COLLATE 'MACHINE'

***** Change properties for APPDATA_LOG *****
ENDFUNC

FUNCTION MakeTable_APPDATA_LOG_K
***** Table setup for APPDATA_LOG_K *****
CREATE TABLE 'APPDATA_LOG_K.DBF' NAME 'APPDATA_LOG_K' (INEXTKEY I NOT NULL)

***** Create each index for APPDATA_LOG_K *****

***** Change properties for APPDATA_LOG_K *****
ENDFUNC

FUNCTION MakeTable_APPDATA_LOG_M
***** Table setup for APPDATA_LOG_M *****
CREATE TABLE 'APPDATA_LOG_M.DBF' NAME 'APPDATA_LOG_M' (ILOG_KEY I NOT NULL, ;
                            CFIELD C(20) NOT NULL, ;
                            MORIG M NOT NULL, ;
                            MUPDATED M NOT NULL)

***** Create each index for APPDATA_LOG_M *****
INDEX ON BINTOC(ILOG_KEY)+CFIELD TAG PKEY CANDIDATE COLLATE 'MACHINE'
INDEX ON ILOG_KEY TAG ILOG_KEY COLLATE 'MACHINE'

***** Change properties for APPDATA_LOG_M *****
ENDFUNC

FUNCTION MakeTable_APPMTDET
***** Table setup for APPMTDET *****
CREATE TABLE 'APPMTDET.DBF' NAME 'APPMTDET' (CIDAPPMD C(8) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       CINVNUM C(20) NOT NULL, ;
                       CVENDORID C(10) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       DDUEDATE D NOT NULL, ;
                       NINVBAL N(12, 2) NOT NULL, ;
                       DDISCDATE D NOT NULL, ;
                       NDISCTOT N(12, 2) NOT NULL, ;
                       NAMTPAID N(12, 2) NOT NULL, ;
                       CBILLTOKEN C(8) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       CCHECKNO C(10) NOT NULL, ;
                       NDISCTAKEN N(12, 2) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL)

***** Create each index for APPMTDET *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CBILLTOKEN TAG CBILLTOKEN COLLATE 'MACHINE'
ALTER TABLE 'APPMTDET' ADD PRIMARY KEY CIDAPPMD TAG CIDARPMD COLLATE 'MACHINE'
INDEX ON CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'
INDEX ON CINVNUM TAG CINVNUM COLLATE 'MACHINE'
INDEX ON DDUEDATE TAG DDUEDATE COLLATE 'MACHINE'
INDEX ON CVENDORID TAG VENDORID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED BINARY

***** Change properties for APPMTDET *****
DBSETPROP('APPMTDET.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('APPMTDET.DADDED', 'Field', 'Caption', "Dadded")
CREATE TRIGGER ON 'APPMTDET' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'APPMTDET' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'APPMTDET' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_APPMTHDR
***** Table setup for APPMTHDR *****
CREATE TABLE 'APPMTHDR.DBF' NAME 'APPMTHDR' (CBATCH C(8) NOT NULL, ;
                       DBILLDATE D NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       NTOTDISC N(12, 2) NOT NULL, ;
                       NTOTPAID N(12, 2) NOT NULL, ;
                       NTOTDUE N(12, 2) NOT NULL, ;
                       DPMTDATE D NOT NULL, ;
                       LNEWPMT L NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for APPMTHDR *****
ALTER TABLE 'APPMTHDR' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON DPMTDATE TAG DPMTDATE COLLATE 'MACHINE'

***** Change properties for APPMTHDR *****
DBSETPROP('APPMTHDR.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('APPMTHDR.DBILLDATE', 'Field', 'Caption', "Bill Date")
DBSETPROP('APPMTHDR.CACCTNO', 'Field', 'Caption', "Account No")
DBSETPROP('APPMTHDR.NTOTDISC', 'Field', 'Caption', "Disc Total")
DBSETPROP('APPMTHDR.NTOTPAID', 'Field', 'Caption', "Paid Total")
DBSETPROP('APPMTHDR.NTOTDUE', 'Field', 'Caption', "Total Due")
DBSETPROP('APPMTHDR.DPMTDATE', 'Field', 'Caption', "Pmt Date")
DBSETPROP('APPMTHDR.LNEWPMT', 'Field', 'Caption', "New Pmt")
DBSETPROP('APPMTHDR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('APPMTHDR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('APPMTHDR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('APPMTHDR.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'APPMTHDR' FOR DELETE AS __ri_delete_appmthdr().AND.(foxaudit())
CREATE TRIGGER ON 'APPMTHDR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'APPMTHDR' FOR UPDATE AS __ri_update_appmthdr().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_APPREG01
***** Table setup for APPREG01 *****
CREATE TABLE 'APPREG01.DBF' NAME 'APPREG01' (KEYNAME C(70) NOT NULL, ;
                       LOCNAME C(80) NOT NULL, ;
                       REPKEY C(4) NOT NULL, ;
                       REPTYPE N(1, 0) NOT NULL, ;
                       TYPE N(2, 0) NOT NULL, ;
                       ACCESS N(1, 0) NOT NULL, ;
                       SHORTVALUE C(30) NULL, ;
                       VALUE M NULL, ;
                       PROPERTIES M NOT NULL, ;
                       COMMENT M NOT NULL)

***** Create each index for APPREG01 *****
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON UPPER(KEYNAME)+REPKEY TAG KEYNAME COLLATE 'MACHINE'
INDEX ON OCCURS(".",KEYNAME) TAG LEVEL COLLATE 'MACHINE'
INDEX ON UPPER(LOCNAME)+REPKEY TAG LOCNAME COLLATE 'MACHINE'

***** Change properties for APPREG01 *****
ENDFUNC

FUNCTION MakeTable_APPURCHH
***** Table setup for APPURCHH *****
CREATE TABLE 'APPURCHH.DBF' NAME 'APPURCHH' (CBATCH C(8) NOT NULL, ;
                       CINVNUM C(20) NOT NULL, ;
                       CVENDORID C(10) NOT NULL, ;
                       DINVDATE D NOT NULL, ;
                       NSALESTAX N(12, 2) NOT NULL, ;
                       NDISCTOT N(12, 2) NOT NULL, ;
                       NSUBTOTAL N(12, 2) NOT NULL, ;
                       NPAYMENTS N(12, 2) NOT NULL, ;
                       NINVTOT N(12, 2) NOT NULL, ;
                       NINVBAL N(12, 2) NOT NULL, ;
                       DDUEDATE D NOT NULL, ;
                       DDISCDATE D NOT NULL, ;
                       CREFERENCE C(30) NOT NULL, ;
                       CINVTYPE C(1) NOT NULL, ;
                       CPONUMBER C(10) NOT NULL, ;
                       CIDTERM C(8) NOT NULL, ;
                       DPOSTDATE D NOT NULL, ;
                       MNOTES M NOT NULL, ;
                       LITEMPURCH L NOT NULL, ;
                       LAPPROVED L NOT NULL, ;
                       CAPPROVEDBY C(10) NOT NULL, ;
                       DAPPROVED T NOT NULL, ;
                       CAPACCT C(36) NOT NULL, ;
                       CTXNID C(36) NOT NULL, ;
                       EDITSEQ C(16) NOT NULL, ;
                       LNOQBPOST L NOT NULL, ;
                       CQBAPACCT C(36) NOT NULL, ;
                       ISOURCE I NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for APPURCHH *****
ALTER TABLE 'APPURCHH' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CINVNUM TAG CINVNUM COLLATE 'MACHINE'
INDEX ON DDUEDATE TAG DUEDATE COLLATE 'MACHINE'
INDEX ON DINVDATE TAG INVDATE COLLATE 'MACHINE'
INDEX ON DTOS(DINVDATE)+CINVNUM+CVENDORID TAG INVHKEY COLLATE 'MACHINE'
INDEX ON DPOSTDATE TAG POSTDATE COLLATE 'MACHINE'
INDEX ON CVENDORID+CINVNUM TAG VENDINV COLLATE 'MACHINE'
INDEX ON CVENDORID TAG VENDORID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for APPURCHH *****
DBSETPROP('APPURCHH.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('APPURCHH.CINVNUM', 'Field', 'Caption', "Invoice Number")
DBSETPROP('APPURCHH.CVENDORID', 'Field', 'Caption', "Vendor ID")
DBSETPROP('APPURCHH.DINVDATE', 'Field', 'Caption', "Invoice Date")
DBSETPROP('APPURCHH.NSALESTAX', 'Field', 'Caption', "Sales Tax Total")
DBSETPROP('APPURCHH.NDISCTOT', 'Field', 'Caption', "Discounts Available Total")
DBSETPROP('APPURCHH.NSUBTOTAL', 'Field', 'Caption', "Sub Total")
DBSETPROP('APPURCHH.NPAYMENTS', 'Field', 'Caption', "Payments")
DBSETPROP('APPURCHH.NINVTOT', 'Field', 'Caption', "Invoice Total")
DBSETPROP('APPURCHH.NINVBAL', 'Field', 'Caption', "Balance")
DBSETPROP('APPURCHH.DDUEDATE', 'Field', 'Caption', "Due Date")
DBSETPROP('APPURCHH.DDISCDATE', 'Field', 'Caption', "Discount Date")
DBSETPROP('APPURCHH.CREFERENCE', 'Field', 'Caption', "Reference")
DBSETPROP('APPURCHH.CINVTYPE', 'Field', 'Caption', "Invoice Type")
DBSETPROP('APPURCHH.CPONUMBER', 'Field', 'Caption', "PO Number")
DBSETPROP('APPURCHH.CIDTERM', 'Field', 'Caption', "Terms Code")
DBSETPROP('APPURCHH.DPOSTDATE', 'Field', 'Caption', "Posting Date")
DBSETPROP('APPURCHH.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('APPURCHH.LITEMPURCH', 'Field', 'Caption', "Item Bill")
DBSETPROP('APPURCHH.LAPPROVED', 'Field', 'Caption', "Approved?")
DBSETPROP('APPURCHH.CAPPROVEDBY', 'Field', 'Caption', "Approved By")
DBSETPROP('APPURCHH.DAPPROVED', 'Field', 'Caption', "Date Approved")
DBSETPROP('APPURCHH.CAPACCT', 'Field', 'Caption', "A/P Account")
DBSETPROP('APPURCHH.CTXNID', 'Field', 'Caption', "QB Txn ID")
DBSETPROP('APPURCHH.EDITSEQ', 'Field', 'Caption', "QB Edit Seq")
DBSETPROP('APPURCHH.LNOQBPOST', 'Field', 'Caption', "Post to QB")
DBSETPROP('APPURCHH.CQBAPACCT', 'Field', 'Caption', "QB AP Account")
DBSETPROP('APPURCHH.ISOURCE', 'Field', 'Caption', "Invoice Source")
DBSETPROP('APPURCHH.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('APPURCHH.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('APPURCHH.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('APPURCHH.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'APPURCHH' FOR DELETE AS __ri_delete_appurchh().AND.(foxaudit())
CREATE TRIGGER ON 'APPURCHH' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'APPURCHH' FOR UPDATE AS __ri_update_appurchh().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_APPURECD
***** Table setup for APPURECD *****
CREATE TABLE 'APPURECD.DBF' NAME 'APPURECD' (CIDPURD C(8) NOT NULL, ;
                       CITEMID C(10) NOT NULL, ;
                       CITEMDESC C(40) NOT NULL, ;
                       NPRICE N(12, 2) NOT NULL, ;
                       NQUANTITY N(12, 4) NOT NULL, ;
                       NEXTENSION N(12, 2) NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       CTAXABLE C(1) NOT NULL, ;
                       CUNITNO C(10) NOT NULL, ;
                       CDEPTNO C(8) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       NSALTBBL N(4, 0) NOT NULL, ;
                       CCATCODE C(4) NOT NULL, ;
                       LITEMDETAIL L NOT NULL, ;
                       CPRODYEAR C(4) NOT NULL, ;
                       CPRODPERIOD C(2) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       CEXPCLASS C(1) NOT NULL, ;
                       CACCTLISTID C(36) NOT NULL, ;
                       CDECK C(10) NOT NULL)

***** Create each index for APPURECD *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CCATCODE TAG CCATCODE COLLATE 'MACHINE'
ALTER TABLE 'APPURECD' ADD PRIMARY KEY CIDPURD TAG CIDPURD COLLATE 'MACHINE'
INDEX ON CITEMID TAG CITEMID COLLATE 'MACHINE'
INDEX ON CUNITNO TAG CUNITNO COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for APPURECD *****
DBSETPROP('APPURECD.CIDPURD', 'Field', 'Caption', "Primary Key")
DBSETPROP('APPURECD.CITEMID', 'Field', 'Caption', "Item ID")
DBSETPROP('APPURECD.CITEMDESC', 'Field', 'Caption', "Item Description")
DBSETPROP('APPURECD.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('APPURECD.NQUANTITY', 'Field', 'Caption', "Quantity")
DBSETPROP('APPURECD.NEXTENSION', 'Field', 'Caption', "Extension")
DBSETPROP('APPURECD.CACCTNO', 'Field', 'Caption', "Account Number")
DBSETPROP('APPURECD.CTAXABLE', 'Field', 'Caption', "Taxable Flag")
DBSETPROP('APPURECD.CUNITNO', 'Field', 'Caption', "Well ID")
DBSETPROP('APPURECD.CDEPTNO', 'Field', 'Caption', "Dept Code")
DBSETPROP('APPURECD.CBATCH', 'Field', 'Caption', "Link to Header File")
DBSETPROP('APPURECD.NSALTBBL', 'Field', 'Caption', "BBLs of Water")
DBSETPROP('APPURECD.CCATCODE', 'Field', 'Caption', "Category Code")
DBSETPROP('APPURECD.LITEMDETAIL', 'Field', 'Caption', "Inventory Detail")
DBSETPROP('APPURECD.CPRODYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('APPURECD.CPRODPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('APPURECD.COWNERID', 'Field', 'Caption', "One Man ID")
DBSETPROP('APPURECD.CEXPCLASS', 'Field', 'Caption', "Exp Class")
DBSETPROP('APPURECD.CACCTLISTID', 'Field', 'Caption', "QB Account")
DBSETPROP('APPURECD.CDECK', 'Field', 'Caption', "DOI Deck")
CREATE TRIGGER ON 'APPURECD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'APPURECD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'APPURECD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_APPURECH
***** Table setup for APPURECH *****
CREATE TABLE 'APPURECH.DBF' NAME 'APPURECH' (CBATCH C(8) NOT NULL, ;
                       CINVNUM C(20) NOT NULL, ;
                       CVENDORID C(10) NOT NULL, ;
                       NSALESTAX N(12, 2) NOT NULL, ;
                       NDISCTOT N(12, 2) NOT NULL, ;
                       NSUBTOTAL N(12, 2) NOT NULL, ;
                       NPAYMENTS N(12, 2) NOT NULL, ;
                       NINVTOT N(12, 2) NOT NULL, ;
                       NINVBAL N(12, 2) NOT NULL, ;
                       CREFERENCE C(30) NOT NULL, ;
                       CINVTYPE C(1) NOT NULL, ;
                       CPONUMBER C(10) NOT NULL, ;
                       CIDTERM C(8) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for APPURECH *****
ALTER TABLE 'APPURECH' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CVENDORID+CINVNUM TAG VENDINV COLLATE 'MACHINE'
INDEX ON CVENDORID TAG VENDORID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for APPURECH *****
DBSETPROP('APPURECH.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('APPURECH.CINVNUM', 'Field', 'Caption', "Invoice Number")
DBSETPROP('APPURECH.CVENDORID', 'Field', 'Caption', "Vendor ID")
DBSETPROP('APPURECH.NSALESTAX', 'Field', 'Caption', "Sales Tax")
DBSETPROP('APPURECH.NDISCTOT', 'Field', 'Caption', "Discounts")
DBSETPROP('APPURECH.NSUBTOTAL', 'Field', 'Caption', "Sub Total")
DBSETPROP('APPURECH.NPAYMENTS', 'Field', 'Caption', "Payments")
DBSETPROP('APPURECH.NINVTOT', 'Field', 'Caption', "Invoice Total")
DBSETPROP('APPURECH.NINVBAL', 'Field', 'Caption', "Balance")
DBSETPROP('APPURECH.CREFERENCE', 'Field', 'Caption', "Reference")
DBSETPROP('APPURECH.CINVTYPE', 'Field', 'Caption', "Invoice Type")
DBSETPROP('APPURECH.CPONUMBER', 'Field', 'Caption', "PO Number")
DBSETPROP('APPURECH.CIDTERM', 'Field', 'Caption', "Terms Code")
DBSETPROP('APPURECH.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('APPURECH.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('APPURECH.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('APPURECH.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'APPURECH' FOR DELETE AS __ri_delete_appurech().AND.(foxaudit())
CREATE TRIGGER ON 'APPURECH' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'APPURECH' FOR UPDATE AS __ri_update_appurech().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_AROPT
***** Table setup for AROPT *****
CREATE TABLE 'AROPT.DBF' NAME 'AROPT' (CCASHACCT C(6) NOT NULL, ;
                    CARACCT C(6) NOT NULL, ;
                    CDISCACCT C(6) NOT NULL, ;
                    CTAXACCT C(6) NOT NULL, ;
                    CINTACCT C(6) NOT NULL, ;
                    CCOGSACCT C(6) NOT NULL, ;
                    LZEROBAL L NOT NULL, ;
                    LNEGBAL L NOT NULL, ;
                    LANYACT L NOT NULL, ;
                    LMINBALCK L NOT NULL, ;
                    NMINBAL N(12, 2) NOT NULL, ;
                    LINVDAYCK L NOT NULL, ;
                    MINVMSG M NOT NULL, ;
                    CINVNUM C(15) NOT NULL, ;
                    NJIBINV I NOT NULL, ;
                    NINVTYPE N(1, 0) NOT NULL, ;
                    NINVDAY N(3, 0) NOT NULL, ;
                    CFEEACCT C(6) NOT NULL, ;
                    PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1 DEFAULT (RECNO()-1)+1)

***** Create each index for AROPT *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for AROPT *****
DBSETPROP('AROPT.CCASHACCT', 'Field', 'Caption', "Cash Account")
DBSETPROP('AROPT.CARACCT', 'Field', 'Caption', "A/R Account")
DBSETPROP('AROPT.CDISCACCT', 'Field', 'Caption', "Discounts Given Account")
DBSETPROP('AROPT.CTAXACCT', 'Field', 'Caption', "Sales Tax Account")
DBSETPROP('AROPT.CINTACCT', 'Field', 'Caption', "Interest Earned Account")
DBSETPROP('AROPT.CCOGSACCT', 'Field', 'Caption', "Cost of Goods Sold Account")
DBSETPROP('AROPT.LZEROBAL', 'Field', 'Caption', "Print Stmts with Zero Balance")
DBSETPROP('AROPT.LNEGBAL', 'Field', 'Caption', "Print Statements with Negative Balance")
DBSETPROP('AROPT.LANYACT', 'Field', 'Caption', "Print Statements with Any Activity")
DBSETPROP('AROPT.LMINBALCK', 'Field', 'Caption', "Print Statements with at Least This Balance")
DBSETPROP('AROPT.NMINBAL', 'Field', 'Caption', "Minimum Balance")
DBSETPROP('AROPT.LINVDAYCK', 'Field', 'Caption', "Include Invoice over this many days old")
DBSETPROP('AROPT.MINVMSG', 'Field', 'Caption', "Invoice Message")
DBSETPROP('AROPT.CINVNUM', 'Field', 'Caption', "Next Invoice Number")
DBSETPROP('AROPT.NJIBINV', 'Field', 'Caption', "Next JIB Invoice Number")
DBSETPROP('AROPT.NINVTYPE', 'Field', 'Caption', "Invoice Type")
DBSETPROP('AROPT.NINVTYPE', 'Field', 'Comment', "1 = Plain Invoice" + CHR(13) + "2 = Invoice w/ Lines")
DBSETPROP('AROPT.NINVDAY', 'Field', 'Caption', "Print statement for invoices at least this many days old.")
DBSETPROP('AROPT.CFEEACCT', 'Field', 'Caption', "Injection Fee Acct")
DBSETPROP('AROPT.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'AROPT' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'AROPT' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'AROPT' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_ARPMTDET
***** Table setup for ARPMTDET *****
CREATE TABLE 'ARPMTDET.DBF' NAME 'ARPMTDET' (CIDARPMD C(8) NOT NULL, ;
                       CINVNUM C(15) NOT NULL, ;
                       DINVDATE D NOT NULL, ;
                       NINVBAL N(12, 2) NOT NULL, ;
                       NDISCTOT N(12, 2) NOT NULL, ;
                       NDISTAKEN N(12, 2) NOT NULL, ;
                       NAMTAPP N(12, 2) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       CCUSTID C(10) NOT NULL, ;
                       CINVTOKEN C(8) NOT NULL, ;
                       CDESC C(40) NOT NULL, ;
                       LNETJIB L NOT NULL, ;
                       CPRODYEAR C(4) NOT NULL, ;
                       CPRODPRD C(2) NOT NULL, ;
                       CGROUP C(2) NOT NULL, ;
                       NINVTOT N(12, 2) NOT NULL, ;
                       CTYPEINV C(1) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL)

***** Create each index for ARPMTDET *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CCUSTID TAG CCUSTID COLLATE 'MACHINE'
ALTER TABLE 'ARPMTDET' ADD PRIMARY KEY CIDARPMD TAG CIDARPMD COLLATE 'MACHINE'
INDEX ON CINVTOKEN TAG CINVTOKEN COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON NAMTAPP TAG NAMTAPP COLLATE 'MACHINE'

***** Change properties for ARPMTDET *****
DBSETPROP('ARPMTDET.CTYPEINV', 'Field', 'Caption', "Owner Type")
DBSETPROP('ARPMTDET.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('ARPMTDET.DADDED', 'Field', 'Caption', "Date Added")
CREATE TRIGGER ON 'ARPMTDET' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'ARPMTDET' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'ARPMTDET' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_ARPMTHDR
***** Table setup for ARPMTHDR *****
CREATE TABLE 'ARPMTHDR.DBF' NAME 'ARPMTHDR' (CBATCH C(8) NOT NULL, ;
                       CCUSTID C(10) NOT NULL, ;
                       DRECDATE D NOT NULL, ;
                       CREFERENCE C(10) NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       NDISCTOT N(12, 2) NOT NULL, ;
                       NPMTAMT N(12, 2) NOT NULL, ;
                       NAPPLIED N(12, 2) NOT NULL, ;
                       NUNAPP N(12, 2) NOT NULL, ;
                       CPMTTYPE C(1) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       NCUSTBALANCE N(12, 2) NOT NULL, ;
                       CTXNID C(36) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for ARPMTHDR *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
ALTER TABLE 'ARPMTHDR' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CCUSTID TAG CCUSTID COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON DRECDATE TAG DRECDATE COLLATE 'MACHINE'

***** Change properties for ARPMTHDR *****
DBSETPROP('ARPMTHDR.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('ARPMTHDR.CCUSTID', 'Field', 'Caption', "Customer ID")
DBSETPROP('ARPMTHDR.DRECDATE', 'Field', 'Caption', "Payment Received Date")
DBSETPROP('ARPMTHDR.CREFERENCE', 'Field', 'Caption', "Reference")
DBSETPROP('ARPMTHDR.CACCTNO', 'Field', 'Caption', "Cash Account")
DBSETPROP('ARPMTHDR.NDISCTOT', 'Field', 'Caption', "Discount Total")
DBSETPROP('ARPMTHDR.NPMTAMT', 'Field', 'Caption', "Payment Amount")
DBSETPROP('ARPMTHDR.NAPPLIED', 'Field', 'Caption', "Amount Applied")
DBSETPROP('ARPMTHDR.NUNAPP', 'Field', 'Caption', "Amount Unapplied")
DBSETPROP('ARPMTHDR.CPMTTYPE', 'Field', 'Caption', "Payment Type")
DBSETPROP('ARPMTHDR.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('ARPMTHDR.NCUSTBALANCE', 'Field', 'Caption', "Customer Balance")
DBSETPROP('ARPMTHDR.NCUSTBALANCE', 'Field', 'InputMask', "999,999,999.99")
DBSETPROP('ARPMTHDR.CTXNID', 'Field', 'Caption', "QB Txn ID")
DBSETPROP('ARPMTHDR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('ARPMTHDR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('ARPMTHDR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('ARPMTHDR.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'ARPMTHDR' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'ARPMTHDR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'ARPMTHDR' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_ASSETS
***** Table setup for ASSETS *****
CREATE TABLE 'ASSETS.DBF' NAME 'ASSETS' (CUNITNO C(10) NOT NULL, ;
                     NUNITTYPE N(2, 0) NOT NULL, ;
                     CUNITDESC C(30) NOT NULL, ;
                     DUADATE D NOT NULL, ;
                     DUDDATE D NOT NULL, ;
                     NUSALEP N(12, 2) NOT NULL, ;
                     CUNEWU C(1) NOT NULL, ;
                     CULOC C(20) NOT NULL, ;
                     CUVEND C(20) NOT NULL, ;
                     NUCOST N(12, 2) NOT NULL, ;
                     NUSALV N(12, 2) NOT NULL, ;
                     CUMETH C(2) NOT NULL, ;
                     NULIFE N(5, 2) NOT NULL, ;
                     NUADEPR N(12, 2) NOT NULL, ;
                     DULICEXP D NOT NULL, ;
                     CULICENSE C(10) NOT NULL, ;
                     DUINSEXP D NOT NULL, ;
                     CUTAXST1 C(2) NOT NULL, ;
                     CUTAXST2 C(2) NOT NULL, ;
                     CUTAXST3 C(2) NOT NULL, ;
                     CUTAXST4 C(2) NOT NULL, ;
                     DUTAXEX1 D NOT NULL, ;
                     DUTAXEX2 D NOT NULL, ;
                     DUTAXEX3 D NOT NULL, ;
                     DUTAXEX4 D NOT NULL, ;
                     CUOTHCOM C(20) NOT NULL, ;
                     DUOTHDAT D NOT NULL, ;
                     NUSEC179 N(12, 2) NOT NULL, ;
                     MUNOTES M NOT NULL, ;
                     CUSERIAL C(20) NOT NULL, ;
                     CUFINBY C(40) NOT NULL, ;
                     NBOOKVAL N(12, 2) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for ASSETS *****
INDEX ON CUNITDESC TAG CUNITDESC COLLATE 'MACHINE'
ALTER TABLE 'ASSETS' ADD PRIMARY KEY CUNITNO TAG UNITNO COLLATE 'MACHINE'
INDEX ON NUNITTYPE TAG UNITTYPE COLLATE 'MACHINE'
INDEX ON STR(NUNITTYPE,2)+CUNITNO TAG UTYPENO COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for ASSETS *****
DBSETPROP('ASSETS.CUNITNO', 'Field', 'Caption', "Unit No")
DBSETPROP('ASSETS.NUNITTYPE', 'Field', 'Caption', "Unit Type")
DBSETPROP('ASSETS.CUNITDESC', 'Field', 'Caption', "Description")
DBSETPROP('ASSETS.DUADATE', 'Field', 'Caption', "Acquired Date")
DBSETPROP('ASSETS.DUDDATE', 'Field', 'Caption', "Disposal Date")
DBSETPROP('ASSETS.NUSALEP', 'Field', 'Caption', "Sales Price")
DBSETPROP('ASSETS.CUNEWU', 'Field', 'Caption', "New or Used")
DBSETPROP('ASSETS.CULOC', 'Field', 'Caption', "Location")
DBSETPROP('ASSETS.CUVEND', 'Field', 'Caption', "Vendor Name")
DBSETPROP('ASSETS.NUCOST', 'Field', 'Caption', "Original Cost")
DBSETPROP('ASSETS.NUSALV', 'Field', 'Caption', "Salvage Value")
DBSETPROP('ASSETS.CUMETH', 'Field', 'Caption', "Depreciation Method")
DBSETPROP('ASSETS.NULIFE', 'Field', 'Caption', "Usable Life")
DBSETPROP('ASSETS.NUADEPR', 'Field', 'Caption', "Depreciation")
DBSETPROP('ASSETS.DULICEXP', 'Field', 'Caption', "License Expires")
DBSETPROP('ASSETS.CULICENSE', 'Field', 'Caption', "License No")
DBSETPROP('ASSETS.DUINSEXP', 'Field', 'Caption', "Insurance Expires")
DBSETPROP('ASSETS.DUOTHDAT', 'Field', 'Caption', "Other Date")
DBSETPROP('ASSETS.NUSEC179', 'Field', 'Caption', "Section 179")
DBSETPROP('ASSETS.MUNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('ASSETS.CUSERIAL', 'Field', 'Caption', "Serial Number")
DBSETPROP('ASSETS.NBOOKVAL', 'Field', 'Caption', "Book Value")
DBSETPROP('ASSETS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('ASSETS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('ASSETS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('ASSETS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'ASSETS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'ASSETS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'ASSETS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_AUDLINKS
***** Table setup for AUDLINKS *****
CREATE TABLE 'AUDLINKS.DBF' NAME 'AUDLINKS' (CLEASEID C(10) NOT NULL, ;
                       CAUDLINK V(254) NOT NULL, ;
                       PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1 DEFAULT (RECNO()-1)+1)

***** Create each index for AUDLINKS *****
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for AUDLINKS *****
DBSETPROP('AUDLINKS.CLEASEID', 'Field', 'Caption', "Lease ID")
DBSETPROP('AUDLINKS.CAUDLINK', 'Field', 'Caption', "Caudlink")
DBSETPROP('AUDLINKS.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'AUDLINKS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'AUDLINKS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'AUDLINKS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_BRINELOG
***** Table setup for BRINELOG *****
CREATE TABLE 'BRINELOG.DBF' NAME 'BRINELOG' (CIDBRINE C(10) NOT NULL, ;
                       DDATE D NOT NULL, ;
                       NAMOUNT N(5, 0) NOT NULL, ;
                       CDISPERM C(6) NOT NULL, ;
                       DENTDATE D NOT NULL, ;
                       CENTTIME C(8) NOT NULL, ;
                       CTRUCK C(4) NOT NULL, ;
                       CTYPE C(10) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       LOUTOFDISTRICT L NOT NULL, ;
                       NINJFEE N(12, 2) NOT NULL, ;
                       IALLOCATED I NOT NULL, ;
                       ISLUGS I NOT NULL, ;
                       ITYPE I NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for BRINELOG *****
ALTER TABLE 'BRINELOG' ADD PRIMARY KEY CIDBRINE TAG BKEY COLLATE 'MACHINE'
INDEX ON CWELLID TAG CIDLEASE COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CDISPERM TAG DISPPERM COLLATE 'MACHINE'
INDEX ON DTOS(DENTDATE) TAG ENTDATE COLLATE 'MACHINE'
INDEX ON DDATE TAG LOGDATE COLLATE 'MACHINE'

***** Change properties for BRINELOG *****
DBSETPROP('BRINELOG.CIDBRINE', 'Field', 'Caption', "Primary Key")
DBSETPROP('BRINELOG.DDATE', 'Field', 'Caption', "Date")
DBSETPROP('BRINELOG.NAMOUNT', 'Field', 'Caption', "BBLs")
DBSETPROP('BRINELOG.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('BRINELOG.DENTDATE', 'Field', 'Caption', "Entry Date")
DBSETPROP('BRINELOG.CENTTIME', 'Field', 'Caption', "Entry Time")
DBSETPROP('BRINELOG.CTRUCK', 'Field', 'Caption', "Truck No")
DBSETPROP('BRINELOG.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('BRINELOG.CWELLID', 'Field', 'Caption', "Lease Key")
DBSETPROP('BRINELOG.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('BRINELOG.LOUTOFDISTRICT', 'Field', 'Caption', "Out of District")
DBSETPROP('BRINELOG.NINJFEE', 'Field', 'Caption', "Injection Fee")
DBSETPROP('BRINELOG.IALLOCATED', 'Field', 'Caption', "Allocated")
DBSETPROP('BRINELOG.ISLUGS', 'Field', 'Caption', "Slugs")
DBSETPROP('BRINELOG.ITYPE', 'Field', 'Caption', "Well Type")
DBSETPROP('BRINELOG.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('BRINELOG.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('BRINELOG.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('BRINELOG.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'BRINELOG' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'BRINELOG' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'BRINELOG' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_CHECKBAL
***** Table setup for CHECKBAL *****
CREATE TABLE 'CHECKBAL.DBF' NAME 'CHECKBAL' (CIDCHEC C(8) NOT NULL, ;
                       DCHECKDATE D NOT NULL, ;
                       LCLEAR L NOT NULL, ;
                       CCHECKNO C(10) NOT NULL, ;
                       CPAYEE C(40) NOT NULL, ;
                       NAMOUNT N(12, 2) NOT NULL, ;
                       CENTRYTYPE C(1) NOCPTRANS NOT NULL)

***** Create each index for CHECKBAL *****
INDEX ON CCHECKNO TAG CCHECKNO COLLATE 'MACHINE'
INDEX ON CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'
INDEX ON CPAYEE TAG CPAYEE COLLATE 'MACHINE'
INDEX ON DTOS(DCHECKDATE) TAG DCHECKDATE COLLATE 'MACHINE'
INDEX ON NAMOUNT TAG NAMOUNT COLLATE 'MACHINE'

***** Change properties for CHECKBAL *****
DBSETPROP('CHECKBAL.CIDCHEC', 'Field', 'Caption', "Check Primary Key")
DBSETPROP('CHECKBAL.DCHECKDATE', 'Field', 'Caption', "Check Date")
DBSETPROP('CHECKBAL.LCLEAR', 'Field', 'Caption', "Cleared Flag")
DBSETPROP('CHECKBAL.CCHECKNO', 'Field', 'Caption', "Check No")
DBSETPROP('CHECKBAL.CPAYEE', 'Field', 'Caption', "Payee Name")
DBSETPROP('CHECKBAL.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('CHECKBAL.CENTRYTYPE', 'Field', 'Caption', "Entry Type")
ENDFUNC

FUNCTION MakeTable_CHECKREC
***** Table setup for CHECKREC *****
CREATE TABLE 'CHECKREC.DBF' NAME 'CHECKREC' (CACCTNO C(6) NOT NULL, ;
                       DRECDATE D NOT NULL, ;
                       NOPENBAL N(12, 2) NOT NULL, ;
                       NENDBAL N(12, 2) NOT NULL, ;
                       CIDCHKREC C(8) NOT NULL)

***** Create each index for CHECKREC *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
ALTER TABLE 'CHECKREC' ADD PRIMARY KEY CIDCHKREC TAG CIDCHKREC COLLATE 'MACHINE'
INDEX ON DRECDATE TAG DRECDATE DESCENDING  COLLATE 'MACHINE'
INDEX ON DTOS(DRECDATE)+CACCTNO TAG RECKEY DESCENDING  COLLATE 'MACHINE'

***** Change properties for CHECKREC *****
DBSETPROP('CHECKREC.CACCTNO', 'Field', 'Caption', "Cash Account Number")
DBSETPROP('CHECKREC.DRECDATE', 'Field', 'Caption', "Reconciliation Date")
DBSETPROP('CHECKREC.NOPENBAL', 'Field', 'Caption', "Opening Balance")
DBSETPROP('CHECKREC.NENDBAL', 'Field', 'Caption', "Ending Balance")
DBSETPROP('CHECKREC.CIDCHKREC', 'Field', 'Caption', "Primary Key")
ENDFUNC

FUNCTION MakeTable_CHECKS
***** Table setup for CHECKS *****
CREATE TABLE 'CHECKS.DBF' NAME 'CHECKS' (CCHECKNO C(10) NOT NULL, ;
                     CID C(10) NOT NULL, ;
                     CPAYEE C(60) NOT NULL, ;
                     CIDCHEC C(8) NOT NULL, ;
                     CIDTYPE C(1) NOT NULL, ;
                     DCHECKDATE D NOT NULL, ;
                     NAMOUNT N(12, 2) NOT NULL, ;
                     CPERIOD C(2) NOT NULL, ;
                     CYEAR C(4) NOT NULL, ;
                     CMEMO C(50) NOT NULL, ;
                     LPRINTED L NOT NULL, ;
                     LVOID L NOT NULL, ;
                     NVOIDAMT N(9, 2) NOT NULL, ;
                     CGROUP C(2) NOT NULL, ;
                     LCLEARED L NOT NULL, ;
                     CACCTNO C(6) NOT NULL, ;
                     LMANUAL L NOT NULL, ;
                     CENTRYTYPE C(1) NOT NULL, ;
                     CBATCH C(8) NOT NULL, ;
                     DPOSTDATE D NOT NULL, ;
                     LHIST L NOT NULL, ;
                     CSOURCE C(2) NOT NULL, ;
                     LDELETED L NOT NULL, ;
                     DRECDATE D NOT NULL, ;
                     LDEPOSITED L NOT NULL)

***** Create each index for CHECKS *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON CCHECKNO TAG CHECKNO COLLATE 'MACHINE'
ALTER TABLE 'CHECKS' ADD PRIMARY KEY CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'
INDEX ON DTOS(DCHECKDATE)+CCHECKNO TAG DATECHK COLLATE 'MACHINE'
INDEX ON CID TAG ID COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD TAG YEARPRD COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED BINARY
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CPAYEE TAG CPAYEE COLLATE 'MACHINE'
INDEX ON DCHECKDATE TAG DCHECKDATE COLLATE 'MACHINE'
INDEX ON CENTRYTYPE TAG CENTRYTYPE COLLATE 'MACHINE'
INDEX ON CIDTYPE TAG CIDTYPE COLLATE 'MACHINE'
INDEX ON CSOURCE TAG CSOURCE COLLATE 'MACHINE'
INDEX ON DRECDATE TAG DRECDATE COLLATE 'MACHINE'
INDEX ON LCLEARED TAG LCLEARED BINARY
INDEX ON LHIST TAG LHIST BINARY
INDEX ON LPRINTED TAG LPRINTED BINARY
INDEX ON LVOID TAG LVOID BINARY

***** Change properties for CHECKS *****
DBSETPROP('CHECKS.CCHECKNO', 'Field', 'Caption', "Check No")
DBSETPROP('CHECKS.CID', 'Field', 'Caption', "ID Code")
DBSETPROP('CHECKS.CPAYEE', 'Field', 'Caption', "Payee")
DBSETPROP('CHECKS.CIDCHEC', 'Field', 'Caption', "Primary Key")
DBSETPROP('CHECKS.CIDTYPE', 'Field', 'Caption', "ID Type")
DBSETPROP('CHECKS.DCHECKDATE', 'Field', 'Caption', "Date")
DBSETPROP('CHECKS.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('CHECKS.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('CHECKS.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('CHECKS.CMEMO', 'Field', 'Caption', "Memo")
DBSETPROP('CHECKS.LPRINTED', 'Field', 'Caption', "Printed")
DBSETPROP('CHECKS.LVOID', 'Field', 'Caption', "Void")
DBSETPROP('CHECKS.NVOIDAMT', 'Field', 'Caption', "Void Amount")
DBSETPROP('CHECKS.CGROUP', 'Field', 'Caption', "Group")
DBSETPROP('CHECKS.LCLEARED', 'Field', 'Caption', "Cleared")
DBSETPROP('CHECKS.CACCTNO', 'Field', 'Caption', "Account No")
DBSETPROP('CHECKS.LMANUAL', 'Field', 'Caption', "Manual Ck")
DBSETPROP('CHECKS.CENTRYTYPE', 'Field', 'Caption', "Entry Type")
DBSETPROP('CHECKS.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('CHECKS.DPOSTDATE', 'Field', 'Caption', "Post Date")
DBSETPROP('CHECKS.LHIST', 'Field', 'Caption', "Historical Entry")
DBSETPROP('CHECKS.CSOURCE', 'Field', 'Caption', "Source")
DBSETPROP('CHECKS.LDELETED', 'Field', 'Caption', "Deleted")
DBSETPROP('CHECKS.DRECDATE', 'Field', 'Caption', "Reconciliation Date")
DBSETPROP('CHECKS.LDEPOSITED', 'Field', 'Caption', "Remove from Undepfunds")
CREATE TRIGGER ON 'CHECKS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'CHECKS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'CHECKS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_CHKCLEAR
***** Table setup for CHKCLEAR *****
CREATE TABLE 'CHKCLEAR.DBF' NAME 'CHKCLEAR' (CIDCHEC C(8) NOT NULL, ;
                       CTYPE C(1) NOT NULL, ;
                       DRECDATE D NOT NULL, ;
                       NAMOUNT N(12, 2) NOT NULL)

***** Create each index for CHKCLEAR *****
INDEX ON CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'
INDEX ON DRECDATE TAG DRECDATE COLLATE 'MACHINE'

***** Change properties for CHKCLEAR *****
DBSETPROP('CHKCLEAR.CIDCHEC', 'Field', 'Caption', "Primary Key")
DBSETPROP('CHKCLEAR.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('CHKCLEAR.DRECDATE', 'Field', 'Caption', "Recon Date")
DBSETPROP('CHKCLEAR.NAMOUNT', 'Field', 'Caption', "Amount")
ENDFUNC

FUNCTION MakeTable_COA
***** Table setup for COA *****
CREATE TABLE 'COA.DBF' NAME 'COA' (CACCTNO C(6) NOT NULL, ;
                  NACCTTYPE I NOT NULL, ;
                  CACCTDESC C(60) NOT NULL, ;
                  CPARENT C(6) NOT NULL, ;
                  LACCTUNIT L NOT NULL, ;
                  LACCTDEPT L NOT NULL, ;
                  LBANKACCT L NOT NULL, ;
                  LTOTALACCT L NOT NULL, ;
                  LTITLE L NOT NULL, ;
                  LRENT1099 L NOT NULL, ;
                  CAPCHECKNAME V(254) NOT NULL, ;
                  CDMCHECKNAME V(254) NOT NULL, ;
                  CPRCHECKNAME V(254) NOT NULL, ;
                  CLMCHECKNAME V(254) NOT NULL, ;
                  CCHECKNO C(10) NOT NULL, ;
                  CADDEDBY C(10) NOT NULL, ;
                  CCHANGEDBY C(10) NOT NULL, ;
                  DADDED T NOT NULL, ;
                  DCHANGED T NOT NULL, ;
                  LINACTIVE L NOT NULL)

***** Create each index for COA *****
INDEX ON UPPER(CACCTDESC) TAG ACCTDESC COLLATE 'MACHINE'
ALTER TABLE 'COA' ADD PRIMARY KEY CACCTNO TAG ACCTNO COLLATE 'MACHINE'
INDEX ON CACCTNO TAG DACCTNO DESCENDING  COLLATE 'MACHINE'
INDEX ON NACCTTYPE TAG NACCTTYPE COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'
INDEX ON UPPER(CACCTDESC) TAG CACCTDESC COLLATE 'MACHINE'
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'

***** Change properties for COA *****
DBSETPROP('COA.CACCTNO', 'Field', 'Caption', "Account")
DBSETPROP('COA.NACCTTYPE', 'Field', 'Caption', "Account Type")
DBSETPROP('COA.CACCTDESC', 'Field', 'Caption', "Description")
DBSETPROP('COA.CPARENT', 'Field', 'Caption', "Parent Acct")
DBSETPROP('COA.LACCTUNIT', 'Field', 'Caption', "Unit Required Flag")
DBSETPROP('COA.LACCTDEPT', 'Field', 'Caption', "Dept Required")
DBSETPROP('COA.LBANKACCT', 'Field', 'Caption', "Bank Account Flag")
DBSETPROP('COA.LTOTALACCT', 'Field', 'Caption', "Totaling Account")
DBSETPROP('COA.LTITLE', 'Field', 'Caption', "Title Account")
DBSETPROP('COA.LRENT1099', 'Field', 'Caption', "1099 Rental Account")
DBSETPROP('COA.CAPCHECKNAME', 'Field', 'Caption', "A/P Check Format File Name")
DBSETPROP('COA.CDMCHECKNAME', 'Field', 'Caption', "Rev Dist Check File Name")
DBSETPROP('COA.CPRCHECKNAME', 'Field', 'Caption', "P/R Check File Name")
DBSETPROP('COA.CLMCHECKNAME', 'Field', 'Caption', "Land Check File Name")
DBSETPROP('COA.CCHECKNO', 'Field', 'Caption', "Next Check No")
DBSETPROP('COA.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('COA.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('COA.DADDED', 'Field', 'Caption', "Added By")
DBSETPROP('COA.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('COA.LINACTIVE', 'Field', 'Caption', "Inactive Account")
CREATE TRIGGER ON 'COA' FOR DELETE AS __ri_delete_coa().AND.(foxaudit())
CREATE TRIGGER ON 'COA' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'COA' FOR UPDATE AS __ri_update_coa().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_COABAL
***** Table setup for COABAL *****
CREATE TABLE 'COABAL.DBF' NAME 'COABAL' (CACCTNO C(6) NOT NULL, ;
                     CFISCALYR C(4) NOT NULL, ;
                     CFISCALPRD C(2) NOT NULL, ;
                     NDEBITS N(12, 2) NOT NULL, ;
                     NCREDITS N(12, 2) NOT NULL)

***** Create each index for COABAL *****
INDEX ON CACCTNO TAG ACCTNO COLLATE 'MACHINE'
INDEX ON CACCTNO+CFISCALYR+CFISCALPRD TAG ACCTPRD COLLATE 'MACHINE'
INDEX ON CFISCALYR+CFISCALPRD TAG FISCPRD COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for COABAL *****
DBSETPROP('COABAL.CACCTNO', 'Field', 'Caption', "Account Number")
DBSETPROP('COABAL.CFISCALYR', 'Field', 'Caption', "Fiscal Year")
DBSETPROP('COABAL.CFISCALPRD', 'Field', 'Caption', "Fiscal Period")
DBSETPROP('COABAL.NDEBITS', 'Field', 'Caption', "Debits")
DBSETPROP('COABAL.NCREDITS', 'Field', 'Caption', "Credits")
ENDFUNC

FUNCTION MakeTable_COABALD
***** Table setup for COABALD *****
CREATE TABLE 'COABALD.DBF' NAME 'COABALD' (CDEPTNO C(8) NOT NULL, ;
                      CACCTNO C(6) NOT NULL, ;
                      CFISCALYR C(4) NOT NULL, ;
                      CFISCALPRD C(2) NOT NULL, ;
                      NDEBITS N(12, 2) NOT NULL, ;
                      NCREDITS N(12, 2) NOT NULL)

***** Create each index for COABALD *****
INDEX ON CACCTNO+CDEPTNO TAG ACCTNO COLLATE 'MACHINE'
INDEX ON CACCTNO+CFISCALYR+CFISCALPRD+CDEPTNO TAG ACCTPRD COLLATE 'MACHINE'
INDEX ON CFISCALYR+CFISCALPRD+CDEPTNO TAG FISCPRD COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for COABALD *****
DBSETPROP('COABALD.CDEPTNO', 'Field', 'Caption', "Dept No")
ENDFUNC

FUNCTION MakeTable_COABALU
***** Table setup for COABALU *****
CREATE TABLE 'COABALU.DBF' NAME 'COABALU' (CWELLID C(10) NOT NULL, ;
                      CACCTNO C(6) NOT NULL, ;
                      CFISCALYR C(4) NOT NULL, ;
                      CFISCALPRD C(2) NOT NULL, ;
                      NDEBITS N(12, 2) NOT NULL, ;
                      NCREDITS N(12, 2) NOT NULL)

***** Create each index for COABALU *****
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'
INDEX ON CACCTNO+CWELLID TAG ACCTNO COLLATE 'MACHINE'
INDEX ON CACCTNO+CFISCALYR+CFISCALPRD+CWELLID TAG ACCTPRD COLLATE 'MACHINE'
INDEX ON CFISCALYR+CFISCALPRD+CWELLID TAG FISCPRD COLLATE 'MACHINE'

***** Change properties for COABALU *****
ENDFUNC

FUNCTION MakeTable_CODR0021W
***** Table setup for CODR0021W *****
CREATE TABLE 'CODR0021W.DBF' NAME 'CODR0021W' (CYEAR C(4) NOT NULL, ;
                        CWELLID C(10) NOT NULL, ;
                        NGROSSINC N(12, 2) NOT NULL, ;
                        NGROSSSTRIP N(12, 2) NOT NULL, ;
                        NADVALOREM N(12, 2) NOT NULL, ;
                        NADVALSTRIP N(12, 2) NOT NULL, ;
                        NSEVTAX N(12, 2) NOT NULL, ;
                        COWNERID C(10) NOT NULL, ;
                        NCASHINC N(12, 2) NOT NULL, ;
                        NCASHADVAL N(12, 2) NOT NULL, ;
                        NCASHSTRIP N(12, 2) NOT NULL, ;
                        NCASHADSTRIP N(12, 2) NOT NULL, ;
                        PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1 DEFAULT (RECNO()-1)+1)

***** Create each index for CODR0021W *****
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON CYEAR+COWNERID+CWELLID TAG OWNWELL COLLATE 'MACHINE'
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for CODR0021W *****
DBSETPROP('CODR0021W.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('CODR0021W.CWELLID', 'Field', 'Caption', "Well")
DBSETPROP('CODR0021W.NGROSSINC', 'Field', 'Caption', "Accrued Income")
DBSETPROP('CODR0021W.NGROSSSTRIP', 'Field', 'Caption', "Accrued Inc from Strip")
DBSETPROP('CODR0021W.NADVALOREM', 'Field', 'Caption', "Accrued Advalorem")
DBSETPROP('CODR0021W.NADVALSTRIP', 'Field', 'Caption', "Accrued Advalorem from Strip")
DBSETPROP('CODR0021W.NSEVTAX', 'Field', 'Caption', "Severance Taxes")
DBSETPROP('CODR0021W.COWNERID', 'Field', 'Caption', "Owner")
DBSETPROP('CODR0021W.NCASHINC', 'Field', 'Caption', "Cash Income")
DBSETPROP('CODR0021W.NCASHADVAL', 'Field', 'Caption', "Cash Advalorem")
DBSETPROP('CODR0021W.NCASHSTRIP', 'Field', 'Caption', "Cash Inc from Strip")
DBSETPROP('CODR0021W.NCASHADSTRIP', 'Field', 'Caption', "Cash Advalorem from Strip")
DBSETPROP('CODR0021W.PK', 'Field', 'Caption', "Pk")
ENDFUNC

FUNCTION MakeTable_CODR0456
***** Table setup for CODR0456 *****
CREATE TABLE 'CODR0456.DBF' NAME 'CODR0456' (IPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                       CYEAR C(4) NOT NULL, ;
                       CPERIODEND C(2) NOT NULL, ;
                       CDUEDATE C(2) NOT NULL, ;
                       NJAN I NOT NULL, ;
                       NFEB I NOT NULL, ;
                       NMAR I NOT NULL, ;
                       NAPR I NOT NULL, ;
                       NMAY I NOT NULL, ;
                       NJUN I NOT NULL, ;
                       NJUL I NOT NULL, ;
                       NAUG I NOT NULL, ;
                       NSEP I NOT NULL, ;
                       NOCT I NOT NULL, ;
                       NNOV I NOT NULL, ;
                       NDEC I NOT NULL, ;
                       NTAXREMITTED N(12, 0) NOT NULL, ;
                       NTAXWH I NOT NULL, ;
                       NTOTALFORMS I NOT NULL, ;
                       NMORETAX I NOT NULL, ;
                       NREFUND I NOT NULL, ;
                       NPERCENT N(5, 2) NOT NULL, ;
                       NTOTALOWED I NOT NULL, ;
                       LPAIDBYEFT L NOT NULL, ;
                       NPENALTY I NOT NULL, ;
                       NINTEREST I NOT NULL, ;
                       TMODIFIED T NOT NULL, ;
                       CMODIFIED C(10) NOT NULL)

***** Create each index for CODR0456 *****
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON IPK TAG PK COLLATE 'MACHINE'

***** Change properties for CODR0456 *****
DBSETPROP('CODR0456.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('CODR0456.CPERIODEND', 'Field', 'Caption', "Period Ended")
DBSETPROP('CODR0456.CDUEDATE', 'Field', 'Caption', "Due Date")
DBSETPROP('CODR0456.NJAN', 'Field', 'Caption', "January")
DBSETPROP('CODR0456.NFEB', 'Field', 'Caption', "February")
DBSETPROP('CODR0456.NMAR', 'Field', 'Caption', "March")
DBSETPROP('CODR0456.NAPR', 'Field', 'Caption', "April")
DBSETPROP('CODR0456.NMAY', 'Field', 'Caption', "May")
DBSETPROP('CODR0456.NJUN', 'Field', 'Caption', "June")
DBSETPROP('CODR0456.NJUL', 'Field', 'Caption', "July")
DBSETPROP('CODR0456.NAUG', 'Field', 'Caption', "August")
DBSETPROP('CODR0456.NSEP', 'Field', 'Caption', "September")
DBSETPROP('CODR0456.NOCT', 'Field', 'Caption', "October")
DBSETPROP('CODR0456.NNOV', 'Field', 'Caption', "November")
DBSETPROP('CODR0456.NDEC', 'Field', 'Caption', "December")
DBSETPROP('CODR0456.NTAXREMITTED', 'Field', 'Caption', "Tax Remitted")
DBSETPROP('CODR0456.NTAXWH', 'Field', 'Caption', "Tax Withheld")
DBSETPROP('CODR0456.NTOTALFORMS', 'Field', 'Caption', "No of DR0021W Forms")
DBSETPROP('CODR0456.NMORETAX', 'Field', 'Caption', "Additional Tax")
DBSETPROP('CODR0456.NREFUND', 'Field', 'Caption', "Refund Amount")
DBSETPROP('CODR0456.NPERCENT', 'Field', 'Caption', "Interest Pct")
DBSETPROP('CODR0456.NTOTALOWED', 'Field', 'Caption', "Amount Owed")
DBSETPROP('CODR0456.LPAIDBYEFT', 'Field', 'Caption', "Paid by EFT")
DBSETPROP('CODR0456.NPENALTY', 'Field', 'Caption', "Penalty")
DBSETPROP('CODR0456.NINTEREST', 'Field', 'Caption', "Interest Amount")
DBSETPROP('CODR0456.TMODIFIED', 'Field', 'Caption', "When Modified")
DBSETPROP('CODR0456.CMODIFIED', 'Field', 'Caption', "Who Modified")
ENDFUNC

FUNCTION MakeTable_CODR0461
***** Table setup for CODR0461 *****
CREATE TABLE 'CODR0461.DBF' NAME 'CODR0461' (IPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                       CPERIOD C(11) NOT NULL, ;
                       NTAXWH N(12, 2) NOT NULL, ;
                       CPPMONTH C(5) NOT NULL, ;
                       NPPTAX N(12, 2) NOT NULL, ;
                       NOVERPMT N(12, 2) NOT NULL, ;
                       NPENALTY N(12, 2) NOT NULL, ;
                       NINTEREST N(12, 2) NOT NULL, ;
                       NTOTALDUE N(12, 2) NOT NULL, ;
                       LPAIDEFT L NOT NULL, ;
                       DDATE D NOT NULL, ;
                       TMODIFIED T NOT NULL, ;
                       CMODIFIED C(10) NOT NULL, ;
                       CSTATE C(2) NOT NULL)

***** Create each index for CODR0461 *****
INDEX ON CPERIOD TAG CPERIOD COLLATE 'MACHINE'
INDEX ON IPK TAG PK CANDIDATE COLLATE 'MACHINE'

***** Change properties for CODR0461 *****
DBSETPROP('CODR0461.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('CODR0461.NTAXWH', 'Field', 'Caption', "Tax Withheld")
DBSETPROP('CODR0461.CPPMONTH', 'Field', 'Caption', "Prior Period Month")
DBSETPROP('CODR0461.NPPTAX', 'Field', 'Caption', "Prior Period Tax")
DBSETPROP('CODR0461.NOVERPMT', 'Field', 'Caption', "Overpayment Amount")
DBSETPROP('CODR0461.NPENALTY', 'Field', 'Caption', "Penalty")
DBSETPROP('CODR0461.NINTEREST', 'Field', 'Caption', "Interest Amount")
DBSETPROP('CODR0461.NTOTALDUE', 'Field', 'Caption', "Total Due")
DBSETPROP('CODR0461.LPAIDEFT', 'Field', 'Caption', "Paid by EFT")
DBSETPROP('CODR0461.DDATE', 'Field', 'Caption', "Date")
DBSETPROP('CODR0461.TMODIFIED', 'Field', 'Caption', "Last Modified")
DBSETPROP('CODR0461.CMODIFIED', 'Field', 'Caption', "Who Modified")
DBSETPROP('CODR0461.CSTATE', 'Field', 'Caption', "State")
ENDFUNC

FUNCTION MakeTable_CSDISDET
***** Table setup for CSDISDET *****
CREATE TABLE 'CSDISDET.DBF' NAME 'CSDISDET' (CIDDISD C(10) NOT NULL, ;
                       CDESC C(40) NOT NULL, ;
                       NAMOUNT N(12, 2) NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       CUNITNO C(10) NOT NULL, ;
                       CDEPTNO C(8) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       LNON1099 L NOT NULL, ;
                       CCATCODE C(4) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       CPRODYEAR C(4) NOT NULL, ;
                       CPRODPERIOD C(2) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       NSALTBBL I NOT NULL, ;
                       CDISPERM C(6) NOT NULL, ;
                       CDISPCODE C(2) NOT NULL, ;
                       CWASTECODE C(3) NOT NULL, ;
                       CAFENO C(10) NOT NULL)

***** Create each index for CSDISDET *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
ALTER TABLE 'CSDISDET' ADD PRIMARY KEY CIDDISD TAG CIDDISD COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CUNITNO TAG CUNITNO COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for CSDISDET *****
DBSETPROP('CSDISDET.CIDDISD', 'Field', 'Caption', "Primary Key")
DBSETPROP('CSDISDET.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('CSDISDET.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('CSDISDET.CACCTNO', 'Field', 'Caption', "Account Number")
DBSETPROP('CSDISDET.CUNITNO', 'Field', 'Caption', "Well ID")
DBSETPROP('CSDISDET.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('CSDISDET.CBATCH', 'Field', 'Caption', "Link to Disb Header")
DBSETPROP('CSDISDET.LNON1099', 'Field', 'Caption', "Non 1099 Expense")
DBSETPROP('CSDISDET.CCATCODE', 'Field', 'Caption', "AFE/Category Number")
DBSETPROP('CSDISDET.COWNERID', 'Field', 'Caption', "Allocate All To Owner")
DBSETPROP('CSDISDET.CPRODYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('CSDISDET.CPRODPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('CSDISDET.CIDCHEC', 'Field', 'Caption', "Checks Key")
DBSETPROP('CSDISDET.NSALTBBL', 'Field', 'Caption', "Salt Water Amount")
DBSETPROP('CSDISDET.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('CSDISDET.CDISPCODE', 'Field', 'Caption', "Disposal Code")
DBSETPROP('CSDISDET.CWASTECODE', 'Field', 'Caption', "Waste Code")
DBSETPROP('CSDISDET.CAFENO', 'Field', 'Caption', "AFE No")
CREATE TRIGGER ON 'CSDISDET' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'CSDISDET' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'CSDISDET' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_CSDISHDR
***** Table setup for CSDISHDR *****
CREATE TABLE 'CSDISHDR.DBF' NAME 'CSDISHDR' (CBATCH C(8) NOT NULL, ;
                       CID C(10) NOT NULL, ;
                       CNAME C(40) NOT NULL, ;
                       DDATE D NOT NULL, ;
                       NCASHAMT N(12, 2) NOT NULL, ;
                       CCASHACCT C(6) NOT NULL, ;
                       CCHECKNO C(10) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       CINVNUM C(20) NOT NULL, ;
                       DENTDATE D NOT NULL, ;
                       MDISBMEMO M NOT NULL, ;
                       LCHKMEMO L NOT NULL, ;
                       DPOSTDATE D NOT NULL, ;
                       CACCTLISTID C(36) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for CSDISHDR *****
INDEX ON CCASHACCT TAG CACCTNO COLLATE 'MACHINE'
ALTER TABLE 'CSDISHDR' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON ALLTRIM(CCHECKNO) TAG CCHECKNO COLLATE 'MACHINE'
INDEX ON CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'
INDEX ON CINVNUM TAG CINVNUM COLLATE 'MACHINE'
INDEX ON CNAME TAG CNAME COLLATE 'MACHINE'
INDEX ON DDATE TAG DATE COLLATE 'MACHINE'
INDEX ON CID TAG VENDORID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for CSDISHDR *****
DBSETPROP('CSDISHDR.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('CSDISHDR.CID', 'Field', 'Caption', "ID Code")
DBSETPROP('CSDISHDR.CNAME', 'Field', 'Caption', "Name")
DBSETPROP('CSDISHDR.DDATE', 'Field', 'Caption', "Date")
DBSETPROP('CSDISHDR.NCASHAMT', 'Field', 'Caption', "Total Amount")
DBSETPROP('CSDISHDR.CCASHACCT', 'Field', 'Caption', "Cash Account")
DBSETPROP('CSDISHDR.CCHECKNO', 'Field', 'Caption', "Check Number")
DBSETPROP('CSDISHDR.CIDCHEC', 'Field', 'Caption', "Key to Check Register")
DBSETPROP('CSDISHDR.CINVNUM', 'Field', 'Caption', "Invoice Number")
DBSETPROP('CSDISHDR.DENTDATE', 'Field', 'Caption', "Date Entered")
DBSETPROP('CSDISHDR.MDISBMEMO', 'Field', 'Caption', "Check Memo")
DBSETPROP('CSDISHDR.LCHKMEMO', 'Field', 'Caption', "Print on Check")
DBSETPROP('CSDISHDR.DPOSTDATE', 'Field', 'Caption', "Post Date")
DBSETPROP('CSDISHDR.CACCTLISTID', 'Field', 'Caption', "QB Account")
DBSETPROP('CSDISHDR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('CSDISHDR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('CSDISHDR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('CSDISHDR.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'CSDISHDR' FOR DELETE AS __ri_delete_csdishdr().AND.(foxaudit())
CREATE TRIGGER ON 'CSDISHDR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'CSDISHDR' FOR UPDATE AS __ri_update_csdishdr().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_CSRCTDET
***** Table setup for CSRCTDET *****
CREATE TABLE 'CSRCTDET.DBF' NAME 'CSRCTDET' (CIDRCTD C(8) NOT NULL, ;
                       CDESC C(40) NOT NULL, ;
                       NAMOUNT N(12, 2) NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       CDEPTNO C(8) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       CTYPE C(5) NOT NULL, ;
                       NUNITS N(15, 2) NOT NULL, ;
                       NPRICE N(12, 6) NOT NULL, ;
                       CNOTES M NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       CBEGRANGE C(5) NOT NULL, ;
                       CENDRANGE C(5) NOT NULL, ;
                       NDAYSON N(4, 0) NOT NULL, ;
                       LWELLRCPT L NOT NULL, ;
                       CPRODPERIOD C(2) NOT NULL, ;
                       CPRODYEAR C(4) NOT NULL, ;
                       LGROSSUNITS L NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       NSALTBBL I NOT NULL, ;
                       CDISPERM C(10) NOT NULL, ;
                       CWASTECODE C(3) NOT NULL, ;
                       CDISPCODE C(2) NOT NULL, ;
                       CINTTYPE C(1) NOT NULL, ;
                       CAFENO C(10) NOT NULL, ;
                       NGROSSUNITS N(12, 2) NOT NULL, ;
                       NGROSSVAL N(12, 2) NOT NULL, ;
                       CREFID C(20) NOT NULL, ;
                       CPAYEE C(40) NOT NULL, ;
                       CDECK C(10) NOT NULL, ;
                       NINTEREST N(11, 7) NOT NULL)

***** Create each index for CSRCTDET *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
ALTER TABLE 'CSRCTDET' ADD PRIMARY KEY CIDRCTD TAG CIDPURD COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CTYPE TAG CTYPE COLLATE 'MACHINE'
INDEX ON CDECK TAG CDECK COLLATE 'MACHINE'

***** Change properties for CSRCTDET *****
DBSETPROP('CSRCTDET.CIDRCTD', 'Field', 'Caption', "Primary Key")
DBSETPROP('CSRCTDET.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('CSRCTDET.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('CSRCTDET.CACCTNO', 'Field', 'Caption', "Account")
DBSETPROP('CSRCTDET.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('CSRCTDET.CBATCH', 'Field', 'Caption', "Link to Rct Header")
DBSETPROP('CSRCTDET.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('CSRCTDET.CTYPE', 'Field', 'Caption', "Rev Type")
DBSETPROP('CSRCTDET.NUNITS', 'Field', 'Caption', "Units")
DBSETPROP('CSRCTDET.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('CSRCTDET.CNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('CSRCTDET.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('CSRCTDET.CBEGRANGE', 'Field', 'Caption', "Beginning Range")
DBSETPROP('CSRCTDET.CENDRANGE', 'Field', 'Caption', "Ending Range")
DBSETPROP('CSRCTDET.NDAYSON', 'Field', 'Caption', "Days On")
DBSETPROP('CSRCTDET.LWELLRCPT', 'Field', 'Caption', "Well Receipt Record")
DBSETPROP('CSRCTDET.CPRODPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('CSRCTDET.CPRODYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('CSRCTDET.LGROSSUNITS', 'Field', 'Caption', "Gross Units")
DBSETPROP('CSRCTDET.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('CSRCTDET.NSALTBBL', 'Field', 'Caption', "BBL of Water")
DBSETPROP('CSRCTDET.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('CSRCTDET.CWASTECODE', 'Field', 'Caption', "Waste Code")
DBSETPROP('CSRCTDET.CDISPCODE', 'Field', 'Caption', "Disposal Code")
DBSETPROP('CSRCTDET.CINTTYPE', 'Field', 'Caption', "Interest Type")
DBSETPROP('CSRCTDET.CAFENO', 'Field', 'Caption', "AFE No")
DBSETPROP('CSRCTDET.NGROSSUNITS', 'Field', 'Caption', "Gross Units")
DBSETPROP('CSRCTDET.NGROSSVAL', 'Field', 'Caption', "Gross Value")
DBSETPROP('CSRCTDET.CREFID', 'Field', 'Caption', "REF ID")
DBSETPROP('CSRCTDET.CPAYEE', 'Field', 'Caption', "Payee")
DBSETPROP('CSRCTDET.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('CSRCTDET.NINTEREST', 'Field', 'Caption', "Interest")
CREATE TRIGGER ON 'CSRCTDET' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'CSRCTDET' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'CSRCTDET' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_CSRCTHDR
***** Table setup for CSRCTHDR *****
CREATE TABLE 'CSRCTHDR.DBF' NAME 'CSRCTHDR' (CBATCH C(8) NOT NULL, ;
                       CID C(10) NOT NULL, ;
                       CNAME C(40) NOT NULL, ;
                       DDATE D NOT NULL, ;
                       DPOSTDATE D NOT NULL, ;
                       NCASHAMT N(12, 2) NOT NULL, ;
                       CCASHACCT C(6) NOT NULL, ;
                       CCHECKNO C(10) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       CINVNUM C(20) NOT NULL, ;
                       CRCTTYPE C(2) NOT NULL, ;
                       LNETREV L NOT NULL, ;
                       DENTDATE T NOT NULL, ;
                       LUPLOADED L NOT NULL, ;
                       CDMBATCH C(8) NOT NULL, ;
                       CACCTLISTID C(36) NOT NULL, ;
                       CTXNID C(36) NOT NULL, ;
                       LNOQBPOST L NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for CSRCTHDR *****
INDEX ON CCASHACCT TAG CACCTNO COLLATE 'MACHINE'
ALTER TABLE 'CSRCTHDR' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CID TAG CID COLLATE 'MACHINE'
INDEX ON CNAME TAG CNAME COLLATE 'MACHINE'
INDEX ON DDATE TAG DATE COLLATE 'MACHINE'
INDEX ON DTOS(DDATE)+CID TAG DATEORD COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for CSRCTHDR *****
DBSETPROP('CSRCTHDR.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('CSRCTHDR.CID', 'Field', 'Caption', "ID Code")
DBSETPROP('CSRCTHDR.CNAME', 'Field', 'Caption', "Name")
DBSETPROP('CSRCTHDR.DDATE', 'Field', 'Caption', "Receipt Date")
DBSETPROP('CSRCTHDR.DPOSTDATE', 'Field', 'Caption', "Post Date")
DBSETPROP('CSRCTHDR.NCASHAMT', 'Field', 'Caption', "Total Amount")
DBSETPROP('CSRCTHDR.CCASHACCT', 'Field', 'Caption', "Cash Account")
DBSETPROP('CSRCTHDR.CCHECKNO', 'Field', 'Caption', "Check Number")
DBSETPROP('CSRCTHDR.CIDCHEC', 'Field', 'Caption', "Link to Check Register")
DBSETPROP('CSRCTHDR.CINVNUM', 'Field', 'Caption', "Invoice Number")
DBSETPROP('CSRCTHDR.CRCTTYPE', 'Field', 'Caption', "Receipt Type")
DBSETPROP('CSRCTHDR.LNETREV', 'Field', 'Caption', "Net Entered")
DBSETPROP('CSRCTHDR.DENTDATE', 'Field', 'Caption', "Date Entered")
DBSETPROP('CSRCTHDR.LUPLOADED', 'Field', 'Caption', "Uploaded From Excel")
DBSETPROP('CSRCTHDR.CDMBATCH', 'Field', 'Caption', "DM Batch")
DBSETPROP('CSRCTHDR.CACCTLISTID', 'Field', 'Caption', "QB Account")
DBSETPROP('CSRCTHDR.CTXNID', 'Field', 'Caption', "QB Txn ID")
DBSETPROP('CSRCTHDR.LNOQBPOST', 'Field', 'Caption', "Post to QB")
DBSETPROP('CSRCTHDR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('CSRCTHDR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('CSRCTHDR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('CSRCTHDR.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'CSRCTHDR' FOR DELETE AS __ri_delete_csrcthdr().AND.(foxaudit())
CREATE TRIGGER ON 'CSRCTHDR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'CSRCTHDR' FOR UPDATE AS __ri_update_csrcthdr().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_CUSTS
***** Table setup for CUSTS *****
CREATE TABLE 'CUSTS.DBF' NAME 'CUSTS' (CCUSTID C(10) NOT NULL, ;
                    CCUSTNAME C(60) NOT NULL, ;
                    CADDRESS1 C(60) NOT NULL, ;
                    CADDRESS2 C(60) NOT NULL, ;
                    CCITY C(30) NOT NULL, ;
                    CSTATE C(2) NOT NULL, ;
                    CZIP C(10) NOT NULL, ;
                    CPHONE C(14) NOT NULL, ;
                    CFAXPHONE C(14) NOT NULL, ;
                    CCONTACT C(30) NOT NULL, ;
                    CBADDR1 C(60) NOT NULL, ;
                    CBADDR2 C(60) NOT NULL, ;
                    CBCITY C(30) NOT NULL, ;
                    CBSTATE C(2) NOT NULL, ;
                    CBZIP C(10) NOT NULL, ;
                    CBPHONE C(14) NOT NULL, ;
                    CBPHONE2 C(14) NOT NULL, ;
                    CBFAXPHONE C(14) NOT NULL, ;
                    CBCONTACT C(30) NOT NULL, ;
                    CTAXID C(11) NOT NULL, ;
                    MBILLNOTE M NOT NULL, ;
                    LCUSTINS L NOT NULL, ;
                    CIDTERM C(8) NOT NULL, ;
                    CTAXSVC C(15) NOT NULL, ;
                    CPRICEDEF C(1) NOT NULL, ;
                    CTAXSTAT C(1) NOT NULL, ;
                    CFINCODE C(1) NOT NULL, ;
                    DLSALEDT D NOT NULL, ;
                    NLSALEAMT N(12, 2) NOT NULL, ;
                    DLASTPMT D NOT NULL, ;
                    NLASTPMT N(9, 2) NOT NULL, ;
                    NSALECYTD N(12, 2) NOT NULL, ;
                    NSALELYTD N(12, 2) NOT NULL, ;
                    NTOTSALE N(12, 2) NOT NULL, ;
                    NCURBAL N(12, 2) NOT NULL, ;
                    NBAL30_60 N(12, 2) NOT NULL, ;
                    NBAL60_90 N(12, 2) NOT NULL, ;
                    NBALOV90 N(12, 2) NOT NULL, ;
                    MCUSTNOTE M NOT NULL, ;
                    CSALEACCT C(6) NOT NULL, ;
                    CTAXCODE C(6) NOT NULL, ;
                    LCUSTCOMP L NOT NULL, ;
                    NCREDITLIM N(12, 2) NOT NULL, ;
                    CADDEDBY C(10) NOT NULL, ;
                    CCHANGEDBY C(10) NOT NULL, ;
                    DADDED T NOT NULL, ;
                    DCHANGED T NOT NULL, ;
                    CEMAIL V(254) NOT NULL, ;
                    CEMAILCODE C(20) NOT NULL, ;
                    LEMAILOPT L NOT NULL, ;
                    LEMAILVER L NOT NULL, ;
                    LVERIFIED L NOT NULL)

***** Create each index for CUSTS *****
ALTER TABLE 'CUSTS' ADD PRIMARY KEY UPPER(CCUSTID) TAG CCUSTID COLLATE 'MACHINE'
INDEX ON UPPER(CCUSTNAME) TAG CCUSTNAME COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for CUSTS *****
DBSETPROP('CUSTS.CCUSTID', 'Field', 'Caption', "Customer ID")
DBSETPROP('CUSTS.CCUSTNAME', 'Field', 'Caption', "Customer Name")
DBSETPROP('CUSTS.CADDRESS1', 'Field', 'Caption', "Address 1")
DBSETPROP('CUSTS.CADDRESS2', 'Field', 'Caption', "Address 2")
DBSETPROP('CUSTS.CCITY', 'Field', 'Caption', "City")
DBSETPROP('CUSTS.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('CUSTS.CZIP', 'Field', 'Caption', "Zip")
DBSETPROP('CUSTS.CPHONE', 'Field', 'Caption', "Phone")
DBSETPROP('CUSTS.CFAXPHONE', 'Field', 'Caption', "Fax")
DBSETPROP('CUSTS.CCONTACT', 'Field', 'Caption', "Contact")
DBSETPROP('CUSTS.CBADDR1', 'Field', 'Caption', "Billing Address1")
DBSETPROP('CUSTS.CBADDR2', 'Field', 'Caption', "Billing Address 2")
DBSETPROP('CUSTS.CBCITY', 'Field', 'Caption', "Billing City")
DBSETPROP('CUSTS.CBSTATE', 'Field', 'Caption', "Billing State")
DBSETPROP('CUSTS.CBZIP', 'Field', 'Caption', "Billing Zip")
DBSETPROP('CUSTS.CBPHONE', 'Field', 'Caption', "Billing Phone")
DBSETPROP('CUSTS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('CUSTS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('CUSTS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('CUSTS.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('CUSTS.CEMAIL', 'Field', 'Caption', "Email")
DBSETPROP('CUSTS.CEMAILCODE', 'Field', 'Caption', "Email Verification Code")
DBSETPROP('CUSTS.LEMAILOPT', 'Field', 'Caption', "Email Opt Out")
DBSETPROP('CUSTS.LEMAILVER', 'Field', 'Caption', "Email Verification")
DBSETPROP('CUSTS.LVERIFIED', 'Field', 'Caption', "Verified")
CREATE TRIGGER ON 'CUSTS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'CUSTS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'CUSTS' FOR UPDATE AS __ri_update_custs().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_DECLINE
***** Table setup for DECLINE *****
CREATE TABLE 'DECLINE.DBF' NAME 'DECLINE' (COWNNAME C(40) NOT NULL, ;
                      CLEASENAME C(30) NOT NULL, ;
                      COWNTYPE C(1) NOT NULL, ;
                      CPRODUCER C(40) NOT NULL, ;
                      CFIELDNAME C(30) NOT NULL, ;
                      CIDFIELD C(5) NOT NULL, ;
                      NINVAMT N(12, 2) NOT NULL, ;
                      NCURPAY N(12, 2) NOT NULL, ;
                      NTOTPAY N(12, 2) NOT NULL, ;
                      NRATE N(7, 2) NOT NULL, ;
                      CYEAR0 C(4) NOT NULL, ;
                      NCASHRCV0 N(12, 2) NOT NULL, ;
                      NCASHTOT0 N(12, 2) NOT NULL, ;
                      CYEAR1 C(4) NOT NULL, ;
                      NCASHRCV1 N(12, 2) NOT NULL, ;
                      NCASHTOT1 N(12, 2) NOT NULL, ;
                      CYEAR2 C(4) NOT NULL, ;
                      NCASHRCV2 N(12, 2) NOT NULL, ;
                      NCASHTOT2 N(12, 2) NOT NULL, ;
                      CYEAR3 C(4) NOT NULL, ;
                      NCASHRCV3 N(12, 2) NOT NULL, ;
                      NCASHTOT3 N(12, 2) NOT NULL, ;
                      CYEAR4 C(4) NOT NULL, ;
                      NCASHRCV4 N(12, 2) NOT NULL, ;
                      NCASHTOT4 N(12, 2) NOT NULL, ;
                      CYEAR5 C(4) NOT NULL, ;
                      NCASHRCV5 N(12, 2) NOT NULL, ;
                      NCASHTOT5 N(12, 2) NOT NULL, ;
                      CYEAR6 C(4) NOT NULL, ;
                      NCASHRCV6 N(12, 2) NOT NULL, ;
                      NCASHTOT6 N(12, 2) NOT NULL, ;
                      CYEAR7 C(4) NOT NULL, ;
                      NCASHRCV7 N(12, 2) NOT NULL, ;
                      NCASHTOT7 N(12, 2) NOT NULL, ;
                      CYEAR8 C(4) NOT NULL, ;
                      NCASHRCV8 N(12, 2) NOT NULL, ;
                      NCASHTOT8 N(12, 2) NOT NULL, ;
                      CYEAR9 C(4) NOT NULL, ;
                      NCASHRCV9 N(12, 2) NOT NULL, ;
                      NCASHTOT9 N(12, 2) NOT NULL, ;
                      CYEAR10 C(4) NOT NULL, ;
                      NCASHRCV10 N(12, 2) NOT NULL, ;
                      NCASHTOT10 N(12, 2) NOT NULL, ;
                      CYEAR11 C(4) NOT NULL, ;
                      NCASHRCV11 N(12, 2) NOT NULL, ;
                      NCASHTOT11 N(12, 2) NOT NULL, ;
                      CYEAR12 C(4) NOT NULL, ;
                      NCASHRCV12 N(12, 2) NOT NULL, ;
                      NCASHTOT12 N(12, 2) NOT NULL, ;
                      NBBL0 N(12, 2) NOT NULL, ;
                      NBBL1 N(12, 2) NOT NULL, ;
                      NBBL2 N(12, 2) NOT NULL, ;
                      NBBL3 N(12, 2) NOT NULL, ;
                      NBBL4 N(12, 2) NOT NULL, ;
                      NBBL5 N(12, 2) NOT NULL, ;
                      NBBL6 N(12, 2) NOT NULL, ;
                      NBBL7 N(12, 2) NOT NULL, ;
                      NBBL8 N(12, 2) NOT NULL, ;
                      NBBL9 N(12, 2) NOT NULL, ;
                      NBBL10 N(12, 2) NOT NULL, ;
                      NBBL11 N(12, 2) NOT NULL, ;
                      NBBL12 N(12, 2) NOT NULL, ;
                      NMCF0 N(12, 2) NOT NULL, ;
                      NMCF1 N(12, 2) NOT NULL, ;
                      NMCF2 N(12, 2) NOT NULL, ;
                      NMCF3 N(12, 2) NOT NULL, ;
                      NMCF4 N(12, 2) NOT NULL, ;
                      NMCF5 N(12, 2) NOT NULL, ;
                      NMCF6 N(12, 2) NOT NULL, ;
                      NMCF7 N(12, 2) NOT NULL, ;
                      NMCF8 N(12, 2) NOT NULL, ;
                      NMCF9 N(12, 2) NOT NULL, ;
                      NMCF10 N(12, 2) NOT NULL, ;
                      NMCF11 N(12, 2) NOT NULL, ;
                      NMCF12 N(12, 2) NOT NULL, ;
                      LEST1 L NOT NULL, ;
                      LEST2 L NOT NULL, ;
                      LEST3 L NOT NULL, ;
                      LEST4 L NOT NULL, ;
                      LEST5 L NOT NULL, ;
                      LEST6 L NOT NULL, ;
                      LEST7 L NOT NULL, ;
                      LEST8 L NOT NULL, ;
                      LEST9 L NOT NULL, ;
                      LEST10 L NOT NULL, ;
                      LEST11 L NOT NULL, ;
                      LEST12 L NOT NULL, ;
                      NAVGBBLPRC N(7, 4) NOT NULL, ;
                      NAVGMCFPRC N(7, 4) NOT NULL, ;
                      NPCT0 N(7, 2) NOT NULL, ;
                      NPCT1 N(7, 2) NOT NULL, ;
                      NPCT2 N(7, 2) NOT NULL, ;
                      NPCT3 N(7, 2) NOT NULL, ;
                      NPCT4 N(7, 2) NOT NULL, ;
                      NPCT5 N(7, 2) NOT NULL, ;
                      NPCT6 N(7, 2) NOT NULL, ;
                      NPCT7 N(7, 2) NOT NULL, ;
                      NPCT8 N(7, 2) NOT NULL, ;
                      NPCT9 N(7, 2) NOT NULL, ;
                      NPCT10 N(7, 2) NOT NULL, ;
                      NPCT11 N(7, 2) NOT NULL, ;
                      NPCT12 N(7, 2) NOT NULL, ;
                      NDEPL0 N(12, 2) NOT NULL, ;
                      NDEPL1 N(12, 2) NOT NULL, ;
                      NDEPL2 N(12, 2) NOT NULL, ;
                      NDEPL3 N(12, 2) NOT NULL, ;
                      NDEPL4 N(12, 2) NOT NULL, ;
                      NDEPL5 N(12, 2) NOT NULL, ;
                      NDEPL6 N(12, 2) NOT NULL, ;
                      NDEPL7 N(12, 2) NOT NULL, ;
                      NDEPL8 N(12, 2) NOT NULL, ;
                      NDEPL9 N(12, 2) NOT NULL, ;
                      NDEPL10 N(12, 2) NOT NULL, ;
                      NDEPL11 N(12, 2) NOT NULL, ;
                      NDEPL12 N(12, 2) NOT NULL, ;
                      CSTATUS C(1) NOT NULL, ;
                      DSOLD D NOT NULL, ;
                      NSELLPRICE N(12, 2) NOT NULL, ;
                      NHISTEXP N(12, 2) NOT NULL, ;
                      NEXP0 N(12, 2) NOT NULL, ;
                      NEXP1 N(12, 2) NOT NULL, ;
                      NEXP2 N(12, 2) NOT NULL, ;
                      NEXP3 N(12, 2) NOT NULL, ;
                      NEXP4 N(12, 2) NOT NULL, ;
                      NEXP5 N(12, 2) NOT NULL, ;
                      NEXP6 N(12, 2) NOT NULL, ;
                      NEXP7 N(12, 2) NOT NULL, ;
                      NEXP8 N(12, 2) NOT NULL, ;
                      NEXP9 N(12, 2) NOT NULL, ;
                      NEXP10 N(12, 2) NOT NULL, ;
                      NEXP11 N(12, 2) NOT NULL, ;
                      NEXP12 N(12, 2) NOT NULL, ;
                      N1TIME0 N(9, 2) NOT NULL, ;
                      N1TIME1 N(9, 2) NOT NULL, ;
                      N1TIME2 N(9, 2) NOT NULL, ;
                      N1TIME3 N(9, 2) NOT NULL, ;
                      N1TIME4 N(9, 2) NOT NULL, ;
                      N1TIME5 N(9, 2) NOT NULL, ;
                      N1TIME6 N(9, 2) NOT NULL, ;
                      N1TIME7 N(9, 2) NOT NULL, ;
                      N1TIME8 N(9, 2) NOT NULL, ;
                      N1TIME9 N(9, 2) NOT NULL, ;
                      N1TIME10 N(9, 2) NOT NULL, ;
                      N1TIME11 N(9, 2) NOT NULL, ;
                      N1TIME12 N(9, 2) NOT NULL)

***** Create each index for DECLINE *****
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON UPPER(COWNNAME)+UPPER(CLEASENAME) TAG LEASENAME COLLATE 'MACHINE'

***** Change properties for DECLINE *****
ENDFUNC

FUNCTION MakeTable_DEPLFILE
***** Table setup for DEPLFILE *****
CREATE TABLE 'DEPLFILE.DBF' NAME 'DEPLFILE' (CIDDEPL C(8) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       NINDEXP N(12, 2) NOT NULL, ;
                       CDEPLYEAR C(4) NOT NULL, ;
                       NDEPREXP N(12, 2) NOT NULL, ;
                       NDEPLCO N(12, 2) NOT NULL, ;
                       NIDCEXP N(12, 2) NOT NULL, ;
                       NCOSTDEPL N(12, 2) NOT NULL, ;
                       NTANGEXP N(12, 2) NOT NULL, ;
                       COWNTYPE C(1) NOT NULL)

***** Create each index for DEPLFILE *****
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CDEPLYEAR+CWELLID TAG YEARKEY COLLATE 'MACHINE'
ALTER TABLE 'DEPLFILE' ADD PRIMARY KEY CIDDEPL TAG CIDDEPL COLLATE 'MACHINE'
INDEX ON CWELLID TAG WELLID COLLATE 'MACHINE'

***** Change properties for DEPLFILE *****
DBSETPROP('DEPLFILE.CIDDEPL', 'Field', 'Caption', "Primary Key")
DBSETPROP('DEPLFILE.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('DEPLFILE.NINDEXP', 'Field', 'Caption', "Indirect Expenses")
DBSETPROP('DEPLFILE.CDEPLYEAR', 'Field', 'Caption', "Depletion Year")
DBSETPROP('DEPLFILE.NDEPREXP', 'Field', 'Caption', "Depreciation")
DBSETPROP('DEPLFILE.NDEPLCO', 'Field', 'Caption', "Depletion Carryover")
DBSETPROP('DEPLFILE.NIDCEXP', 'Field', 'Caption', "IDC Expenses")
DBSETPROP('DEPLFILE.NCOSTDEPL', 'Field', 'Caption', "Cost Depletion")
DBSETPROP('DEPLFILE.NTANGEXP', 'Field', 'Caption', "Tangible Expenses")
DBSETPROP('DEPLFILE.COWNTYPE', 'Field', 'Caption', "Owner Type")
CREATE TRIGGER ON 'DEPLFILE' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'DEPLFILE' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'DEPLFILE' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_DEPLSET
***** Table setup for DEPLSET *****
CREATE TABLE 'DEPLSET.DBF' NAME 'DEPLSET' (CNOTES M NOT NULL, ;
                      CYEAR C(4) NOT NULL, ;
                      NMARGPCT N(5, 2) NOT NULL, ;
                      NNETINCLIM N(6, 2) NOT NULL, ;
                      NNONPCT N(5, 2) NOT NULL, ;
                      LLIMIT L NOT NULL)

***** Create each index for DEPLSET *****
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED BINARY

***** Change properties for DEPLSET *****
DBSETPROP('DEPLSET.CNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('DEPLSET.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('DEPLSET.NMARGPCT', 'Field', 'Caption', "Marginal Pct")
DBSETPROP('DEPLSET.NNETINCLIM', 'Field', 'Caption', "Net Income Limitation")
DBSETPROP('DEPLSET.NNONPCT', 'Field', 'Caption', "Non Marginal Pct")
DBSETPROP('DEPLSET.LLIMIT', 'Field', 'Caption', "Limit")
ENDFUNC

FUNCTION MakeTable_DEPOSITD
***** Table setup for DEPOSITD *****
CREATE TABLE 'DEPOSITD.DBF' NAME 'DEPOSITD' (CIDCHEC C(8) NOT NULL, ;
                       CCHECKNO C(10) NOT NULL, ;
                       CID C(8) NOT NULL, ;
                       CIDTYPE C(1) NOT NULL, ;
                       NAMOUNT N(12, 2) NOT NULL, ;
                       CPERIOD C(2) NOT NULL, ;
                       CYEAR C(4) NOT NULL, ;
                       CPAYEE C(40) NOT NULL, ;
                       CSOURCE C(2) NOT NULL, ;
                       LCHOSEN L NOT NULL, ;
                       DDATE D NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       CIDDEPD C(8) NOT NULL)

***** Create each index for DEPOSITD *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'
ALTER TABLE 'DEPOSITD' ADD PRIMARY KEY CIDDEPD TAG CIDDEPD COLLATE 'MACHINE'
INDEX ON CID TAG CID COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for DEPOSITD *****
DBSETPROP('DEPOSITD.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('DEPOSITD.CCHECKNO', 'Field', 'Caption', "Check No")
DBSETPROP('DEPOSITD.CID', 'Field', 'Caption', "ID Code")
DBSETPROP('DEPOSITD.CIDTYPE', 'Field', 'Caption', "ID Type")
DBSETPROP('DEPOSITD.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('DEPOSITD.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('DEPOSITD.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('DEPOSITD.CPAYEE', 'Field', 'Caption', "Payee")
DBSETPROP('DEPOSITD.CSOURCE', 'Field', 'Caption', "Source")
DBSETPROP('DEPOSITD.LCHOSEN', 'Field', 'Caption', "Chosen")
DBSETPROP('DEPOSITD.DDATE', 'Field', 'Caption', "Date")
DBSETPROP('DEPOSITD.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('DEPOSITD.CIDDEPD', 'Field', 'Caption', "Primary Key")
CREATE TRIGGER ON 'DEPOSITD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'DEPOSITD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'DEPOSITD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_DEPOSITS
***** Table setup for DEPOSITS *****
CREATE TABLE 'DEPOSITS.DBF' NAME 'DEPOSITS' (CBATCH C(8) NOT NULL, ;
                       DDEPDATE D NOT NULL, ;
                       NTOTDEP N(12, 2) NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for DEPOSITS *****
ALTER TABLE 'DEPOSITS' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for DEPOSITS *****
DBSETPROP('DEPOSITS.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('DEPOSITS.DDEPDATE', 'Field', 'Caption', "Deposit Date")
DBSETPROP('DEPOSITS.NTOTDEP', 'Field', 'Caption', "Deposit Total")
DBSETPROP('DEPOSITS.CACCTNO', 'Field', 'Caption', "Cash Account")
DBSETPROP('DEPOSITS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('DEPOSITS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('DEPOSITS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('DEPOSITS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'DEPOSITS' FOR DELETE AS __ri_delete_deposits().AND.(foxaudit())
CREATE TRIGGER ON 'DEPOSITS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'DEPOSITS' FOR UPDATE AS __ri_update_deposits().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_DISBHIST
***** Table setup for DISBHIST *****
CREATE TABLE 'DISBHIST.DBF' NAME 'DISBHIST' (CIDDISB C(8) NOT NULL, ;
                       CRECTYPE C(1) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       HYEAR C(4) NOT NULL, ;
                       HPERIOD C(2) NOT NULL, ;
                       CRUNYEAR C(4) NOT NULL, ;
                       NRUNNO I NOT NULL, ;
                       HDATE D NOT NULL, ;
                       CTYPEINV C(1) NOT NULL, ;
                       CTYPEINT C(1) NOT NULL, ;
                       CGROUP C(2) NOT NULL, ;
                       CDIRECT C(1) NOT NULL, ;
                       NINCOME N(12, 2) NOT NULL, ;
                       NMKTGEXP N(12, 2) NOT NULL, ;
                       NSEVTAXES N(12, 2) NOT NULL, ;
                       NEXPENSE N(12, 2) NOT NULL, ;
                       NNETCHECK N(12, 2) NOT NULL, ;
                       NTOTALE1 N(12, 2) NOT NULL, ;
                       NTOTALE2 N(12, 2) NOT NULL, ;
                       NTOTALE3 N(12, 2) NOT NULL, ;
                       NTOTALE4 N(12, 2) NOT NULL, ;
                       NTOTALE5 N(12, 2) NOT NULL, ;
                       NTOTALEA N(12, 2) NOT NULL, ;
                       NTOTALEB N(12, 2) NOT NULL, ;
                       NFLATRATE N(7, 2) NOT NULL, ;
                       NOILREV N(10, 2) NOT NULL, ;
                       NGASREV N(10, 2) NOT NULL, ;
                       NOTHREV N(12, 2) NOT NULL, ;
                       NTRPREV N(10, 2) NOT NULL, ;
                       LPROGRAM L NOT NULL, ;
                       CPROGCODE C(10) NOT NULL, ;
                       LPROGNET L NOT NULL, ;
                       NMISCREV1 N(12, 2) NOT NULL, ;
                       NMISCREV2 N(12, 2) NOT NULL, ;
                       LJIB L NOT NULL, ;
                       NGATHER N(12, 2) NOT NULL, ;
                       NCOMPRESS N(12, 2) NOT NULL, ;
                       LSEVPURCH L NOT NULL, ;
                       LHOLD L NOT NULL, ;
                       LONHOLD L NOT NULL, ;
                       NOILEXP N(12, 2) NOT NULL, ;
                       NGASEXP N(12, 2) NOT NULL, ;
                       CACCTYR C(4) NOT NULL, ;
                       CACCTPRD C(2) NOT NULL, ;
                       LFLAT L NOT NULL, ;
                       NFLATFREQ I NOT NULL, ;
                       CFLATSTART C(2) NOT NULL, ;
                       NOILTAX1 N(9, 2) NOT NULL, ;
                       NOILTAX2 N(9, 2) NOT NULL, ;
                       NOILTAX3 N(9, 2) NOT NULL, ;
                       NOILTAX4 N(9, 2) NOT NULL, ;
                       NGASTAX1 N(9, 2) NOT NULL, ;
                       NGASTAX2 N(9, 2) NOT NULL, ;
                       NGASTAX3 N(9, 2) NOT NULL, ;
                       NGASTAX4 N(9, 2) NOT NULL, ;
                       NOTHTAX1 N(9, 2) NOT NULL, ;
                       NOTHTAX2 N(9, 2) NOT NULL, ;
                       NOTHTAX3 N(9, 2) NOT NULL, ;
                       NOTHTAX4 N(9, 2) NOT NULL, ;
                       NTAXWITH N(9, 2) NOT NULL, ;
                       NTAXPCT N(5, 2) NOT NULL, ;
                       NBACKWITH N(12, 2) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       LUSED L NOT NULL, ;
                       LPAYOUT L NOT NULL, ;
                       CSUSPTYPE C(1) NOT NULL, ;
                       NRUNNO_IN I NOT NULL, ;
                       CRUNYEAR_IN C(4) NOT NULL, ;
                       LINTEGGL L NOT NULL, ;
                       NDISBFREQ I NOT NULL, ;
                       LMANUAL L NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       LDIRECTDEP L NOT NULL, ;
                       LTRANSFER L NOT NULL, ;
                       NPLUGEXP N(12, 2) NOT NULL, ;
                       CDECK C(10) NOT NULL, ;
                       CREASON C(3) NOT NULL, ;
                       NMISCREV3 N(12, 2) NOT NULL, ;
                       NMISCREV4 N(12, 2) NOT NULL, ;
                       NMISCREV5 N(12, 2) NOT NULL, ;
                       NMISCREV6 N(12, 2) NOT NULL, ;
                       NMISCREV7 N(12, 2) NOT NULL, ;
                       NMISCREV8 N(12, 2) NOT NULL, ;
                       NMISCREV9 N(12, 2) NOT NULL)

***** Create each index for DISBHIST *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CDECK TAG CDECK COLLATE 'MACHINE'
INDEX ON CGROUP TAG CGROUP COLLATE 'MACHINE'
ALTER TABLE 'DISBHIST' ADD PRIMARY KEY CIDDISB TAG CIDDISB COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
INDEX ON CRECTYPE TAG CRECTYPE COLLATE 'MACHINE'
INDEX ON CRUNYEAR_IN TAG CRUNYEARIN COLLATE 'MACHINE'
INDEX ON CSUSPTYPE TAG CSUSPTYPE COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON COWNERID+CWELLID TAG INVWELL COLLATE 'MACHINE'
INDEX ON LHOLD TAG LHOLD BINARY
INDEX ON LMANUAL TAG LMANUAL BINARY
INDEX ON LONHOLD TAG LONHOLD BINARY
INDEX ON NRUNNO_IN TAG NRUNNO_IN COLLATE 'MACHINE'
INDEX ON CRUNYEAR+PADL(TRANSFORM(NRUNNO),3,"0") TAG RUN COLLATE 'MACHINE'
INDEX ON CRUNYEAR_IN+PADL(TRANSFORM(NRUNNO_IN),3,"0") TAG RUN_IN COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED BINARY

***** Change properties for DISBHIST *****
DBSETPROP('DISBHIST.CIDDISB', 'Field', 'Caption', "Primary Key")
DBSETPROP('DISBHIST.CRECTYPE', 'Field', 'Caption', "Record Type")
DBSETPROP('DISBHIST.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('DISBHIST.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('DISBHIST.HYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('DISBHIST.HPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('DISBHIST.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('DISBHIST.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('DISBHIST.HDATE', 'Field', 'Caption', "Accounting Date")
DBSETPROP('DISBHIST.CTYPEINV', 'Field', 'Caption', "Owner Type")
DBSETPROP('DISBHIST.CTYPEINT', 'Field', 'Caption', "Interest Type")
DBSETPROP('DISBHIST.CGROUP', 'Field', 'Caption', "Well Group")
DBSETPROP('DISBHIST.CDIRECT', 'Field', 'Caption', "Direct Pay Flag")
DBSETPROP('DISBHIST.NINCOME', 'Field', 'Caption', "Total Income")
DBSETPROP('DISBHIST.NMKTGEXP', 'Field', 'Caption', "Marketing Expense")
DBSETPROP('DISBHIST.NSEVTAXES', 'Field', 'Caption', "Severance Taxes")
DBSETPROP('DISBHIST.NEXPENSE', 'Field', 'Caption', "Total Oper Expense")
DBSETPROP('DISBHIST.NNETCHECK', 'Field', 'Caption', "Net Amount")
DBSETPROP('DISBHIST.NTOTALE1', 'Field', 'Caption', "Expense Class 1 Amount")
DBSETPROP('DISBHIST.NTOTALE2', 'Field', 'Caption', "Expense Class 2 Amount")
DBSETPROP('DISBHIST.NTOTALE3', 'Field', 'Caption', "Expense Class 3 Amount")
DBSETPROP('DISBHIST.NTOTALE4', 'Field', 'Caption', "Expense Class 4 Amount")
DBSETPROP('DISBHIST.NTOTALE5', 'Field', 'Caption', "Expense Class 5 Amount")
DBSETPROP('DISBHIST.NTOTALEA', 'Field', 'Caption', "After Casing Point Expenses")
DBSETPROP('DISBHIST.NTOTALEB', 'Field', 'Caption', "Before Casing Point Expenses")
DBSETPROP('DISBHIST.NFLATRATE', 'Field', 'Caption', "Flat Rate Amount")
DBSETPROP('DISBHIST.NOILREV', 'Field', 'Caption', "Oil Revenue")
DBSETPROP('DISBHIST.NGASREV', 'Field', 'Caption', "Gas Revenue")
DBSETPROP('DISBHIST.NOTHREV', 'Field', 'Caption', "Other Product Revenue")
DBSETPROP('DISBHIST.NTRPREV', 'Field', 'Caption', "Transportation Revenue")
DBSETPROP('DISBHIST.LPROGRAM', 'Field', 'Caption', "Program Flag")
DBSETPROP('DISBHIST.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('DISBHIST.LPROGNET', 'Field', 'Caption', "Net Program")
DBSETPROP('DISBHIST.NMISCREV1', 'Field', 'Caption', "Misc Revenue 1 Amount")
DBSETPROP('DISBHIST.NMISCREV2', 'Field', 'Caption', "Misc Revenue 2 Amount")
DBSETPROP('DISBHIST.LJIB', 'Field', 'Caption', "JIB Interest")
DBSETPROP('DISBHIST.NGATHER', 'Field', 'Caption', "Gathering Expense Amount")
DBSETPROP('DISBHIST.NCOMPRESS', 'Field', 'Caption', "Compression Expense Amount")
DBSETPROP('DISBHIST.LSEVPURCH', 'Field', 'Caption', "Purchaser Paid Sev Tax")
DBSETPROP('DISBHIST.LHOLD', 'Field', 'Caption', "Owner Held")
DBSETPROP('DISBHIST.LONHOLD', 'Field', 'Caption', "Int Held")
DBSETPROP('DISBHIST.NOILEXP', 'Field', 'Caption', "Oil Expenses")
DBSETPROP('DISBHIST.NGASEXP', 'Field', 'Caption', "Gas Expenses")
DBSETPROP('DISBHIST.CACCTYR', 'Field', 'Caption', "Accounting Year")
DBSETPROP('DISBHIST.CACCTPRD', 'Field', 'Caption', "Accounting Period")
DBSETPROP('DISBHIST.LFLAT', 'Field', 'Caption', "Flat Rate Flag")
DBSETPROP('DISBHIST.NFLATFREQ', 'Field', 'Caption', "Flat Rate Frequency")
DBSETPROP('DISBHIST.CFLATSTART', 'Field', 'Caption', "Month Flat Rate Starts")
DBSETPROP('DISBHIST.NOILTAX1', 'Field', 'Caption', "Oil Tax 1")
DBSETPROP('DISBHIST.NOILTAX2', 'Field', 'Caption', "Oil Tax 2")
DBSETPROP('DISBHIST.NOILTAX3', 'Field', 'Caption', "Oil Tax 3")
DBSETPROP('DISBHIST.NOILTAX4', 'Field', 'Caption', "Oil Tax 4")
DBSETPROP('DISBHIST.NGASTAX1', 'Field', 'Caption', "Gas Tax 1")
DBSETPROP('DISBHIST.NGASTAX2', 'Field', 'Caption', "Gas Tax 2")
DBSETPROP('DISBHIST.NGASTAX3', 'Field', 'Caption', "Gas Tax 3")
DBSETPROP('DISBHIST.NGASTAX4', 'Field', 'Caption', "Gas Tax 4")
DBSETPROP('DISBHIST.NOTHTAX1', 'Field', 'Caption', "Other Tax 1")
DBSETPROP('DISBHIST.NOTHTAX2', 'Field', 'Caption', "Other Tax 2")
DBSETPROP('DISBHIST.NOTHTAX3', 'Field', 'Caption', "Other Tax 3")
DBSETPROP('DISBHIST.NOTHTAX4', 'Field', 'Caption', "Other Tax 4")
DBSETPROP('DISBHIST.NTAXWITH', 'Field', 'Caption', "Tax W/H")
DBSETPROP('DISBHIST.NTAXPCT', 'Field', 'Caption', "State W/H Pct")
DBSETPROP('DISBHIST.NBACKWITH', 'Field', 'Caption', "Backup W/H")
DBSETPROP('DISBHIST.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('DISBHIST.LUSED', 'Field', 'Caption', "Used Flag")
DBSETPROP('DISBHIST.LPAYOUT', 'Field', 'Caption', "Reached Payout")
DBSETPROP('DISBHIST.CSUSPTYPE', 'Field', 'Caption', "Susp Type")
DBSETPROP('DISBHIST.NRUNNO_IN', 'Field', 'Caption', "Susp Run")
DBSETPROP('DISBHIST.CRUNYEAR_IN', 'Field', 'Caption', "Susp Run Year")
DBSETPROP('DISBHIST.LINTEGGL', 'Field', 'Caption', "Post to G/L")
DBSETPROP('DISBHIST.NDISBFREQ', 'Field', 'Caption', "Pay Freq")
DBSETPROP('DISBHIST.LMANUAL', 'Field', 'Caption', "Manual Entry")
DBSETPROP('DISBHIST.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('DISBHIST.LDIRECTDEP', 'Field', 'Caption', "Direct Deposited")
DBSETPROP('DISBHIST.LTRANSFER', 'Field', 'Caption', "Susp Trans")
DBSETPROP('DISBHIST.NPLUGEXP', 'Field', 'Caption', "Plugging Deduction")
DBSETPROP('DISBHIST.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('DISBHIST.CREASON', 'Field', 'Caption', "Susp Reason")
DBSETPROP('DISBHIST.NMISCREV3', 'Field', 'Caption', "Misc Rev 3")
DBSETPROP('DISBHIST.NMISCREV4', 'Field', 'Caption', "Misc Rev 4")
DBSETPROP('DISBHIST.NMISCREV5', 'Field', 'Caption', "Misc Rev 5")
DBSETPROP('DISBHIST.NMISCREV6', 'Field', 'Caption', "Misc Rev 6")
DBSETPROP('DISBHIST.NMISCREV7', 'Field', 'Caption', "Misc Rev 7")
DBSETPROP('DISBHIST.NMISCREV8', 'Field', 'Caption', "Misc Rev 8")
DBSETPROP('DISBHIST.NMISCREV9', 'Field', 'Caption', "Misc Rev 9")
CREATE TRIGGER ON 'DISBHIST' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'DISBHIST' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'DISBHIST' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_DISPOSAL
***** Table setup for DISPOSAL *****
CREATE TABLE 'DISPOSAL.DBF' NAME 'DISPOSAL' (CDISPERM C(6) NOT NULL, ;
                       CDISPSITE C(60) NOT NULL, ;
                       CCOUNTY C(15) NOT NULL, ;
                       CTOWNSHIP C(15) NOT NULL, ;
                       CDISPMETH C(40) NOT NULL, ;
                       DENTDATE D NOT NULL, ;
                       CENTTIME C(8) NOT NULL, ;
                       CPERMIT1 C(20) NOT NULL, ;
                       CPERMIT2 C(20) NOT NULL, ;
                       CPERMIT3 C(10) NOT NULL, ;
                       CPERMIT4 C(10) NOT NULL, ;
                       CPERMIT5 C(10) NOT NULL, ;
                       CPERMIT6 C(10) NOT NULL, ;
                       CDISPCODE C(2) NOT NULL, ;
                       CWASTECODE C(3) NOT NULL, ;
                       CSWIW_NO C(15) NOT NULL, ;
                       CSERIALNO C(20) NOT NULL, ;
                       CLEASEID C(10) NOT NULL, ;
                       CLOCATION C(80) NOT NULL, ;
                       CDISTANDDIR C(80) NOT NULL, ;
                       LMULTIOPER L NOT NULL, ;
                       NHYDROCARBS I NOT NULL, ;
                       CRRCDISTRICT C(5) NOT NULL, ;
                       CRESERVOIR C(40) NOT NULL, ;
                       CDISPOSALWELL C(40) NOT NULL, ;
                       CUICPERMIT C(10) NOT NULL)

***** Create each index for DISPOSAL *****
INDEX ON CDISPCODE TAG CDISPCODE COLLATE 'MACHINE'
INDEX ON CPERMIT1 TAG CPERMIT1 COLLATE 'MACHINE'
INDEX ON CPERMIT2 TAG CPERMIT2 COLLATE 'MACHINE'
INDEX ON CPERMIT3 TAG CPERMIT3 COLLATE 'MACHINE'
INDEX ON CPERMIT4 TAG CPERMIT4 COLLATE 'MACHINE'
INDEX ON CPERMIT5 TAG CPERMIT5 COLLATE 'MACHINE'
INDEX ON CPERMIT6 TAG CPERMIT6 COLLATE 'MACHINE'
ALTER TABLE 'DISPOSAL' ADD PRIMARY KEY CDISPERM TAG PERMIT COLLATE 'MACHINE'

***** Change properties for DISPOSAL *****
DBSETPROP('DISPOSAL.CPERMIT1', 'Field', 'Caption', "Cpermit1")
DBSETPROP('DISPOSAL.CPERMIT2', 'Field', 'Caption', "Permit2")
DBSETPROP('DISPOSAL.CPERMIT3', 'Field', 'Caption', "Permit3")
DBSETPROP('DISPOSAL.CPERMIT4', 'Field', 'Caption', "Permit4")
DBSETPROP('DISPOSAL.CPERMIT5', 'Field', 'Caption', "Permit5")
DBSETPROP('DISPOSAL.CPERMIT6', 'Field', 'Caption', "Permit6")
DBSETPROP('DISPOSAL.CDISPCODE', 'Field', 'Caption', "Disposal Code")
DBSETPROP('DISPOSAL.CWASTECODE', 'Field', 'Caption', "Waste Code")
DBSETPROP('DISPOSAL.CSWIW_NO', 'Field', 'Caption', "SWIW #")
DBSETPROP('DISPOSAL.CSERIALNO', 'Field', 'Caption', "Serial No")
DBSETPROP('DISPOSAL.CLEASEID', 'Field', 'Caption', "Lease ID")
DBSETPROP('DISPOSAL.CLOCATION', 'Field', 'Caption', "Location")
DBSETPROP('DISPOSAL.CDISTANDDIR', 'Field', 'Caption', "Distance and Direction")
DBSETPROP('DISPOSAL.LMULTIOPER', 'Field', 'Caption', "Multi Oper")
DBSETPROP('DISPOSAL.NHYDROCARBS', 'Field', 'Caption', "Hydro Carbons")
DBSETPROP('DISPOSAL.CRRCDISTRICT', 'Field', 'Caption', "RRC District")
DBSETPROP('DISPOSAL.CRESERVOIR', 'Field', 'Caption', "Resevioir")
DBSETPROP('DISPOSAL.CDISPOSALWELL', 'Field', 'Caption', "Disposal Well")
DBSETPROP('DISPOSAL.CUICPERMIT', 'Field', 'Caption', "UIC Permit")
CREATE TRIGGER ON 'DISPOSAL' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'DISPOSAL' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'DISPOSAL' FOR UPDATE AS __ri_update_disposal().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_DOCUMENTS
***** Table setup for DOCUMENTS *****
CREATE TABLE 'DOCUMENTS.DBF' NAME 'DOCUMENTS' (IDOCPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                        CDOCLINK C(2) NOT NULL, ;
                        CFK C(10) NOT NULL, ;
                        CPATH C(254) NOT NULL, ;
                        CDESC V(254) NOT NULL)

***** Create each index for DOCUMENTS *****
INDEX ON CFK TAG CFK COLLATE 'MACHINE'
ALTER TABLE 'DOCUMENTS' ADD PRIMARY KEY IDOCPK TAG IDOCPK COLLATE 'MACHINE'

***** Change properties for DOCUMENTS *****
DBSETPROP('DOCUMENTS.IDOCPK', 'Field', 'Caption', "PK")
DBSETPROP('DOCUMENTS.CDOCLINK', 'Field', 'Caption', "Document Linked To")
DBSETPROP('DOCUMENTS.CFK', 'Field', 'Caption', "FK Link")
DBSETPROP('DOCUMENTS.CPATH', 'Field', 'Caption', "Document Path")
DBSETPROP('DOCUMENTS.CDESC', 'Field', 'Caption', "Cdesc")
CREATE TRIGGER ON 'DOCUMENTS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'DOCUMENTS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'DOCUMENTS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_DOICHANGES
***** Table setup for DOICHANGES *****
CREATE TABLE 'DOICHANGES.DBF' NAME 'DOICHANGES' (TDATETIME T NOT NULL, ;
                         CRPTGROUP C(1) NOT NULL, ;
                         COWNERID C(10) NOT NULL, ;
                         COWNNAME C(30) NOT NULL, ;
                         CWELLID C(10) NOT NULL, ;
                         CWELLNAME C(30) NOT NULL, ;
                         CTYPEINV C(10) NOT NULL, ;
                         NWORKINT N(11, 7) NOT NULL, ;
                         NREVOIL N(11, 7) NOT NULL, ;
                         NREVGAS N(11, 7) NOT NULL, ;
                         NREVOTH N(11, 7) NOT NULL, ;
                         NREVTRP N(11, 7) NOT NULL, ;
                         NREVMISC1 N(11, 7) NOT NULL, ;
                         NREVMISC2 N(11, 7) NOT NULL, ;
                         NINTCLASS1 N(11, 7) NOT NULL, ;
                         NINTCLASS2 N(11, 7) NOT NULL, ;
                         NINTCLASS3 N(11, 7) NOT NULL, ;
                         NINTCLASS4 N(11, 7) NOT NULL, ;
                         NINTCLASS5 N(11, 7) NOT NULL, ;
                         NBCPINT N(11, 7) NOT NULL, ;
                         NACPINT N(11, 7) NOT NULL, ;
                         NAPOINT N(11, 7) NOT NULL, ;
                         NPLUGPCT N(11, 7) NOT NULL, ;
                         NREVTAX1 N(11, 7) NOT NULL, ;
                         NREVTAX2 N(11, 7) NOT NULL, ;
                         NREVTAX3 N(11, 7) NOT NULL, ;
                         NREVTAX4 N(11, 7) NOT NULL, ;
                         NREVTAX5 N(11, 7) NOT NULL, ;
                         NREVTAX6 N(11, 7) NOT NULL, ;
                         NREVTAX7 N(11, 7) NOT NULL, ;
                         NREVTAX8 N(11, 7) NOT NULL, ;
                         NREVTAX9 N(11, 7) NOT NULL, ;
                         NREVTAX10 N(11, 7) NOT NULL, ;
                         NREVTAX11 N(11, 7) NOT NULL, ;
                         NREVTAX12 N(11, 7) NOT NULL, ;
                         NFLATRATE N(12, 2) NOT NULL, ;
                         NEXPENSES N(12, 2) NOT NULL, ;
                         NINCOME N(12, 2) NOT NULL, ;
                         NTAXES N(12, 2) NOT NULL, ;
                         NTAXWITH N(12, 2) NOT NULL, ;
                         NBACKWITH N(12, 2) NOT NULL, ;
                         NAMOUNT N(12, 2) NOT NULL, ;
                         NPLUGEXP N(12, 2) NOT NULL, ;
                         CRUNYEAR C(4) NOT NULL, ;
                         CRUNNO C(3) NOT NULL, ;
                         DSUSPDATE D NOT NULL, ;
                         CSUSPTYPE C(1) NOT NULL, ;
                         CACTION C(1) NOT NULL, ;
                         NOILREV N(12, 2) NOT NULL, ;
                         NGASREV N(12, 2) NOT NULL, ;
                         NOTHERREVENUE N(12, 2) NOT NULL, ;
                         NOILTAX N(12, 2) NOT NULL, ;
                         NGASTAX N(12, 2) NOT NULL, ;
                         NOTHTAX N(12, 2) NOT NULL, ;
                         NNETCHECK N(12, 2) NOT NULL, ;
                         NGATHER N(12, 2) NOT NULL, ;
                         NCOMPRESS N(12, 2) NOT NULL, ;
                         HDATE D NOT NULL, ;
                         HYEAR C(4) NOT NULL, ;
                         HPERIOD C(2) NOT NULL, ;
                         CUSER C(10) NOT NULL, ;
                         CADDEDBY C(10) NOT NULL, ;
                         CCHANGEDBY C(10) NOT NULL, ;
                         DADDED T NOT NULL, ;
                         DCHANGED T NOT NULL)

***** Create each index for DOICHANGES *****
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CRPTGROUP+COWNERID+CWELLID+CTYPEINV+CRUNYEAR+CRUNNO TAG CRPTGROUP COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'

***** Change properties for DOICHANGES *****
DBSETPROP('DOICHANGES.TDATETIME', 'Field', 'Caption', "When")
DBSETPROP('DOICHANGES.CRPTGROUP', 'Field', 'Caption', "Rpt Group")
DBSETPROP('DOICHANGES.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('DOICHANGES.COWNNAME', 'Field', 'Caption', "Owner Name")
DBSETPROP('DOICHANGES.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('DOICHANGES.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('DOICHANGES.CTYPEINV', 'Field', 'Caption', "OwnerType")
DBSETPROP('DOICHANGES.NWORKINT', 'Field', 'Caption', "Working Int")
DBSETPROP('DOICHANGES.NREVOIL', 'Field', 'Caption', "Oil NRI")
DBSETPROP('DOICHANGES.NREVGAS', 'Field', 'Caption', "Gas NRI")
DBSETPROP('DOICHANGES.NREVOTH', 'Field', 'Caption', "Oth NRI")
DBSETPROP('DOICHANGES.NREVTRP', 'Field', 'Caption', "Trans Int")
DBSETPROP('DOICHANGES.NREVMISC1', 'Field', 'Caption', "Misc 1 Int")
DBSETPROP('DOICHANGES.NREVMISC2', 'Field', 'Caption', "Misc 2 Int")
DBSETPROP('DOICHANGES.NINTCLASS1', 'Field', 'Caption', "Exp Class 1")
DBSETPROP('DOICHANGES.NINTCLASS2', 'Field', 'Caption', "Exp Class 2")
DBSETPROP('DOICHANGES.NINTCLASS3', 'Field', 'Caption', "Exp Class 3")
DBSETPROP('DOICHANGES.NINTCLASS4', 'Field', 'Caption', "Exp Class 4")
DBSETPROP('DOICHANGES.NINTCLASS5', 'Field', 'Caption', "Exp Class 5")
DBSETPROP('DOICHANGES.NBCPINT', 'Field', 'Caption', "BCP Int")
DBSETPROP('DOICHANGES.NACPINT', 'Field', 'Caption', "ACP Int")
DBSETPROP('DOICHANGES.NAPOINT', 'Field', 'Caption', "APO Int")
DBSETPROP('DOICHANGES.NPLUGPCT', 'Field', 'Caption', "Plugging Int")
DBSETPROP('DOICHANGES.NREVTAX1', 'Field', 'Caption', "Oil Tax 1")
DBSETPROP('DOICHANGES.NREVTAX2', 'Field', 'Caption', "Gas Tax 1")
DBSETPROP('DOICHANGES.NREVTAX3', 'Field', 'Caption', "Oth Tax 1")
DBSETPROP('DOICHANGES.NREVTAX4', 'Field', 'Caption', "Oil Tax 2")
DBSETPROP('DOICHANGES.NREVTAX5', 'Field', 'Caption', "Gas Tax 2")
DBSETPROP('DOICHANGES.NREVTAX6', 'Field', 'Caption', "Oth Tax 2")
DBSETPROP('DOICHANGES.NREVTAX7', 'Field', 'Caption', "Oil Tax 3")
DBSETPROP('DOICHANGES.NREVTAX8', 'Field', 'Caption', "Gas Tax 3")
DBSETPROP('DOICHANGES.NREVTAX9', 'Field', 'Caption', "Oth Tax 3")
DBSETPROP('DOICHANGES.NREVTAX10', 'Field', 'Caption', "Oil Tax 4")
DBSETPROP('DOICHANGES.NREVTAX11', 'Field', 'Caption', "Gas Tax 4")
DBSETPROP('DOICHANGES.NREVTAX12', 'Field', 'Caption', "Oth Tax 4")
DBSETPROP('DOICHANGES.NFLATRATE', 'Field', 'Caption', "Flat Rate")
DBSETPROP('DOICHANGES.NEXPENSES', 'Field', 'Caption', "Expenses")
DBSETPROP('DOICHANGES.NINCOME', 'Field', 'Caption', "Income")
DBSETPROP('DOICHANGES.NTAXES', 'Field', 'Caption', "Taxes")
DBSETPROP('DOICHANGES.NTAXWITH', 'Field', 'Caption', "Tax WH")
DBSETPROP('DOICHANGES.NBACKWITH', 'Field', 'Caption', "Backup WH")
DBSETPROP('DOICHANGES.NAMOUNT', 'Field', 'Caption', "AMount")
DBSETPROP('DOICHANGES.NPLUGEXP', 'Field', 'Caption', "Plugging Exp")
DBSETPROP('DOICHANGES.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('DOICHANGES.CRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('DOICHANGES.DSUSPDATE', 'Field', 'Caption', "Susp Date")
DBSETPROP('DOICHANGES.CSUSPTYPE', 'Field', 'Caption', "Suspense Type")
DBSETPROP('DOICHANGES.CACTION', 'Field', 'Caption', "Action")
DBSETPROP('DOICHANGES.NOILREV', 'Field', 'Caption', "Oil Rev")
DBSETPROP('DOICHANGES.NGASREV', 'Field', 'Caption', "Gas Rev")
DBSETPROP('DOICHANGES.NOTHERREVENUE', 'Field', 'Caption', "Other Income")
DBSETPROP('DOICHANGES.NOILTAX', 'Field', 'Caption', "Oil Tax")
DBSETPROP('DOICHANGES.NGASTAX', 'Field', 'Caption', "Gas Tax")
DBSETPROP('DOICHANGES.NOTHTAX', 'Field', 'Caption', "Oth Tax")
DBSETPROP('DOICHANGES.NNETCHECK', 'Field', 'Caption', "Net Check")
DBSETPROP('DOICHANGES.NGATHER', 'Field', 'Caption', "Gathering Fee")
DBSETPROP('DOICHANGES.NCOMPRESS', 'Field', 'Caption', "Compression Chg")
DBSETPROP('DOICHANGES.HDATE', 'Field', 'Caption', "Acct Date")
DBSETPROP('DOICHANGES.HYEAR', 'Field', 'Caption', "Prod Year")
DBSETPROP('DOICHANGES.HPERIOD', 'Field', 'Caption', "Prod Prd")
DBSETPROP('DOICHANGES.CUSER', 'Field', 'Caption', "User")
DBSETPROP('DOICHANGES.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('DOICHANGES.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('DOICHANGES.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('DOICHANGES.DCHANGED', 'Field', 'Caption', "Date Changed")
ENDFUNC

FUNCTION MakeTable_DOIDECKS
***** Table setup for DOIDECKS *****
CREATE TABLE 'DOIDECKS.DBF' NAME 'DOIDECKS' (CDECK C(10) NOT NULL, ;
                       CDECKDESC C(40) NOT NULL, ;
                       LDEFAULT L NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       EFFSTARTYR C(4) NOT NULL, ;
                       EFFSTARTPRD C(2) NOT NULL, ;
                       IPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                       LWATERFALL L NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for DOIDECKS *****
INDEX ON CDECK TAG CDECK COLLATE 'MACHINE'
INDEX ON CDECK+CWELLID TAG DECKORDER COLLATE 'MACHINE'
INDEX ON CWELLID+CDECK TAG NAVORDER COLLATE 'MACHINE'
ALTER TABLE 'DOIDECKS' ADD PRIMARY KEY IPK TAG PK COLLATE 'MACHINE'

***** Change properties for DOIDECKS *****
DBSETPROP('DOIDECKS.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('DOIDECKS.CDECKDESC', 'Field', 'Caption', "Deck Description")
DBSETPROP('DOIDECKS.LDEFAULT', 'Field', 'Caption', "Default Deck")
DBSETPROP('DOIDECKS.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('DOIDECKS.EFFSTARTYR', 'Field', 'Caption', "Effective Year")
DBSETPROP('DOIDECKS.EFFSTARTPRD', 'Field', 'Caption', "Effective Period")
DBSETPROP('DOIDECKS.IPK', 'Field', 'Caption', "PK")
DBSETPROP('DOIDECKS.LWATERFALL', 'Field', 'Caption', "Waterfall Deck")
DBSETPROP('DOIDECKS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('DOIDECKS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('DOIDECKS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('DOIDECKS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'DOIDECKS' FOR DELETE AS foxaudit(ipk,,,"pk")
CREATE TRIGGER ON 'DOIDECKS' FOR INSERT AS foxaudit(ipk,,,"pk")
CREATE TRIGGER ON 'DOIDECKS' FOR UPDATE AS foxaudit(ipk,,,"pk")
ENDFUNC

FUNCTION MakeTable_EMPS
***** Table setup for EMPS *****
CREATE TABLE 'EMPS.DBF' NAME 'EMPS' (CEMPID C(10) NOT NULL, ;
                   CLASTNAME C(40) NOT NULL, ;
                   CFIRSTNAME C(40) NOT NULL, ;
                   CMIDINIT C(3) NOT NULL, ;
                   CADDRESS C(60) NOT NULL, ;
                   CCITY C(30) NOT NULL, ;
                   CSTATE C(2) NOT NULL, ;
                   CZIPCODE C(10) NOT NULL, ;
                   DHIREDATE D NOT NULL, ;
                   NSTATUS N(1, 0) NOT NULL, ;
                   CSSN C(11) NOT NULL, ;
                   DBIRTHDATE D NOT NULL, ;
                   NREGWAGE N(8, 3) NOT NULL, ;
                   NOV1WAGE N(9, 3) NOT NULL, ;
                   NOV2WAGE N(9, 3) NOT NULL, ;
                   NSALARY N(9, 2) NOT NULL, ;
                   MEMPNOTES M NOT NULL, ;
                   CDEPT C(10) NOT NULL, ;
                   NFEDEX N(2, 0) NOT NULL, ;
                   NSTATEEX N(2, 0) NOT NULL, ;
                   NFEDSTATUS N(1, 0) NOT NULL, ;
                   NSTSTATUS N(1, 0) NOT NULL, ;
                   CJOBTITLE C(40) NOT NULL, ;
                   NPAYTYPE N(1, 0) NOT NULL, ;
                   CPAYFREQ C(15) NOT NULL, ;
                   NVACBEG N(7, 2) NOT NULL, ;
                   NVACEARN N(7, 2) NOT NULL, ;
                   NVACBAL N(7, 2) NOT NULL, ;
                   NSICKBEG N(7, 2) NOT NULL, ;
                   NSICKEARN N(7, 2) NOT NULL, ;
                   NSICKBAL N(7, 2) NOT NULL, ;
                   NPERBEG N(7, 2) NOT NULL, ;
                   NPEREARN N(7, 2) NOT NULL, ;
                   NPERBAL N(7, 2) NOT NULL, ;
                   NEXTFED N(9, 2) NOT NULL, ;
                   NEXTSTATE N(9, 2) NOT NULL, ;
                   CDEPTNO C(8) NOT NULL, ;
                   DTERMDATE D NOT NULL, ;
                   CPREXPACCT C(6) NOT NULL, ;
                   CBONEXPACCT C(6) NOT NULL, ;
                   COKSTAT C(2) NOT NULL, ;
                   LDIRECTDEP L NOT NULL, ;
                   CEMAIL C(120) NOT NULL, ;
                   CBANKACCT C(20) NOT NULL, ;
                   CBANKTRANSIT C(15) NOT NULL, ;
                   CBANKNAME C(40) NOT NULL, ;
                   L2020W4 L NOT NULL, ;
                   LSTEP2W4 L NOT NULL, ;
                   NDEPENDENTS I NOT NULL, ;
                   NOTHDEPEND I NOT NULL, ;
                   NEXTRAINC N(12, 2) NOT NULL, ;
                   NDEDUCTIONS N(12, 2) NOT NULL, ;
                   CADDEDBY C(10) NOT NULL, ;
                   CCHANGEDBY C(10) NOT NULL, ;
                   DADDED T NOT NULL, ;
                   DCHANGED T NOT NULL, ;
                   LVERIFIED L NOT NULL)

***** Create each index for EMPS *****
ALTER TABLE 'EMPS' ADD PRIMARY KEY CEMPID TAG CEMPID COLLATE 'MACHINE'
INDEX ON CLASTNAME TAG CLASTNAME COLLATE 'MACHINE'
INDEX ON CLASTNAME+CFIRSTNAME+CMIDINIT TAG NAME COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for EMPS *****
DBSETPROP('EMPS.CEMPID', 'Field', 'Caption', "Employee ID")
DBSETPROP('EMPS.CLASTNAME', 'Field', 'Caption', "Last Name")
DBSETPROP('EMPS.CFIRSTNAME', 'Field', 'Caption', "First Name")
DBSETPROP('EMPS.CMIDINIT', 'Field', 'Caption', "Middle Initial")
DBSETPROP('EMPS.CADDRESS', 'Field', 'Caption', "Address")
DBSETPROP('EMPS.CCITY', 'Field', 'Caption', "City")
DBSETPROP('EMPS.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('EMPS.CZIPCODE', 'Field', 'Caption', "Zip Code")
DBSETPROP('EMPS.DHIREDATE', 'Field', 'Caption', "Hire Date")
DBSETPROP('EMPS.NSTATUS', 'Field', 'Caption', "Status")
DBSETPROP('EMPS.CSSN', 'Field', 'Caption', "Social Security Number")
DBSETPROP('EMPS.DBIRTHDATE', 'Field', 'Caption', "Birthdate")
DBSETPROP('EMPS.NREGWAGE', 'Field', 'Caption', "Regular Wage")
DBSETPROP('EMPS.NOV1WAGE', 'Field', 'Caption', "Overtime1 Wage")
DBSETPROP('EMPS.NOV2WAGE', 'Field', 'Caption', "Overtime2 Wage")
DBSETPROP('EMPS.NSALARY', 'Field', 'Caption', "Salary")
DBSETPROP('EMPS.MEMPNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('EMPS.CDEPT', 'Field', 'Caption', "Department")
DBSETPROP('EMPS.NFEDEX', 'Field', 'Caption', "Federal Exemptions")
DBSETPROP('EMPS.NSTATEEX', 'Field', 'Caption', "State Exemptions")
DBSETPROP('EMPS.NFEDSTATUS', 'Field', 'Caption', "Federal Status")
DBSETPROP('EMPS.NSTSTATUS', 'Field', 'Caption', "State Status")
DBSETPROP('EMPS.CJOBTITLE', 'Field', 'Caption', "Job Title")
DBSETPROP('EMPS.NPAYTYPE', 'Field', 'Caption', "Pay Type")
DBSETPROP('EMPS.CPAYFREQ', 'Field', 'Caption', "Pay Frequency")
DBSETPROP('EMPS.NVACBEG', 'Field', 'Caption', "Vacation Beg Balance")
DBSETPROP('EMPS.NVACEARN', 'Field', 'Caption', "Vacation Days Earned Per Pay")
DBSETPROP('EMPS.NVACBAL', 'Field', 'Caption', "Vacation Balance")
DBSETPROP('EMPS.NSICKBEG', 'Field', 'Caption', "Sick Days Beg Balance")
DBSETPROP('EMPS.NSICKEARN', 'Field', 'Caption', "Sick Days Earned per Pay")
DBSETPROP('EMPS.NSICKBAL', 'Field', 'Caption', "Sick Days Balance")
DBSETPROP('EMPS.NPERBEG', 'Field', 'Caption', "Personal Days Beg Balance")
DBSETPROP('EMPS.NPEREARN', 'Field', 'Caption', "Personal Days Earned per Pay")
DBSETPROP('EMPS.NPERBAL', 'Field', 'Caption', "Personal Days Balance")
DBSETPROP('EMPS.NEXTFED', 'Field', 'Caption', "Extra Federal Withholding")
DBSETPROP('EMPS.NEXTSTATE', 'Field', 'Caption', "Extra State Withholding")
DBSETPROP('EMPS.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('EMPS.DTERMDATE', 'Field', 'Caption', "Termination Date")
DBSETPROP('EMPS.CPREXPACCT', 'Field', 'Caption', "Expense Account")
DBSETPROP('EMPS.CBONEXPACCT', 'Field', 'Caption', "Bonus Expense Account")
DBSETPROP('EMPS.LDIRECTDEP', 'Field', 'Caption', "Direct Deposit")
DBSETPROP('EMPS.CEMAIL', 'Field', 'Caption', "Email")
DBSETPROP('EMPS.CBANKACCT', 'Field', 'Caption', "Bank Acct No")
DBSETPROP('EMPS.CBANKTRANSIT', 'Field', 'Caption', "Bank Transit No")
DBSETPROP('EMPS.CBANKNAME', 'Field', 'Caption', "Bank Name")
DBSETPROP('EMPS.L2020W4', 'Field', 'Caption', "2020 W4 Submitted")
DBSETPROP('EMPS.LSTEP2W4', 'Field', 'Caption', "2020 W4 Step 2 Box Checked")
DBSETPROP('EMPS.NDEPENDENTS', 'Field', 'Caption', "Ndependents")
DBSETPROP('EMPS.NOTHDEPEND', 'Field', 'Caption', "Nothdepend")
DBSETPROP('EMPS.NEXTRAINC', 'Field', 'Caption', "Nextrainc")
DBSETPROP('EMPS.NDEDUCTIONS', 'Field', 'Caption', "Ndeductions")
DBSETPROP('EMPS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('EMPS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('EMPS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('EMPS.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('EMPS.LVERIFIED', 'Field', 'Caption', "Verified")
CREATE TRIGGER ON 'EMPS' FOR DELETE AS __ri_delete_emps().AND.(foxaudit())
CREATE TRIGGER ON 'EMPS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'EMPS' FOR UPDATE AS __ri_update_emps().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_EXPCAT
***** Table setup for EXPCAT *****
CREATE TABLE 'EXPCAT.DBF' NAME 'EXPCAT' (CIDEXPC C(8) NOT NULL, ;
                     CCATEG C(25) NOT NULL, ;
                     CDESCRIP C(40) NOT NULL, ;
                     CEXPCLASS C(1) NOT NULL, ;
                     CTAXCODE C(2) NOT NULL, ;
                     CDRACCTV C(6) NOT NULL, ;
                     CCRACCTV C(6) NOT NULL, ;
                     CDRACCTO C(6) NOT NULL, ;
                     CCRACCTO C(6) NOT NULL, ;
                     CCATCODE C(4) NOT NULL, ;
                     NTYPE N(1, 0) NOT NULL, ;
                     CINTCLASS C(2) NOT NULL, ;
                     LAFETYPE L NOT NULL, ;
                     LJIBONLY L NOT NULL, ;
                     LREVENUEDED L NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for EXPCAT *****
INDEX ON UPPER(CCATEG) TAG CATEGORY COLLATE 'MACHINE'
INDEX ON CCATCODE TAG CCATCODE CANDIDATE COLLATE 'MACHINE'
INDEX ON UPPER(CCATEG) TAG CCATEG COLLATE 'MACHINE'
ALTER TABLE 'EXPCAT' ADD PRIMARY KEY CIDEXPC TAG CIDEXPC COLLATE 'MACHINE'
INDEX ON UPPER(CDESCRIP) TAG DESCRIP COLLATE 'MACHINE'
INDEX ON CTAXCODE+CCATCODE TAG TAXKEY COLLATE 'MACHINE'
INDEX ON CCRACCTO TAG CCRACCTO COLLATE 'MACHINE'
INDEX ON CCRACCTV TAG CCRACCTV COLLATE 'MACHINE'
INDEX ON CDRACCTO TAG CDRACCTO COLLATE 'MACHINE'
INDEX ON CDRACCTV TAG CDRACCTV COLLATE 'MACHINE'
INDEX ON CTAXCODE TAG CTAXCODE COLLATE 'MACHINE'

***** Change properties for EXPCAT *****
DBSETPROP('EXPCAT.CIDEXPC', 'Field', 'Caption', "Primary Key")
DBSETPROP('EXPCAT.CCATEG', 'Field', 'Caption', "Category")
DBSETPROP('EXPCAT.CDESCRIP', 'Field', 'Caption', "Description")
DBSETPROP('EXPCAT.CEXPCLASS', 'Field', 'Caption', "Class")
DBSETPROP('EXPCAT.CTAXCODE', 'Field', 'Caption', "Tax Code")
DBSETPROP('EXPCAT.CDRACCTV', 'Field', 'Caption', "Vendor Debit Acct")
DBSETPROP('EXPCAT.CCRACCTV', 'Field', 'Caption', "Vendor Credit Acct")
DBSETPROP('EXPCAT.CDRACCTO', 'Field', 'Caption', "Owner Debit Acct")
DBSETPROP('EXPCAT.CCRACCTO', 'Field', 'Caption', "Owner Credit Acct")
DBSETPROP('EXPCAT.CCATCODE', 'Field', 'Caption', "Cat Code")
DBSETPROP('EXPCAT.NTYPE', 'Field', 'Caption', "Summary Code")
DBSETPROP('EXPCAT.CINTCLASS', 'Field', 'Caption', "Interest Class")
DBSETPROP('EXPCAT.LAFETYPE', 'Field', 'Caption', "AFE Flag")
DBSETPROP('EXPCAT.LJIBONLY', 'Field', 'Caption', "JIB Only Expense")
DBSETPROP('EXPCAT.LREVENUEDED', 'Field', 'Caption', "Revenue Deduction")
DBSETPROP('EXPCAT.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('EXPCAT.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('EXPCAT.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('EXPCAT.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'EXPCAT' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'EXPCAT' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'EXPCAT' FOR UPDATE AS __ri_update_expcat().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_FIELDS
***** Table setup for FIELDS *****
CREATE TABLE 'FIELDS.DBF' NAME 'FIELDS' (CFIELDID C(10) NOT NULL, ;
                     CFIELDNAME C(50) NOT NULL, ;
                     NYEAR1PCT N(7, 2) NOT NULL, ;
                     NYEAR2PCT N(7, 2) NOT NULL, ;
                     NYEAR3PCT N(7, 2) NOT NULL, ;
                     NYEAR4PCT N(7, 2) NOT NULL, ;
                     NYEAR5PCT N(7, 2) NOT NULL, ;
                     NYEAR6PCT N(7, 2) NOT NULL, ;
                     NYEAR7PCT N(7, 2) NOT NULL, ;
                     NYEAR8PCT N(7, 2) NOT NULL, ;
                     NYEAR9PCT N(7, 2) NOT NULL, ;
                     NYEAR10PCT N(7, 2) NOT NULL, ;
                     NYEAR11PCT N(7, 2) NOT NULL, ;
                     NYEAR12PCT N(7, 2) NOT NULL, ;
                     NBBLPCT1 N(3, 0) NOT NULL, ;
                     NBBLPCT2 N(3, 0) NOT NULL, ;
                     NBBLPCT3 N(3, 0) NOT NULL, ;
                     NBBLPCT4 N(3, 0) NOT NULL, ;
                     NBBLPCT5 N(3, 0) NOT NULL, ;
                     NBBLPCT6 N(3, 0) NOT NULL, ;
                     NBBLPCT7 N(3, 0) NOT NULL, ;
                     NBBLPCT8 N(3, 0) NOT NULL, ;
                     NBBLPCT9 N(3, 0) NOT NULL, ;
                     NBBLPCT10 N(3, 0) NOT NULL, ;
                     NBBLPCT11 N(3, 0) NOT NULL, ;
                     NBBLPCT12 N(3, 0) NOT NULL, ;
                     NMCFPCT1 N(3, 0) NOT NULL, ;
                     NMCFPCT2 N(3, 0) NOT NULL, ;
                     NMCFPCT3 N(3, 0) NOT NULL, ;
                     NMCFPCT4 N(3, 0) NOT NULL, ;
                     NMCFPCT5 N(3, 0) NOT NULL, ;
                     NMCFPCT6 N(3, 0) NOT NULL, ;
                     NMCFPCT7 N(3, 0) NOT NULL, ;
                     NMCFPCT8 N(3, 0) NOT NULL, ;
                     NMCFPCT9 N(3, 0) NOT NULL, ;
                     NMCFPCT10 N(3, 0) NOT NULL, ;
                     NMCFPCT11 N(3, 0) NOT NULL, ;
                     NMCFPCT12 N(3, 0) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for FIELDS *****
ALTER TABLE 'FIELDS' ADD PRIMARY KEY CFIELDID TAG CFIELDID COLLATE 'MACHINE'
INDEX ON UPPER(CFIELDNAME) TAG CFIELDNAME COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for FIELDS *****
DBSETPROP('FIELDS.CFIELDID', 'Field', 'Caption', "Field ID")
DBSETPROP('FIELDS.CFIELDNAME', 'Field', 'Caption', "Field Name")
DBSETPROP('FIELDS.NYEAR1PCT', 'Field', 'Caption', "Year 1 Decline Pct")
DBSETPROP('FIELDS.NYEAR2PCT', 'Field', 'Caption', "Year 2 Decline Pct")
DBSETPROP('FIELDS.NYEAR3PCT', 'Field', 'Caption', "Year 3 Decline Pct")
DBSETPROP('FIELDS.NYEAR4PCT', 'Field', 'Caption', "Year 4 Decline Pct")
DBSETPROP('FIELDS.NYEAR5PCT', 'Field', 'Caption', "Year 5 Decline Pct")
DBSETPROP('FIELDS.NYEAR6PCT', 'Field', 'Caption', "Year 6 Decline Pct")
DBSETPROP('FIELDS.NYEAR7PCT', 'Field', 'Caption', "Year 7 Decline Pct")
DBSETPROP('FIELDS.NYEAR8PCT', 'Field', 'Caption', "Year 8 Decline Pct")
DBSETPROP('FIELDS.NYEAR9PCT', 'Field', 'Caption', "Year 9 Decline Pct")
DBSETPROP('FIELDS.NYEAR10PCT', 'Field', 'Caption', "Year 10 Decline Pct")
DBSETPROP('FIELDS.NYEAR11PCT', 'Field', 'Caption', "Year 11 Decline Pct")
DBSETPROP('FIELDS.NYEAR12PCT', 'Field', 'Caption', "Year 12 Decline Pct")
DBSETPROP('FIELDS.NBBLPCT1', 'Field', 'Caption', "Oil Price Change Year 1 Pct")
DBSETPROP('FIELDS.NBBLPCT2', 'Field', 'Caption', "Oil Price Change Year 2 Pct")
DBSETPROP('FIELDS.NBBLPCT3', 'Field', 'Caption', "Oil Price Change Year 3 Pct")
DBSETPROP('FIELDS.NBBLPCT4', 'Field', 'Caption', "Oil Price Change Year 4 Pct")
DBSETPROP('FIELDS.NBBLPCT5', 'Field', 'Caption', "Oil Price Change Year 5 Pct")
DBSETPROP('FIELDS.NBBLPCT6', 'Field', 'Caption', "Oil Price Change Year 6 Pct")
DBSETPROP('FIELDS.NBBLPCT7', 'Field', 'Caption', "Oil Price Change Year 7 Pct")
DBSETPROP('FIELDS.NBBLPCT8', 'Field', 'Caption', "Oil Price Change Year 8 Pct")
DBSETPROP('FIELDS.NBBLPCT9', 'Field', 'Caption', "Oil Price Change Year 9 Pct")
DBSETPROP('FIELDS.NBBLPCT10', 'Field', 'Caption', "Oil Price Change Year 10 Pct")
DBSETPROP('FIELDS.NBBLPCT11', 'Field', 'Caption', "Oil Price Change Year 11 Pct")
DBSETPROP('FIELDS.NBBLPCT12', 'Field', 'Caption', "Oil Price Change Year 12 Pct")
DBSETPROP('FIELDS.NMCFPCT1', 'Field', 'Caption', "Gas Price Change Year 1 Pct")
DBSETPROP('FIELDS.NMCFPCT2', 'Field', 'Caption', "Gas Price Change Year 2 Pct")
DBSETPROP('FIELDS.NMCFPCT3', 'Field', 'Caption', "Gas Price Change Year 3 Pct")
DBSETPROP('FIELDS.NMCFPCT4', 'Field', 'Caption', "Gas Price Change Year 4 Pct")
DBSETPROP('FIELDS.NMCFPCT5', 'Field', 'Caption', "Gas Price Change Year 5 Pct")
DBSETPROP('FIELDS.NMCFPCT6', 'Field', 'Caption', "Gas Price Change Year 6 Pct")
DBSETPROP('FIELDS.NMCFPCT7', 'Field', 'Caption', "Gas Price Change Year 7 Pct")
DBSETPROP('FIELDS.NMCFPCT8', 'Field', 'Caption', "Gas Price Change Year 8 Pct")
DBSETPROP('FIELDS.NMCFPCT9', 'Field', 'Caption', "Gas Price Change Year 9 Pct")
DBSETPROP('FIELDS.NMCFPCT10', 'Field', 'Caption', "Gas Price Change Year 10 Pct")
DBSETPROP('FIELDS.NMCFPCT11', 'Field', 'Caption', "Gas Price Change Year 11 Pct")
DBSETPROP('FIELDS.NMCFPCT12', 'Field', 'Caption', "Gas Price Change Year 12 Pct")
DBSETPROP('FIELDS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('FIELDS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('FIELDS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('FIELDS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'FIELDS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'FIELDS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'FIELDS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_FINCHGS
***** Table setup for FINCHGS *****
CREATE TABLE 'FINCHGS.DBF' NAME 'FINCHGS' (CFINCODE C(1) NOT NULL, ;
                      NFINDAYS N(2, 0) NOT NULL, ;
                      NFININT N(8, 4) NOT NULL, ;
                      NMINFIN N(5, 2) NOT NULL, ;
                      LCHGINT L NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for FINCHGS *****
ALTER TABLE 'FINCHGS' ADD PRIMARY KEY CFINCODE TAG CFINCODE COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for FINCHGS *****
DBSETPROP('FINCHGS.CFINCODE', 'Field', 'Caption', "Finance Charge Code")
DBSETPROP('FINCHGS.NFINDAYS', 'Field', 'Caption', "Number of Days Overdue")
DBSETPROP('FINCHGS.NFININT', 'Field', 'Caption', "Finance Chg Pct")
DBSETPROP('FINCHGS.NMINFIN', 'Field', 'Caption', "Minimum Finance Charge")
DBSETPROP('FINCHGS.LCHGINT', 'Field', 'Caption', "Charge Interest on Finance Charges")
DBSETPROP('FINCHGS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('FINCHGS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('FINCHGS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('FINCHGS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'FINCHGS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'FINCHGS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'FINCHGS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_FORM1065
***** Table setup for FORM1065 *****
CREATE TABLE 'FORM1065.DBF' NAME 'FORM1065' (CID1065 C(8) NOT NULL, ;
                       CYEAR C(4) NOT NULL, ;
                       CPROGCODE C(10) NOT NULL, ;
                       NGROSSINC N(12, 2) NOT NULL, ;
                       NTAXES N(12, 2) NOT NULL, ;
                       NDEDUCT N(12, 2) NOT NULL, ;
                       NORDINCOME N(12, 2) NOT NULL, ;
                       DBEGINDATE D NOT NULL, ;
                       NDEPR N(12, 2) NOT NULL, ;
                       NIDC N(12, 2) NOT NULL, ;
                       NROYALTIES N(12, 2) NOT NULL, ;
                       NOTHERDEDUCTS N(12, 2) NOT NULL, ;
                       NBEGCASH N(12, 2) NOT NULL, ;
                       NENDCASH N(12, 2) NOT NULL, ;
                       NROYDEDUCTS N(12, 2) NOT NULL, ;
                       NBOX3_RENTS N(12, 2) NOT NULL, ;
                       NBOX3A N(12, 2) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for FORM1065 *****
ALTER TABLE 'FORM1065' ADD PRIMARY KEY CID1065 TAG CID1065 COLLATE 'MACHINE'
INDEX ON CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CYEAR+CPROGCODE TAG YEARPROG COLLATE 'MACHINE'

***** Change properties for FORM1065 *****
DBSETPROP('FORM1065.CID1065', 'Field', 'Caption', "Primary Key")
DBSETPROP('FORM1065.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('FORM1065.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('FORM1065.NGROSSINC', 'Field', 'Caption', "Gross Income")
DBSETPROP('FORM1065.NTAXES', 'Field', 'Caption', "Taxes")
DBSETPROP('FORM1065.NDEDUCT', 'Field', 'Caption', "Deductions")
DBSETPROP('FORM1065.NORDINCOME', 'Field', 'Caption', "Ordinary Income")
DBSETPROP('FORM1065.DBEGINDATE', 'Field', 'Caption', "Begin Date")
DBSETPROP('FORM1065.NDEPR', 'Field', 'Caption', "Depreciation")
DBSETPROP('FORM1065.NIDC', 'Field', 'Caption', "IDC Costs")
DBSETPROP('FORM1065.NROYALTIES', 'Field', 'Caption', "Royalties")
DBSETPROP('FORM1065.NOTHERDEDUCTS', 'Field', 'Caption', "Other Deducts")
DBSETPROP('FORM1065.NBEGCASH', 'Field', 'Caption', "Beg Cash")
DBSETPROP('FORM1065.NENDCASH', 'Field', 'Caption', "End Cash")
DBSETPROP('FORM1065.NROYDEDUCTS', 'Field', 'Caption', "Royalty Deducts")
DBSETPROP('FORM1065.NBOX3_RENTS', 'Field', 'Caption', "Nbox3 Rents")
DBSETPROP('FORM1065.NBOX3A', 'Field', 'Caption', "Box 3A")
DBSETPROP('FORM1065.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('FORM1065.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('FORM1065.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('FORM1065.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'FORM1065' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'FORM1065' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'FORM1065' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_FORM1065B2
***** Table setup for FORM1065B2 *****
CREATE TABLE 'FORM1065B2.DBF' NAME 'FORM1065B2' (CYEAR C(4) NOT NULL, ;
                         CPROGCODE C(10) NOT NULL, ;
                         CPARTNERID C(10) NOT NULL)

***** Create each index for FORM1065B2 *****
INDEX ON CYEAR+CPROGCODE TAG PK COLLATE 'MACHINE'

***** Change properties for FORM1065B2 *****
DBSETPROP('FORM1065B2.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('FORM1065B2.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('FORM1065B2.CPARTNERID', 'Field', 'Caption', "Owner ID")
CREATE TRIGGER ON 'FORM1065B2' FOR DELETE AS foxaudit(cyear+cprogcode,,,"pk")
CREATE TRIGGER ON 'FORM1065B2' FOR INSERT AS foxaudit(cyear+cprogcode,,,"pk")
CREATE TRIGGER ON 'FORM1065B2' FOR UPDATE AS foxaudit(cyear+cprogcode,,,"pk")
ENDFUNC

FUNCTION MakeTable_FORM6
***** Table setup for FORM6 *****
CREATE TABLE 'FORM6.DBF' NAME 'FORM6' (CWELLID C(10) NOT NULL, ;
                    CWELLNAME C(30) NOT NULL, ;
                    CYEAR C(4) NOT NULL, ;
                    CTOWNSHIP C(30) NOT NULL, ;
                    CCOUNTY C(30) NOT NULL, ;
                    CACRES C(10) NOT NULL, ;
                    CPERMIT1 C(20) NOT NULL, ;
                    CPERMIT2 C(20) NOT NULL, ;
                    CPERMIT3 C(20) NOT NULL, ;
                    CPERMIT4 C(20) NOT NULL, ;
                    CPARCEL C(30) NOT NULL, ;
                    DPRODDATE D NOT NULL, ;
                    NWELLCOUNT N(4, 0) NOT NULL, ;
                    CPRODSTATE C(2) NOT NULL, ;
                    CPRODADD C(60) NOT NULL, ;
                    CPRODADD1 C(40) NOT NULL, ;
                    LFLUSH L NOT NULL, ;
                    NTOTDAYS N(4, 0) NOT NULL, ;
                    NFDISCBBL N(9, 2) NOT NULL, ;
                    NFDISCMCF N(9, 2) NOT NULL, ;
                    NFLUSHBBL N(9, 2) NOT NULL, ;
                    NFLUSHMCF N(9, 2) NOT NULL, ;
                    NNETBBL N(9, 2) NOT NULL, ;
                    NNETMCF N(9, 2) NOT NULL, ;
                    NTAXBBL N(12, 2) NOT NULL, ;
                    NTAXMCF N(12, 2) NOT NULL, ;
                    NDAILYBBL N(15, 10) NOT NULL, ;
                    NDAILYMCF N(15, 10) NOT NULL, ;
                    NTAXVALBBL N(12, 2) NOT NULL, ;
                    NTAXVALMCF N(12, 2) NOT NULL, ;
                    NTOTBBL N(12, 2) NOT NULL, ;
                    NTOTMCF N(12, 2) NOT NULL, ;
                    NWRKOIL N(11, 7) NOT NULL, ;
                    NWRKGAS N(11, 7) NOT NULL, ;
                    NTXVALBBLS N(12, 2) NOT NULL, ;
                    NTXVALMCFS N(12, 2) NOT NULL, ;
                    CPERMIT5 C(20) NOT NULL, ;
                    CPERMIT6 C(20) NOT NULL, ;
                    CIDFORM6 C(8) NOT NULL, ;
                    NBBLSECREC N(9, 2) NOT NULL, ;
                    NMCFSECREC N(9, 2) NOT NULL, ;
                    LSECREC L NOT NULL)

***** Create each index for FORM6 *****
ALTER TABLE 'FORM6' ADD PRIMARY KEY CIDFORM6 TAG CIDFORM6 COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CWELLNAME TAG CWELLNAME COLLATE 'MACHINE'
INDEX ON CWELLID+CYEAR TAG CWELLYR COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'

***** Change properties for FORM6 *****
DBSETPROP('FORM6.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('FORM6.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('FORM6.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('FORM6.CTOWNSHIP', 'Field', 'Caption', "Township")
DBSETPROP('FORM6.CCOUNTY', 'Field', 'Caption', "County")
DBSETPROP('FORM6.CACRES', 'Field', 'Caption', "Acres")
DBSETPROP('FORM6.CPERMIT1', 'Field', 'Caption', "Permit 1")
DBSETPROP('FORM6.CPERMIT2', 'Field', 'Caption', "Permit 2")
DBSETPROP('FORM6.CPERMIT3', 'Field', 'Caption', "Permit 3")
DBSETPROP('FORM6.CPERMIT4', 'Field', 'Caption', "Permit 4")
DBSETPROP('FORM6.CPARCEL', 'Field', 'Caption', "Parcel")
DBSETPROP('FORM6.DPRODDATE', 'Field', 'Caption', "Production Date")
DBSETPROP('FORM6.NWELLCOUNT', 'Field', 'Caption', "Well Count")
DBSETPROP('FORM6.CPRODSTATE', 'Field', 'Caption', "Producer State")
DBSETPROP('FORM6.CPRODADD', 'Field', 'Caption', "Address 1")
DBSETPROP('FORM6.CPRODADD1', 'Field', 'Caption', "Address 2")
DBSETPROP('FORM6.LFLUSH', 'Field', 'Caption', "Flush Production")
DBSETPROP('FORM6.NTOTDAYS', 'Field', 'Caption', "Total Days")
DBSETPROP('FORM6.NFDISCBBL', 'Field', 'Caption', "Flush Disc BBL")
DBSETPROP('FORM6.NFDISCMCF', 'Field', 'Caption', "Flush Disc MCF")
DBSETPROP('FORM6.NFLUSHBBL', 'Field', 'Caption', "Flush BBL")
DBSETPROP('FORM6.NFLUSHMCF', 'Field', 'Caption', "Flush MCF")
DBSETPROP('FORM6.NNETBBL', 'Field', 'Caption', "Net BBL")
DBSETPROP('FORM6.NNETMCF', 'Field', 'Caption', "Net MCF")
DBSETPROP('FORM6.NTAXBBL', 'Field', 'Caption', "Tax per BBL")
DBSETPROP('FORM6.NTAXMCF', 'Field', 'Caption', "Tax per MCF")
DBSETPROP('FORM6.NDAILYBBL', 'Field', 'Caption', "BBL per Day")
DBSETPROP('FORM6.NDAILYMCF', 'Field', 'Caption', "MCF per Day")
DBSETPROP('FORM6.NTAXVALBBL', 'Field', 'Caption', "Oil Taxable Val")
DBSETPROP('FORM6.NTAXVALMCF', 'Field', 'Caption', "Gas Taxable Val")
DBSETPROP('FORM6.NTOTBBL', 'Field', 'Caption', "Total BBL")
DBSETPROP('FORM6.NTOTMCF', 'Field', 'Caption', "Total MCF")
DBSETPROP('FORM6.NTXVALBBLS', 'Field', 'Caption', "Taxable Val BBLs")
DBSETPROP('FORM6.NTXVALMCFS', 'Field', 'Caption', "Taxable Val MCf")
DBSETPROP('FORM6.CPERMIT5', 'Field', 'Caption', "Permit 5")
DBSETPROP('FORM6.CPERMIT6', 'Field', 'Caption', "Permit 6")
DBSETPROP('FORM6.CIDFORM6', 'Field', 'Caption', "Primary Key")
DBSETPROP('FORM6.NBBLSECREC', 'Field', 'Caption', "Oil Secondary Recovery")
DBSETPROP('FORM6.NMCFSECREC', 'Field', 'Caption', "Gas Secondary Recovery")
DBSETPROP('FORM6.LSECREC', 'Field', 'Caption', "Secondary Recover")
CREATE TRIGGER ON 'FORM6' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'FORM6' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'FORM6' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_FORM6S
***** Table setup for FORM6S *****
CREATE TABLE 'FORM6S.DBF' NAME 'FORM6S' (CIDSTOWN C(8) NOT NULL, ;
                     CWELLID C(10) NOT NULL, ;
                     CYEAR C(4) NOT NULL, ;
                     COWNERID C(10) NOT NULL, ;
                     CROYNAME C(40) NOT NULL, ;
                     CROYADDR1 C(40) NOT NULL, ;
                     CROYADDR2 C(40) NOT NULL, ;
                     CROYADDR3 C(40) NOT NULL, ;
                     NGASINT N(13, 8) NOT NULL, ;
                     NOILINT N(13, 8) NOT NULL, ;
                     NGASVAL N(12, 2) NOT NULL, ;
                     NOILVAL N(12, 2) NOT NULL, ;
                     CPERMIT1 C(20) NOT NULL, ;
                     CPERMIT2 C(20) NOT NULL, ;
                     CPERMIT3 C(20) NOT NULL, ;
                     CPERMIT4 C(20) NOT NULL, ;
                     CPERMIT5 C(20) NOT NULL, ;
                     CPERMIT6 C(20) NOT NULL, ;
                     NTOTALVAL N(12, 2) NOT NULL, ;
                     CWELLNAME C(30) NOT NULL, ;
                     CTYPEINV C(5) NOT NULL, ;
                     CSTATE C(2) NOT NULL, ;
                     CTAXYEAR C(4) NOT NULL, ;
                     CCOUNTY C(25) NOT NULL, ;
                     CTOWNSHIP C(25) NOT NULL, ;
                     CNRA C(20) NOT NULL, ;
                     CWVFIRSTNAME C(40) NOT NULL, ;
                     CWVLASTNAME C(40) NOT NULL, ;
                     CWVADDRESS C(40) NOT NULL, ;
                     CWVCITY C(40) NOT NULL, ;
                     CWVSTATE C(2) NOT NULL, ;
                     CWVZIPCODE C(10) NOT NULL, ;
                     CWVTAXID C(11) NOT NULL, ;
                     NOTHINT N(11, 7) NOT NULL, ;
                     NOTHVAL N(12, 2) NOT NULL)

***** Create each index for FORM6S *****
INDEX ON CWVFIRSTNAME TAG CFIRSTNAME COLLATE 'MACHINE'
ALTER TABLE 'FORM6S' ADD PRIMARY KEY CIDSTOWN TAG CIDSTOWN COLLATE 'MACHINE'
INDEX ON CWVLASTNAME TAG CLASTNAME COLLATE 'MACHINE'
INDEX ON CNRA+CTYPEINV+CROYNAME TAG CNRA COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CROYNAME TAG CROYNAME COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CWELLNAME TAG CWELLNAME COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON CYEAR+COWNERID+CNRA+CTYPEINV TAG WVKEY COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for FORM6S *****
DBSETPROP('FORM6S.CIDSTOWN', 'Field', 'Caption', "Primary Key")
DBSETPROP('FORM6S.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('FORM6S.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('FORM6S.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('FORM6S.CROYNAME', 'Field', 'Caption', "Royalty Owner Name")
DBSETPROP('FORM6S.CROYADDR1', 'Field', 'Caption', "Royalty Address 1")
DBSETPROP('FORM6S.CROYADDR2', 'Field', 'Caption', "Royalty Address 2")
DBSETPROP('FORM6S.CROYADDR3', 'Field', 'Caption', "Royalty Address 3")
DBSETPROP('FORM6S.NGASINT', 'Field', 'Caption', "Gas Interest")
DBSETPROP('FORM6S.NOILINT', 'Field', 'Caption', "Oil Interest")
DBSETPROP('FORM6S.NGASVAL', 'Field', 'Caption', "Gas Value")
DBSETPROP('FORM6S.NOILVAL', 'Field', 'Caption', "Oil Value")
DBSETPROP('FORM6S.CPERMIT1', 'Field', 'Caption', "Permit # 1")
DBSETPROP('FORM6S.CPERMIT2', 'Field', 'Caption', "Permit # 2")
DBSETPROP('FORM6S.CPERMIT3', 'Field', 'Caption', "Permit # 3")
DBSETPROP('FORM6S.CPERMIT4', 'Field', 'Caption', "Permit # 4")
DBSETPROP('FORM6S.CPERMIT5', 'Field', 'Caption', "Permit # 5")
DBSETPROP('FORM6S.CPERMIT6', 'Field', 'Caption', "Permit # 6")
DBSETPROP('FORM6S.NTOTALVAL', 'Field', 'Caption', "Total Value")
DBSETPROP('FORM6S.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('FORM6S.CTYPEINV', 'Field', 'Caption', "Owner Type")
DBSETPROP('FORM6S.CSTATE', 'Field', 'Caption', "Report State")
DBSETPROP('FORM6S.CTAXYEAR', 'Field', 'Caption', "Tax Year")
DBSETPROP('FORM6S.CCOUNTY', 'Field', 'Caption', "County")
DBSETPROP('FORM6S.CTOWNSHIP', 'Field', 'Caption', "Township")
DBSETPROP('FORM6S.CNRA', 'Field', 'Caption', "NRA")
DBSETPROP('FORM6S.CWVFIRSTNAME', 'Field', 'Caption', "First Name")
DBSETPROP('FORM6S.CWVLASTNAME', 'Field', 'Caption', "Last Name")
DBSETPROP('FORM6S.CWVADDRESS', 'Field', 'Caption', "Address")
DBSETPROP('FORM6S.CWVCITY', 'Field', 'Caption', "City")
DBSETPROP('FORM6S.CWVSTATE', 'Field', 'Caption', "State")
DBSETPROP('FORM6S.CWVZIPCODE', 'Field', 'Caption', "Zip Code")
DBSETPROP('FORM6S.CWVTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('FORM6S.NOTHINT', 'Field', 'Caption', "Other Interest")
DBSETPROP('FORM6S.NOTHVAL', 'Field', 'Caption', "Other Value")
CREATE TRIGGER ON 'FORM6S' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'FORM6S' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'FORM6S' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_FORMATIONS
***** Table setup for FORMATIONS *****
CREATE TABLE 'FORMATIONS.DBF' NAME 'FORMATIONS' (IFORMPK I NOT NULL AUTOINC NEXTVALUE 4 STEP 1, ;
                         CFORMATION C(30) NOT NULL, ;
                         CADDEDBY C(10) NOT NULL, ;
                         CCHANGEDBY C(10) NOT NULL, ;
                         DADDED T NOT NULL, ;
                         DCHANGED T NOT NULL)

***** Create each index for FORMATIONS *****
INDEX ON CFORMATION TAG CFORMATION COLLATE 'MACHINE'
ALTER TABLE 'FORMATIONS' ADD PRIMARY KEY IFORMPK TAG IFORMPK COLLATE 'MACHINE'

***** Change properties for FORMATIONS *****
DBSETPROP('FORMATIONS.IFORMPK', 'Field', 'Caption', "PK")
DBSETPROP('FORMATIONS.CFORMATION', 'Field', 'Caption', "Formation")
DBSETPROP('FORMATIONS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('FORMATIONS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('FORMATIONS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('FORMATIONS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'FORMATIONS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'FORMATIONS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'FORMATIONS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_GASINV
***** Table setup for GASINV *****
CREATE TABLE 'GASINV.DBF' NAME 'GASINV' (CIDGASINV C(8) NOT NULL, ;
                     COWNERID C(10) NOT NULL, ;
                     CMETERNO C(15) NOT NULL, ;
                     CINVNUM C(15) NOT NULL, ;
                     CIDTERM C(8) NOT NULL, ;
                     CCURRENT C(10) NOT NULL, ;
                     NUSED N(12, 2) NOT NULL, ;
                     NPRICE N(12, 2) NOT NULL, ;
                     NPRICEADJ N(12, 2) NOT NULL, ;
                     NTOTAL N(12, 2) NOT NULL, ;
                     NBALANCE N(12, 2) NOT NULL, ;
                     NPMTS N(12, 2) NOT NULL, ;
                     DINVDATE D NOT NULL, ;
                     DDUEDATE D NOT NULL, ;
                     DDISCDATE D NOT NULL, ;
                     LPRINTED L NOT NULL, ;
                     NDISCTOT N(12, 2) NOT NULL, ;
                     NCHARGE N(9, 2) NOT NULL, ;
                     CCHARGE C(30) NOT NULL, ;
                     NPRESSURE N(10, 4) NOT NULL, ;
                     CTXNID C(36) NOT NULL)

***** Create each index for GASINV *****
ALTER TABLE 'GASINV' ADD PRIMARY KEY CIDGASINV TAG CIDGASINV COLLATE 'MACHINE'
INDEX ON CMETERNO TAG CMETERNO COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON DINVDATE TAG DINVDATE COLLATE 'MACHINE'

***** Change properties for GASINV *****
DBSETPROP('GASINV.CIDGASINV', 'Field', 'Caption', "Primary Key")
DBSETPROP('GASINV.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('GASINV.CMETERNO', 'Field', 'Caption', "Meter No")
DBSETPROP('GASINV.CINVNUM', 'Field', 'Caption', "Invoice No")
DBSETPROP('GASINV.CIDTERM', 'Field', 'Caption', "Terms")
DBSETPROP('GASINV.CCURRENT', 'Field', 'Caption', "Current Reading")
DBSETPROP('GASINV.NUSED', 'Field', 'Caption', "Current Usage")
DBSETPROP('GASINV.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('GASINV.NPRICEADJ', 'Field', 'Caption', "Price Adj")
DBSETPROP('GASINV.NTOTAL', 'Field', 'Caption', "Total")
DBSETPROP('GASINV.NBALANCE', 'Field', 'Caption', "Balance")
DBSETPROP('GASINV.NPMTS', 'Field', 'Caption', "Payments")
DBSETPROP('GASINV.DINVDATE', 'Field', 'Caption', "Invoice Date")
DBSETPROP('GASINV.DDUEDATE', 'Field', 'Caption', "Due Date")
DBSETPROP('GASINV.DDISCDATE', 'Field', 'Caption', "Discount Date")
DBSETPROP('GASINV.LPRINTED', 'Field', 'Caption', "Invoice Printed")
DBSETPROP('GASINV.NDISCTOT', 'Field', 'Caption', "Discount Total")
DBSETPROP('GASINV.NCHARGE', 'Field', 'Caption', "Extra Charge")
DBSETPROP('GASINV.CCHARGE', 'Field', 'Caption', "Charge Description")
DBSETPROP('GASINV.NPRESSURE', 'Field', 'Caption', "PSI")
DBSETPROP('GASINV.CTXNID', 'Field', 'Caption', "QB Txn ID")
CREATE TRIGGER ON 'GASINV' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'GASINV' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GASINV' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_GASOPT
***** Table setup for GASOPT *****
CREATE TABLE 'GASOPT.DBF' NAME 'GASOPT' (NPRICE N(6, 2) NOT NULL, ;
                     CARACCT C(6) NOT NULL, ;
                     CSALESACCT C(6) NOT NULL, ;
                     MINVNOTES M NOT NULL, ;
                     CIDTERM C(8) NOT NULL, ;
                     CMONTH C(2) NOT NULL, ;
                     CSTMTMONTH C(2) NOT NULL, ;
                     NCHARGE N(9, 2) NOT NULL, ;
                     CCHARGE C(30) NOT NULL, ;
                     LSHOWPSI L NOT NULL, ;
                     CVENDORID C(10) NOT NULL, ;
                     CCATCODE C(4) NOT NULL, ;
                     LACTUAL L NOT NULL, ;
                     CITEMLIST C(36) NOT NULL, ;
                     PK I NOT NULL AUTOINC NEXTVALUE 2 STEP 1)

***** Create each index for GASOPT *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for GASOPT *****
DBSETPROP('GASOPT.NPRICE', 'Field', 'Caption', "Default Price")
DBSETPROP('GASOPT.CARACCT', 'Field', 'Caption', "A/R Account")
DBSETPROP('GASOPT.CSALESACCT', 'Field', 'Caption', "Sales Account")
DBSETPROP('GASOPT.MINVNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('GASOPT.CIDTERM', 'Field', 'Caption', "Terms")
DBSETPROP('GASOPT.CMONTH', 'Field', 'Caption', "Month")
DBSETPROP('GASOPT.CSTMTMONTH', 'Field', 'Caption', "Stmt Month")
DBSETPROP('GASOPT.NCHARGE', 'Field', 'Caption', "Extra Charge")
DBSETPROP('GASOPT.CCHARGE', 'Field', 'Caption', "Charge Description")
DBSETPROP('GASOPT.LSHOWPSI', 'Field', 'Caption', "Show PSI")
DBSETPROP('GASOPT.CVENDORID', 'Field', 'Caption', "Vendor for One-Man Items")
DBSETPROP('GASOPT.CCATCODE', 'Field', 'Caption', "Exp Code")
DBSETPROP('GASOPT.LACTUAL', 'Field', 'Caption', "Actual Readings")
DBSETPROP('GASOPT.CITEMLIST', 'Field', 'Caption', "QB Item List ID")
DBSETPROP('GASOPT.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'GASOPT' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'GASOPT' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'GASOPT' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_GASOWN
***** Table setup for GASOWN *****
CREATE TABLE 'GASOWN.DBF' NAME 'GASOWN' (COWNERID C(10) NOT NULL, ;
                     CMETERNO C(15) NOT NULL, ;
                     CDESCRIPTION C(25) NOT NULL, ;
                     CGROUP C(2) NOT NULL, ;
                     NCOUNTERLEN N(2, 0) NOT NULL, ;
                     NYEARLYAMT N(10, 2) NOT NULL, ;
                     NUSED N(11, 2) NOT NULL, ;
                     CLAST C(10) NOT NULL, ;
                     NMULTIPLIER N(11, 4) NOT NULL, ;
                     LGPA L NOT NULL, ;
                     CROUTENO C(10) NOT NULL, ;
                     NSEQUENCE N(4, 0) NOT NULL, ;
                     NPRICEADJ N(6, 2) NOT NULL, ;
                     MNOTES M NOT NULL, ;
                     NPRESSURE N(10, 4) NOT NULL, ;
                     CWELLID C(10) NOT NULL, ;
                     LNET L NOT NULL, ;
                     CLOCATION C(1) NOT NULL, ;
                     CTYPE C(1) NOT NULL, ;
                     CRATETYPE C(4) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for GASOWN *****
ALTER TABLE 'GASOWN' ADD PRIMARY KEY CMETERNO TAG CMETERNO COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNER COLLATE 'MACHINE'
INDEX ON COWNERID+CMETERNO TAG COWNERID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for GASOWN *****
DBSETPROP('GASOWN.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('GASOWN.CMETERNO', 'Field', 'Caption', "Meter No")
DBSETPROP('GASOWN.CDESCRIPTION', 'Field', 'Caption', "Meter Desc")
DBSETPROP('GASOWN.CGROUP', 'Field', 'Caption', "Well Group")
DBSETPROP('GASOWN.NCOUNTERLEN', 'Field', 'Caption', "Counter Length")
DBSETPROP('GASOWN.NYEARLYAMT', 'Field', 'Caption', "Yearly Allocation")
DBSETPROP('GASOWN.NUSED', 'Field', 'Caption', "YTD Used")
DBSETPROP('GASOWN.CLAST', 'Field', 'Caption', "Last Reading")
DBSETPROP('GASOWN.NMULTIPLIER', 'Field', 'Caption', "Multiplier")
DBSETPROP('GASOWN.LGPA', 'Field', 'Caption', "GPA")
DBSETPROP('GASOWN.CROUTENO', 'Field', 'Caption', "Route No")
DBSETPROP('GASOWN.NSEQUENCE', 'Field', 'Caption', "Sequence No")
DBSETPROP('GASOWN.NPRICEADJ', 'Field', 'Caption', "Price Adj")
DBSETPROP('GASOWN.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('GASOWN.NPRESSURE', 'Field', 'Caption', "Npressure")
DBSETPROP('GASOWN.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('GASOWN.LNET', 'Field', 'Caption', "Net")
DBSETPROP('GASOWN.CLOCATION', 'Field', 'Caption', "Before/After")
DBSETPROP('GASOWN.CTYPE', 'Field', 'Caption', "Meter Type")
DBSETPROP('GASOWN.CRATETYPE', 'Field', 'Caption', "Rate Type")
DBSETPROP('GASOWN.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('GASOWN.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('GASOWN.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('GASOWN.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'GASOWN' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'GASOWN' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GASOWN' FOR UPDATE AS __ri_update_gasown().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_GASUSE
***** Table setup for GASUSE *****
CREATE TABLE 'GASUSE.DBF' NAME 'GASUSE' (COWNERID C(10) NOT NULL, ;
                     DDATE D NOT NULL, ;
                     CMETERNO C(15) NOT NULL, ;
                     CLAST C(10) NOT NULL, ;
                     CCURRENT C(10) NOT NULL, ;
                     NUSED N(11, 2) NOT NULL, ;
                     NPRICE N(6, 2) NOT NULL, ;
                     NPRICEADJ N(6, 2) NOT NULL, ;
                     NMULTIPLIER N(11, 4) NOT NULL, ;
                     NDUE N(11, 2) NOT NULL, ;
                     CINVTOKEN C(8) NOT NULL, ;
                     NBILLABLE N(11, 2) NOT NULL, ;
                     NCHARGE N(9, 2) NOT NULL, ;
                     CCHARGE C(30) NOT NULL, ;
                     NPRESSURE N(10, 4) NOT NULL, ;
                     DINVDATE D NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for GASUSE *****
INDEX ON CMETERNO TAG CMETER COLLATE 'MACHINE'
INDEX ON CMETERNO+COWNERID TAG CMETERNO COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON DDATE TAG DDATE COLLATE 'MACHINE'
INDEX ON CMETERNO+COWNERID TAG LASTUSE DESCENDING  COLLATE 'MACHINE'

***** Change properties for GASUSE *****
DBSETPROP('GASUSE.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('GASUSE.DDATE', 'Field', 'Caption', "Date")
DBSETPROP('GASUSE.CMETERNO', 'Field', 'Caption', "Meter No")
DBSETPROP('GASUSE.CLAST', 'Field', 'Caption', "Last Reading")
DBSETPROP('GASUSE.CCURRENT', 'Field', 'Caption', "Current Reading")
DBSETPROP('GASUSE.NUSED', 'Field', 'Caption', "Amt Used")
DBSETPROP('GASUSE.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('GASUSE.NPRICEADJ', 'Field', 'Caption', "Price Adj")
DBSETPROP('GASUSE.NMULTIPLIER', 'Field', 'Caption', "Multiplier")
DBSETPROP('GASUSE.NDUE', 'Field', 'Caption', "Amt Due")
DBSETPROP('GASUSE.CINVTOKEN', 'Field', 'Caption', "Key To Invoice")
DBSETPROP('GASUSE.NBILLABLE', 'Field', 'Caption', "Billable Usage")
DBSETPROP('GASUSE.NCHARGE', 'Field', 'Caption', "Extra Charge")
DBSETPROP('GASUSE.CCHARGE', 'Field', 'Caption', "Charge Description")
DBSETPROP('GASUSE.NPRESSURE', 'Field', 'Caption', "PSI")
DBSETPROP('GASUSE.DINVDATE', 'Field', 'Caption', "Invoice Date")
DBSETPROP('GASUSE.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('GASUSE.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('GASUSE.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('GASUSE.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'GASUSE' FOR DELETE AS foxaudit(cmeterno+cownerid,,,"cmeterno")
CREATE TRIGGER ON 'GASUSE' FOR INSERT AS foxaudit(cmeterno+cownerid,,,"cmeterno")
CREATE TRIGGER ON 'GASUSE' FOR UPDATE AS foxaudit(cmeterno+cownerid,,,"cmeterno")
ENDFUNC

FUNCTION MakeTable_GLACCTYP
***** Table setup for GLACCTYP *****
CREATE TABLE 'GLACCTYP.DBF' NAME 'GLACCTYP' (NACCTTYPE I NOT NULL, ;
                       CTYPEDESC C(40) NOT NULL, ;
                       CFOOTER C(40) NOT NULL)

***** Create each index for GLACCTYP *****
INDEX ON CTYPEDESC TAG CTYPEDESC COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
ALTER TABLE 'GLACCTYP' ADD PRIMARY KEY NACCTTYPE TAG NACCTTYPE COLLATE 'MACHINE'

***** Change properties for GLACCTYP *****
DBSETPROP('GLACCTYP.NACCTTYPE', 'Field', 'Caption', "Code")
DBSETPROP('GLACCTYP.CTYPEDESC', 'Field', 'Caption', "Description")
DBSETPROP('GLACCTYP.CFOOTER', 'Field', 'Caption', "Footer after this section")
CREATE TRIGGER ON 'GLACCTYP' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'GLACCTYP' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GLACCTYP' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_GLBATCHES
***** Table setup for GLBATCHES *****
CREATE TABLE 'GLBATCHES.DBF' NAME 'GLBATCHES' (CBATCH C(8) NOT NULL, ;
                        CREF C(20) NOT NULL, ;
                        DDATE D NOT NULL)

***** Create each index for GLBATCHES *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CREF TAG CREF COLLATE 'MACHINE'
INDEX ON DDATE TAG DDATE COLLATE 'MACHINE'

***** Change properties for GLBATCHES *****
DBSETPROP('GLBATCHES.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('GLBATCHES.CREF', 'Field', 'Caption', "Reference")
DBSETPROP('GLBATCHES.DDATE', 'Field', 'Caption', "Date")
ENDFUNC

FUNCTION MakeTable_GLDEPT
***** Table setup for GLDEPT *****
CREATE TABLE 'GLDEPT.DBF' NAME 'GLDEPT' (CDEPTNO C(8) NOT NULL, ;
                     CDEPTDESC C(30) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for GLDEPT *****
INDEX ON CDEPTDESC TAG CDEPTDESC COLLATE 'MACHINE'
ALTER TABLE 'GLDEPT' ADD PRIMARY KEY UPPER(CDEPTNO) TAG CDEPTNO COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for GLDEPT *****
DBSETPROP('GLDEPT.CDEPTNO', 'Field', 'Caption', "Department Code")
DBSETPROP('GLDEPT.CDEPTDESC', 'Field', 'Caption', "Department Description")
DBSETPROP('GLDEPT.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('GLDEPT.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('GLDEPT.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('GLDEPT.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'GLDEPT' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'GLDEPT' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GLDEPT' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_GLJNDET
***** Table setup for GLJNDET *****
CREATE TABLE 'GLJNDET.DBF' NAME 'GLJNDET' (CIDGLJO C(8) NOT NULL, ;
                      CBATCH C(8) NOT NULL, ;
                      CDESC C(40) NOT NULL, ;
                      CACCTNO C(6) NOT NULL, ;
                      CUNITNO C(10) NOT NULL, ;
                      CDEPTNO C(8) NOT NULL, ;
                      NDEBITS N(12, 2) NOT NULL, ;
                      NCREDITS N(12, 2) NOT NULL, ;
                      NSALTBBL I NOT NULL, ;
                      CIDCHEC C(8) NOT NULL, ;
                      CCATCODE C(4) NOT NULL, ;
                      CDISPERM C(6) NOT NULL, ;
                      CDISPCODE C(2) NOT NULL, ;
                      CWASTECODE C(3) NOT NULL, ;
                      CAFENO C(10) NOT NULL)

***** Create each index for GLJNDET *****
INDEX ON CBATCH TAG BATCH COLLATE 'MACHINE'
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
ALTER TABLE 'GLJNDET' ADD PRIMARY KEY CIDGLJO TAG CIDGLJN COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for GLJNDET *****
DBSETPROP('GLJNDET.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('GLJNDET.CDISPCODE', 'Field', 'Caption', "Disposal Code")
DBSETPROP('GLJNDET.CWASTECODE', 'Field', 'Caption', "Waste Code")
DBSETPROP('GLJNDET.CAFENO', 'Field', 'Caption', "AFE No")
CREATE TRIGGER ON 'GLJNDET' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'GLJNDET' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GLJNDET' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_GLJOURN
***** Table setup for GLJOURN *****
CREATE TABLE 'GLJOURN.DBF' NAME 'GLJOURN' (CBATCH C(8) NOT NULL, ;
                      CGLTYPE C(2) NOT NULL, ;
                      CGLREF C(25) NOT NULL, ;
                      DGLDATE D NOT NULL, ;
                      DENTDATE D NOT NULL, ;
                      CENTTIME C(8) NOT NULL, ;
                      NTOTALDR N(12, 2) NOT NULL, ;
                      NTOTALCR N(12, 2) NOT NULL, ;
                      CDMBATCH C(8) NOT NULL, ;
                      CYEAR C(4) NOT NULL, ;
                      CPERIOD C(2) NOT NULL, ;
                      MNOTES M NOT NULL, ;
                      CBUNCH C(8) NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for GLJOURN *****
ALTER TABLE 'GLJOURN' ADD PRIMARY KEY CBATCH TAG BATCH COLLATE 'MACHINE'
INDEX ON CGLTYPE TAG GLTYPE COLLATE 'MACHINE'
INDEX ON DGLDATE TAG TRANDATE COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for GLJOURN *****
DBSETPROP('GLJOURN.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('GLJOURN.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('GLJOURN.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('GLJOURN.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'GLJOURN' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'GLJOURN' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GLJOURN' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_GLMASTER
***** Table setup for GLMASTER *****
CREATE TABLE 'GLMASTER.DBF' NAME 'GLMASTER' (CIDGLMA C(10) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       CYEAR C(4) NOT NULL, ;
                       CPERIOD C(2) NOT NULL, ;
                       CSOURCE C(2) NOT NULL, ;
                       CREF C(25) NOT NULL, ;
                       DDATE D NOT NULL, ;
                       CDESC C(40) NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       CUNITNO C(10) NOT NULL, ;
                       CDEPTNO C(8) NOT NULL, ;
                       NDEBITS N(12, 2) NOT NULL, ;
                       NCREDITS N(12, 2) NOT NULL, ;
                       CDMBATCH C(8) NOT NULL, ;
                       CID C(10) NOT NULL, ;
                       CBUNCH C(8) NOT NULL, ;
                       DLASTMODIFIED T NOT NULL, ;
                       CUSER C(10) NOT NULL, ;
                       CCATCODE C(4) NOT NULL, ;
                       MNOTES M NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       CPRODYR C(4) NOT NULL, ;
                       CPRODPRD C(2) NOT NULL, ;
                       CAFENO C(10) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for GLMASTER *****
INDEX ON CACCTNO TAG ACCTNO COLLATE 'MACHINE'
INDEX ON CBUNCH TAG CBUNCH COLLATE 'MACHINE'
INDEX ON CCATCODE TAG CCATCODE COLLATE 'MACHINE'
INDEX ON CID TAG CID COLLATE 'MACHINE'
INDEX ON CIDGLMA TAG CIDGLMA COLLATE 'MACHINE'
INDEX ON CUNITNO TAG CUNITNO COLLATE 'MACHINE'
INDEX ON CBATCH TAG GLBATCH COLLATE 'MACHINE'
INDEX ON DDATE TAG GLDATE COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD TAG GLSYSPRD COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for GLMASTER *****
DBSETPROP('GLMASTER.CIDGLMA', 'Field', 'Caption', "Primary Key")
DBSETPROP('GLMASTER.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('GLMASTER.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('GLMASTER.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('GLMASTER.CSOURCE', 'Field', 'Caption', "Source")
DBSETPROP('GLMASTER.CREF', 'Field', 'Caption', "Reference")
DBSETPROP('GLMASTER.DDATE', 'Field', 'Caption', "Date")
DBSETPROP('GLMASTER.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('GLMASTER.CACCTNO', 'Field', 'Caption', "Account")
DBSETPROP('GLMASTER.CUNITNO', 'Field', 'Caption', "Well ID")
DBSETPROP('GLMASTER.CDEPTNO', 'Field', 'Caption', "Dept")
DBSETPROP('GLMASTER.NDEBITS', 'Field', 'Caption', "Debits")
DBSETPROP('GLMASTER.NCREDITS', 'Field', 'Caption', "Credits")
DBSETPROP('GLMASTER.CDMBATCH', 'Field', 'Caption', "Disb Mgr Batch")
DBSETPROP('GLMASTER.CID', 'Field', 'Caption', "ID Code")
DBSETPROP('GLMASTER.CBUNCH', 'Field', 'Caption', "Group Code")
DBSETPROP('GLMASTER.DLASTMODIFIED', 'Field', 'Caption', "Date Last Modified")
DBSETPROP('GLMASTER.CUSER', 'Field', 'Caption', "User ID")
DBSETPROP('GLMASTER.CCATCODE', 'Field', 'Caption', "Category Code")
DBSETPROP('GLMASTER.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('GLMASTER.CIDCHEC', 'Field', 'Caption', "Check Register Key")
DBSETPROP('GLMASTER.CPRODYR', 'Field', 'Caption', "Prod Year")
DBSETPROP('GLMASTER.CPRODPRD', 'Field', 'Caption', "Prod Period")
DBSETPROP('GLMASTER.CAFENO', 'Field', 'Caption', "AFE No")
DBSETPROP('GLMASTER.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('GLMASTER.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('GLMASTER.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('GLMASTER.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'GLMASTER' FOR DELETE AS foxaudit(cidglma,,,"cidglma")
CREATE TRIGGER ON 'GLMASTER' FOR INSERT AS foxaudit(cidglma,,,"cidglma")
CREATE TRIGGER ON 'GLMASTER' FOR UPDATE AS foxaudit(cidglma,,,"cidglma")
ENDFUNC

FUNCTION MakeTable_GLOPT
***** Table setup for GLOPT *****
CREATE TABLE 'GLOPT.DBF' NAME 'GLOPT' (CFYBEGIN C(2) NOT NULL, ;
                    CRETEARN C(6) NOT NULL, ;
                    CINVENTORY C(6) NOT NULL, ;
                    LPRINTACCT L NOT NULL, ;
                    CCUREARN C(6) NOT NULL, ;
                    CREVCLEAR C(6) NOT NULL, ;
                    CUNDEPFUND C(6) NOT NULL, ;
                    CSUSPENSE C(6) NOT NULL, ;
                    LBUNCH L NOT NULL, ;
                    CEXPCLEAR C(6) NOT NULL, ;
                    LSEPACCOUNTS L NOT NULL, ;
                    LCHECKNAMES L NOT NULL, ;
                    LFYEND L NOT NULL, ;
                    LDMNOREV L NOT NULL, ;
                    LDMNOEXP L NOT NULL, ;
                    LDMNOPOST L NOT NULL, ;
                    PK I NOT NULL AUTOINC NEXTVALUE 2 STEP 1)

***** Create each index for GLOPT *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for GLOPT *****
DBSETPROP('GLOPT.CFYBEGIN', 'Field', 'Caption', "Month Fiscal Period Begins")
DBSETPROP('GLOPT.CRETEARN', 'Field', 'Caption', "Retained Earnings")
DBSETPROP('GLOPT.CINVENTORY', 'Field', 'Caption', "Inventory")
DBSETPROP('GLOPT.LPRINTACCT', 'Field', 'Caption', "Print Acct No")
DBSETPROP('GLOPT.CCUREARN', 'Field', 'Caption', "Current Earnings")
DBSETPROP('GLOPT.CREVCLEAR', 'Field', 'Caption', "Revenue Clearing")
DBSETPROP('GLOPT.CUNDEPFUND', 'Field', 'Caption', "Undeposited Funds")
DBSETPROP('GLOPT.CSUSPENSE', 'Field', 'Caption', "Suspense Acct")
DBSETPROP('GLOPT.LBUNCH', 'Field', 'Caption', "Group Transactions")
DBSETPROP('GLOPT.CEXPCLEAR', 'Field', 'Caption', "Expense Clearing Account")
DBSETPROP('GLOPT.LSEPACCOUNTS', 'Field', 'Caption', "Use Separate Clearing Accts for Revenue and Expenses")
DBSETPROP('GLOPT.LCHECKNAMES', 'Field', 'Caption', "Specify Check Name for Each Account")
DBSETPROP('GLOPT.LFYEND', 'Field', 'Caption', "Fiscal Yr Flag")
DBSETPROP('GLOPT.LDMNOREV', 'Field', 'Caption', "Don't Post DM Revenue")
DBSETPROP('GLOPT.LDMNOEXP', 'Field', 'Caption', "Don't Post DM Expenses")
DBSETPROP('GLOPT.LDMNOPOST', 'Field', 'Caption', "Don't Post Any DM G/L Entries")
DBSETPROP('GLOPT.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'GLOPT' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'GLOPT' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'GLOPT' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_GLRECUR
***** Table setup for GLRECUR *****
CREATE TABLE 'GLRECUR.DBF' NAME 'GLRECUR' (CBATCH C(8) NOT NULL, ;
                      CENTTIME C(8) NOT NULL, ;
                      CGLREF C(30) NOT NULL, ;
                      CGLTYPE C(2) NOT NULL, ;
                      DENTDATE D NOT NULL, ;
                      DGLDATE D NOT NULL, ;
                      LAGING L NOT NULL, ;
                      LDELETED L NOT NULL, ;
                      LPOSTED L NOT NULL, ;
                      NTOTALCR N(12, 2) NOT NULL, ;
                      NTOTALDR N(12, 2) NOT NULL, ;
                      MNOTES M NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for GLRECUR *****
ALTER TABLE 'GLRECUR' ADD PRIMARY KEY CBATCH TAG BATCH COLLATE 'MACHINE'
INDEX ON LPOSTED TAG GLPOSTED COLLATE 'MACHINE'
INDEX ON CGLTYPE TAG GLTYPE COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for GLRECUR *****
DBSETPROP('GLRECUR.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('GLRECUR.CENTTIME', 'Field', 'Caption', "Entry Time")
DBSETPROP('GLRECUR.CGLREF', 'Field', 'Caption', "Reference")
DBSETPROP('GLRECUR.CGLTYPE', 'Field', 'Caption', "Type")
DBSETPROP('GLRECUR.DENTDATE', 'Field', 'Caption', "Entry Date")
DBSETPROP('GLRECUR.DGLDATE', 'Field', 'Caption', "Date")
DBSETPROP('GLRECUR.NTOTALCR', 'Field', 'Caption', "Credits")
DBSETPROP('GLRECUR.NTOTALDR', 'Field', 'Caption', "Debits")
DBSETPROP('GLRECUR.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('GLRECUR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('GLRECUR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('GLRECUR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('GLRECUR.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'GLRECUR' FOR DELETE AS __ri_delete_glrecur().AND.(foxaudit())
CREATE TRIGGER ON 'GLRECUR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GLRECUR' FOR UPDATE AS __ri_update_glrecur().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_GLREDET
***** Table setup for GLREDET *****
CREATE TABLE 'GLREDET.DBF' NAME 'GLREDET' (CACCTNO C(6) NOT NULL, ;
                      CBATCH C(8) NOT NULL, ;
                      CDEPTNO C(8) NOT NULL, ;
                      CDESC C(40) NOT NULL, ;
                      CIDGLRE C(8) NOT NULL, ;
                      CUNITNO C(10) NOT NULL, ;
                      NCREDITS N(12, 2) NOT NULL, ;
                      NDEBITS N(12, 2) NOT NULL, ;
                      CCATCODE C(4) NOT NULL)

***** Create each index for GLREDET *****
INDEX ON CBATCH TAG BATCH COLLATE 'MACHINE'
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
ALTER TABLE 'GLREDET' ADD PRIMARY KEY CIDGLRE TAG CIDGLRE COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'
INDEX ON CUNITNO TAG CUNITNO COLLATE 'MACHINE'

***** Change properties for GLREDET *****
DBSETPROP('GLREDET.CACCTNO', 'Field', 'Caption', "Account No")
DBSETPROP('GLREDET.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('GLREDET.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('GLREDET.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('GLREDET.CIDGLRE', 'Field', 'Caption', "Primary Key")
DBSETPROP('GLREDET.CUNITNO', 'Field', 'Caption', "Well ID")
DBSETPROP('GLREDET.NCREDITS', 'Field', 'Caption', "Credits")
DBSETPROP('GLREDET.NDEBITS', 'Field', 'Caption', "Debits")
DBSETPROP('GLREDET.CCATCODE', 'Field', 'Caption', "Cat Code")
CREATE TRIGGER ON 'GLREDET' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'GLREDET' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GLREDET' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_GROUPS
***** Table setup for GROUPS *****
CREATE TABLE 'GROUPS.DBF' NAME 'GROUPS' (CGROUP C(2) NOT NULL, ;
                     CDESC C(40) NOT NULL, ;
                     LNETDEF L NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for GROUPS *****
INDEX ON CDESC TAG CDESC COLLATE 'MACHINE'
ALTER TABLE 'GROUPS' ADD PRIMARY KEY CGROUP TAG CGROUP COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for GROUPS *****
DBSETPROP('GROUPS.CGROUP', 'Field', 'Caption', "Group Name")
DBSETPROP('GROUPS.CDESC', 'Field', 'Caption', "Group Description")
DBSETPROP('GROUPS.LNETDEF', 'Field', 'Caption', "Net Deficits Within This Group")
DBSETPROP('GROUPS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('GROUPS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('GROUPS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('GROUPS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'GROUPS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'GROUPS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'GROUPS' FOR UPDATE AS __ri_update_groups().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_IMPORTBATCH
***** Table setup for IMPORTBATCH *****
CREATE TABLE 'IMPORTBATCH.DBF' NAME 'IMPORTBATCH' (CBATCH C(8) NOT NULL, ;
                          TIMPDATE T NOT NULL, ;
                          CTYPE C(1) NOT NULL, ;
                          CCHECKNO C(10) NOT NULL, ;
                          NAMOUNT N(12, 2) NOT NULL, ;
                          CREVKEY C(10) NOT NULL, ;
                          MBATCHES M NOT NULL, ;
                          CUSER C(10) NOT NULL)

***** Create each index for IMPORTBATCH *****

***** Change properties for IMPORTBATCH *****
DBSETPROP('IMPORTBATCH.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('IMPORTBATCH.TIMPDATE', 'Field', 'Caption', "Date Imported")
DBSETPROP('IMPORTBATCH.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('IMPORTBATCH.CCHECKNO', 'Field', 'Caption', "Check No")
DBSETPROP('IMPORTBATCH.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('IMPORTBATCH.CREVKEY', 'Field', 'Caption', "Purchaser")
DBSETPROP('IMPORTBATCH.MBATCHES', 'Field', 'Caption', "List of Batches")
DBSETPROP('IMPORTBATCH.CUSER', 'Field', 'Caption', "Imported By")
ENDFUNC

FUNCTION MakeTable_IMPORTDEFS
***** Table setup for IMPORTDEFS *****
CREATE TABLE 'IMPORTDEFS.DBF' NAME 'IMPORTDEFS' (IIMPORTDEFSPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                         CDESCRIPT C(20) NOT NULL, ;
                         CNAME C(20) NOT NULL, ;
                         CTYPE C(5) NOT NULL, ;
                         DINSTALLDATE T NOT NULL, ;
                         COLDDESC C(20) NOT NULL, ;
                         CADDEDBY C(10) NOT NULL, ;
                         CCHANGEDBY C(10) NOT NULL, ;
                         DADDED T NOT NULL, ;
                         DCHANGED T NOT NULL)

***** Create each index for IMPORTDEFS *****
INDEX ON CDESCRIPT TAG CDESC COLLATE 'MACHINE'
INDEX ON IIMPORTDEFSPK TAG PK COLLATE 'MACHINE'
INDEX ON CTYPE TAG TYPE COLLATE 'MACHINE'

***** Change properties for IMPORTDEFS *****
DBSETPROP('IMPORTDEFS.IIMPORTDEFSPK', 'Field', 'Caption', "PK")
DBSETPROP('IMPORTDEFS.CDESCRIPT', 'Field', 'Caption', "Description")
DBSETPROP('IMPORTDEFS.CNAME', 'Field', 'Caption', "Import Name")
DBSETPROP('IMPORTDEFS.CTYPE', 'Field', 'Caption', "Import Type")
DBSETPROP('IMPORTDEFS.DINSTALLDATE', 'Field', 'Caption', "Date Installed")
DBSETPROP('IMPORTDEFS.COLDDESC', 'Field', 'Caption', "Old Desc")
DBSETPROP('IMPORTDEFS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('IMPORTDEFS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('IMPORTDEFS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('IMPORTDEFS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'IMPORTDEFS' FOR DELETE AS foxaudit(iimportdefspk,,,"pk")
CREATE TRIGGER ON 'IMPORTDEFS' FOR INSERT AS foxaudit(iimportdefspk,,,"pk")
CREATE TRIGGER ON 'IMPORTDEFS' FOR UPDATE AS foxaudit(iimportdefspk,,,"pk")
ENDFUNC

FUNCTION MakeTable_IMPORTEXPLAIN
***** Table setup for IMPORTEXPLAIN *****
CREATE TABLE 'IMPORTEXPLAIN.DBF' NAME 'IMPORTEXPLAIN' (IIMPORTEXPLAINPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                            CTYPE C(5) NOT NULL, ;
                            CEXPLANATION M NOT NULL)

***** Create each index for IMPORTEXPLAIN *****
ALTER TABLE 'IMPORTEXPLAIN' ADD PRIMARY KEY IIMPORTEXPLAINPK TAG PK COLLATE 'MACHINE'

***** Change properties for IMPORTEXPLAIN *****
DBSETPROP('IMPORTEXPLAIN.IIMPORTEXPLAINPK', 'Field', 'Caption', "PK")
DBSETPROP('IMPORTEXPLAIN.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('IMPORTEXPLAIN.CEXPLANATION', 'Field', 'Caption', "Explanation")
CREATE TRIGGER ON 'IMPORTEXPLAIN' FOR DELETE AS foxaudit(iimportexplainpk,,,"pk")
CREATE TRIGGER ON 'IMPORTEXPLAIN' FOR INSERT AS foxaudit(iimportexplainpk,,,"pk")
CREATE TRIGGER ON 'IMPORTEXPLAIN' FOR UPDATE AS foxaudit(iimportexplainpk,,,"pk")
ENDFUNC

FUNCTION MakeTable_IMPORTMAP
***** Table setup for IMPORTMAP *****
CREATE TABLE 'IMPORTMAP.DBF' NAME 'IMPORTMAP' (IIMPORTMAPPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                        CID C(10) NOT NULL, ;
                        CIMPORTNAME C(50) NOT NULL, ;
                        MFIELDS M NOT NULL, ;
                        CTYPE C(10) NOT NULL, ;
                        LDEDUCTS L NOT NULL, ;
                        CUSER C(10) NOT NULL, ;
                        DLASTMODIFIED T NOT NULL, ;
                        CADDEDBY C(10) NOT NULL, ;
                        CCHANGEDBY C(10) NOT NULL, ;
                        DADDED T NOT NULL, ;
                        DCHANGED T NOT NULL, ;
                        LTRANS L NOT NULL)

***** Create each index for IMPORTMAP *****
INDEX ON CIMPORTNAME TAG IMPORTNAME COLLATE 'MACHINE'
INDEX ON IIMPORTMAPPK TAG PK COLLATE 'MACHINE'

***** Change properties for IMPORTMAP *****
DBSETPROP('IMPORTMAP.IIMPORTMAPPK', 'Field', 'Caption', "PK")
DBSETPROP('IMPORTMAP.CID', 'Field', 'Caption', "ID")
DBSETPROP('IMPORTMAP.CIMPORTNAME', 'Field', 'Caption', "Import Name")
DBSETPROP('IMPORTMAP.MFIELDS', 'Field', 'Caption', "Fields")
DBSETPROP('IMPORTMAP.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('IMPORTMAP.LDEDUCTS', 'Field', 'Caption', "Deducts Negative?")
DBSETPROP('IMPORTMAP.CUSER', 'Field', 'Caption', "User")
DBSETPROP('IMPORTMAP.DLASTMODIFIED', 'Field', 'Caption', "Last Modified")
DBSETPROP('IMPORTMAP.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('IMPORTMAP.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('IMPORTMAP.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('IMPORTMAP.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('IMPORTMAP.LTRANS', 'Field', 'Caption', "Ltrans")
CREATE TRIGGER ON 'IMPORTMAP' FOR DELETE AS foxaudit(iimportmappk,,,"pk")
CREATE TRIGGER ON 'IMPORTMAP' FOR INSERT AS foxaudit(iimportmappk,,,"pk")
CREATE TRIGGER ON 'IMPORTMAP' FOR UPDATE AS foxaudit(iimportmappk,,,"pk")
ENDFUNC

FUNCTION MakeTable_IMPORTTYPES
***** Table setup for IMPORTTYPES *****
CREATE TABLE 'IMPORTTYPES.DBF' NAME 'IMPORTTYPES' (IIMPORTTYPESPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                          CTYPE C(5) NOT NULL, ;
                          MTYPES M NOT NULL, ;
                          CDESC C(20) NOT NULL, ;
                          CADDEDBY C(10) NOT NULL, ;
                          CCHANGEDBY C(10) NOT NULL, ;
                          DADDED T NOT NULL, ;
                          DCHANGED T NOT NULL)

***** Create each index for IMPORTTYPES *****
INDEX ON CDESC TAG CDESC COLLATE 'MACHINE'
INDEX ON IIMPORTTYPESPK TAG PK COLLATE 'MACHINE'

***** Change properties for IMPORTTYPES *****
DBSETPROP('IMPORTTYPES.IIMPORTTYPESPK', 'Field', 'Caption', "PK")
DBSETPROP('IMPORTTYPES.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('IMPORTTYPES.MTYPES', 'Field', 'Caption', "List of Types")
DBSETPROP('IMPORTTYPES.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('IMPORTTYPES.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('IMPORTTYPES.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('IMPORTTYPES.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('IMPORTTYPES.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'IMPORTTYPES' FOR DELETE AS foxaudit(iimporttypespk,,,"pk")
CREATE TRIGGER ON 'IMPORTTYPES' FOR INSERT AS foxaudit(iimporttypespk,,,"pk")
CREATE TRIGGER ON 'IMPORTTYPES' FOR UPDATE AS foxaudit(iimporttypespk,,,"pk")
ENDFUNC

FUNCTION MakeTable_INTEGRATORS
***** Table setup for INTEGRATORS *****
CREATE TABLE 'INTEGRATORS.DBF' NAME 'INTEGRATORS' (CNAME C(30) NOT NULL, ;
                          CWELLCELL C(2) NOT NULL, ;
                          CRANGE1CELL C(2) NOT NULL, ;
                          CRANGE2CELL C(2) NOT NULL, ;
                          CDAYSONCELL C(2) NOT NULL, ;
                          CREADINGCELL C(2) NOT NULL, ;
                          CMASTERCELL C(2) NOT NULL, ;
                          CMETERCELL C(2) NOT NULL, ;
                          CADDEDBY C(10) NOT NULL, ;
                          CCHANGEDBY C(10) NOT NULL, ;
                          DADDED T NOT NULL, ;
                          DCHANGED T NOT NULL, ;
                          NPLATESIZE N(12, 3) NOT NULL, ;
                          NHOURS N(12, 2) NOT NULL, ;
                          IDIFFRANGE I NOT NULL, ;
                          ISTATICRANGE I NOT NULL, ;
                          NDIFFERENTIAL N(12, 2) NOT NULL, ;
                          NPRESSURE N(12, 2) NOT NULL, ;
                          CCOMMENTS V(254) NOT NULL)

***** Create each index for INTEGRATORS *****
INDEX ON CNAME TAG CNAME COLLATE 'MACHINE'

***** Change properties for INTEGRATORS *****
DBSETPROP('INTEGRATORS.CNAME', 'Field', 'Caption', "Integrator Name")
DBSETPROP('INTEGRATORS.CWELLCELL', 'Field', 'Caption', "Well ID Cell")
DBSETPROP('INTEGRATORS.CRANGE1CELL', 'Field', 'Caption', "Beg Range Cell")
DBSETPROP('INTEGRATORS.CRANGE2CELL', 'Field', 'Caption', "End Range Cell")
DBSETPROP('INTEGRATORS.CDAYSONCELL', 'Field', 'Caption', "Days On Cell")
DBSETPROP('INTEGRATORS.CREADINGCELL', 'Field', 'Caption', "Reading Cell")
DBSETPROP('INTEGRATORS.CMASTERCELL', 'Field', 'Caption', "Master Meter Cell")
DBSETPROP('INTEGRATORS.CMETERCELL', 'Field', 'Caption', "Meter ID Cell")
DBSETPROP('INTEGRATORS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('INTEGRATORS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('INTEGRATORS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('INTEGRATORS.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('INTEGRATORS.NPLATESIZE', 'Field', 'Caption', "Plate Size")
DBSETPROP('INTEGRATORS.NHOURS', 'Field', 'Caption', "Hours")
DBSETPROP('INTEGRATORS.IDIFFRANGE', 'Field', 'Caption', "Diff Range")
DBSETPROP('INTEGRATORS.ISTATICRANGE', 'Field', 'Caption', "Static Range")
DBSETPROP('INTEGRATORS.NDIFFERENTIAL', 'Field', 'Caption', "Differential")
DBSETPROP('INTEGRATORS.NPRESSURE', 'Field', 'Caption', "Pressure")
DBSETPROP('INTEGRATORS.CCOMMENTS', 'Field', 'Caption', "Comments")
CREATE TRIGGER ON 'INTEGRATORS' FOR DELETE AS foxaudit(cname,,,"cname")
CREATE TRIGGER ON 'INTEGRATORS' FOR INSERT AS foxaudit(cname,,,"cname")
CREATE TRIGGER ON 'INTEGRATORS' FOR UPDATE AS foxaudit(cname,,,"cname")
ENDFUNC

FUNCTION MakeTable_INVDET
***** Table setup for INVDET *****
CREATE TABLE 'INVDET.DBF' NAME 'INVDET' (CIDINVD C(8) NOT NULL, ;
                     CITEMID C(10) NOT NULL, ;
                     CITEMDESC M NOT NULL, ;
                     MEXTDESC M NOT NULL, ;
                     NPRICE N(12, 4) NOT NULL, ;
                     NQUANTITY N(12, 4) NOT NULL, ;
                     NEXTENSION N(13, 2) NOT NULL, ;
                     NITEMTAX N(12, 2) NOT NULL, ;
                     CACCTNO C(6) NOT NULL, ;
                     CUNITNO C(10) NOT NULL, ;
                     CDEPTNO C(10) NOT NULL, ;
                     CTAXABLE C(1) NOT NULL, ;
                     CPRICECODE C(1) NOT NULL, ;
                     CMEASURE C(10) NOT NULL, ;
                     CBATCH C(8) NOT NULL, ;
                     NINTEREST N(11, 7) NOT NULL, ;
                     CPAYEE C(30) NOT NULL, ;
                     DEXPDATE D NOT NULL, ;
                     CTAXCODE C(2) NOT NULL, ;
                     CWORKORDER C(10) NOT NULL, ;
                     CTRUCK C(4) NOT NULL, ;
                     DWORKDATE D NOT NULL, ;
                     CDISPERM C(6) NOT NULL, ;
                     CTYPE C(1) NOT NULL, ;
                     CPRODYEAR C(4) NOT NULL, ;
                     CPRODPRD C(2) NOT NULL, ;
                     NINJFEE N(12, 2) NOT NULL, ;
                     CDECK C(10) NOT NULL)

***** Create each index for INVDET *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CDISPERM TAG CDISPERM COLLATE 'MACHINE'
ALTER TABLE 'INVDET' ADD PRIMARY KEY CIDINVD TAG CIDINVD COLLATE 'MACHINE'
INDEX ON CITEMID TAG CITEMID COLLATE 'MACHINE'
INDEX ON CUNITNO TAG CUNITNO COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for INVDET *****
DBSETPROP('INVDET.CIDINVD', 'Field', 'Caption', "Primary Key")
DBSETPROP('INVDET.CITEMID', 'Field', 'Caption', "Item ID")
DBSETPROP('INVDET.CITEMDESC', 'Field', 'Caption', "Description")
DBSETPROP('INVDET.MEXTDESC', 'Field', 'Caption', "Extended Description")
DBSETPROP('INVDET.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('INVDET.NQUANTITY', 'Field', 'Caption', "Quantity")
DBSETPROP('INVDET.NEXTENSION', 'Field', 'Caption', "Extension")
DBSETPROP('INVDET.NITEMTAX', 'Field', 'Caption', "Tax on Item")
DBSETPROP('INVDET.CACCTNO', 'Field', 'Caption', "Sales Account")
DBSETPROP('INVDET.CUNITNO', 'Field', 'Caption', "Well ID")
DBSETPROP('INVDET.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('INVDET.CTAXABLE', 'Field', 'Caption', "Tax Flag")
DBSETPROP('INVDET.CPRICECODE', 'Field', 'Caption', "Price Code")
DBSETPROP('INVDET.CMEASURE', 'Field', 'Caption', "Measure")
DBSETPROP('INVDET.CBATCH', 'Field', 'Caption', "Link to Invoice Header")
DBSETPROP('INVDET.NINTEREST', 'Field', 'Caption', "Interest")
DBSETPROP('INVDET.CPAYEE', 'Field', 'Caption', "Payee")
DBSETPROP('INVDET.DEXPDATE', 'Field', 'Caption', "Expense Date")
DBSETPROP('INVDET.CTAXCODE', 'Field', 'Caption', "Tax Code")
DBSETPROP('INVDET.CWORKORDER', 'Field', 'Caption', "Work Order No")
DBSETPROP('INVDET.CTRUCK', 'Field', 'Caption', "Truck No")
DBSETPROP('INVDET.DWORKDATE', 'Field', 'Caption', "Work Date")
DBSETPROP('INVDET.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('INVDET.CTYPE', 'Field', 'Caption', "Water Type")
DBSETPROP('INVDET.CPRODYEAR', 'Field', 'Caption', "Prod Year")
DBSETPROP('INVDET.CPRODPRD', 'Field', 'Caption', "Prod Prd")
DBSETPROP('INVDET.NINJFEE', 'Field', 'Caption', "Injection Fee")
DBSETPROP('INVDET.CDECK', 'Field', 'Caption', "DOI Deck")
CREATE TRIGGER ON 'INVDET' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'INVDET' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'INVDET' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_INVESTOR
***** Table setup for INVESTOR *****
CREATE TABLE 'INVESTOR.DBF' NAME 'INVESTOR' (COWNERID C(10) NOT NULL, ;
                       COWNNAME C(60) NOT NULL, ;
                       COWNNAME1 C(60) NOT NULL, ;
                       CADDRESS1A C(60) NOT NULL, ;
                       CADDRESS1B C(60) NOT NULL, ;
                       CCITY1 C(30) NOT NULL, ;
                       CSTATE1 C(2) NOT NULL, ;
                       CZIP1 C(10) NOT NULL, ;
                       CCOUNTRY1 C(2) NOT NULL, ;
                       COWNNAME2 C(60) NOT NULL, ;
                       CADDRESS2A C(60) NOT NULL, ;
                       CADDRESS2B C(60) NOT NULL, ;
                       CCITY2 C(30) NOT NULL, ;
                       CSTATE2 C(2) NOT NULL, ;
                       CZIP2 C(10) NOT NULL, ;
                       CCOUNTRY2 C(2) NOT NULL, ;
                       CPHONEH C(14) NOT NULL, ;
                       CPHONEW C(14) NOT NULL, ;
                       CPHONECELL C(15) NOT NULL, ;
                       CEMAIL V(254) NOT NULL, ;
                       MNOTES M NOT NULL, ;
                       CTAXID C(15) NOT NULL, ;
                       LCHKTOSEC L NOT NULL, ;
                       LWELLPAGE L NOT NULL, ;
                       CCHKMEMO1 C(60) NOT NULL, ;
                       CCHKMEMO2 C(60) NOT NULL, ;
                       CSORTFIELD C(60) NOT NULL, ;
                       LPRTDEF L NOT NULL, ;
                       LHOLD L NOT NULL, ;
                       NINVMIN N(12, 2) NOT NULL, ;
                       LINV1099 L NOT NULL, ;
                       LCHECKONLY L NOT NULL, ;
                       LINTEGGL L NOT NULL, ;
                       NDISBFREQ N(1, 0) NOT NULL, ;
                       LEXEMPT L NOT NULL, ;
                       CIDTERM C(36) NOT NULL, ;
                       LBACKWITH L NOT NULL, ;
                       NBACKPCT N(5, 2) NOT NULL, ;
                       CFINCODE C(1) NOT NULL, ;
                       NSTMTTYPE I NOT NULL, ;
                       LNOSTUBDETAIL L NOT NULL, ;
                       LDIRECTDEP L NOT NULL, ;
                       CBANKACCT C(20) NOT NULL, ;
                       CBANKTRANSIT C(15) NOT NULL, ;
                       CBANKNAME C(40) NOT NULL, ;
                       CADDENDA C(80) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       DCHANGED T NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       CACCTTYPE C(1) NOT NULL, ;
                       LDUMMY L NOT NULL, ;
                       LONLINERPTS L NOT NULL, ;
                       LLEGALDISP L NOT NULL, ;
                       LONLINEADMIN L NOT NULL, ;
                       ITAXIDTYPE I NOT NULL, ;
                       LFEDWIRE L NOT NULL, ;
                       CPAYOR C(5) NOT NULL, ;
                       CFEDINDIAN C(1) NOT NULL, ;
                       CFUNDCODE C(3) NOT NULL, ;
                       CPAD C(12) NOT NULL, ;
                       LINACTIVE L NOT NULL, ;
                       CIDCOMP C(8) NOT NULL, ;
                       CACCOUNT C(10) NOT NULL, ;
                       CTAXNAME C(60) NOT NULL, ;
                       EDITSEQ C(16) NOT NULL, ;
                       PIV360_ACCTID C(36) NOT NULL, ;
                       PIV360_ORGID C(36) NOT NULL, ;
                       PIV360_APIKEY C(36) NOT NULL, ;
                       CEMAILCODE C(20) NOT NULL, ;
                       LEMAILOPT L NOT NULL, ;
                       LEMAILVER L NOT NULL, ;
                       LJIBNETTED L NOT NULL, ;
                       LVERIFIED L NOT NULL)

***** Create each index for INVESTOR *****
ALTER TABLE 'INVESTOR' ADD PRIMARY KEY COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON UPPER(COWNNAME) TAG COWNNAME COLLATE 'MACHINE'
INDEX ON UPPER(CSORTFIELD) TAG CSORTFIELD COLLATE 'MACHINE'
INDEX ON LDUMMY TAG LDUMMY BINARY
INDEX ON LINTEGGL TAG LINTEGGL BINARY
INDEX ON LHOLD TAG LHOLD BINARY

***** Change properties for INVESTOR *****
DBSETPROP('INVESTOR.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('INVESTOR.COWNNAME', 'Field', 'Caption', "Owner Name")
DBSETPROP('INVESTOR.COWNNAME1', 'Field', 'Caption', "Owner Name Overflow")
DBSETPROP('INVESTOR.CADDRESS1A', 'Field', 'Caption', "Primary Addr 1")
DBSETPROP('INVESTOR.CADDRESS1B', 'Field', 'Caption', "Primary Addr 2")
DBSETPROP('INVESTOR.CCITY1', 'Field', 'Caption', "Primary City")
DBSETPROP('INVESTOR.CSTATE1', 'Field', 'Caption', "Primary State")
DBSETPROP('INVESTOR.CZIP1', 'Field', 'Caption', "Primary Zip")
DBSETPROP('INVESTOR.CCOUNTRY1', 'Field', 'Caption', "Country")
DBSETPROP('INVESTOR.COWNNAME2', 'Field', 'Caption', "Owner Name - 2nd Address")
DBSETPROP('INVESTOR.CADDRESS2A', 'Field', 'Caption', "Secondary Addr1")
DBSETPROP('INVESTOR.CADDRESS2B', 'Field', 'Caption', "Secondary Addr2")
DBSETPROP('INVESTOR.CCITY2', 'Field', 'Caption', "Secondary City")
DBSETPROP('INVESTOR.CSTATE2', 'Field', 'Caption', "Secondary State")
DBSETPROP('INVESTOR.CZIP2', 'Field', 'Caption', "Secondary Zip")
DBSETPROP('INVESTOR.CCOUNTRY2', 'Field', 'Caption', "Country")
DBSETPROP('INVESTOR.CPHONEH', 'Field', 'Caption', "Home Phone")
DBSETPROP('INVESTOR.CPHONEW', 'Field', 'Caption', "Work Phone")
DBSETPROP('INVESTOR.CPHONECELL', 'Field', 'Caption', "Cell Phone")
DBSETPROP('INVESTOR.CEMAIL', 'Field', 'Caption', "Email")
DBSETPROP('INVESTOR.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('INVESTOR.CTAXID', 'Field', 'Caption', "Fed Tax ID")
DBSETPROP('INVESTOR.LCHKTOSEC', 'Field', 'Caption', "Split Check")
DBSETPROP('INVESTOR.LWELLPAGE', 'Field', 'Caption', "Well Page")
DBSETPROP('INVESTOR.CCHKMEMO1', 'Field', 'Caption', "Memo")
DBSETPROP('INVESTOR.CCHKMEMO2', 'Field', 'Caption', "2nd Memo")
DBSETPROP('INVESTOR.CSORTFIELD', 'Field', 'Caption', "Owner Name (Alpha)")
DBSETPROP('INVESTOR.LPRTDEF', 'Field', 'Caption', "Print Deficit Stmts")
DBSETPROP('INVESTOR.LHOLD', 'Field', 'Caption', "Suspended")
DBSETPROP('INVESTOR.NINVMIN', 'Field', 'Caption', "Minimum")
DBSETPROP('INVESTOR.LINV1099', 'Field', 'Caption', "Send 1099")
DBSETPROP('INVESTOR.LCHECKONLY', 'Field', 'Caption', "No Stub")
DBSETPROP('INVESTOR.LINTEGGL', 'Field', 'Caption', "Operator Record")
DBSETPROP('INVESTOR.NDISBFREQ', 'Field', 'Caption', "Disb Freq")
DBSETPROP('INVESTOR.LEXEMPT', 'Field', 'Caption', "Tax Exempt")
DBSETPROP('INVESTOR.CIDTERM', 'Field', 'Caption', "Terms Foreign Key")
DBSETPROP('INVESTOR.LBACKWITH', 'Field', 'Caption', "Backup Withholding")
DBSETPROP('INVESTOR.NBACKPCT', 'Field', 'Caption', "Backup WH Pct")
DBSETPROP('INVESTOR.CFINCODE', 'Field', 'Caption', "Finance Charge Foreign Key")
DBSETPROP('INVESTOR.NSTMTTYPE', 'Field', 'Caption', "Statement Type")
DBSETPROP('INVESTOR.LNOSTUBDETAIL', 'Field', 'Caption', "No Stub Detail")
DBSETPROP('INVESTOR.LDIRECTDEP', 'Field', 'Caption', "Direct Deposit")
DBSETPROP('INVESTOR.CBANKACCT', 'Field', 'Caption', "Bank Acct")
DBSETPROP('INVESTOR.CBANKTRANSIT', 'Field', 'Caption', "Transit No")
DBSETPROP('INVESTOR.CBANKNAME', 'Field', 'Caption', "Bank Name")
DBSETPROP('INVESTOR.CADDENDA', 'Field', 'Caption', "ACH Addenda")
DBSETPROP('INVESTOR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('INVESTOR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('INVESTOR.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('INVESTOR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('INVESTOR.CACCTTYPE', 'Field', 'Caption', "Deposit Acct Type")
DBSETPROP('INVESTOR.LDUMMY', 'Field', 'Caption', "Dummy Owner")
DBSETPROP('INVESTOR.LONLINERPTS', 'Field', 'Caption', "Online Reporting")
DBSETPROP('INVESTOR.LLEGALDISP', 'Field', 'Caption', "Legal Dispute")
DBSETPROP('INVESTOR.LONLINEADMIN', 'Field', 'Caption', "Online Admin")
DBSETPROP('INVESTOR.ITAXIDTYPE', 'Field', 'Caption', "Type of TIN")
DBSETPROP('INVESTOR.LFEDWIRE', 'Field', 'Caption', "Use Fedwire")
DBSETPROP('INVESTOR.CPAYOR', 'Field', 'Caption', "Fed Payor Code")
DBSETPROP('INVESTOR.CFEDINDIAN', 'Field', 'Caption', "Federal or Indian")
DBSETPROP('INVESTOR.CFUNDCODE', 'Field', 'Caption', "Fund Code")
DBSETPROP('INVESTOR.CPAD', 'Field', 'Caption', "Payor Assigned Document")
DBSETPROP('INVESTOR.LINACTIVE', 'Field', 'Caption', "Inactive")
DBSETPROP('INVESTOR.CIDCOMP', 'Field', 'Caption', "Partnership Company")
DBSETPROP('INVESTOR.CACCOUNT', 'Field', 'Caption', "Internal Account #")
DBSETPROP('INVESTOR.CTAXNAME', 'Field', 'Caption', "Tax Name")
DBSETPROP('INVESTOR.EDITSEQ', 'Field', 'Caption', "Edit Seq")
DBSETPROP('INVESTOR.PIV360_ACCTID', 'Field', 'Caption', "Pivoten 360 Acct ID")
DBSETPROP('INVESTOR.PIV360_ORGID', 'Field', 'Caption', "Pivoten 360 Org ID")
DBSETPROP('INVESTOR.PIV360_APIKEY', 'Field', 'Caption', "Pivoten 360 Owner API Key")
DBSETPROP('INVESTOR.CEMAILCODE', 'Field', 'Caption', "Email Verification Code")
DBSETPROP('INVESTOR.LEMAILOPT', 'Field', 'Caption', "Email Opt Out")
DBSETPROP('INVESTOR.LEMAILVER', 'Field', 'Caption', "Email Verification")
DBSETPROP('INVESTOR.LJIBNETTED', 'Field', 'Caption', "JIB Netted by Purch")
DBSETPROP('INVESTOR.LVERIFIED', 'Field', 'Caption', "Verified")
CREATE TRIGGER ON 'INVESTOR' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'INVESTOR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'INVESTOR' FOR UPDATE AS __ri_update_investor().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_INVHDR
***** Table setup for INVHDR *****
CREATE TABLE 'INVHDR.DBF' NAME 'INVHDR' (CBATCH C(8) NOT NULL, ;
                     CINVNUM C(15) NOT NULL, ;
                     CCUSTID C(10) NOT NULL, ;
                     DINVDATE D NOT NULL, ;
                     NSALESTAX N(12, 2) NOT NULL, ;
                     NDISCTOT N(12, 2) NOT NULL, ;
                     NSUBTOTAL N(13, 2) NOT NULL, ;
                     NPAYMENTS N(12, 2) NOT NULL, ;
                     NINVTOT N(13, 2) NOT NULL, ;
                     NINVBAL N(13, 2) NOT NULL, ;
                     MNOTES M NOT NULL, ;
                     DDUEDATE D NOT NULL, ;
                     DDISCDATE D NOT NULL, ;
                     CREFERENCE C(15) NOT NULL, ;
                     LPRINTED L NOT NULL, ;
                     CIDTERM C(8) NOT NULL, ;
                     CTAXCODE C(10) NOT NULL, ;
                     CINVTYPE C(2) NOT NULL, ;
                     LAGING L NOT NULL, ;
                     DPOSTDATE D NOT NULL, ;
                     CDMBATCH C(8) NOT NULL, ;
                     CPRODPRD C(2) NOT NULL, ;
                     CPRODYEAR C(4) NOT NULL, ;
                     CGROUP C(2) NOT NULL, ;
                     LNETJIB L NOT NULL, ;
                     LPRINTNOTES L NOT NULL, ;
                     LBRINE L NOT NULL, ;
                     CRUNYEAR C(4) NOT NULL, ;
                     NRUNNO I NOT NULL, ;
                     NINJECTIONFEE N(12, 2) NOT NULL, ;
                     CTXNID C(36) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for INVHDR *****
ALTER TABLE 'INVHDR' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CCUSTID TAG CCUSTID COLLATE 'MACHINE'
INDEX ON ALLTRIM(CINVNUM) TAG CINVNUM COLLATE 'MACHINE'
INDEX ON CCUSTID+CINVNUM TAG CUSTINV COLLATE 'MACHINE'
INDEX ON DINVDATE TAG DINVDATE COLLATE 'MACHINE'
INDEX ON DTOS(DDUEDATE)+CCUSTID TAG DUECUST COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for INVHDR *****
DBSETPROP('INVHDR.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('INVHDR.CINVNUM', 'Field', 'Caption', "Invoice Number")
DBSETPROP('INVHDR.CCUSTID', 'Field', 'Caption', "Customer ID")
DBSETPROP('INVHDR.DINVDATE', 'Field', 'Caption', "Invoice Date")
DBSETPROP('INVHDR.NSALESTAX', 'Field', 'Caption', "Sales Tax")
DBSETPROP('INVHDR.NDISCTOT', 'Field', 'Caption', "Discount Total")
DBSETPROP('INVHDR.NSUBTOTAL', 'Field', 'Caption', "Sub Total")
DBSETPROP('INVHDR.NPAYMENTS', 'Field', 'Caption', "Payments")
DBSETPROP('INVHDR.NINVTOT', 'Field', 'Caption', "Invoice Total")
DBSETPROP('INVHDR.NINVBAL', 'Field', 'Caption', "Invoice Balance")
DBSETPROP('INVHDR.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('INVHDR.DDUEDATE', 'Field', 'Caption', "Due Date")
DBSETPROP('INVHDR.DDISCDATE', 'Field', 'Caption', "Discount Date")
DBSETPROP('INVHDR.CREFERENCE', 'Field', 'Caption', "Reference")
DBSETPROP('INVHDR.CIDTERM', 'Field', 'Caption', "Terms Code")
DBSETPROP('INVHDR.CTAXCODE', 'Field', 'Caption', "Sales Tax Code")
DBSETPROP('INVHDR.CINVTYPE', 'Field', 'Caption', "Invoice Type")
DBSETPROP('INVHDR.DPOSTDATE', 'Field', 'Caption', "Post Date")
DBSETPROP('INVHDR.CDMBATCH', 'Field', 'Caption', "Disb Mgr Batch")
DBSETPROP('INVHDR.CPRODPRD', 'Field', 'Caption', "Production Period")
DBSETPROP('INVHDR.CPRODYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('INVHDR.CGROUP', 'Field', 'Caption', "Group")
DBSETPROP('INVHDR.LNETJIB', 'Field', 'Caption', "Net JIB Invoice")
DBSETPROP('INVHDR.LPRINTNOTES', 'Field', 'Caption', "Print Notes On Invoice")
DBSETPROP('INVHDR.LBRINE', 'Field', 'Caption', "Brine Hauler Invoice Flag")
DBSETPROP('INVHDR.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('INVHDR.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('INVHDR.NINJECTIONFEE', 'Field', 'Caption', "Injection Fee")
DBSETPROP('INVHDR.CTXNID', 'Field', 'Caption', "QB Txn ID")
DBSETPROP('INVHDR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('INVHDR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('INVHDR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('INVHDR.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'INVHDR' FOR DELETE AS __ri_delete_invhdr().AND.(foxaudit())
CREATE TRIGGER ON 'INVHDR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'INVHDR' FOR UPDATE AS __ri_update_invhdr().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_INVRECD
***** Table setup for INVRECD *****
CREATE TABLE 'INVRECD.DBF' NAME 'INVRECD' (CIDINVDR C(8) NOT NULL, ;
                      CBATCH C(8) NOT NULL, ;
                      CITEMID C(10) NOT NULL, ;
                      CITEMDESC C(40) NOT NULL, ;
                      NPRICE N(12, 4) NOT NULL, ;
                      NDISCPCT N(5, 2) NOT NULL, ;
                      NDISCOUNT N(12, 2) NOT NULL, ;
                      NQUANTITY N(12, 4) NOT NULL, ;
                      NEXTENSION N(13, 2) NOT NULL, ;
                      NITEMTAX N(12, 2) NOT NULL, ;
                      CACCTNO C(6) NOT NULL, ;
                      CUNITNO C(10) NOT NULL, ;
                      CTAXABLE C(1) NOT NULL, ;
                      CPRICECODE C(1) NOT NULL, ;
                      CMEASURE C(10) NOT NULL, ;
                      CDEPTNO C(10) NOT NULL)

***** Create each index for INVRECD *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
ALTER TABLE 'INVRECD' ADD PRIMARY KEY CIDINVDR TAG CINVDR COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for INVRECD *****
DBSETPROP('INVRECD.CIDINVDR', 'Field', 'Caption', "Primary Key")
DBSETPROP('INVRECD.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('INVRECD.CITEMID', 'Field', 'Caption', "Item ID")
DBSETPROP('INVRECD.CITEMDESC', 'Field', 'Caption', "Item Desc")
DBSETPROP('INVRECD.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('INVRECD.NDISCPCT', 'Field', 'Caption', "Disc Pct")
DBSETPROP('INVRECD.NDISCOUNT', 'Field', 'Caption', "Disc Amt")
DBSETPROP('INVRECD.NQUANTITY', 'Field', 'Caption', "Qty")
DBSETPROP('INVRECD.NEXTENSION', 'Field', 'Caption', "Total")
DBSETPROP('INVRECD.NITEMTAX', 'Field', 'Caption', "Tax")
DBSETPROP('INVRECD.CACCTNO', 'Field', 'Caption', "Account")
DBSETPROP('INVRECD.CUNITNO', 'Field', 'Caption', "Well ID")
DBSETPROP('INVRECD.CTAXABLE', 'Field', 'Caption', "Tax Flag")
DBSETPROP('INVRECD.CPRICECODE', 'Field', 'Caption', "Price Code")
DBSETPROP('INVRECD.CMEASURE', 'Field', 'Caption', "Measure")
DBSETPROP('INVRECD.CDEPTNO', 'Field', 'Caption', "Dept No")
CREATE TRIGGER ON 'INVRECD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'INVRECD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'INVRECD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_INVRECH
***** Table setup for INVRECH *****
CREATE TABLE 'INVRECH.DBF' NAME 'INVRECH' (CBATCH C(8) NOT NULL, ;
                      CINVNUM C(10) NOT NULL, ;
                      CCUSTID C(10) NOT NULL, ;
                      NSALESTAX N(12, 2) NOT NULL, ;
                      NDISCTOT N(12, 2) NOT NULL, ;
                      NSUBTOTAL N(13, 2) NOT NULL, ;
                      NINVTOT N(13, 2) NOT NULL, ;
                      NINVBAL N(13, 2) NOT NULL, ;
                      MSHIPREM M NOT NULL, ;
                      CREFERENCE C(15) NOT NULL, ;
                      CIDTERM C(8) NOT NULL, ;
                      CTAXCODE C(10) NOT NULL, ;
                      CINVTYPE C(2) NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for INVRECH *****
ALTER TABLE 'INVRECH' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CCUSTID TAG CCUSTID COLLATE 'MACHINE'
INDEX ON CINVNUM TAG CINVNUM COLLATE 'MACHINE'
INDEX ON CCUSTID+CINVNUM TAG CUSTINV COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for INVRECH *****
DBSETPROP('INVRECH.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('INVRECH.CINVNUM', 'Field', 'Caption', "Inv No")
DBSETPROP('INVRECH.CCUSTID', 'Field', 'Caption', "Cust ID")
DBSETPROP('INVRECH.NSALESTAX', 'Field', 'Caption', "Sales Tax")
DBSETPROP('INVRECH.NDISCTOT', 'Field', 'Caption', "Disc Total")
DBSETPROP('INVRECH.NSUBTOTAL', 'Field', 'Caption', "Sub Total")
DBSETPROP('INVRECH.NINVTOT', 'Field', 'Caption', "Invoice Tot")
DBSETPROP('INVRECH.NINVBAL', 'Field', 'Caption', "Inv Balance")
DBSETPROP('INVRECH.MSHIPREM', 'Field', 'Caption', "Notes")
DBSETPROP('INVRECH.CREFERENCE', 'Field', 'Caption', "Reference")
DBSETPROP('INVRECH.CIDTERM', 'Field', 'Caption', "Terms Key")
DBSETPROP('INVRECH.CTAXCODE', 'Field', 'Caption', "Tax Code")
DBSETPROP('INVRECH.CINVTYPE', 'Field', 'Caption', "Inv Type")
DBSETPROP('INVRECH.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('INVRECH.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('INVRECH.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('INVRECH.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'INVRECH' FOR DELETE AS __ri_delete_invrech().AND.(foxaudit())
CREATE TRIGGER ON 'INVRECH' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'INVRECH' FOR UPDATE AS __ri_update_invrech().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_INVTRANS
***** Table setup for INVTRANS *****
CREATE TABLE 'INVTRANS.DBF' NAME 'INVTRANS' (CBATCH C(8) NOT NULL, ;
                       CITEMID C(10) NOT NULL, ;
                       NQTY N(9, 2) NOT NULL, ;
                       NPRICE N(15, 4) NOT NULL, ;
                       NCHARGE N(12, 2) NOT NULL, ;
                       CCATCODE C(4) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       CDESCRIPTION C(30) NOT NULL, ;
                       CYEAR C(4) NOT NULL, ;
                       CPERIOD C(2) NOT NULL, ;
                       DACCTDATE D NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for INVTRANS *****
ALTER TABLE 'INVTRANS' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CITEMID TAG CITEMID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'

***** Change properties for INVTRANS *****
DBSETPROP('INVTRANS.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('INVTRANS.CITEMID', 'Field', 'Caption', "Item ID")
DBSETPROP('INVTRANS.NQTY', 'Field', 'Caption', "Quantity")
DBSETPROP('INVTRANS.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('INVTRANS.NCHARGE', 'Field', 'Caption', "Charge")
DBSETPROP('INVTRANS.CCATCODE', 'Field', 'Caption', "Cat Code")
DBSETPROP('INVTRANS.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('INVTRANS.CDESCRIPTION', 'Field', 'Caption', "Description")
DBSETPROP('INVTRANS.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('INVTRANS.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('INVTRANS.DACCTDATE', 'Field', 'Caption', "Acct Date")
DBSETPROP('INVTRANS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('INVTRANS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('INVTRANS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('INVTRANS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'INVTRANS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'INVTRANS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'INVTRANS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_ITEMS
***** Table setup for ITEMS *****
CREATE TABLE 'ITEMS.DBF' NAME 'ITEMS' (CITEMID C(10) NOT NULL, ;
                    CTYPE C(1) NOT NULL, ;
                    CITEMDESC C(40) NOT NULL, ;
                    CLOCATION C(20) NOT NULL, ;
                    CVENDORID C(10) NOT NULL, ;
                    CVENDITEM C(20) NOT NULL, ;
                    LNEGQTY L NOT NULL, ;
                    NCURCOST N(12, 4) NOT NULL, ;
                    NLASTCOST N(15, 4) NOT NULL, ;
                    CTAXABLE C(1) NOT NULL, ;
                    NORDLEVEL N(5, 0) NOT NULL, ;
                    NORDQTY N(5, 0) NOT NULL, ;
                    NPRICE1 N(12, 3) NOT NULL, ;
                    NPRICE2 N(12, 3) NOT NULL, ;
                    NPRICE3 N(12, 3) NOT NULL, ;
                    NPRICE4 N(12, 3) NOT NULL, ;
                    NPRICE5 N(12, 3) NOT NULL, ;
                    CMEASURE1 C(10) NOT NULL, ;
                    CMEASURE2 C(10) NOT NULL, ;
                    CMEASURE3 C(10) NOT NULL, ;
                    CMEASURE4 C(10) NOT NULL, ;
                    CMEASURE5 C(10) NOT NULL, ;
                    NQTYONHAND N(9, 2) NOT NULL, ;
                    CDEFACCT C(6) NOT NULL, ;
                    CCOGSACCT C(6) NOT NULL, ;
                    DEALQTY1 N(7, 2) NOT NULL, ;
                    DEALPRICE1 N(12, 2) NOT NULL, ;
                    DEALQTY2 N(7, 2) NOT NULL, ;
                    DEALPRICE2 N(12, 2) NOT NULL, ;
                    DEALQTY3 N(7, 2) NOT NULL, ;
                    DEALPRICE3 N(12, 2) NOT NULL, ;
                    LACTIVE L NOT NULL, ;
                    NMAXLEVEL N(9, 2) NOT NULL, ;
                    MEXTDESC M NOT NULL, ;
                    CDEPTNO C(8) NOT NULL, ;
                    CDISPERM C(6) NOT NULL, ;
                    LINJECTIONFEE L NOT NULL, ;
                    CADDEDBY C(10) NOT NULL, ;
                    CCHANGEDBY C(10) NOT NULL, ;
                    DADDED T NOT NULL, ;
                    DCHANGED T NOT NULL)

***** Create each index for ITEMS *****
INDEX ON CDISPERM TAG CDISPERM COLLATE 'MACHINE'
INDEX ON CITEMDESC TAG CITEMDESC COLLATE 'MACHINE'
ALTER TABLE 'ITEMS' ADD PRIMARY KEY CITEMID TAG CITEMID COLLATE 'MACHINE'
INDEX ON CVENDORID TAG CVENDORID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for ITEMS *****
DBSETPROP('ITEMS.CITEMID', 'Field', 'Caption', "Item ID")
DBSETPROP('ITEMS.CTYPE', 'Field', 'Caption', "Code Type")
DBSETPROP('ITEMS.CITEMDESC', 'Field', 'Caption', "Item Description")
DBSETPROP('ITEMS.CLOCATION', 'Field', 'Caption', "Location")
DBSETPROP('ITEMS.CVENDORID', 'Field', 'Caption', "Vendor ID")
DBSETPROP('ITEMS.CVENDITEM', 'Field', 'Caption', "Vendor's Item No")
DBSETPROP('ITEMS.LNEGQTY', 'Field', 'Caption', "Allow Negative Quantities")
DBSETPROP('ITEMS.NCURCOST', 'Field', 'Caption', "Current Cost")
DBSETPROP('ITEMS.NLASTCOST', 'Field', 'Caption', "Last Cost")
DBSETPROP('ITEMS.CTAXABLE', 'Field', 'Caption', "Tax Status")
DBSETPROP('ITEMS.NORDLEVEL', 'Field', 'Caption', "Reorder Level")
DBSETPROP('ITEMS.NORDQTY', 'Field', 'Caption', "Reorder Quantity")
DBSETPROP('ITEMS.NPRICE1', 'Field', 'Caption', "Price 1")
DBSETPROP('ITEMS.NPRICE2', 'Field', 'Caption', "Price 2")
DBSETPROP('ITEMS.NPRICE3', 'Field', 'Caption', "Price 3")
DBSETPROP('ITEMS.NPRICE4', 'Field', 'Caption', "Price 4")
DBSETPROP('ITEMS.NPRICE5', 'Field', 'Caption', "Price 5")
DBSETPROP('ITEMS.CMEASURE1', 'Field', 'Caption', "Measure 1")
DBSETPROP('ITEMS.CMEASURE2', 'Field', 'Caption', "Measure 2")
DBSETPROP('ITEMS.CMEASURE3', 'Field', 'Caption', "Measure 3")
DBSETPROP('ITEMS.CMEASURE4', 'Field', 'Caption', "Measure 4")
DBSETPROP('ITEMS.CMEASURE5', 'Field', 'Caption', "Measure 5")
DBSETPROP('ITEMS.NQTYONHAND', 'Field', 'Caption', "Quantity on Hand")
DBSETPROP('ITEMS.CDEFACCT', 'Field', 'Caption', "Default Sales Account")
DBSETPROP('ITEMS.CCOGSACCT', 'Field', 'Caption', "Cost of Goods Sold Account")
DBSETPROP('ITEMS.DEALQTY1', 'Field', 'Caption', "Deal Qty 1")
DBSETPROP('ITEMS.DEALPRICE1', 'Field', 'Caption', "Deal Price 1")
DBSETPROP('ITEMS.DEALQTY2', 'Field', 'Caption', "Deal Qty 2")
DBSETPROP('ITEMS.DEALPRICE2', 'Field', 'Caption', "Deal Price 2")
DBSETPROP('ITEMS.DEALQTY3', 'Field', 'Caption', "Deal Qty 3")
DBSETPROP('ITEMS.DEALPRICE3', 'Field', 'Caption', "Deal Price 3")
DBSETPROP('ITEMS.LACTIVE', 'Field', 'Caption', "Active Code")
DBSETPROP('ITEMS.NMAXLEVEL', 'Field', 'Caption', "Maximum Level")
DBSETPROP('ITEMS.MEXTDESC', 'Field', 'Caption', "Extended Description")
DBSETPROP('ITEMS.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('ITEMS.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('ITEMS.LINJECTIONFEE', 'Field', 'Caption', "Charge Injection Fee")
DBSETPROP('ITEMS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('ITEMS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('ITEMS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('ITEMS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'ITEMS' FOR DELETE AS __ri_delete_items().AND.(foxaudit())
CREATE TRIGGER ON 'ITEMS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'ITEMS' FOR UPDATE AS __ri_update_items().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_K1DEDUCTS
***** Table setup for K1DEDUCTS *****
CREATE TABLE 'K1DEDUCTS.DBF' NAME 'K1DEDUCTS' (CYEAR C(4) NOT NULL, ;
                        CPROGCODE C(10) NOT NULL, ;
                        COWNERID C(10) NOT NULL, ;
                        CTAXCODE C(2) NOT NULL, ;
                        CDESC C(30) NOT NULL, ;
                        CCATCODE C(4) NOT NULL, ;
                        CCATEG C(30) NOT NULL, ;
                        NAMOUNT N(12, 2) NOT NULL, ;
                        CTAXID C(15) NOT NULL, ;
                        CPROGNAME C(40) NOT NULL)

***** Create each index for K1DEDUCTS *****
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'

***** Change properties for K1DEDUCTS *****
DBSETPROP('K1DEDUCTS.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('K1DEDUCTS.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('K1DEDUCTS.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('K1DEDUCTS.CTAXCODE', 'Field', 'Caption', "Tax Code")
DBSETPROP('K1DEDUCTS.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('K1DEDUCTS.CCATCODE', 'Field', 'Caption', "Expense Code")
DBSETPROP('K1DEDUCTS.CCATEG', 'Field', 'Caption', "Exp Category")
DBSETPROP('K1DEDUCTS.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('K1DEDUCTS.CTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('K1DEDUCTS.CPROGNAME', 'Field', 'Caption', "Program Name")
ENDFUNC

FUNCTION MakeTable_K1FILE
***** Table setup for K1FILE *****
CREATE TABLE 'K1FILE.DBF' NAME 'K1FILE' (CIDK1FILE C(8) NOT NULL, ;
                     CYEAR C(4) NOT NULL, ;
                     CPROGCODE C(10) NOT NULL, ;
                     COWNERID C(10) NOT NULL, ;
                     NPCTPROFITBEG N(12, 2) NOT NULL, ;
                     NPCTLOSSBEG N(12, 2) NOT NULL, ;
                     NPCTCAPBEG N(12, 2) NOT NULL, ;
                     NPARTSHARE N(12, 2) NOT NULL, ;
                     NPARTDIST N(12, 2) NOT NULL, ;
                     NORDINCOME N(12, 2) NOT NULL, ;
                     NGROSSINC N(12, 2) NOT NULL, ;
                     NGROSSEXP N(12, 2) NOT NULL, ;
                     NBEGCAPITAL N(12, 2) NOT NULL, ;
                     NCAPCONTRIB N(12, 2) NOT NULL, ;
                     NCAPINCDEC N(12, 2) NOT NULL, ;
                     NCAPITALEND N(12, 2) NOT NULL, ;
                     LGENPART L NOT NULL, ;
                     LLLCPART L NOT NULL, ;
                     LDOMPART L NOT NULL, ;
                     LFOREIGNPART L NOT NULL, ;
                     CENTITY C(20) NOT NULL, ;
                     N59EDEDUCT N(12, 2) NOT NULL, ;
                     NCAPWITHDRAWLS N(12, 2) NOT NULL, ;
                     NDEPLETION N(12, 2) NOT NULL, ;
                     NPCTPROFITEND N(11, 7) NOT NULL, ;
                     NPCTLOSSEND N(11, 7) NOT NULL, ;
                     NPCTCAPEND N(11, 7) NOT NULL, ;
                     NBOX3_RENTS N(12, 2) NOT NULL, ;
                     LROYALTY L NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for K1FILE *****
ALTER TABLE 'K1FILE' ADD PRIMARY KEY CIDK1FILE TAG CIDK1FILE COLLATE 'MACHINE'
INDEX ON CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CYEAR+CPROGCODE+COWNERID TAG YRPROGOWN COLLATE 'MACHINE'

***** Change properties for K1FILE *****
DBSETPROP('K1FILE.CIDK1FILE', 'Field', 'Caption', "Primary Key")
DBSETPROP('K1FILE.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('K1FILE.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('K1FILE.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('K1FILE.NPCTPROFITBEG', 'Field', 'Caption', "Pct Profit")
DBSETPROP('K1FILE.NPCTLOSSBEG', 'Field', 'Caption', "Pct Loss")
DBSETPROP('K1FILE.NPCTCAPBEG', 'Field', 'Caption', "Pct Cap")
DBSETPROP('K1FILE.NPARTSHARE', 'Field', 'Caption', "Partners Share")
DBSETPROP('K1FILE.NPARTDIST', 'Field', 'Caption', "Partners Distribution")
DBSETPROP('K1FILE.NORDINCOME', 'Field', 'Caption', "Ordinary Income")
DBSETPROP('K1FILE.NGROSSINC', 'Field', 'Caption', "Gross Income")
DBSETPROP('K1FILE.NGROSSEXP', 'Field', 'Caption', "Gross Expense")
DBSETPROP('K1FILE.NBEGCAPITAL', 'Field', 'Caption', "Beginning Capital")
DBSETPROP('K1FILE.NCAPCONTRIB', 'Field', 'Caption', "Capital Contributed")
DBSETPROP('K1FILE.NCAPINCDEC', 'Field', 'Caption', "Capital Increase or Decrease")
DBSETPROP('K1FILE.NCAPITALEND', 'Field', 'Caption', "Ending Capital")
DBSETPROP('K1FILE.LGENPART', 'Field', 'Caption', "General Partner")
DBSETPROP('K1FILE.LLLCPART', 'Field', 'Caption', "LLC Partner")
DBSETPROP('K1FILE.LDOMPART', 'Field', 'Caption', "Domestic Partner")
DBSETPROP('K1FILE.LFOREIGNPART', 'Field', 'Caption', "Foreign Partner")
DBSETPROP('K1FILE.CENTITY', 'Field', 'Caption', "Entity Type")
DBSETPROP('K1FILE.N59EDEDUCT', 'Field', 'Caption', "59(e) Deduction")
DBSETPROP('K1FILE.NCAPWITHDRAWLS', 'Field', 'Caption', "Capital Withdrawls")
DBSETPROP('K1FILE.NDEPLETION', 'Field', 'Caption', "Depletion")
DBSETPROP('K1FILE.NPCTPROFITEND', 'Field', 'Caption', "Profit End")
DBSETPROP('K1FILE.NPCTLOSSEND', 'Field', 'Caption', "Loss End")
DBSETPROP('K1FILE.NPCTCAPEND', 'Field', 'Caption', "Cap End")
DBSETPROP('K1FILE.NBOX3_RENTS', 'Field', 'Caption', "Box 3 Rents")
DBSETPROP('K1FILE.LROYALTY', 'Field', 'Caption', "Royalty")
DBSETPROP('K1FILE.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('K1FILE.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('K1FILE.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('K1FILE.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'K1FILE' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'K1FILE' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'K1FILE' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_LAND
***** Table setup for LAND *****
CREATE TABLE 'LAND.DBF' NAME 'LAND' (CLEASEID C(10) NOT NULL, ;
                   CLEASENAME C(40) NOT NULL, ;
                   CPROSPECT C(40) NOT NULL, ;
                   MLEGALDESC M NOT NULL, ;
                   CCOUNTY C(20) NOT NULL, ;
                   CSTATE C(2) NOT NULL, ;
                   NGROSSACRE N(12, 4) NOT NULL, ;
                   NNETACRES N(12, 4) NOT NULL, ;
                   NNETDEEP N(12, 4) NOT NULL, ;
                   DLEASEDATE D NOT NULL, ;
                   NLEASEYEARS I NOT NULL, ;
                   NLEASEMONTHS I NOT NULL, ;
                   DNEXTPMT D NOT NULL, ;
                   MPMTSCHED M NOT NULL, ;
                   CLEASESTATUS C(10) NOT NULL, ;
                   MCOMMENTS M NOT NULL, ;
                   CRECBOOK C(10) NOT NULL, ;
                   CRECPAGE C(10) NOT NULL, ;
                   DRECDATE D NOT NULL, ;
                   CLEASEGROUP C(5) NOT NULL, ;
                   CAFENUMBER C(10) NOT NULL, ;
                   CPAYMENTFREQ C(1) NOT NULL, ;
                   DPMTSTART D NOT NULL, ;
                   CINSTRUMENT C(20) NOT NULL, ;
                   CCOMINGLE C(20) NOT NULL, ;
                   CRRCLEASENO C(20) NOT NULL, ;
                   CRRCDISTNO C(4) NOT NULL, ;
                   CFIELDID C(10) NOT NULL, ;
                   MFORMATION M NOT NULL, ;
                   CTOWNSHIP C(12) NOT NULL, ;
                   CAGENT C(12) NOT NULL, ;
                   CCONSOLREF C(8) NOT NULL, ;
                   LAMENDED L NOT NULL, ;
                   DEXPIRES D NOT NULL, ;
                   DCONSOLDATE D NOT NULL, ;
                   MDESCRIPTION M NOT NULL, ;
                   MPARCEL M NOT NULL, ;
                   CUNIQUE C(10) NOT NULL, ;
                   CPRIMADD M NOT NULL, ;
                   CMAILADD M NOT NULL, ;
                   LRENEWAL L NOT NULL, ;
                   MRENEWAL M NOT NULL, ;
                   LPOOLING L NOT NULL, ;
                   MPOOLNOTES M NOT NULL, ;
                   LDEPTHRESTRICT L NOT NULL, ;
                   MDEPTHNOTES M NOT NULL, ;
                   LSHUTIN L NOT NULL, ;
                   MSHUTNOTES M NOT NULL, ;
                   LORRI L NOT NULL, ;
                   MORRINOTES M NOT NULL, ;
                   LFREEGAS L NOT NULL, ;
                   MFREEGAS M NOT NULL, ;
                   LCONTINUOUS L NOT NULL, ;
                   MCONTINUOUS M NOT NULL, ;
                   LUNITIZATION L NOT NULL, ;
                   MUNITIZATION M NOT NULL, ;
                   LLOAPPROVE L NOT NULL, ;
                   MLOAPPROVE M NOT NULL, ;
                   LASSIGNMENT L NOT NULL, ;
                   MASSIGNMENT M NOT NULL, ;
                   LDIGITIZED L NOT NULL, ;
                   CACQUIRED C(40) NOT NULL, ;
                   DACQUIRED D NOT NULL, ;
                   CLATITUDE C(20) NOT NULL, ;
                   CLONGITUDE C(20) NOT NULL, ;
                   CSYSTEM C(20) NOT NULL, ;
                   LLEGALDISP L NOT NULL, ;
                   CPARTNER C(20) NOT NULL, ;
                   NPARTPCT N(6, 2) NOT NULL, ;
                   MAMI M NOT NULL, ;
                   CAUDLINK C(120) NOT NULL, ;
                   LNOTICE L NOT NULL, ;
                   LLEGAL L NOT NULL, ;
                   CORIGLESSOR C(30) NOT NULL, ;
                   CSURFOWNER C(10) NOT NULL, ;
                   CACCTNO C(6) NOT NULL, ;
                   CDEPTNO C(8) NOT NULL, ;
                   CLESSEE C(40) NOT NULL, ;
                   CTRACT C(10) NOT NULL, ;
                   COPERATOR C(40) NOT NULL, ;
                   NMININT N(13, 8) NOT NULL, ;
                   NCMPINT N(13, 8) NOT NULL, ;
                   NROYINT N(13, 8) NOT NULL, ;
                   NORRINT N(13, 8) NOT NULL, ;
                   NLEASENRI N(13, 8) NOT NULL, ;
                   NCMPNRI N(13, 8) NOT NULL, ;
                   CCONTRACTS V(128) NOT NULL, ;
                   CQBACCOUNT C(36) NOT NULL, ;
                   CLISTID C(36) NOT NULL, ;
                   CADDEDBY C(10) NOT NULL, ;
                   CCHANGEDBY C(10) NOT NULL, ;
                   DADDED T NOT NULL, ;
                   DCHANGED T NOT NULL, ;
                   CFORMATION C(20) NOT NULL)

***** Create each index for LAND *****
INDEX ON UPPER(CCOUNTY) TAG CCOUNTY COLLATE 'MACHINE'
ALTER TABLE 'LAND' ADD PRIMARY KEY CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON UPPER(CLEASENAME) TAG CLEASENAME COLLATE 'MACHINE'
INDEX ON UPPER(CPROSPECT) TAG CPROSPECT COLLATE 'MACHINE'
INDEX ON UPPER(CSTATE) TAG CSTATE COLLATE 'MACHINE'
INDEX ON UPPER(CTOWNSHIP) TAG CTOWNSHIP COLLATE 'MACHINE'
INDEX ON CUNIQUE TAG CUNIQUE COLLATE 'MACHINE'

***** Change properties for LAND *****
DBSETPROP('LAND.CLEASEID', 'Field', 'Caption', "Lease ID")
DBSETPROP('LAND.CLEASENAME', 'Field', 'Caption', "Lease Name")
DBSETPROP('LAND.CPROSPECT', 'Field', 'Caption', "Prospect")
DBSETPROP('LAND.MLEGALDESC', 'Field', 'Caption', "Lega Description")
DBSETPROP('LAND.CCOUNTY', 'Field', 'Caption', "County")
DBSETPROP('LAND.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('LAND.NGROSSACRE', 'Field', 'Caption', "Gross Acres")
DBSETPROP('LAND.NNETACRES', 'Field', 'Caption', "Net Shallow Acres")
DBSETPROP('LAND.NNETDEEP', 'Field', 'Caption', "Net Deep Acres")
DBSETPROP('LAND.DLEASEDATE', 'Field', 'Caption', "Date of Lease")
DBSETPROP('LAND.NLEASEYEARS', 'Field', 'Caption', "Lease Term in Years")
DBSETPROP('LAND.NLEASEMONTHS', 'Field', 'Caption', "Lease Term in Months")
DBSETPROP('LAND.DNEXTPMT', 'Field', 'Caption', "Next Payment Date")
DBSETPROP('LAND.MPMTSCHED', 'Field', 'Caption', "Payment Schedule")
DBSETPROP('LAND.CLEASESTATUS', 'Field', 'Caption', "Lease Status")
DBSETPROP('LAND.MCOMMENTS', 'Field', 'Caption', "Comments")
DBSETPROP('LAND.CRECBOOK', 'Field', 'Caption', "Recording Book")
DBSETPROP('LAND.CRECPAGE', 'Field', 'Caption', "Recording Page")
DBSETPROP('LAND.DRECDATE', 'Field', 'Caption', "Recording Date")
DBSETPROP('LAND.CLEASEGROUP', 'Field', 'Caption', "Lease Group")
DBSETPROP('LAND.CAFENUMBER', 'Field', 'Caption', "AFE No")
DBSETPROP('LAND.CPAYMENTFREQ', 'Field', 'Caption', "Payment Frequence")
DBSETPROP('LAND.DPMTSTART', 'Field', 'Caption', "Date Payments Start")
DBSETPROP('LAND.CINSTRUMENT', 'Field', 'Caption', "Instrument No")
DBSETPROP('LAND.CCOMINGLE', 'Field', 'Caption', "Comingle Permit #")
DBSETPROP('LAND.CRRCLEASENO', 'Field', 'Caption', "RRC Lease No")
DBSETPROP('LAND.CRRCDISTNO', 'Field', 'Caption', "RRC District No")
DBSETPROP('LAND.CFIELDID', 'Field', 'Caption', "Field ID")
DBSETPROP('LAND.MFORMATION', 'Field', 'Caption', "Formations")
DBSETPROP('LAND.CTOWNSHIP', 'Field', 'Caption', "Township")
DBSETPROP('LAND.CAGENT', 'Field', 'Caption', "Agent")
DBSETPROP('LAND.CCONSOLREF', 'Field', 'Caption', "Consolidation Reference")
DBSETPROP('LAND.LAMENDED', 'Field', 'Caption', "Amended")
DBSETPROP('LAND.DEXPIRES', 'Field', 'Caption', "Expires")
DBSETPROP('LAND.DCONSOLDATE', 'Field', 'Caption', "Consolidation Date")
DBSETPROP('LAND.MDESCRIPTION', 'Field', 'Caption', "Lot")
DBSETPROP('LAND.MPARCEL', 'Field', 'Caption', "Parcel")
DBSETPROP('LAND.CUNIQUE', 'Field', 'Caption', "Unique ID")
DBSETPROP('LAND.CPRIMADD', 'Field', 'Caption', "Primary Address")
DBSETPROP('LAND.CMAILADD', 'Field', 'Caption', "Mailing Address")
DBSETPROP('LAND.LRENEWAL', 'Field', 'Caption', "Renewal Clause")
DBSETPROP('LAND.MRENEWAL', 'Field', 'Caption', "Renewal Notes")
DBSETPROP('LAND.LPOOLING', 'Field', 'Caption', "Pooling Clause")
DBSETPROP('LAND.MPOOLNOTES', 'Field', 'Caption', "Pooling Notes")
DBSETPROP('LAND.LDEPTHRESTRICT', 'Field', 'Caption', "Depth Restriction Clause")
DBSETPROP('LAND.MDEPTHNOTES', 'Field', 'Caption', "Depth Restriction Notes")
DBSETPROP('LAND.LSHUTIN', 'Field', 'Caption', "Shut In Clause")
DBSETPROP('LAND.MSHUTNOTES', 'Field', 'Caption', "Shut-in Clause Notes")
DBSETPROP('LAND.LORRI', 'Field', 'Caption', "ORRI Clause")
DBSETPROP('LAND.MORRINOTES', 'Field', 'Caption', "ORRI Notes")
DBSETPROP('LAND.LFREEGAS', 'Field', 'Caption', "Free Gas Clause")
DBSETPROP('LAND.MFREEGAS', 'Field', 'Caption', "Free Gas Notes")
DBSETPROP('LAND.LCONTINUOUS', 'Field', 'Caption', "Continuous Drilling Clause")
DBSETPROP('LAND.MCONTINUOUS', 'Field', 'Caption', "Continuous Notes")
DBSETPROP('LAND.LUNITIZATION', 'Field', 'Caption', "Unitization Approval")
DBSETPROP('LAND.MUNITIZATION', 'Field', 'Caption', "Unitization Notes")
DBSETPROP('LAND.LLOAPPROVE', 'Field', 'Caption', "Landowner Approval")
DBSETPROP('LAND.MLOAPPROVE', 'Field', 'Caption', "Landowner Approval Notes")
DBSETPROP('LAND.LASSIGNMENT', 'Field', 'Caption', "Assignment Restrict Clause")
DBSETPROP('LAND.MASSIGNMENT', 'Field', 'Caption', "Assignment Clause Notes")
DBSETPROP('LAND.LDIGITIZED', 'Field', 'Caption', "Digitized?")
DBSETPROP('LAND.CACQUIRED', 'Field', 'Caption', "Acquired From")
DBSETPROP('LAND.DACQUIRED', 'Field', 'Caption', "Date Acquired")
DBSETPROP('LAND.CLATITUDE', 'Field', 'Caption', "Latitude")
DBSETPROP('LAND.CLONGITUDE', 'Field', 'Caption', "Longitude")
DBSETPROP('LAND.CSYSTEM', 'Field', 'Caption', "Csystem")
DBSETPROP('LAND.LLEGALDISP', 'Field', 'Caption', "Legal Dispute")
DBSETPROP('LAND.CPARTNER', 'Field', 'Caption', "Partner")
DBSETPROP('LAND.NPARTPCT', 'Field', 'Caption', "Pct to Bill Partner for Rentals")
DBSETPROP('LAND.MAMI', 'Field', 'Caption', "AMI")
DBSETPROP('LAND.CAUDLINK', 'Field', 'Caption', "Caudlink")
DBSETPROP('LAND.LNOTICE', 'Field', 'Caption', "Special Notice")
DBSETPROP('LAND.LLEGAL', 'Field', 'Caption', "Legal Matter Pending")
DBSETPROP('LAND.CORIGLESSOR', 'Field', 'Caption', "Orig Lessor")
DBSETPROP('LAND.CSURFOWNER', 'Field', 'Caption', "Surface Owner ID")
DBSETPROP('LAND.CACCTNO', 'Field', 'Caption', "Expense Account for Payments")
DBSETPROP('LAND.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('LAND.CLESSEE', 'Field', 'Caption', "Lessee")
DBSETPROP('LAND.CTRACT', 'Field', 'Caption', "Tract")
DBSETPROP('LAND.COPERATOR', 'Field', 'Caption', "Lease Operator")
DBSETPROP('LAND.NMININT', 'Field', 'Caption', "Min Int")
DBSETPROP('LAND.NCMPINT', 'Field', 'Caption', "CMP Int")
DBSETPROP('LAND.NROYINT', 'Field', 'Caption', "Roy Int")
DBSETPROP('LAND.NORRINT', 'Field', 'Caption', "ORRI Int")
DBSETPROP('LAND.NLEASENRI', 'Field', 'Caption', "Lease NRI")
DBSETPROP('LAND.NCMPNRI', 'Field', 'Caption', "CMP NRI")
DBSETPROP('LAND.CCONTRACTS', 'Field', 'Caption', "Associated Contract")
DBSETPROP('LAND.CQBACCOUNT', 'Field', 'Caption', "QB Account")
DBSETPROP('LAND.CLISTID', 'Field', 'Caption', "QB List ID")
DBSETPROP('LAND.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('LAND.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('LAND.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('LAND.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('LAND.CFORMATION', 'Field', 'Caption', "Formation")
CREATE TRIGGER ON 'LAND' FOR DELETE AS __ri_delete_land().AND.(foxaudit())
CREATE TRIGGER ON 'LAND' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'LAND' FOR UPDATE AS __ri_update_land().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_LANDAMI
***** Table setup for LANDAMI *****
CREATE TABLE 'LANDAMI.DBF' NAME 'LANDAMI' (ILANDAMI I NOT NULL AUTOINC NEXTVALUE 6 STEP 1, ;
                      CLEASEID C(10) NOT NULL, ;
                      IAMIPK I NOT NULL)

***** Create each index for LANDAMI *****
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON IAMIPK TAG IAMIPK COLLATE 'MACHINE'

***** Change properties for LANDAMI *****
DBSETPROP('LANDAMI.ILANDAMI', 'Field', 'Caption', "Ilandform")
DBSETPROP('LANDAMI.CLEASEID', 'Field', 'Caption', "Link to Lease")
DBSETPROP('LANDAMI.IAMIPK', 'Field', 'Caption', "Link to AMI")
ENDFUNC

FUNCTION MakeTable_LANDFORM
***** Table setup for LANDFORM *****
CREATE TABLE 'LANDFORM.DBF' NAME 'LANDFORM' (ILANDFORM I NOT NULL AUTOINC NEXTVALUE 6 STEP 1, ;
                       CLEASEID C(10) NOT NULL, ;
                       IFORMPK I NOT NULL)

***** Create each index for LANDFORM *****
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON IFORMPK TAG IFORMPK COLLATE 'MACHINE'
ALTER TABLE 'LANDFORM' ADD PRIMARY KEY ILANDFORM TAG ILANDFORM COLLATE 'MACHINE'

***** Change properties for LANDFORM *****
DBSETPROP('LANDFORM.ILANDFORM', 'Field', 'Caption', "Ilandform")
DBSETPROP('LANDFORM.CLEASEID', 'Field', 'Caption', "Link to Lease")
DBSETPROP('LANDFORM.IFORMPK', 'Field', 'Caption', "Link to Formation")
CREATE TRIGGER ON 'LANDFORM' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'LANDFORM' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'LANDFORM' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_LANDHIST
***** Table setup for LANDHIST *****
CREATE TABLE 'LANDHIST.DBF' NAME 'LANDHIST' (CIDLAND C(8) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       CLEASEID C(10) NOT NULL, ;
                       DPMTDATE D NOT NULL, ;
                       NPMTAMOUNT N(12, 2) NOT NULL, ;
                       NACRES N(6, 4) NOT NULL, ;
                       NPMTACRE N(9, 2) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       CIDLANDO C(8) NOT NULL)

***** Create each index for LANDHIST *****
INDEX ON CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'
ALTER TABLE 'LANDHIST' ADD PRIMARY KEY CIDLAND TAG CIDLAND COLLATE 'MACHINE'
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'

***** Change properties for LANDHIST *****
DBSETPROP('LANDHIST.CIDLAND', 'Field', 'Caption', "Primary Key")
DBSETPROP('LANDHIST.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('LANDHIST.CLEASEID', 'Field', 'Caption', "Lease ID")
DBSETPROP('LANDHIST.DPMTDATE', 'Field', 'Caption', "Payment Date")
DBSETPROP('LANDHIST.NPMTAMOUNT', 'Field', 'Caption', "Payment Amount")
DBSETPROP('LANDHIST.NACRES', 'Field', 'Caption', "Acres")
DBSETPROP('LANDHIST.NPMTACRE', 'Field', 'Caption', "Pmt per Acre")
DBSETPROP('LANDHIST.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('LANDHIST.CIDLANDO', 'Field', 'Caption', "LO FK")
CREATE TRIGGER ON 'LANDHIST' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'LANDHIST' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'LANDHIST' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_LANDOPT
***** Table setup for LANDOPT *****
CREATE TABLE 'LANDOPT.DBF' NAME 'LANDOPT' (CCASHACCT C(6) NOT NULL, ;
                      CRENTACCT C(6) NOT NULL, ;
                      CBONUSACCT C(6) NOT NULL, ;
                      LCHKDUESTART L NOT NULL, ;
                      CCHECKTYPE C(2) NOT NULL, ;
                      NLEADDAYS N(3, 0) NOT NULL, ;
                      CCHECKNO C(10) NOT NULL, ;
                      LEXPENSE L NOT NULL, ;
                      CCATCODE C(4) NOT NULL, ;
                      LEXPIREREPORT L NOT NULL, ;
                      CQBCASHACCT C(36) NOT NULL, ;
                      CQBRENTACCT C(36) NOT NULL, ;
                      CQBBONUSACCT C(36) NOT NULL, ;
                      PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1 DEFAULT (RECNO()-1)+1)

***** Create each index for LANDOPT *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for LANDOPT *****
DBSETPROP('LANDOPT.CCASHACCT', 'Field', 'Caption', "Cash Account")
DBSETPROP('LANDOPT.CRENTACCT', 'Field', 'Caption', "Rental Account")
DBSETPROP('LANDOPT.CBONUSACCT', 'Field', 'Caption', "Bonus Account")
DBSETPROP('LANDOPT.LCHKDUESTART', 'Field', 'Caption', "Check for Rentals Due At Startup")
DBSETPROP('LANDOPT.CCHECKTYPE', 'Field', 'Caption', "Check Type")
DBSETPROP('LANDOPT.NLEADDAYS', 'Field', 'Caption', "Lead Time In Days")
DBSETPROP('LANDOPT.CCHECKNO', 'Field', 'Caption', "Next Check Number")
DBSETPROP('LANDOPT.LEXPENSE', 'Field', 'Caption', "Expense Rentals To Well")
DBSETPROP('LANDOPT.CCATCODE', 'Field', 'Caption', "Expense Category")
DBSETPROP('LANDOPT.LEXPIREREPORT', 'Field', 'Caption', "Show expiring report on startup")
DBSETPROP('LANDOPT.CQBCASHACCT', 'Field', 'Caption', "QB Cash Acct")
DBSETPROP('LANDOPT.CQBRENTACCT', 'Field', 'Caption', "QB Rent Acct")
DBSETPROP('LANDOPT.CQBBONUSACCT', 'Field', 'Caption', "QB Bonus Acct")
DBSETPROP('LANDOPT.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'LANDOPT' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'LANDOPT' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'LANDOPT' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_LANDOWNER
***** Table setup for LANDOWNER *****
CREATE TABLE 'LANDOWNER.DBF' NAME 'LANDOWNER' (CIDLANDO C(8) NOT NULL, ;
                        COWNERID C(10) NOT NULL, ;
                        CLEASEID C(10) NOT NULL, ;
                        NACRES N(12, 4) NOT NULL, ;
                        NRENTAL N(9, 2) NOT NULL, ;
                        NPMTFREQ N(3, 0) NOT NULL, ;
                        NTOTALPMT N(9, 2) NOT NULL, ;
                        CSTATUS C(2) NOT NULL, ;
                        DSTARTPMT D NOT NULL, ;
                        DCONTSTART D NOT NULL, ;
                        DCONTEND D NOT NULL, ;
                        NPMTTODATE N(9, 2) NOT NULL, ;
                        DNEXTPMT D NOT NULL, ;
                        NYEARPMT N(12, 2) NOT NULL, ;
                        CPMTDESC C(60) NOT NULL, ;
                        NPCT N(11, 7) NOT NULL, ;
                        CMSTATUS C(12) NOT NULL, ;
                        CRECBOOK C(10) NOT NULL, ;
                        CRECPAGE C(10) NOT NULL, ;
                        CINSTRUMENT C(30) NOT NULL, ;
                        DRECDATE D NOT NULL, ;
                        ILEASEYRS I NOT NULL, ;
                        DEXPIREDATE D NOT NULL, ;
                        LRENEWAL L NOT NULL, ;
                        MRENEWAL M NOT NULL, ;
                        LPOOLING L NOT NULL, ;
                        MPOOLNOTES M NOT NULL, ;
                        LDEPTHRESTRICT L NOT NULL, ;
                        MDEPTHNOTES M NOT NULL, ;
                        LSHUTIN L NOT NULL, ;
                        MSHUTNOTES M NOT NULL, ;
                        LORRI L NOT NULL, ;
                        MORRINOTES M NOT NULL, ;
                        LFREEGAS L NOT NULL, ;
                        MFREEGAS M NOT NULL, ;
                        MNOTES M NOT NULL, ;
                        DFIRSTPMT D NOT NULL, ;
                        NINT N(11, 7) NOT NULL, ;
                        CADDEDBY C(10) NOT NULL, ;
                        CCHANGEDBY C(10) NOT NULL, ;
                        DADDED T NOT NULL, ;
                        DCHANGED T NOT NULL)

***** Create each index for LANDOWNER *****
ALTER TABLE 'LANDOWNER' ADD PRIMARY KEY CIDLANDO TAG CIDLANDO COLLATE 'MACHINE'
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CLEASEID+COWNERID TAG LEASEOWNER COLLATE 'MACHINE'

***** Change properties for LANDOWNER *****
DBSETPROP('LANDOWNER.CIDLANDO', 'Field', 'Caption', "Primary Key")
DBSETPROP('LANDOWNER.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('LANDOWNER.CLEASEID', 'Field', 'Caption', "Lease ID")
DBSETPROP('LANDOWNER.NACRES', 'Field', 'Caption', "# of Acres")
DBSETPROP('LANDOWNER.NRENTAL', 'Field', 'Caption', "Rental per Acre")
DBSETPROP('LANDOWNER.NPMTFREQ', 'Field', 'Caption', "Payment Freq in Mos")
DBSETPROP('LANDOWNER.NTOTALPMT', 'Field', 'Caption', "Total Payment")
DBSETPROP('LANDOWNER.CSTATUS', 'Field', 'Caption', "Status")
DBSETPROP('LANDOWNER.DSTARTPMT', 'Field', 'Caption', "Payments Start")
DBSETPROP('LANDOWNER.DCONTSTART', 'Field', 'Caption', "Contract Starts")
DBSETPROP('LANDOWNER.DCONTEND', 'Field', 'Caption', "Contract Ends")
DBSETPROP('LANDOWNER.NPMTTODATE', 'Field', 'Caption', "Payments to Date")
DBSETPROP('LANDOWNER.DNEXTPMT', 'Field', 'Caption', "Next Payment Date")
DBSETPROP('LANDOWNER.NYEARPMT', 'Field', 'Caption', "Payment per Year")
DBSETPROP('LANDOWNER.CPMTDESC', 'Field', 'Caption', "Pmt Description")
DBSETPROP('LANDOWNER.NPCT', 'Field', 'Caption', "Pct Owned")
DBSETPROP('LANDOWNER.CMSTATUS', 'Field', 'Caption', "Marital Status")
DBSETPROP('LANDOWNER.CRECBOOK', 'Field', 'Caption', "Book")
DBSETPROP('LANDOWNER.CRECPAGE', 'Field', 'Caption', "Page")
DBSETPROP('LANDOWNER.CINSTRUMENT', 'Field', 'Caption', "Instrument")
DBSETPROP('LANDOWNER.DRECDATE', 'Field', 'Caption', "Recording Date")
DBSETPROP('LANDOWNER.ILEASEYRS', 'Field', 'Caption', "Lease Yrs")
DBSETPROP('LANDOWNER.DEXPIREDATE', 'Field', 'Caption', "Exp Date")
DBSETPROP('LANDOWNER.LRENEWAL', 'Field', 'Caption', "Renewal Clause")
DBSETPROP('LANDOWNER.MRENEWAL', 'Field', 'Caption', "Renewal Notes")
DBSETPROP('LANDOWNER.LPOOLING', 'Field', 'Caption', "Pooling Clause")
DBSETPROP('LANDOWNER.MPOOLNOTES', 'Field', 'Caption', "Pooling Notes")
DBSETPROP('LANDOWNER.LDEPTHRESTRICT', 'Field', 'Caption', "Depth Restriction")
DBSETPROP('LANDOWNER.MDEPTHNOTES', 'Field', 'Caption', "Depth Notes")
DBSETPROP('LANDOWNER.LSHUTIN', 'Field', 'Caption', "Shut In")
DBSETPROP('LANDOWNER.MSHUTNOTES', 'Field', 'Caption', "Shut-In Notes")
DBSETPROP('LANDOWNER.LORRI', 'Field', 'Caption', "ORRI")
DBSETPROP('LANDOWNER.MORRINOTES', 'Field', 'Caption', "ORRI Notes")
DBSETPROP('LANDOWNER.LFREEGAS', 'Field', 'Caption', "Free Gas")
DBSETPROP('LANDOWNER.MFREEGAS', 'Field', 'Caption', "Free Gas Notes")
DBSETPROP('LANDOWNER.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('LANDOWNER.DFIRSTPMT', 'Field', 'Caption', "Date of First Payment")
DBSETPROP('LANDOWNER.NINT', 'Field', 'Caption', "Nint")
DBSETPROP('LANDOWNER.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('LANDOWNER.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('LANDOWNER.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('LANDOWNER.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'LANDOWNER' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'LANDOWNER' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'LANDOWNER' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_LEASEAUDIT
***** Table setup for LEASEAUDIT *****
CREATE TABLE 'LEASEAUDIT.DBF' NAME 'LEASEAUDIT' (ILEASEAUDITPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                         CLEASEID C(10) NOT NULL, ;
                         CAUDLINK V(128) NOT NULL, ;
                         CDESC C(40) NOT NULL)

***** Create each index for LEASEAUDIT *****
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON ILEASEAUDITPK TAG PK COLLATE 'MACHINE'

***** Change properties for LEASEAUDIT *****
DBSETPROP('LEASEAUDIT.ILEASEAUDITPK', 'Field', 'Caption', "Ileaseauditpk")
DBSETPROP('LEASEAUDIT.CLEASEID', 'Field', 'Caption', "Lease ID")
DBSETPROP('LEASEAUDIT.CAUDLINK', 'Field', 'Caption', "Auditor Link")
DBSETPROP('LEASEAUDIT.CDESC', 'Field', 'Caption', "Description")
ENDFUNC

FUNCTION MakeTable_LEASEPROG
***** Table setup for LEASEPROG *****
CREATE TABLE 'LEASEPROG.DBF' NAME 'LEASEPROG' (ILEASEPROG I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                        CPROGCODE C(10) NOT NULL, ;
                        CLEASEID C(10) NOT NULL)

***** Create each index for LEASEPROG *****
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
ALTER TABLE 'LEASEPROG' ADD PRIMARY KEY ILEASEPROG TAG PK COLLATE 'MACHINE'

***** Change properties for LEASEPROG *****
DBSETPROP('LEASEPROG.ILEASEPROG', 'Field', 'Caption', "PK")
DBSETPROP('LEASEPROG.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('LEASEPROG.CLEASEID', 'Field', 'Caption', "Lease ID")
CREATE TRIGGER ON 'LEASEPROG' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'LEASEPROG' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'LEASEPROG' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_LEASES
***** Table setup for LEASES *****
CREATE TABLE 'LEASES.DBF' NAME 'LEASES' (CWELLID C(10) NOT NULL, ;
                     CLEASE C(30) NOT NULL, ;
                     CPERMIT C(6) NOT NULL, ;
                     CCOUNTY C(15) NOT NULL, ;
                     DENTDATE D NOT NULL, ;
                     CENTTIME C(8) NOT NULL, ;
                     CTOWNSHIP C(25) NOT NULL, ;
                     CCUSTID C(10) NOT NULL, ;
                     CIDLEASE C(8) NOT NULL, ;
                     CPERMIT2 C(6) NOT NULL, ;
                     CPERMIT3 C(6) NOT NULL, ;
                     CPERMIT4 C(6) NOT NULL, ;
                     CPERMIT5 C(6) NOT NULL, ;
                     CPERMIT6 C(6) NOT NULL, ;
                     CPONO C(20) NOT NULL, ;
                     CSTATE C(2) NOT NULL, ;
                     CRRCLEASENO C(10) NOT NULL, ;
                     COPERATOR C(60) NOT NULL, ;
                     CFIELDNAME C(40) NOT NULL, ;
                     IWELLTYPE I NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL, ;
                     IOPERATORPK I NOT NULL)

***** Create each index for LEASES *****
INDEX ON CCUSTID TAG CCUSTID COLLATE 'MACHINE'
ALTER TABLE 'LEASES' ADD PRIMARY KEY CIDLEASE TAG CIDLEASE COLLATE 'MACHINE'
INDEX ON CCOUNTY TAG COUNTY COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON UPPER(CLEASE) TAG LEASE COLLATE 'MACHINE'
INDEX ON UPPER(CPERMIT) TAG PERMIT COLLATE 'MACHINE'
INDEX ON CPERMIT+CCOUNTY TAG PERMITKEY COLLATE 'MACHINE'

***** Change properties for LEASES *****
DBSETPROP('LEASES.CWELLID', 'Field', 'Caption', "Lease ID")
DBSETPROP('LEASES.CLEASE', 'Field', 'Caption', "Lease Name")
DBSETPROP('LEASES.CPERMIT', 'Field', 'Caption', "Permit 1")
DBSETPROP('LEASES.CCOUNTY', 'Field', 'Caption', "County")
DBSETPROP('LEASES.DENTDATE', 'Field', 'Caption', "Date Entered")
DBSETPROP('LEASES.CENTTIME', 'Field', 'Caption', "Time Entered")
DBSETPROP('LEASES.CTOWNSHIP', 'Field', 'Caption', "Township")
DBSETPROP('LEASES.CCUSTID', 'Field', 'Caption', "Operator")
DBSETPROP('LEASES.CIDLEASE', 'Field', 'Caption', "Lease ID2")
DBSETPROP('LEASES.CPERMIT2', 'Field', 'Caption', "Permit 2")
DBSETPROP('LEASES.CPERMIT3', 'Field', 'Caption', "Permit 3")
DBSETPROP('LEASES.CPERMIT4', 'Field', 'Caption', "Permit 4")
DBSETPROP('LEASES.CPERMIT5', 'Field', 'Caption', "Permit 5")
DBSETPROP('LEASES.CPERMIT6', 'Field', 'Caption', "Permit 6")
DBSETPROP('LEASES.CPONO', 'Field', 'Caption', "PO No")
DBSETPROP('LEASES.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('LEASES.CRRCLEASENO', 'Field', 'Caption', "RRC Lease No")
DBSETPROP('LEASES.COPERATOR', 'Field', 'Caption', "Operator")
DBSETPROP('LEASES.CFIELDNAME', 'Field', 'Caption', "Field Name")
DBSETPROP('LEASES.IWELLTYPE', 'Field', 'Caption', "Well Type")
DBSETPROP('LEASES.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('LEASES.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('LEASES.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('LEASES.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('LEASES.IOPERATORPK', 'Field', 'Caption', "Ioperatorpk")
CREATE TRIGGER ON 'LEASES' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'LEASES' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'LEASES' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_LEASEWELL
***** Table setup for LEASEWELL *****
CREATE TABLE 'LEASEWELL.DBF' NAME 'LEASEWELL' (ILEASEWELL I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                        CWELLID C(10) NOT NULL, ;
                        CLEASEID C(10) NOT NULL)

***** Create each index for LEASEWELL *****
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
ALTER TABLE 'LEASEWELL' ADD PRIMARY KEY ILEASEWELL TAG PK COLLATE 'MACHINE'

***** Change properties for LEASEWELL *****
DBSETPROP('LEASEWELL.ILEASEWELL', 'Field', 'Caption', "PK")
DBSETPROP('LEASEWELL.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('LEASEWELL.CLEASEID', 'Field', 'Caption', "Lease ID")
CREATE TRIGGER ON 'LEASEWELL' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'LEASEWELL' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'LEASEWELL' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_MENUPADS
***** Table setup for MENUPADS *****
CREATE TABLE 'MENUPADS.DBF' NAME 'MENUPADS' (CMENU C(15) NOT NULL, ;
                       CBARPROMPT C(40) NOT NULL, ;
                       CMENUCMD C(254) NOT NULL)

***** Create each index for MENUPADS *****
INDEX ON CMENU TAG CMENU COLLATE 'MACHINE'

***** Change properties for MENUPADS *****
DBSETPROP('MENUPADS.CMENU', 'Field', 'Caption', "Menu Pad")
DBSETPROP('MENUPADS.CBARPROMPT', 'Field', 'Caption', "Pad Description")
DBSETPROP('MENUPADS.CMENUCMD', 'Field', 'Caption', "Menu Command")
ENDFUNC

FUNCTION MakeTable_METERALL
***** Table setup for METERALL *****
CREATE TABLE 'METERALL.DBF' NAME 'METERALL' (CBATCH C(8) NOT NULL, ;
                       CMETERID C(15) NOT NULL, ;
                       CYEAR C(4) NOT NULL, ;
                       CPERIOD C(2) NOT NULL, ;
                       CREVKEY C(10) NOT NULL, ;
                       NMASTER N(15, 2) NOT NULL, ;
                       NGASPRICE N(12, 6) NOT NULL, ;
                       NTOTALINC N(12, 2) NOT NULL, ;
                       NSUBSTOTAL N(15, 2) NOT NULL, ;
                       NVARIANCE N(7, 2) NOT NULL, ;
                       CBEGRANGE C(5) NOT NULL, ;
                       CENDRANGE C(5) NOT NULL, ;
                       NDAYSON N(3, 0) NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       DINCDATE D NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       CREFID C(15) NOT NULL, ;
                       LALLOCATED L NOT NULL, ;
                       CTAX C(5) NOT NULL, ;
                       NTOTALTAX N(12, 2) NOT NULL, ;
                       CTXNID C(36) NOT NULL, ;
                       LQBPOST L NOT NULL, ;
                       CQBACCOUNT C(36) NOT NULL, ;
                       NTOTALTAX2 N(12, 2) NOT NULL, ;
                       NTOTALTAX3 N(12, 2) NOT NULL, ;
                       NTOTALTAX4 N(12, 2) NOT NULL, ;
                       CDEDCODE1 C(4) NOT NULL, ;
                       CDEDCODE2 C(4) NOT NULL, ;
                       CDEDCODE3 C(4) NOT NULL, ;
                       CDEDCODE4 C(4) NOT NULL, ;
                       CDEDCODE5 C(4) NOT NULL, ;
                       NDEDUCT1 N(12, 2) NOT NULL, ;
                       NDEDUCT2 N(12, 2) NOT NULL, ;
                       NDEDUCT3 N(12, 2) NOT NULL, ;
                       NDEDUCT4 N(12, 2) NOT NULL, ;
                       NDEDUCT5 N(12, 2) NOT NULL, ;
                       CIMPORTBATCH C(8) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for METERALL *****
ALTER TABLE 'METERALL' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CMETERID TAG CMETERID COLLATE 'MACHINE'
INDEX ON CREVKEY TAG CREVKEY COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD+CMETERID+CREVKEY TAG METERKEY COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for METERALL *****
DBSETPROP('METERALL.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('METERALL.CMETERID', 'Field', 'Caption', "Master Meter ID")
DBSETPROP('METERALL.CYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('METERALL.CPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('METERALL.CREVKEY', 'Field', 'Caption', "Link to Purchasers")
DBSETPROP('METERALL.NMASTER', 'Field', 'Caption', "Master Meter Reading")
DBSETPROP('METERALL.NGASPRICE', 'Field', 'Caption', "Gas Price")
DBSETPROP('METERALL.NTOTALINC', 'Field', 'Caption', "Total")
DBSETPROP('METERALL.NSUBSTOTAL', 'Field', 'Caption', "Subs Total")
DBSETPROP('METERALL.NVARIANCE', 'Field', 'Caption', "Variance")
DBSETPROP('METERALL.CBEGRANGE', 'Field', 'Caption', "Beginning Period Range")
DBSETPROP('METERALL.CENDRANGE', 'Field', 'Caption', "Ending Period Range")
DBSETPROP('METERALL.NDAYSON', 'Field', 'Caption', "Days On")
DBSETPROP('METERALL.CACCTNO', 'Field', 'Caption', "Cash Account")
DBSETPROP('METERALL.DINCDATE', 'Field', 'Caption', "Date")
DBSETPROP('METERALL.CIDCHEC', 'Field', 'Caption', "Check Primary Key")
DBSETPROP('METERALL.CREFID', 'Field', 'Caption', "Reference ID")
DBSETPROP('METERALL.LALLOCATED', 'Field', 'Caption', "Allocated")
DBSETPROP('METERALL.CTAX', 'Field', 'Caption', "Tax Type")
DBSETPROP('METERALL.NTOTALTAX', 'Field', 'Caption', "Total Tax")
DBSETPROP('METERALL.CTXNID', 'Field', 'Caption', "TXN ID")
DBSETPROP('METERALL.LQBPOST', 'Field', 'Caption', "Post to QB")
DBSETPROP('METERALL.CQBACCOUNT', 'Field', 'Caption', "QB Account")
DBSETPROP('METERALL.NTOTALTAX2', 'Field', 'Caption', "Tax 2")
DBSETPROP('METERALL.NTOTALTAX3', 'Field', 'Caption', "Tax 3")
DBSETPROP('METERALL.NTOTALTAX4', 'Field', 'Caption', "Tax 4")
DBSETPROP('METERALL.CDEDCODE1', 'Field', 'Caption', "Deduct Code 1")
DBSETPROP('METERALL.CDEDCODE2', 'Field', 'Caption', "Deduct Code 2")
DBSETPROP('METERALL.CDEDCODE3', 'Field', 'Caption', "Deduct Code 3")
DBSETPROP('METERALL.CDEDCODE4', 'Field', 'Caption', "Deduct Code 4")
DBSETPROP('METERALL.CDEDCODE5', 'Field', 'Caption', "Deduct Code 5")
DBSETPROP('METERALL.NDEDUCT1', 'Field', 'Caption', "Deduct 1")
DBSETPROP('METERALL.NDEDUCT2', 'Field', 'Caption', "Deduct 2")
DBSETPROP('METERALL.NDEDUCT3', 'Field', 'Caption', "Deduct 3")
DBSETPROP('METERALL.NDEDUCT4', 'Field', 'Caption', "Deduct 4")
DBSETPROP('METERALL.NDEDUCT5', 'Field', 'Caption', "Deduct 5")
DBSETPROP('METERALL.CIMPORTBATCH', 'Field', 'Caption', "Import Batch")
DBSETPROP('METERALL.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('METERALL.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('METERALL.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('METERALL.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'METERALL' FOR DELETE AS __ri_delete_meterall().AND.(foxaudit())
CREATE TRIGGER ON 'METERALL' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'METERALL' FOR UPDATE AS __ri_update_meterall().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_METERDATA
***** Table setup for METERDATA *****
CREATE TABLE 'METERDATA.DBF' NAME 'METERDATA' (CIDMETA C(8) NOT NULL, ;
                        CMETERID C(15) NOT NULL, ;
                        CWELLID C(10) NOT NULL, ;
                        CRANGE1 C(5) NOT NULL, ;
                        CRANGE2 C(5) NOT NULL, ;
                        NDAYSON I NOT NULL, ;
                        NAMOUNT I NOT NULL, ;
                        TIMPORTED T NOT NULL, ;
                        CINTEGRATOR C(10) NOT NULL, ;
                        CBATCH C(8) NOT NULL, ;
                        CYEAR C(4) NOT NULL, ;
                        CPERIOD C(2) NOT NULL, ;
                        CDATAYEAR C(4) NOT NULL, ;
                        CDATAMONTH C(2) NOT NULL, ;
                        CTYPE C(1) NOT NULL, ;
                        CMASTERID1 C(10) NOT NULL, ;
                        CMASTERID2 C(10) NOT NULL, ;
                        CMASTERID3 C(10) NOT NULL, ;
                        CMASTERID4 C(10) NOT NULL, ;
                        CMASTERID5 C(10) NOT NULL, ;
                        CUSER C(10) NOT NULL, ;
                        CADDEDBY C(10) NOT NULL, ;
                        CCHANGEDBY C(10) NOT NULL, ;
                        DADDED T NOT NULL, ;
                        DCHANGED T NOT NULL)

***** Create each index for METERDATA *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
ALTER TABLE 'METERDATA' ADD PRIMARY KEY CIDMETA TAG CIDMETA COLLATE 'MACHINE'
INDEX ON CMETERID TAG CMETERID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'

***** Change properties for METERDATA *****
DBSETPROP('METERDATA.CIDMETA', 'Field', 'Caption', "Primary Key")
DBSETPROP('METERDATA.CMETERID', 'Field', 'Caption', "Master ID")
DBSETPROP('METERDATA.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('METERDATA.CRANGE1', 'Field', 'Caption', "Range 1")
DBSETPROP('METERDATA.CRANGE2', 'Field', 'Caption', "Range 2")
DBSETPROP('METERDATA.NDAYSON', 'Field', 'Caption', "Days On")
DBSETPROP('METERDATA.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('METERDATA.TIMPORTED', 'Field', 'Caption', "Imported")
DBSETPROP('METERDATA.CINTEGRATOR', 'Field', 'Caption', "Integrator")
DBSETPROP('METERDATA.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('METERDATA.CYEAR', 'Field', 'Caption', "Prod Year")
DBSETPROP('METERDATA.CPERIOD', 'Field', 'Caption', "Prod Period")
DBSETPROP('METERDATA.CDATAYEAR', 'Field', 'Caption', "Data Year")
DBSETPROP('METERDATA.CDATAMONTH', 'Field', 'Caption', "Data Month")
DBSETPROP('METERDATA.CTYPE', 'Field', 'Caption', "Product Type")
DBSETPROP('METERDATA.CMASTERID1', 'Field', 'Caption', "Master Meter 1")
DBSETPROP('METERDATA.CMASTERID2', 'Field', 'Caption', "Master Meter 2")
DBSETPROP('METERDATA.CMASTERID3', 'Field', 'Caption', "Master Meter 3")
DBSETPROP('METERDATA.CMASTERID4', 'Field', 'Caption', "Master Meter 4")
DBSETPROP('METERDATA.CMASTERID5', 'Field', 'Caption', "Master Meter 5")
DBSETPROP('METERDATA.CUSER', 'Field', 'Caption', "User ID")
DBSETPROP('METERDATA.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('METERDATA.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('METERDATA.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('METERDATA.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'METERDATA' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'METERDATA' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'METERDATA' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_METERS
***** Table setup for METERS *****
CREATE TABLE 'METERS.DBF' NAME 'METERS' (CMETERID C(15) NOT NULL, ;
                     CMETERDESC C(30) NOT NULL, ;
                     CMETERSERIALNO C(25) NOT NULL, ;
                     CMETERLOC C(25) NOT NULL, ;
                     CMETERCITY C(40) NOT NULL, ;
                     CMETERSTATE C(2) NOT NULL, ;
                     CMETERZIP C(10) NOT NULL, ;
                     CCHART1 C(15) NOT NULL, ;
                     CCHART2 C(15) NOT NULL, ;
                     CCHART3 C(15) NOT NULL, ;
                     CCHART4 C(15) NOT NULL, ;
                     CCHART5 C(15) NOT NULL, ;
                     LSUBMETER L NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for METERS *****
INDEX ON CMETERDESC TAG METERDESC COLLATE 'MACHINE'
ALTER TABLE 'METERS' ADD PRIMARY KEY CMETERID TAG METERID COLLATE 'MACHINE'

***** Change properties for METERS *****
DBSETPROP('METERS.CMETERID', 'Field', 'Caption', "Meter ID")
DBSETPROP('METERS.CMETERDESC', 'Field', 'Caption', "Description")
DBSETPROP('METERS.CMETERSERIALNO', 'Field', 'Caption', "Meter Serial No")
DBSETPROP('METERS.CMETERLOC', 'Field', 'Caption', "Location")
DBSETPROP('METERS.CMETERCITY', 'Field', 'Caption', "City")
DBSETPROP('METERS.CMETERSTATE', 'Field', 'Caption', "State")
DBSETPROP('METERS.CMETERZIP', 'Field', 'Caption', "Zipcode")
DBSETPROP('METERS.CCHART1', 'Field', 'Caption', "Chart 1")
DBSETPROP('METERS.CCHART2', 'Field', 'Caption', "Chart 2")
DBSETPROP('METERS.CCHART3', 'Field', 'Caption', "Chart 3")
DBSETPROP('METERS.CCHART4', 'Field', 'Caption', "Chart 4")
DBSETPROP('METERS.CCHART5', 'Field', 'Caption', "Chart 5")
DBSETPROP('METERS.LSUBMETER', 'Field', 'Caption', "Sub Pay Meter")
DBSETPROP('METERS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('METERS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('METERS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('METERS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'METERS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'METERS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'METERS' FOR UPDATE AS __ri_update_meters().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_METERSUB
***** Table setup for METERSUB *****
CREATE TABLE 'METERSUB.DBF' NAME 'METERSUB' (CIDMETS C(8) NOT NULL, ;
                       CMETERID C(15) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       NSUBMETER N(15, 2) NOT NULL, ;
                       NALLOCATION N(15, 2) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       NTOTALSUB N(15, 2) NOT NULL, ;
                       CWELLNAME C(30) NOT NULL, ;
                       CBEGRANGE C(5) NOT NULL, ;
                       CENDRANGE C(5) NOT NULL, ;
                       NDAYSON I NOT NULL, ;
                       CTAX C(5) NOT NULL, ;
                       NTAXAMT N(9, 2) NOT NULL, ;
                       NTAXAMT2 N(12, 2) NOT NULL, ;
                       NTAXAMT3 N(12, 2) NOT NULL, ;
                       NTAXAMT4 N(12, 2) NOT NULL, ;
                       NDEDUCT1 N(12, 2) NOT NULL, ;
                       NDEDUCT2 N(12, 2) NOT NULL, ;
                       NDEDUCT3 N(12, 2) NOT NULL, ;
                       NDEDUCT4 N(12, 2) NOT NULL, ;
                       NDEDUCT5 N(12, 2) NOT NULL, ;
                       LSUBMETER L NOT NULL)

***** Create each index for METERSUB *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
ALTER TABLE 'METERSUB' ADD PRIMARY KEY CIDMETS TAG CIDMETS COLLATE 'MACHINE'
INDEX ON CMETERID TAG CMETERID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for METERSUB *****
DBSETPROP('METERSUB.CIDMETS', 'Field', 'Caption', "Primary Key")
DBSETPROP('METERSUB.CMETERID', 'Field', 'Caption', "Meter ID")
DBSETPROP('METERSUB.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('METERSUB.NSUBMETER', 'Field', 'Caption', "SubMeter Reading")
DBSETPROP('METERSUB.NALLOCATION', 'Field', 'Caption', "Allocation")
DBSETPROP('METERSUB.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('METERSUB.NTOTALSUB', 'Field', 'Caption', "Total$")
DBSETPROP('METERSUB.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('METERSUB.CBEGRANGE', 'Field', 'Caption', "Beg Range")
DBSETPROP('METERSUB.CENDRANGE', 'Field', 'Caption', "End Range")
DBSETPROP('METERSUB.NDAYSON', 'Field', 'Caption', "Days On")
DBSETPROP('METERSUB.CTAX', 'Field', 'Caption', "Tax Type")
DBSETPROP('METERSUB.NTAXAMT', 'Field', 'Caption', "Tax Amount")
DBSETPROP('METERSUB.NTAXAMT2', 'Field', 'Caption', "Tax 2")
DBSETPROP('METERSUB.NTAXAMT3', 'Field', 'Caption', "Tax 3")
DBSETPROP('METERSUB.NTAXAMT4', 'Field', 'Caption', "Tax 4")
DBSETPROP('METERSUB.NDEDUCT1', 'Field', 'Caption', "Deduct 1")
DBSETPROP('METERSUB.NDEDUCT2', 'Field', 'Caption', "Deduct 2")
DBSETPROP('METERSUB.NDEDUCT3', 'Field', 'Caption', "Deduct 3")
DBSETPROP('METERSUB.NDEDUCT4', 'Field', 'Caption', "Deduct 4")
DBSETPROP('METERSUB.NDEDUCT5', 'Field', 'Caption', "Deduct 5")
DBSETPROP('METERSUB.LSUBMETER', 'Field', 'Caption', "Sub Pay Meter")
CREATE TRIGGER ON 'METERSUB' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'METERSUB' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'METERSUB' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_MICRDATA
***** Table setup for MICRDATA *****
CREATE TABLE 'MICRDATA.DBF' NAME 'MICRDATA' (CACCTNO C(6) NOT NULL, ;
                       CBANKNAME C(40) NOT NULL, ;
                       CMICRTRANSIT C(15) NOT NULL, ;
                       CMICRACCT C(15) NOT NULL, ;
                       CQBACCTNO C(36) NOT NULL, ;
                       PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1 DEFAULT (RECNO()-1)+1)

***** Create each index for MICRDATA *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for MICRDATA *****
DBSETPROP('MICRDATA.CACCTNO', 'Field', 'Caption', "Account No")
DBSETPROP('MICRDATA.CBANKNAME', 'Field', 'Caption', "Bank Name")
DBSETPROP('MICRDATA.CMICRTRANSIT', 'Field', 'Caption', "Transit No")
DBSETPROP('MICRDATA.CMICRACCT', 'Field', 'Caption', "Bank Account")
DBSETPROP('MICRDATA.CQBACCTNO', 'Field', 'Caption', "QB Account")
DBSETPROP('MICRDATA.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'MICRDATA' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'MICRDATA' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'MICRDATA' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_NICKNAME
***** Table setup for NICKNAME *****
CREATE TABLE 'NICKNAME.DBF' NAME 'NICKNAME' (NICKNAME C(10) NOT NULL, ;
                       GENDER C(1) NOT NULL, ;
                       REALNAME C(12) NOT NULL)

***** Create each index for NICKNAME *****
INDEX ON UPPER(NICKNAME)+UPPER(GENDER) TAG NICKNAME COLLATE 'MACHINE'

***** Change properties for NICKNAME *****
ENDFUNC

FUNCTION MakeTable_NOTES
***** Table setup for NOTES *****
CREATE TABLE 'NOTES.DBF' NAME 'NOTES' (INOTESPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                    CLEASEID C(10) NOT NULL, ;
                    MNOTES M NOT NULL)

***** Create each index for NOTES *****
INDEX ON CLEASEID TAG CLEASEID COLLATE 'MACHINE'
ALTER TABLE 'NOTES' ADD PRIMARY KEY INOTESPK TAG INOTESPK COLLATE 'MACHINE'

***** Change properties for NOTES *****
DBSETPROP('NOTES.INOTESPK', 'Field', 'Caption', "PK")
DBSETPROP('NOTES.CLEASEID', 'Field', 'Caption', "Lease FK")
DBSETPROP('NOTES.MNOTES', 'Field', 'Caption', "Notes")
CREATE TRIGGER ON 'NOTES' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'NOTES' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'NOTES' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_ONE_MAN_TAX
***** Table setup for ONE_MAN_TAX *****
CREATE TABLE 'ONE_MAN_TAX.DBF' NAME 'ONE_MAN_TAX' (HYEAR C(4) NOT NULL, ;
                          HPERIOD C(2) NOT NULL, ;
                          CWELLID C(10) NOT NULL, ;
                          COWNERID C(10) NOT NULL, ;
                          NOILTAX1B N(9, 2) NOT NULL, ;
                          NOILTAX2B N(9, 2) NOT NULL, ;
                          NOILTAX3B N(9, 2) NOT NULL, ;
                          NOILTAX4B N(9, 2) NOT NULL, ;
                          NGASTAX1B N(9, 2) NOT NULL, ;
                          NGASTAX2B N(9, 2) NOT NULL, ;
                          NGASTAX3B N(9, 2) NOT NULL, ;
                          NGASTAX4B N(9, 2) NOT NULL, ;
                          NPRODTAX1B N(9, 2) NOT NULL, ;
                          NPRODTAX2B N(9, 2) NOT NULL, ;
                          NPRODTAX3B N(9, 2) NOT NULL, ;
                          NPRODTAX4B N(9, 2) NOT NULL, ;
                          LUSED L NOT NULL, ;
                          NRUNNO I NOT NULL, ;
                          CRUNYEAR C(4) NOT NULL)

***** Create each index for ONE_MAN_TAX *****
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CRUNYEAR TAG CRUNYEAR COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON HPERIOD TAG HPERIOD COLLATE 'MACHINE'
INDEX ON HYEAR TAG HYEAR COLLATE 'MACHINE'
INDEX ON NRUNNO TAG NRUNNO COLLATE 'MACHINE'

***** Change properties for ONE_MAN_TAX *****
DBSETPROP('ONE_MAN_TAX.NRUNNO', 'Field', 'Caption', "Nrunno")
DBSETPROP('ONE_MAN_TAX.CRUNYEAR', 'Field', 'Caption', "Crunyear")
ENDFUNC

FUNCTION MakeTable_OPERATOR
***** Table setup for OPERATOR *****
CREATE TABLE 'OPERATOR.DBF' NAME 'OPERATOR' (IOPERATORPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                       COPERNAME C(60) NOT NULL, ;
                       CADDRESS1 C(60) NOT NULL, ;
                       CADDRESS2 C(60) NOT NULL, ;
                       CCITY C(40) NOT NULL, ;
                       CSTATE C(2) NOT NULL, ;
                       CPOSTALCODE C(10) NOT NULL, ;
                       CPHONE C(15) NOT NULL, ;
                       CMOBILE C(15) NOT NULL, ;
                       CEMAIL V(254) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for OPERATOR *****
INDEX ON UPPER(COPERNAME) TAG COPERNAME COLLATE 'MACHINE'
ALTER TABLE 'OPERATOR' ADD PRIMARY KEY IOPERATORPK TAG PK COLLATE 'MACHINE'

***** Change properties for OPERATOR *****
DBSETPROP('OPERATOR.IOPERATORPK', 'Field', 'Caption', "PK")
DBSETPROP('OPERATOR.COPERNAME', 'Field', 'Caption', "Operator Name")
DBSETPROP('OPERATOR.CADDRESS1', 'Field', 'Caption', "Address 1")
DBSETPROP('OPERATOR.CADDRESS2', 'Field', 'Caption', "Address 2")
DBSETPROP('OPERATOR.CCITY', 'Field', 'Caption', "City")
DBSETPROP('OPERATOR.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('OPERATOR.CPOSTALCODE', 'Field', 'Caption', "Postal Code")
DBSETPROP('OPERATOR.CPHONE', 'Field', 'Caption', "Phone")
DBSETPROP('OPERATOR.CMOBILE', 'Field', 'Caption', "Mobile")
DBSETPROP('OPERATOR.CEMAIL', 'Field', 'Caption', "Email")
DBSETPROP('OPERATOR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('OPERATOR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('OPERATOR.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('OPERATOR.DCHANGED', 'Field', 'Caption', "Date Changed")
ENDFUNC

FUNCTION MakeTable_OPTIONS
***** Table setup for OPTIONS *****
CREATE TABLE 'OPTIONS.DBF' NAME 'OPTIONS' (CDISBACCT C(6) NOT NULL, ;
                      CDEFACCT C(6) NOT NULL, ;
                      CMINACCT C(6) NOT NULL, ;
                      CTAXACCT1 C(6) NOT NULL, ;
                      CTAXACCT2 C(6) NOT NULL, ;
                      CTAXACCT3 C(6) NOT NULL, ;
                      CTAXACCT4 C(6) NOT NULL, ;
                      CJIBACCT C(6) NOT NULL, ;
                      CBACKACCT C(6) NOT NULL, ;
                      CTAXACCT C(6) NOT NULL, ;
                      CGATHACCT C(6) NOT NULL, ;
                      CFIXEDACCT C(6) NOT NULL, ;
                      LSHOWINACT L NOT NULL, ;
                      LACCTDESC L NOT NULL, ;
                      LVOIDNEXT L NOT NULL, ;
                      LDUPSTUB L NOT NULL, ;
                      LSTMCOMP L NOT NULL, ;
                      LSTMINV L NOT NULL, ;
                      LDIRINV L NOT NULL, ;
                      LZEROSTMT L NOT NULL, ;
                      LDEFSTMT L NOT NULL, ;
                      LMINSTMT L NOT NULL, ;
                      LDIRROY L NOT NULL, ;
                      LDIRWORK L NOT NULL, ;
                      LEXPDATE L NOT NULL, ;
                      LSUMMARYPOST L NOT NULL, ;
                      LBILLDESC L NOT NULL, ;
                      LSHOWROY L NOT NULL, ;
                      LPOSTREV L NOT NULL, ;
                      LGRPNAME L NOT NULL, ;
                      LREFID L NOT NULL, ;
                      LJIBNET L NOT NULL, ;
                      LCHGPRICE L NOT NULL, ;
                      LDIRTOT L NOT NULL, ;
                      LSHOWPREV L NOT NULL, ;
                      LSUMMARYWELL L NOT NULL, ;
                      LCALCRANGE L NOT NULL, ;
                      CVENDCOMP C(10) NOT NULL, ;
                      LCALCDAYS L NOT NULL, ;
                      LDIRWKTAX L NOT NULL, ;
                      LUSEOUTLOOK L NOT NULL, ;
                      LEXPSUM L NOT NULL, ;
                      LREVSUM L NOT NULL, ;
                      LHIDECOMP L NOT NULL, ;
                      LSKIPPERF L NOT NULL, ;
                      LGROSS1099 L NOT NULL, ;
                      LSEPCLOSE L NOT NULL, ;
                      LVOUCHMSG L NOT NULL, ;
                      LNOJIBBAL L NOT NULL, ;
                      LJIBNOTES L NOT NULL, ;
                      LROUNDHIGH L NOT NULL, ;
                      LNOFIRSTNAME L NOT NULL, ;
                      LROYCOMP L NOT NULL, ;
                      LSHOWVENDOR L NOT NULL, ;
                      LSENDTOALLOCATE L NOT NULL, ;
                      NMINCHECK N(12, 2) NOT NULL, ;
                      CCHECKTYPE C(2) NOT NULL, ;
                      CCHECKNO C(10) NOT NULL, ;
                      NMIN1099NON N(9, 2) NOT NULL, ;
                      NMIN1099ROY N(9, 2) NOT NULL, ;
                      NGATHER N(7, 4) NOT NULL, ;
                      NCOMPRESS N(7, 4) NOT NULL, ;
                      NSTUBLINE N(2, 0) NOT NULL, ;
                      NBBLNONMARG N(6, 0) NOT NULL, ;
                      NBBLMARG N(6, 0) NOT NULL, ;
                      NMCFNONMARG N(6, 0) NOT NULL, ;
                      NMCFMARG N(6, 0) NOT NULL, ;
                      NMAXROUND N(5, 2) NOT NULL, ;
                      NSECT29RATE N(9, 2) NOT NULL, ;
                      CREVACCTNO C(10) NOT NULL, ;
                      CCOMPRPTNO C(10) NOT NULL, ;
                      CDEPTNO C(8) NOT NULL, ;
                      CBANKNAME C(60) NOT NULL, ;
                      CBANKTRANSIT C(20) NOT NULL, ;
                      CBANKACCT C(20) NOT NULL, ;
                      CDDORIGIN C(10) NOT NULL, ;
                      CDDORIGNAME C(23) NOT NULL, ;
                      CDDDEST C(10) NOT NULL, ;
                      CDDDESTNAME C(23) NOT NULL, ;
                      CDDCOMPNAME C(40) NOT NULL, ;
                      CDDORIGDFI C(8) NOT NULL, ;
                      CDDSERVCLASS C(3) NOT NULL, ;
                      LDDALTERNATE L NOT NULL, ;
                      CDISBCHKFMT C(120) NOT NULL, ;
                      CVENDCHKFMT C(120) NOT NULL, ;
                      LTWOLINES L NOT NULL, ;
                      CEMAILSERVER V(128) NOT NULL, ;
                      CEMAILUSER V(128) NOT NULL, ;
                      CEMAILADDRESS V(128) NOT NULL, ;
                      CEMAILPASS V(120) NOT NULL, ;
                      CWELLINCACCT C(6) NOT NULL, ;
                      CCOMPID C(10) NOT NULL, ;
                      NSMTPPORT I NOT NULL, ;
                      NPOP3PORT I NOT NULL, ;
                      LUSESSL L NOT NULL, ;
                      LENCRYPTED L NOT NULL, ;
                      CTREENOUSER C(20) NOT NULL, ;
                      CTREENOPWD C(20) NOT NULL, ;
                      CTREENODEPT C(20) NOT NULL, ;
                      LDOCSHARE L NOT NULL, ;
                      LTAXNET L NOT NULL, ;
                      CPLUGACCT C(6) NOT NULL, ;
                      EL_USERNAME C(20) NOT NULL, ;
                      EL_PWD C(20) NOT NULL, ;
                      LDECIMALINTS L NOT NULL, ;
                      IACHDAYS I NOT NULL, ;
                      LACHSKIPWEEKENDS L NOT NULL, ;
                      PK I NOT NULL AUTOINC NEXTVALUE 2 STEP 1, ;
                      LTRADMENU L NOT NULL, ;
                      CEMAILCONFNAME C(50) NOT NULL, ;
                      CEMAILBCC V(254) NOT NULL, ;
                      LDECATHERM L NOT NULL, ;
                      LFEDWIRECLR L NOT NULL, ;
                      CFEDWIRE C(6) NOT NULL, ;
                      CEMAILCC V(254) NOT NULL, ;
                      CEMAILGUN C(120) NOT NULL, ;
                      LFOXYPREVIEWER L NOT NULL, ;
                      CPRODACCT C(10) NOT NULL)

***** Create each index for OPTIONS *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for OPTIONS *****
DBSETPROP('OPTIONS.CDISBACCT', 'Field', 'Caption', "Disbursement Checking Account")
DBSETPROP('OPTIONS.CDEFACCT', 'Field', 'Caption', "Deficit Receivable Account")
DBSETPROP('OPTIONS.CMINACCT', 'Field', 'Caption', "Minimums Payable Account")
DBSETPROP('OPTIONS.CTAXACCT1', 'Field', 'Caption', "Taxes Payable 1")
DBSETPROP('OPTIONS.CTAXACCT2', 'Field', 'Caption', "Taxes Payable 2")
DBSETPROP('OPTIONS.CTAXACCT3', 'Field', 'Caption', "Taxes Payable 3")
DBSETPROP('OPTIONS.CTAXACCT4', 'Field', 'Caption', "Taxes Payable 4")
DBSETPROP('OPTIONS.CJIBACCT', 'Field', 'Caption', "JIB Receivable Account")
DBSETPROP('OPTIONS.CBACKACCT', 'Field', 'Caption', "Backup  Withholding Account")
DBSETPROP('OPTIONS.CTAXACCT', 'Field', 'Caption', "Tax Withholding Account")
DBSETPROP('OPTIONS.CGATHACCT', 'Field', 'Caption', "Gathering & Compression Account")
DBSETPROP('OPTIONS.CFIXEDACCT', 'Field', 'Caption', "Fixed Exp Account")
DBSETPROP('OPTIONS.LSHOWINACT', 'Field', 'Caption', "Show Inactive Wells in List")
DBSETPROP('OPTIONS.LACCTDESC', 'Field', 'Caption', "Use Category Description")
DBSETPROP('OPTIONS.LVOIDNEXT', 'Field', 'Caption', "Void Next Check When Overlow Occurs")
DBSETPROP('OPTIONS.LDUPSTUB', 'Field', 'Caption', "Duplicate Stub")
DBSETPROP('OPTIONS.LSTMCOMP', 'Field', 'Caption', "Print Compressed Statements")
DBSETPROP('OPTIONS.LSTMINV', 'Field', 'Caption', "Print 'Invoice' on Deficit Statements")
DBSETPROP('OPTIONS.LDIRINV', 'Field', 'Caption', "Invoice Directly Paid Owners")
DBSETPROP('OPTIONS.LZEROSTMT', 'Field', 'Caption', "Print Zero Amount Statements")
DBSETPROP('OPTIONS.LDEFSTMT', 'Field', 'Caption', "Print Deficit Statements")
DBSETPROP('OPTIONS.LMINSTMT', 'Field', 'Caption', "Print Minimum Statements")
DBSETPROP('OPTIONS.LDIRROY', 'Field', 'Caption', "Exempt Directly Paid Royalties From Taxes")
DBSETPROP('OPTIONS.LDIRWORK', 'Field', 'Caption', "Exempt Directly Paid Work Ints From Taxes")
DBSETPROP('OPTIONS.LEXPDATE', 'Field', 'Caption', "Print Expense Date on Statements")
DBSETPROP('OPTIONS.LSUMMARYPOST', 'Field', 'Caption', "Post Summary Journals To G/L")
DBSETPROP('OPTIONS.LBILLDESC', 'Field', 'Caption', "Use Bill Desc")
DBSETPROP('OPTIONS.LSHOWROY', 'Field', 'Caption', "Print Royalty Totals On All Statements")
DBSETPROP('OPTIONS.LPOSTREV', 'Field', 'Caption', "Post Revenue Entered In Disb Mgr To G/L")
DBSETPROP('OPTIONS.LGRPNAME', 'Field', 'Caption', "Use Group Name for Company Name")
DBSETPROP('OPTIONS.LREFID', 'Field', 'Caption', "Print RefID On Statements")
DBSETPROP('OPTIONS.LJIBNET', 'Field', 'Caption', "Create Net JIB Invoices")
DBSETPROP('OPTIONS.LCHGPRICE', 'Field', 'Caption', "Change Price To Hide Compression")
DBSETPROP('OPTIONS.LDIRTOT', 'Field', 'Caption', "Include Directly Paid Totals In Reports")
DBSETPROP('OPTIONS.LSHOWPREV', 'Field', 'Caption', "Print Previous Minimum Summary On Stmts")
DBSETPROP('OPTIONS.LSUMMARYWELL', 'Field', 'Caption', "Summarize Posting by Well")
DBSETPROP('OPTIONS.LCALCRANGE', 'Field', 'Caption', "Calculate Next Period Range")
DBSETPROP('OPTIONS.CVENDCOMP', 'Field', 'Caption', "Vendor ID Comp & Gathering to be Paid To")
DBSETPROP('OPTIONS.LCALCDAYS', 'Field', 'Caption', "Calculate Days On")
DBSETPROP('OPTIONS.LDIRWKTAX', 'Field', 'Caption', "Exempt Dir Pd Wrking Ints From Tax")
DBSETPROP('OPTIONS.LUSEOUTLOOK', 'Field', 'Caption', "Use Outlook Email Settings")
DBSETPROP('OPTIONS.LEXPSUM', 'Field', 'Caption', "Summarize Expenses on Statements")
DBSETPROP('OPTIONS.LREVSUM', 'Field', 'Caption', "Sum Revenue on Stmts")
DBSETPROP('OPTIONS.LHIDECOMP', 'Field', 'Caption', "Hide Compression & Gathering On All Stmts")
DBSETPROP('OPTIONS.LSKIPPERF', 'Field', 'Caption', "Skip over Check Perf")
DBSETPROP('OPTIONS.LSEPCLOSE', 'Field', 'Caption', "Provide Separate Close for JIBs and Revenue")
DBSETPROP('OPTIONS.LNOJIBBAL', 'Field', 'Caption', "Don't Show Previous Balances on JIBs")
DBSETPROP('OPTIONS.LJIBNOTES', 'Field', 'Caption', "Print Expense Notes on JIB Stmts")
DBSETPROP('OPTIONS.LROUNDHIGH', 'Field', 'Caption', "Round to the Highest Owner ID in Well")
DBSETPROP('OPTIONS.LNOFIRSTNAME', 'Field', 'Caption', "Don't use the owners primary name with secondary address")
DBSETPROP('OPTIONS.LROYCOMP', 'Field', 'Caption', "Exclude Roy Owners From Comp/Gath")
DBSETPROP('OPTIONS.LSHOWVENDOR', 'Field', 'Caption', "Show vendor name on owner stmts")
DBSETPROP('OPTIONS.LSENDTOALLOCATE', 'Field', 'Caption', "Send Rev and Exp to Alloc File")
DBSETPROP('OPTIONS.NMINCHECK', 'Field', 'Caption', "Minimum Check Amount")
DBSETPROP('OPTIONS.CCHECKTYPE', 'Field', 'Caption', "Check Type")
DBSETPROP('OPTIONS.CCHECKNO', 'Field', 'Caption', "Next Check No")
DBSETPROP('OPTIONS.NMIN1099NON', 'Field', 'Caption', "Minimum Non Employee 1099 Amount")
DBSETPROP('OPTIONS.NMIN1099ROY', 'Field', 'Caption', "Minimum Royalty Amount")
DBSETPROP('OPTIONS.NGATHER', 'Field', 'Caption', "Default Gathering Charge")
DBSETPROP('OPTIONS.NCOMPRESS', 'Field', 'Caption', "Default Compression Charge")
DBSETPROP('OPTIONS.NSTUBLINE', 'Field', 'Caption', "# Of Lines on Check Stub")
DBSETPROP('OPTIONS.NBBLNONMARG', 'Field', 'Caption', "Non Marginal Oil Tax Rate")
DBSETPROP('OPTIONS.NBBLMARG', 'Field', 'Caption', "Marginal Oil Tax Rate")
DBSETPROP('OPTIONS.NMCFNONMARG', 'Field', 'Caption', "Non Marginal Gas Tax Rate")
DBSETPROP('OPTIONS.NMCFMARG', 'Field', 'Caption', "Marginal Gas Tax Rate")
DBSETPROP('OPTIONS.NMAXROUND', 'Field', 'Caption', "Maximum Rounding Amount To Adjust")
DBSETPROP('OPTIONS.NSECT29RATE', 'Field', 'Caption', "Section 29 Rate")
DBSETPROP('OPTIONS.CREVACCTNO', 'Field', 'Caption', "Revenue Account No.")
DBSETPROP('OPTIONS.CCOMPRPTNO', 'Field', 'Caption', "Company Reporting No.")
DBSETPROP('OPTIONS.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('OPTIONS.CBANKNAME', 'Field', 'Caption', "Bank Name")
DBSETPROP('OPTIONS.CBANKTRANSIT', 'Field', 'Caption', "Bank Transit No")
DBSETPROP('OPTIONS.CBANKACCT', 'Field', 'Caption', "Bank Account No")
DBSETPROP('OPTIONS.CDDORIGIN', 'Field', 'Caption', "DD Immediate Origin")
DBSETPROP('OPTIONS.CDDORIGNAME', 'Field', 'Caption', "DD Origin Name")
DBSETPROP('OPTIONS.CDDDEST', 'Field', 'Caption', "DD Immediate Dest")
DBSETPROP('OPTIONS.CDDDESTNAME', 'Field', 'Caption', "DD Dest Name")
DBSETPROP('OPTIONS.CDDCOMPNAME', 'Field', 'Caption', "Company Name for DD")
DBSETPROP('OPTIONS.CDDORIGDFI', 'Field', 'Caption', "Origin DFI")
DBSETPROP('OPTIONS.CDDSERVCLASS', 'Field', 'Caption', "Service Class")
DBSETPROP('OPTIONS.LDDALTERNATE', 'Field', 'Caption', "Alternate DD Processing")
DBSETPROP('OPTIONS.CDISBCHKFMT', 'Field', 'Caption', "Rev Dist Check Format")
DBSETPROP('OPTIONS.CVENDCHKFMT', 'Field', 'Caption', "AP Check Format")
DBSETPROP('OPTIONS.LTWOLINES', 'Field', 'Caption', "Two Lines per Well On Stub")
DBSETPROP('OPTIONS.CEMAILSERVER', 'Field', 'Caption', "Email Server")
DBSETPROP('OPTIONS.CEMAILUSER', 'Field', 'Caption', "Email User")
DBSETPROP('OPTIONS.CEMAILADDRESS', 'Field', 'Caption', "Email Address")
DBSETPROP('OPTIONS.CEMAILPASS', 'Field', 'Caption', "Email Password")
DBSETPROP('OPTIONS.CWELLINCACCT', 'Field', 'Caption', "Default Well Rev by Well Acct")
DBSETPROP('OPTIONS.CCOMPID', 'Field', 'Caption', "Company ID (DD)")
DBSETPROP('OPTIONS.NSMTPPORT', 'Field', 'Caption', "SMTP Port")
DBSETPROP('OPTIONS.NPOP3PORT', 'Field', 'Caption', "POP3 Port")
DBSETPROP('OPTIONS.LUSESSL', 'Field', 'Caption', "USE SSL Email")
DBSETPROP('OPTIONS.LENCRYPTED', 'Field', 'Caption', "Data Encrypted")
DBSETPROP('OPTIONS.CTREENOUSER', 'Field', 'Caption', "Treeno User ID")
DBSETPROP('OPTIONS.CTREENOPWD', 'Field', 'Caption', "Treeno Password")
DBSETPROP('OPTIONS.CTREENODEPT', 'Field', 'Caption', "Treeno Dept")
DBSETPROP('OPTIONS.LDOCSHARE', 'Field', 'Caption', "Share Docs Between Wells and Leases")
DBSETPROP('OPTIONS.LTAXNET', 'Field', 'Caption', "Net Tax W/H Calc")
DBSETPROP('OPTIONS.CPLUGACCT', 'Field', 'Caption', "Plugging Acct")
DBSETPROP('OPTIONS.EL_USERNAME', 'Field', 'Caption', "EnergyLink User")
DBSETPROP('OPTIONS.EL_PWD', 'Field', 'Caption', "EnergyLink Password")
DBSETPROP('OPTIONS.LDECIMALINTS', 'Field', 'Caption', "Show Decimal Ints on reports")
DBSETPROP('OPTIONS.IACHDAYS', 'Field', 'Caption', "# of Days for ACH")
DBSETPROP('OPTIONS.LACHSKIPWEEKENDS', 'Field', 'Caption', "Skip Weekends for ACH")
DBSETPROP('OPTIONS.PK', 'Field', 'Caption', "Pk")
DBSETPROP('OPTIONS.LTRADMENU', 'Field', 'Caption', "Traditional Menu")
DBSETPROP('OPTIONS.CEMAILCONFNAME', 'Field', 'Caption', "Email Config Name")
DBSETPROP('OPTIONS.CEMAILBCC', 'Field', 'Caption', "Email BCC")
DBSETPROP('OPTIONS.LDECATHERM', 'Field', 'Caption', "Report Decatherms")
DBSETPROP('OPTIONS.LFEDWIRECLR', 'Field', 'Caption', "Use Fedwire Clearing")
DBSETPROP('OPTIONS.CFEDWIRE', 'Field', 'Caption', "Fedwire Clearing Acct")
DBSETPROP('OPTIONS.CEMAILCC', 'Field', 'Caption', "Email CC")
DBSETPROP('OPTIONS.CEMAILGUN', 'Field', 'Caption', "Mail Gun API Key")
DBSETPROP('OPTIONS.LFOXYPREVIEWER', 'Field', 'Caption', "Use FoxyPreviewer")
DBSETPROP('OPTIONS.CPRODACCT', 'Field', 'Caption', "Cash Production Account Number")
CREATE TRIGGER ON 'OPTIONS' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'OPTIONS' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'OPTIONS' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_OTHNAMES
***** Table setup for OTHNAMES *****
CREATE TABLE 'OTHNAMES.DBF' NAME 'OTHNAMES' (CIDOTHN C(8) NOT NULL, ;
                       CNAME C(40) NOT NULL, ;
                       CADDR1 C(40) NOT NULL, ;
                       CADDR2 C(40) NOT NULL, ;
                       CADDR3 C(40) NOT NULL, ;
                       LVERIFIED L NOT NULL)

***** Create each index for OTHNAMES *****
ALTER TABLE 'OTHNAMES' ADD PRIMARY KEY CIDOTHN TAG CIDOTHN COLLATE 'MACHINE'
INDEX ON TRIM(UPPER(CNAME)) TAG CNAME COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for OTHNAMES *****
DBSETPROP('OTHNAMES.CIDOTHN', 'Field', 'Caption', "Primary Key")
DBSETPROP('OTHNAMES.CNAME', 'Field', 'Caption', "Name")
DBSETPROP('OTHNAMES.CADDR1', 'Field', 'Caption', "Address Line 1")
DBSETPROP('OTHNAMES.CADDR2', 'Field', 'Caption', "Address Line 2")
DBSETPROP('OTHNAMES.CADDR3', 'Field', 'Caption', "Address Line 3")
DBSETPROP('OTHNAMES.LVERIFIED', 'Field', 'Caption', "Verified")
CREATE TRIGGER ON 'OTHNAMES' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'OTHNAMES' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'OTHNAMES' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_OWNHISTOLD
***** Table setup for OWNHISTOLD *****
CREATE TABLE 'OWNHISTOLD.DBF' NAME 'OWNHISTOLD' (CIDDISB C(8) NOT NULL, ;
                         CRECTYPE C(1) NOT NULL, ;
                         CWELLID C(10) NOT NULL, ;
                         COWNERID C(10) NOT NULL, ;
                         HYEAR C(4) NOT NULL, ;
                         HPERIOD C(2) NOT NULL, ;
                         CRUNYEAR C(4) NOT NULL, ;
                         NRUNNO I NOT NULL, ;
                         HDATE D NOT NULL, ;
                         CTYPEINV C(1) NOT NULL, ;
                         CTYPEINT C(1) NOT NULL, ;
                         CGROUP C(2) NOT NULL, ;
                         CDIRECT C(1) NOT NULL, ;
                         NINCOME N(12, 2) NOT NULL, ;
                         NMKTGEXP N(12, 2) NOT NULL, ;
                         NSEVTAXES N(12, 2) NOT NULL, ;
                         NEXPENSE N(12, 2) NOT NULL, ;
                         NNETCHECK N(12, 2) NOT NULL, ;
                         NTOTALE1 N(12, 2) NOT NULL, ;
                         NTOTALE2 N(12, 2) NOT NULL, ;
                         NTOTALE3 N(12, 2) NOT NULL, ;
                         NTOTALE4 N(12, 2) NOT NULL, ;
                         NTOTALE5 N(12, 2) NOT NULL, ;
                         NTOTALEA N(12, 2) NOT NULL, ;
                         NTOTALEB N(12, 2) NOT NULL, ;
                         NFLATRATE N(7, 2) NOT NULL, ;
                         NOILREV N(10, 2) NOT NULL, ;
                         NGASREV N(10, 2) NOT NULL, ;
                         NOTHREV N(12, 2) NOT NULL, ;
                         NTRPREV N(10, 2) NOT NULL, ;
                         LPROGRAM L NOT NULL, ;
                         CPROGCODE C(10) NOT NULL, ;
                         LPROGNET L NOT NULL, ;
                         NMISCREV1 N(12, 2) NOT NULL, ;
                         NMISCREV2 N(12, 2) NOT NULL, ;
                         LJIB L NOT NULL, ;
                         NGATHER N(12, 2) NOT NULL, ;
                         NCOMPRESS N(12, 2) NOT NULL, ;
                         LSEVPURCH L NOT NULL, ;
                         LHOLD L NOT NULL, ;
                         LONHOLD L NOT NULL, ;
                         NOILEXP N(12, 2) NOT NULL, ;
                         NGASEXP N(12, 2) NOT NULL, ;
                         CACCTYR C(4) NOT NULL, ;
                         CACCTPRD C(2) NOT NULL, ;
                         LFLAT L NOT NULL, ;
                         NFLATFREQ I NOT NULL, ;
                         CFLATSTART C(2) NOT NULL, ;
                         NOILTAX1 N(9, 2) NOT NULL, ;
                         NOILTAX2 N(9, 2) NOT NULL, ;
                         NOILTAX3 N(9, 2) NOT NULL, ;
                         NOILTAX4 N(9, 2) NOT NULL, ;
                         NGASTAX1 N(9, 2) NOT NULL, ;
                         NGASTAX2 N(9, 2) NOT NULL, ;
                         NGASTAX3 N(9, 2) NOT NULL, ;
                         NGASTAX4 N(9, 2) NOT NULL, ;
                         NOTHTAX1 N(9, 2) NOT NULL, ;
                         NOTHTAX2 N(9, 2) NOT NULL, ;
                         NOTHTAX3 N(9, 2) NOT NULL, ;
                         NOTHTAX4 N(9, 2) NOT NULL, ;
                         NTAXWITH N(9, 2) NOT NULL, ;
                         NTAXPCT N(5, 2) NOT NULL, ;
                         NBACKWITH N(12, 2) NOT NULL, ;
                         CIDCHEC C(8) NOT NULL, ;
                         LUSED L NOT NULL, ;
                         LPAYOUT L NOT NULL, ;
                         CSUSPTYPE C(1) NOT NULL, ;
                         NRUNNO_IN I NOT NULL, ;
                         CRUNYEAR_IN C(4) NOT NULL, ;
                         LINTEGGL L NOT NULL, ;
                         NDISBFREQ I NOT NULL, ;
                         LMANUAL L NOT NULL, ;
                         CBATCH C(8) NOT NULL)

***** Create each index for OWNHISTOLD *****
INDEX ON CGROUP TAG CGROUP COLLATE 'MACHINE'
ALTER TABLE 'OWNHISTOLD' ADD PRIMARY KEY CIDDISB TAG CIDDISB COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CRUNYEAR TAG CRUNYEAR COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON HDATE TAG HDATE COLLATE 'MACHINE'
INDEX ON HPERIOD TAG HPERIOD COLLATE 'MACHINE'
INDEX ON HYEAR TAG HYEAR COLLATE 'MACHINE'
INDEX ON NRUNNO TAG NRUNNO COLLATE 'MACHINE'

***** Change properties for OWNHISTOLD *****
DBSETPROP('OWNHISTOLD.CIDDISB', 'Field', 'Caption', "Primary Key")
DBSETPROP('OWNHISTOLD.CRECTYPE', 'Field', 'Caption', "Record Type")
DBSETPROP('OWNHISTOLD.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('OWNHISTOLD.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('OWNHISTOLD.HYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('OWNHISTOLD.HPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('OWNHISTOLD.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('OWNHISTOLD.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('OWNHISTOLD.HDATE', 'Field', 'Caption', "Accounting Date")
DBSETPROP('OWNHISTOLD.CTYPEINV', 'Field', 'Caption', "Owner Type")
DBSETPROP('OWNHISTOLD.CTYPEINT', 'Field', 'Caption', "Interest Type")
DBSETPROP('OWNHISTOLD.CGROUP', 'Field', 'Caption', "Well Group")
DBSETPROP('OWNHISTOLD.CDIRECT', 'Field', 'Caption', "Direct Pay Flag")
DBSETPROP('OWNHISTOLD.NINCOME', 'Field', 'Caption', "Total Income")
DBSETPROP('OWNHISTOLD.NMKTGEXP', 'Field', 'Caption', "Marketing Expense")
DBSETPROP('OWNHISTOLD.NSEVTAXES', 'Field', 'Caption', "Severance Taxes")
DBSETPROP('OWNHISTOLD.NEXPENSE', 'Field', 'Caption', "Total Oper Expense")
DBSETPROP('OWNHISTOLD.NNETCHECK', 'Field', 'Caption', "Net Amount")
DBSETPROP('OWNHISTOLD.NTOTALE1', 'Field', 'Caption', "Expense Class 1 Amount")
DBSETPROP('OWNHISTOLD.NTOTALE2', 'Field', 'Caption', "Expense Class 2 Amount")
DBSETPROP('OWNHISTOLD.NTOTALE3', 'Field', 'Caption', "Expense Class 3 Amount")
DBSETPROP('OWNHISTOLD.NTOTALE4', 'Field', 'Caption', "Expense Class 4 Amount")
DBSETPROP('OWNHISTOLD.NTOTALE5', 'Field', 'Caption', "Expense Class 5 Amount")
DBSETPROP('OWNHISTOLD.NTOTALEA', 'Field', 'Caption', "After Casing Point Expenses")
DBSETPROP('OWNHISTOLD.NTOTALEB', 'Field', 'Caption', "Before Casing Point Expenses")
DBSETPROP('OWNHISTOLD.NFLATRATE', 'Field', 'Caption', "Flat Rate Amount")
DBSETPROP('OWNHISTOLD.NOILREV', 'Field', 'Caption', "Oil Revenue")
DBSETPROP('OWNHISTOLD.NGASREV', 'Field', 'Caption', "Gas Revenue")
DBSETPROP('OWNHISTOLD.NOTHREV', 'Field', 'Caption', "Other Product Revenue")
DBSETPROP('OWNHISTOLD.NTRPREV', 'Field', 'Caption', "Transportation Revenue")
DBSETPROP('OWNHISTOLD.LPROGRAM', 'Field', 'Caption', "Program Flag")
DBSETPROP('OWNHISTOLD.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('OWNHISTOLD.LPROGNET', 'Field', 'Caption', "Net Program")
DBSETPROP('OWNHISTOLD.NMISCREV1', 'Field', 'Caption', "Misc Revenue 1 Amount")
DBSETPROP('OWNHISTOLD.NMISCREV2', 'Field', 'Caption', "Misc Revenue 2 Amount")
DBSETPROP('OWNHISTOLD.LJIB', 'Field', 'Caption', "JIB Interest")
DBSETPROP('OWNHISTOLD.NGATHER', 'Field', 'Caption', "Gathering Expense Amount")
DBSETPROP('OWNHISTOLD.NCOMPRESS', 'Field', 'Caption', "Compression Expense Amount")
DBSETPROP('OWNHISTOLD.LSEVPURCH', 'Field', 'Caption', "Purchaser Paid Sev Tax")
DBSETPROP('OWNHISTOLD.LHOLD', 'Field', 'Caption', "Owner Held")
DBSETPROP('OWNHISTOLD.LONHOLD', 'Field', 'Caption', "Int Held")
DBSETPROP('OWNHISTOLD.NOILEXP', 'Field', 'Caption', "Oil Expenses")
DBSETPROP('OWNHISTOLD.NGASEXP', 'Field', 'Caption', "Gas Expenses")
DBSETPROP('OWNHISTOLD.CACCTYR', 'Field', 'Caption', "Accounting Year")
DBSETPROP('OWNHISTOLD.CACCTPRD', 'Field', 'Caption', "Accounting Period")
DBSETPROP('OWNHISTOLD.LFLAT', 'Field', 'Caption', "Flat Rate Flag")
DBSETPROP('OWNHISTOLD.NFLATFREQ', 'Field', 'Caption', "Flat Rate Frequency")
DBSETPROP('OWNHISTOLD.CFLATSTART', 'Field', 'Caption', "Month Flat Rate Starts")
DBSETPROP('OWNHISTOLD.NOILTAX1', 'Field', 'Caption', "Oil Tax 1")
DBSETPROP('OWNHISTOLD.NOILTAX2', 'Field', 'Caption', "Oil Tax 2")
DBSETPROP('OWNHISTOLD.NOILTAX3', 'Field', 'Caption', "Oil Tax 3")
DBSETPROP('OWNHISTOLD.NOILTAX4', 'Field', 'Caption', "Oil Tax 4")
DBSETPROP('OWNHISTOLD.NGASTAX1', 'Field', 'Caption', "Gas Tax 1")
DBSETPROP('OWNHISTOLD.NGASTAX2', 'Field', 'Caption', "Gas Tax 2")
DBSETPROP('OWNHISTOLD.NGASTAX3', 'Field', 'Caption', "Gas Tax 3")
DBSETPROP('OWNHISTOLD.NGASTAX4', 'Field', 'Caption', "Gas Tax 4")
DBSETPROP('OWNHISTOLD.NOTHTAX1', 'Field', 'Caption', "Other Tax 1")
DBSETPROP('OWNHISTOLD.NOTHTAX2', 'Field', 'Caption', "Other Tax 2")
DBSETPROP('OWNHISTOLD.NOTHTAX3', 'Field', 'Caption', "Other Tax 3")
DBSETPROP('OWNHISTOLD.NOTHTAX4', 'Field', 'Caption', "Other Tax 4")
DBSETPROP('OWNHISTOLD.NTAXWITH', 'Field', 'Caption', "Tax W/H")
DBSETPROP('OWNHISTOLD.NTAXPCT', 'Field', 'Caption', "State W/H Pct")
DBSETPROP('OWNHISTOLD.NBACKWITH', 'Field', 'Caption', "Backup W/H")
DBSETPROP('OWNHISTOLD.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('OWNHISTOLD.LUSED', 'Field', 'Caption', "Used Flag")
DBSETPROP('OWNHISTOLD.LPAYOUT', 'Field', 'Caption', "Reached Payout")
DBSETPROP('OWNHISTOLD.CSUSPTYPE', 'Field', 'Caption', "Susp Type")
DBSETPROP('OWNHISTOLD.NRUNNO_IN', 'Field', 'Caption', "Susp Run")
DBSETPROP('OWNHISTOLD.CRUNYEAR_IN', 'Field', 'Caption', "Susp Run Year")
DBSETPROP('OWNHISTOLD.LINTEGGL', 'Field', 'Caption', "Post to G/L")
DBSETPROP('OWNHISTOLD.NDISBFREQ', 'Field', 'Caption', "Pay Freq")
DBSETPROP('OWNHISTOLD.LMANUAL', 'Field', 'Caption', "Manual Entry")
DBSETPROP('OWNHISTOLD.CBATCH', 'Field', 'Caption', "Batch No")
CREATE TRIGGER ON 'OWNHISTOLD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'OWNHISTOLD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'OWNHISTOLD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_OWNPCTS
***** Table setup for OWNPCTS *****
CREATE TABLE 'OWNPCTS.DBF' NAME 'OWNPCTS' (CIDDISB C(8) NOT NULL, ;
                      NREVOIL N(11, 7) NOT NULL, ;
                      NREVGAS N(11, 7) NOT NULL, ;
                      NREVOTH N(11, 7) NOT NULL, ;
                      NREVTRP N(11, 7) NOT NULL, ;
                      NWORKINT N(11, 7) NOT NULL, ;
                      NINTCLASS1 N(11, 7) NOT NULL, ;
                      NINTCLASS2 N(11, 7) NOT NULL, ;
                      NINTCLASS3 N(11, 7) NOT NULL, ;
                      NINTCLASS4 N(11, 7) NOT NULL, ;
                      NINTCLASS5 N(11, 7) NOT NULL, ;
                      NACPINT N(11, 7) NOT NULL, ;
                      NBCPINT N(11, 7) NOT NULL, ;
                      NAPOINT N(11, 7) NOT NULL, ;
                      NREVMISC1 N(11, 7) NOT NULL, ;
                      NREVMISC2 N(11, 7) NOT NULL, ;
                      NREVTAX1 N(11, 7) NOT NULL, ;
                      NREVTAX4 N(11, 7) NOT NULL, ;
                      NREVTAX7 N(11, 7) NOT NULL, ;
                      NREVTAX10 N(11, 7) NOT NULL, ;
                      NREVTAX2 N(11, 7) NOT NULL, ;
                      NREVTAX5 N(11, 7) NOT NULL, ;
                      NREVTAX8 N(11, 7) NOT NULL, ;
                      NREVTAX11 N(11, 7) NOT NULL, ;
                      NREVTAX3 N(11, 7) NOT NULL, ;
                      NREVTAX6 N(11, 7) NOT NULL, ;
                      NREVTAX9 N(11, 7) NOT NULL, ;
                      NREVTAX12 N(11, 7) NOT NULL, ;
                      NPLUGPCT N(11, 7) NOT NULL, ;
                      NUNITS N(8, 4) NOT NULL, ;
                      NREVINT3 N(11, 7) NOT NULL, ;
                      NREVINT4 N(11, 7) NOT NULL, ;
                      NREVINT5 N(11, 7) NOT NULL, ;
                      NREVINT6 N(11, 7) NOT NULL, ;
                      NREVINT7 N(11, 7) NOT NULL, ;
                      NREVINT8 N(11, 7) NOT NULL, ;
                      NREVINT9 N(11, 7) NOT NULL)

***** Create each index for OWNPCTS *****
ALTER TABLE 'OWNPCTS' ADD PRIMARY KEY CIDDISB TAG CIDDISB COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED BINARY

***** Change properties for OWNPCTS *****
DBSETPROP('OWNPCTS.CIDDISB', 'Field', 'Caption', "Primary Key")
DBSETPROP('OWNPCTS.NREVOIL', 'Field', 'Caption', "Oil Revenue Interest")
DBSETPROP('OWNPCTS.NREVGAS', 'Field', 'Caption', "Gas Revenue Interest")
DBSETPROP('OWNPCTS.NREVOTH', 'Field', 'Caption', "Other Product Rev Pct")
DBSETPROP('OWNPCTS.NREVTRP', 'Field', 'Caption', "Trans Revenue Interest")
DBSETPROP('OWNPCTS.NWORKINT', 'Field', 'Caption', "Working Interest")
DBSETPROP('OWNPCTS.NINTCLASS1', 'Field', 'Caption', "Expense Class 1 Pct")
DBSETPROP('OWNPCTS.NINTCLASS2', 'Field', 'Caption', "Expense Class 2 Pct")
DBSETPROP('OWNPCTS.NINTCLASS3', 'Field', 'Caption', "Expense Class 3 Pct")
DBSETPROP('OWNPCTS.NINTCLASS4', 'Field', 'Caption', "Expense Class 4 Pct")
DBSETPROP('OWNPCTS.NINTCLASS5', 'Field', 'Caption', "Expense Class 5 Pct")
DBSETPROP('OWNPCTS.NACPINT', 'Field', 'Caption', "After Casing Point Interest")
DBSETPROP('OWNPCTS.NBCPINT', 'Field', 'Caption', "Before Casing Point Interest")
DBSETPROP('OWNPCTS.NAPOINT', 'Field', 'Caption', "After Payout Int")
DBSETPROP('OWNPCTS.NREVMISC1', 'Field', 'Caption', "Misc Revenue Interest 1")
DBSETPROP('OWNPCTS.NREVMISC2', 'Field', 'Caption', "Misc Revenue Interest 2")
DBSETPROP('OWNPCTS.NREVTAX1', 'Field', 'Caption', "Oil Tax 1 Pct")
DBSETPROP('OWNPCTS.NREVTAX4', 'Field', 'Caption', "Oil Tax 2 Pct")
DBSETPROP('OWNPCTS.NREVTAX7', 'Field', 'Caption', "Oil Tax 3 Pct")
DBSETPROP('OWNPCTS.NREVTAX10', 'Field', 'Caption', "Oil Tax 4 Pct")
DBSETPROP('OWNPCTS.NREVTAX2', 'Field', 'Caption', "Gas Tax 1 Pct")
DBSETPROP('OWNPCTS.NREVTAX5', 'Field', 'Caption', "Gas Tax 2 Pct")
DBSETPROP('OWNPCTS.NREVTAX8', 'Field', 'Caption', "Gas Tax 3 Pct")
DBSETPROP('OWNPCTS.NREVTAX11', 'Field', 'Caption', "Gas Tax 4 Pct")
DBSETPROP('OWNPCTS.NREVTAX3', 'Field', 'Caption', "Other Tax 1 Pct")
DBSETPROP('OWNPCTS.NREVTAX6', 'Field', 'Caption', "Other Tax 2 Pct")
DBSETPROP('OWNPCTS.NREVTAX9', 'Field', 'Caption', "Other Tax 3 Pct")
DBSETPROP('OWNPCTS.NREVTAX12', 'Field', 'Caption', "Other Tax 4 Pct")
DBSETPROP('OWNPCTS.NPLUGPCT', 'Field', 'Caption', "Plugging Pct")
DBSETPROP('OWNPCTS.NUNITS', 'Field', 'Caption', "JV Units")
DBSETPROP('OWNPCTS.NREVINT3', 'Field', 'Caption', "Rev Int 3")
DBSETPROP('OWNPCTS.NREVINT4', 'Field', 'Caption', "Rev Int 4")
DBSETPROP('OWNPCTS.NREVINT5', 'Field', 'Caption', "Rev Int 5")
DBSETPROP('OWNPCTS.NREVINT6', 'Field', 'Caption', "Rev Int 6")
DBSETPROP('OWNPCTS.NREVINT7', 'Field', 'Caption', "Rev Int 7")
DBSETPROP('OWNPCTS.NREVINT8', 'Field', 'Caption', "Rev Int 8")
DBSETPROP('OWNPCTS.NREVINT9', 'Field', 'Caption', "Rev Int 9")
CREATE TRIGGER ON 'OWNPCTS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'OWNPCTS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'OWNPCTS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_OWNPCTSOLD
***** Table setup for OWNPCTSOLD *****
CREATE TABLE 'OWNPCTSOLD.DBF' NAME 'OWNPCTSOLD' (CIDDISB C(8) NOT NULL, ;
                         NREVOIL N(11, 7) NOT NULL, ;
                         NREVGAS N(11, 7) NOT NULL, ;
                         NREVOTH N(11, 7) NOT NULL, ;
                         NREVTRP N(11, 7) NOT NULL, ;
                         NWORKINT N(11, 7) NOT NULL, ;
                         NINTCLASS1 N(11, 7) NOT NULL, ;
                         NINTCLASS2 N(11, 7) NOT NULL, ;
                         NINTCLASS3 N(11, 7) NOT NULL, ;
                         NINTCLASS4 N(11, 7) NOT NULL, ;
                         NINTCLASS5 N(11, 7) NOT NULL, ;
                         NACPINT N(11, 7) NOT NULL, ;
                         NBCPINT N(11, 7) NOT NULL, ;
                         NAPOINT N(11, 7) NOT NULL, ;
                         NREVMISC1 N(11, 7) NOT NULL, ;
                         NREVMISC2 N(11, 7) NOT NULL, ;
                         NREVTAX1 N(11, 7) NOT NULL, ;
                         NREVTAX4 N(11, 7) NOT NULL, ;
                         NREVTAX7 N(11, 7) NOT NULL, ;
                         NREVTAX10 N(11, 7) NOT NULL, ;
                         NREVTAX2 N(11, 7) NOT NULL, ;
                         NREVTAX5 N(11, 7) NOT NULL, ;
                         NREVTAX8 N(11, 7) NOT NULL, ;
                         NREVTAX11 N(11, 7) NOT NULL, ;
                         NREVTAX3 N(11, 7) NOT NULL, ;
                         NREVTAX6 N(11, 7) NOT NULL, ;
                         NREVTAX9 N(11, 7) NOT NULL, ;
                         NREVTAX12 N(11, 7) NOT NULL)

***** Create each index for OWNPCTSOLD *****
ALTER TABLE 'OWNPCTSOLD' ADD PRIMARY KEY CIDDISB TAG CIDDISB COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for OWNPCTSOLD *****
DBSETPROP('OWNPCTSOLD.CIDDISB', 'Field', 'Caption', "Primary Key")
DBSETPROP('OWNPCTSOLD.NREVOIL', 'Field', 'Caption', "Oil Revenue Interest")
DBSETPROP('OWNPCTSOLD.NREVGAS', 'Field', 'Caption', "Gas Revenue Interest")
DBSETPROP('OWNPCTSOLD.NREVOTH', 'Field', 'Caption', "Other Product Rev Pct")
DBSETPROP('OWNPCTSOLD.NREVTRP', 'Field', 'Caption', "Trans Revenue Interest")
DBSETPROP('OWNPCTSOLD.NWORKINT', 'Field', 'Caption', "Working Interest")
DBSETPROP('OWNPCTSOLD.NINTCLASS1', 'Field', 'Caption', "Expense Class 1 Pct")
DBSETPROP('OWNPCTSOLD.NINTCLASS2', 'Field', 'Caption', "Expense Class 2 Pct")
DBSETPROP('OWNPCTSOLD.NINTCLASS3', 'Field', 'Caption', "Expense Class 3 Pct")
DBSETPROP('OWNPCTSOLD.NINTCLASS4', 'Field', 'Caption', "Expense Class 4 Pct")
DBSETPROP('OWNPCTSOLD.NINTCLASS5', 'Field', 'Caption', "Expense Class 5 Pct")
DBSETPROP('OWNPCTSOLD.NACPINT', 'Field', 'Caption', "After Casing Point Interest")
DBSETPROP('OWNPCTSOLD.NBCPINT', 'Field', 'Caption', "Before Casing Point Interest")
DBSETPROP('OWNPCTSOLD.NAPOINT', 'Field', 'Caption', "After Payout Int")
DBSETPROP('OWNPCTSOLD.NREVMISC1', 'Field', 'Caption', "Misc Revenue Interest 1")
DBSETPROP('OWNPCTSOLD.NREVMISC2', 'Field', 'Caption', "Misc Revenue Interest 2")
DBSETPROP('OWNPCTSOLD.NREVTAX1', 'Field', 'Caption', "Oil Tax 1 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX4', 'Field', 'Caption', "Oil Tax 2 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX7', 'Field', 'Caption', "Oil Tax 3 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX10', 'Field', 'Caption', "Oil Tax 4 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX2', 'Field', 'Caption', "Gas Tax 1 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX5', 'Field', 'Caption', "Gas Tax 2 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX8', 'Field', 'Caption', "Gas Tax 3 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX11', 'Field', 'Caption', "Gas Tax 4 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX3', 'Field', 'Caption', "Other Tax 1 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX6', 'Field', 'Caption', "Other Tax 2 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX9', 'Field', 'Caption', "Other Tax 3 Pct")
DBSETPROP('OWNPCTSOLD.NREVTAX12', 'Field', 'Caption', "Other Tax 4 Pct")
CREATE TRIGGER ON 'OWNPCTSOLD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'OWNPCTSOLD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'OWNPCTSOLD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_OWNTOTS
***** Table setup for OWNTOTS *****
CREATE TABLE 'OWNTOTS.DBF' NAME 'OWNTOTS' (CIDOWNT C(8) NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      CWELLID C(10) NOT NULL, ;
                      CPROGCODE C(10) NOT NULL, ;
                      CTYPEINT C(1) NOT NULL, ;
                      CTYPEINV C(1) NOT NULL, ;
                      OYTDTOTAL N(12, 2) NOT NULL, ;
                      OITDTOTAL N(12, 2) NOT NULL, ;
                      GYTDTOTAL N(12, 2) NOT NULL, ;
                      GITDTOTAL N(12, 2) NOT NULL, ;
                      TYTDTOTAL N(12, 2) NOT NULL, ;
                      TITDTOTAL N(12, 2) NOT NULL, ;
                      WYTDTOTAL N(12, 2) NOT NULL, ;
                      WITDTOTAL N(12, 2) NOT NULL, ;
                      C1YTDTOTAL N(12, 2) NOT NULL, ;
                      C1ITDTOTAL N(12, 2) NOT NULL, ;
                      C2YTDTOTAL N(12, 2) NOT NULL, ;
                      C2ITDTOTAL N(12, 2) NOT NULL, ;
                      C3YTDTOTAL N(12, 2) NOT NULL, ;
                      C3ITDTOTAL N(12, 2) NOT NULL, ;
                      C4YTDTOTAL N(12, 2) NOT NULL, ;
                      C4ITDTOTAL N(12, 2) NOT NULL, ;
                      C5YTDTOTAL N(12, 2) NOT NULL, ;
                      C5ITDTOTAL N(12, 2) NOT NULL, ;
                      TXYTDTOTAL N(12, 2) NOT NULL, ;
                      TXITDTOTAL N(12, 2) NOT NULL, ;
                      M1YTDTOTAL N(12, 2) NOT NULL, ;
                      M1ITDTOTAL N(12, 2) NOT NULL, ;
                      M2YTDTOTAL N(12, 2) NOT NULL, ;
                      M2ITDTOTAL N(12, 2) NOT NULL, ;
                      FLYTDTOTAL N(9, 2) NOT NULL, ;
                      FLITDTOTAL N(9, 2) NOT NULL, ;
                      CDIRECT C(1) NOT NULL, ;
                      LFLAT L NOT NULL, ;
                      NYTDNET N(12, 2) NOT NULL, ;
                      NITDNET N(12, 2) NOT NULL, ;
                      GCYTDTOTAL N(12, 2) NOT NULL, ;
                      GCITDTOTAL N(12, 2) NOT NULL, ;
                      CCYTDTOTAL N(12, 2) NOT NULL, ;
                      CCITDTOTAL N(12, 2) NOT NULL, ;
                      CAYTDTOTAL N(12, 2) NOT NULL, ;
                      CBYTDTOTAL N(12, 2) NOT NULL, ;
                      CAITDTOTAL N(12, 2) NOT NULL, ;
                      CBITDTOTAL N(12, 2) NOT NULL)

***** Create each index for OWNTOTS *****
ALTER TABLE 'OWNTOTS' ADD PRIMARY KEY CIDOWNT TAG CIDOWNT COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON COWNERID+CWELLID+CPROGCODE+CTYPEINV+CTYPEINT TAG OWNERKEY COLLATE 'MACHINE'

***** Change properties for OWNTOTS *****
DBSETPROP('OWNTOTS.CIDOWNT', 'Field', 'Caption', "Primary Key")
DBSETPROP('OWNTOTS.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('OWNTOTS.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('OWNTOTS.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('OWNTOTS.CTYPEINT', 'Field', 'Caption', "Interest Type")
DBSETPROP('OWNTOTS.CTYPEINV', 'Field', 'Caption', "Owner Type")
DBSETPROP('OWNTOTS.OYTDTOTAL', 'Field', 'Caption', "YTD Oil Revenue")
DBSETPROP('OWNTOTS.OITDTOTAL', 'Field', 'Caption', "ITD Oil Revenue")
DBSETPROP('OWNTOTS.GYTDTOTAL', 'Field', 'Caption', "YTD Gas Revenue")
DBSETPROP('OWNTOTS.GITDTOTAL', 'Field', 'Caption', "ITD Gas Revenue")
DBSETPROP('OWNTOTS.TYTDTOTAL', 'Field', 'Caption', "YTD Trans Revenue")
DBSETPROP('OWNTOTS.TITDTOTAL', 'Field', 'Caption', "ITD Trans Revenue")
DBSETPROP('OWNTOTS.WYTDTOTAL', 'Field', 'Caption', "YTD Operating Exp")
DBSETPROP('OWNTOTS.WITDTOTAL', 'Field', 'Caption', "ITD Operating Exp")
DBSETPROP('OWNTOTS.C1YTDTOTAL', 'Field', 'Caption', "YTD Class 1 Expenses")
DBSETPROP('OWNTOTS.C1ITDTOTAL', 'Field', 'Caption', "ITD Class 1 Expenses")
DBSETPROP('OWNTOTS.C2YTDTOTAL', 'Field', 'Caption', "YTD Class 2 Expenses")
DBSETPROP('OWNTOTS.C2ITDTOTAL', 'Field', 'Caption', "ITD Class 2 Expenses")
DBSETPROP('OWNTOTS.C3YTDTOTAL', 'Field', 'Caption', "YTD Class 3 Expenses")
DBSETPROP('OWNTOTS.C3ITDTOTAL', 'Field', 'Caption', "ITD Class 3 Expenses")
DBSETPROP('OWNTOTS.C4YTDTOTAL', 'Field', 'Caption', "YTD Class 4 Expenses")
DBSETPROP('OWNTOTS.C4ITDTOTAL', 'Field', 'Caption', "ITD Class 4 Expenses")
DBSETPROP('OWNTOTS.C5YTDTOTAL', 'Field', 'Caption', "YTD Class 5 Expenses")
DBSETPROP('OWNTOTS.C5ITDTOTAL', 'Field', 'Caption', "ITD Class 5 Expenses")
DBSETPROP('OWNTOTS.TXYTDTOTAL', 'Field', 'Caption', "YTD Taxes")
DBSETPROP('OWNTOTS.TXITDTOTAL', 'Field', 'Caption', "ITD Taxes")
DBSETPROP('OWNTOTS.M1YTDTOTAL', 'Field', 'Caption', "YTD Misc 1 Revenue")
DBSETPROP('OWNTOTS.M1ITDTOTAL', 'Field', 'Caption', "ITD Misc 1 Revenue")
DBSETPROP('OWNTOTS.M2YTDTOTAL', 'Field', 'Caption', "YTD Misc 2 Revenue")
DBSETPROP('OWNTOTS.M2ITDTOTAL', 'Field', 'Caption', "ITD Misc 2 Revenue")
DBSETPROP('OWNTOTS.FLYTDTOTAL', 'Field', 'Caption', "YTD Flat Rate")
DBSETPROP('OWNTOTS.FLITDTOTAL', 'Field', 'Caption', "ITD Flat Rate")
DBSETPROP('OWNTOTS.CDIRECT', 'Field', 'Caption', "Direct Flag")
DBSETPROP('OWNTOTS.LFLAT', 'Field', 'Caption', "Flat Rate Flag")
DBSETPROP('OWNTOTS.NYTDNET', 'Field', 'Caption', "YTD Net Total")
DBSETPROP('OWNTOTS.NITDNET', 'Field', 'Caption', "ITD Net Total")
DBSETPROP('OWNTOTS.GCYTDTOTAL', 'Field', 'Caption', "YTD Gathering Charge")
DBSETPROP('OWNTOTS.GCITDTOTAL', 'Field', 'Caption', "ITD Gathering Charge")
DBSETPROP('OWNTOTS.CCYTDTOTAL', 'Field', 'Caption', "YTD Compression Charge")
DBSETPROP('OWNTOTS.CCITDTOTAL', 'Field', 'Caption', "ITD Compression Charge")
DBSETPROP('OWNTOTS.CAYTDTOTAL', 'Field', 'Caption', "YTD After Casing")
DBSETPROP('OWNTOTS.CBYTDTOTAL', 'Field', 'Caption', "YTD Before Casing")
DBSETPROP('OWNTOTS.CAITDTOTAL', 'Field', 'Caption', "ITD After Casing")
DBSETPROP('OWNTOTS.CBITDTOTAL', 'Field', 'Caption', "ITD Before Casing")
CREATE TRIGGER ON 'OWNTOTS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'OWNTOTS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'OWNTOTS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PLUGOWNER
***** Table setup for PLUGOWNER *****
CREATE TABLE 'PLUGOWNER.DBF' NAME 'PLUGOWNER' (COWNERID C(10) NOT NULL, ;
                        CWELLID C(10) NOT NULL, ;
                        NAMOUNT N(12, 2) NOT NULL, ;
                        CTYPE C(1) NOT NULL, ;
                        DACCTDATE D NOT NULL)

***** Create each index for PLUGOWNER *****
INDEX ON COWNERID+CWELLID TAG PK COLLATE 'MACHINE'

***** Change properties for PLUGOWNER *****
DBSETPROP('PLUGOWNER.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('PLUGOWNER.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('PLUGOWNER.NAMOUNT', 'Field', 'Caption', "Charge Amount")
DBSETPROP('PLUGOWNER.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('PLUGOWNER.DACCTDATE', 'Field', 'Caption', "Acct Date")
CREATE TRIGGER ON 'PLUGOWNER' FOR DELETE AS foxaudit(cownerid+cwellid,,,"pk")
CREATE TRIGGER ON 'PLUGOWNER' FOR INSERT AS foxaudit(cownerid+cwellid,,,"pk")
CREATE TRIGGER ON 'PLUGOWNER' FOR UPDATE AS foxaudit(cownerid+cwellid,,,"pk")
ENDFUNC

FUNCTION MakeTable_PLUGWELL
***** Table setup for PLUGWELL *****
CREATE TABLE 'PLUGWELL.DBF' NAME 'PLUGWELL' (CWELLID C(10) NOT NULL, ;
                       DTARGETDATE D NOT NULL, ;
                       NPLUGAMOUNT N(12, 2) NOT NULL, ;
                       LWORKINTONLY L NOT NULL, ;
                       LCOMPLETED L NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       CCATCODE C(4) NOT NULL, ;
                       NAMOUNTRUN N(12, 2) NOT NULL, ;
                       CVENDORID C(10) NOT NULL, ;
                       CQBACCTNO C(36) NOT NULL)

***** Create each index for PLUGWELL *****
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'

***** Change properties for PLUGWELL *****
DBSETPROP('PLUGWELL.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('PLUGWELL.DTARGETDATE', 'Field', 'Caption', "Target Date")
DBSETPROP('PLUGWELL.NPLUGAMOUNT', 'Field', 'Caption', "Plugging Amount")
DBSETPROP('PLUGWELL.LWORKINTONLY', 'Field', 'Caption', "Chg Work Int Only")
DBSETPROP('PLUGWELL.LCOMPLETED', 'Field', 'Caption', "Completed?")
DBSETPROP('PLUGWELL.CACCTNO', 'Field', 'Caption', "Account No")
DBSETPROP('PLUGWELL.CCATCODE', 'Field', 'Caption', "Expense Code")
DBSETPROP('PLUGWELL.NAMOUNTRUN', 'Field', 'Caption', "Amount per Run")
DBSETPROP('PLUGWELL.CVENDORID', 'Field', 'Caption', "Vendor")
DBSETPROP('PLUGWELL.CQBACCTNO', 'Field', 'Caption', "QB Account")
CREATE TRIGGER ON 'PLUGWELL' FOR DELETE AS foxaudit(cwellid,,,"cwellid")
CREATE TRIGGER ON 'PLUGWELL' FOR INSERT AS foxaudit(cwellid,,,"cwellid")
CREATE TRIGGER ON 'PLUGWELL' FOR UPDATE AS foxaudit(cwellid,,,"cwellid")
ENDFUNC

FUNCTION MakeTable_PLUGWELLBAL
***** Table setup for PLUGWELLBAL *****
CREATE TABLE 'PLUGWELLBAL.DBF' NAME 'PLUGWELLBAL' (CWELLID C(10) NOT NULL, ;
                          CRUNYEAR C(4) NOT NULL, ;
                          NRUNNO I NOT NULL, ;
                          CRECTYPE C(1) NOT NULL, ;
                          DACCTDATE D NOT NULL, ;
                          COWNERID C(10) NOT NULL, ;
                          NPLUGGING N(12, 2) NOT NULL, ;
                          LMANUAL L NOT NULL, ;
                          CDMBATCH C(8) NOT NULL)

***** Create each index for PLUGWELLBAL *****
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CRUNYEAR+PADL(TRANSFORM(NRUNNO),3,"0")+CRECTYPE TAG RUNNO COLLATE 'MACHINE'

***** Change properties for PLUGWELLBAL *****
DBSETPROP('PLUGWELLBAL.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('PLUGWELLBAL.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('PLUGWELLBAL.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('PLUGWELLBAL.CRECTYPE', 'Field', 'Caption', "Rec Type")
DBSETPROP('PLUGWELLBAL.DACCTDATE', 'Field', 'Caption', "Acct Date")
DBSETPROP('PLUGWELLBAL.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('PLUGWELLBAL.NPLUGGING', 'Field', 'Caption', "Amount Charged")
DBSETPROP('PLUGWELLBAL.LMANUAL', 'Field', 'Caption', "Manual Entry")
DBSETPROP('PLUGWELLBAL.CDMBATCH', 'Field', 'Caption', "DM Batch")
CREATE TRIGGER ON 'PLUGWELLBAL' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PLUGWELLBAL' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PLUGWELLBAL' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PRCODEF
***** Table setup for PRCODEF *****
CREATE TABLE 'PRCODEF.DBF' NAME 'PRCODEF' (CIDPRCODEF C(8) NOT NULL, ;
                      CTYPE C(1) NOT NULL, ;
                      CDESC C(40) NOT NULL, ;
                      CCALC C(1) NOT NULL, ;
                      NAMOUNT N(12, 2) NOT NULL, ;
                      LFEDWH L NOT NULL, ;
                      LSTATEWH L NOT NULL, ;
                      LLOCALTAX L NOT NULL, ;
                      LSCHOOL L NOT NULL, ;
                      LSOCSEC L NOT NULL, ;
                      LMEDICARE L NOT NULL, ;
                      LFEDUE L NOT NULL, ;
                      LSTATEUE L NOT NULL, ;
                      LSTATEDA L NOT NULL, ;
                      LWORKCOMP L NOT NULL, ;
                      CACCTNO C(6) NOT NULL, ;
                      LINCGROSS L NOT NULL, ;
                      LDEDAFFECT L NOT NULL, ;
                      LMATCHED L NOT NULL, ;
                      CCOMPLIAB C(6) NOT NULL, ;
                      CCOMPEXP C(6) NOT NULL)

***** Create each index for PRCODEF *****
INDEX ON CDESC TAG CDESC COLLATE 'MACHINE'
ALTER TABLE 'PRCODEF' ADD PRIMARY KEY CIDPRCODEF TAG CIDPRCODEF COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for PRCODEF *****
DBSETPROP('PRCODEF.CIDPRCODEF', 'Field', 'Caption', "Unique Key")
DBSETPROP('PRCODEF.CTYPE', 'Field', 'Caption', "(I)ncome or (D)eduction")
DBSETPROP('PRCODEF.CDESC', 'Field', 'Caption', "Code Description")
DBSETPROP('PRCODEF.CCALC', 'Field', 'Caption', "Calculation")
DBSETPROP('PRCODEF.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('PRCODEF.LFEDWH', 'Field', 'Caption', "Fed W/H Flag")
DBSETPROP('PRCODEF.LSTATEWH', 'Field', 'Caption', "State W/H Flag")
DBSETPROP('PRCODEF.LLOCALTAX', 'Field', 'Caption', "Local W/H Flag")
DBSETPROP('PRCODEF.LSCHOOL', 'Field', 'Caption', "School Dist Flag")
DBSETPROP('PRCODEF.LSOCSEC', 'Field', 'Caption', "FICA Flag")
DBSETPROP('PRCODEF.LMEDICARE', 'Field', 'Caption', "Medicare Flag")
DBSETPROP('PRCODEF.LFEDUE', 'Field', 'Caption', "FUTA Flag")
DBSETPROP('PRCODEF.LSTATEUE', 'Field', 'Caption', "SUTA Flag")
DBSETPROP('PRCODEF.LSTATEDA', 'Field', 'Caption', "State Disability Flag")
DBSETPROP('PRCODEF.LWORKCOMP', 'Field', 'Caption', "Workers Comp Flag")
DBSETPROP('PRCODEF.CACCTNO', 'Field', 'Caption', "Account Number")
DBSETPROP('PRCODEF.LINCGROSS', 'Field', 'Caption', "Include In Gross Pay")
DBSETPROP('PRCODEF.LDEDAFFECT', 'Field', 'Caption', "Deduct Before Taxes")
DBSETPROP('PRCODEF.LMATCHED', 'Field', 'Caption', "Match Contribution")
DBSETPROP('PRCODEF.CCOMPLIAB', 'Field', 'Caption', "Company Liability Acct")
DBSETPROP('PRCODEF.CCOMPEXP', 'Field', 'Caption', "Company Expense Acct")
CREATE TRIGGER ON 'PRCODEF' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PRCODEF' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PRCODEF' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PRCODES
***** Table setup for PRCODES *****
CREATE TABLE 'PRCODES.DBF' NAME 'PRCODES' (CIDPRCODE C(8) NOT NULL, ;
                      CEMPID C(10) NOT NULL, ;
                      CTYPE C(1) NOT NULL, ;
                      CCALC C(1) NOT NULL, ;
                      NAMOUNT N(12, 2) NOT NULL, ;
                      LFEDWH L NOT NULL, ;
                      LSTATEWH L NOT NULL, ;
                      LLOCALTAX L NOT NULL, ;
                      LSCHOOL L NOT NULL, ;
                      LSOCSEC L NOT NULL, ;
                      LMEDICARE L NOT NULL, ;
                      LFEDUE L NOT NULL, ;
                      LSTATEUE L NOT NULL, ;
                      LSTATEDA L NOT NULL, ;
                      LWORKCOMP L NOT NULL, ;
                      CIDPRCODEF C(8) NOT NULL, ;
                      LINCGROSS L NOT NULL, ;
                      LDEDAFFECT L NOT NULL)

***** Create each index for PRCODES *****
INDEX ON CEMPID TAG CEMPID COLLATE 'MACHINE'
ALTER TABLE 'PRCODES' ADD PRIMARY KEY CIDPRCODE TAG CIDPRCODE COLLATE 'MACHINE'
INDEX ON CIDPRCODEF TAG CIDPRCODEF COLLATE 'MACHINE'
INDEX ON CTYPE+CEMPID TAG TYPEEMP COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for PRCODES *****
DBSETPROP('PRCODES.CIDPRCODE', 'Field', 'Caption', "Primary Key")
DBSETPROP('PRCODES.CEMPID', 'Field', 'Caption', "Employee ID")
DBSETPROP('PRCODES.CTYPE', 'Field', 'Caption', "Code Type")
DBSETPROP('PRCODES.CCALC', 'Field', 'Caption', "Calc Type")
DBSETPROP('PRCODES.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('PRCODES.LFEDWH', 'Field', 'Caption', "Fed W/H Flag")
DBSETPROP('PRCODES.LSTATEWH', 'Field', 'Caption', "State W/H Flag")
DBSETPROP('PRCODES.LLOCALTAX', 'Field', 'Caption', "Local W/H Flag")
DBSETPROP('PRCODES.LSCHOOL', 'Field', 'Caption', "School Dist W/H Flag")
DBSETPROP('PRCODES.LSOCSEC', 'Field', 'Caption', "FICA Flag")
DBSETPROP('PRCODES.LMEDICARE', 'Field', 'Caption', "Medicare Flag")
DBSETPROP('PRCODES.LFEDUE', 'Field', 'Caption', "FUTA Flag")
DBSETPROP('PRCODES.LSTATEUE', 'Field', 'Caption', "SUTA Flag")
DBSETPROP('PRCODES.LSTATEDA', 'Field', 'Caption', "State Disability Flag")
DBSETPROP('PRCODES.LWORKCOMP', 'Field', 'Caption', "Workers Comp Flag")
DBSETPROP('PRCODES.CIDPRCODEF', 'Field', 'Caption', "Link to PRCODEF")
DBSETPROP('PRCODES.LINCGROSS', 'Field', 'Caption', "Include in Gross Income")
DBSETPROP('PRCODES.LDEDAFFECT', 'Field', 'Caption', "Deduct Before Taxes")
CREATE TRIGGER ON 'PRCODES' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PRCODES' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PRCODES' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PRDATA
***** Table setup for PRDATA *****
CREATE TABLE 'PRDATA.DBF' NAME 'PRDATA' (CIDPRDATA C(8) NOT NULL, ;
                     CEMPID C(10) NOT NULL, ;
                     CPAYFREQ C(15) NOT NULL, ;
                     DPRDEND D NOT NULL, ;
                     DPAYDATE D NOT NULL, ;
                     CINC1CODE C(8) NOT NULL, ;
                     NRATE1 N(12, 2) NOT NULL, ;
                     CINC2CODE C(8) NOT NULL, ;
                     NRATE2 N(12, 2) NOT NULL, ;
                     NFEDWH N(9, 2) NOT NULL, ;
                     NFEDWHEXT N(9, 2) NOT NULL, ;
                     NFICA N(9, 2) NOT NULL, ;
                     NMEDICARE N(9, 2) NOT NULL, ;
                     NSTATEWH N(9, 2) NOT NULL, ;
                     NSTWHEXT N(9, 2) NOT NULL, ;
                     CSTATE C(2) NOT NULL, ;
                     CLOCCODE1 C(8) NOT NULL, ;
                     NLOCAL1 N(9, 2) NOT NULL, ;
                     CLOCCODE2 C(8) NOT NULL, ;
                     NLOCAL2 N(9, 2) NOT NULL, ;
                     NTOTINC N(12, 2) NOT NULL, ;
                     CDEDCODE1 C(8) NOT NULL, ;
                     NDEDUCT1 N(9, 2) NOT NULL, ;
                     CDEDCODE2 C(8) NOT NULL, ;
                     NDEDUCT2 N(9, 2) NOT NULL, ;
                     CDEDCODE3 C(8) NOT NULL, ;
                     NDEDUCT3 N(9, 2) NOT NULL, ;
                     CDEDCODE4 C(8) NOT NULL, ;
                     NDEDUCT4 N(9, 2) NOT NULL, ;
                     CDEDCODE5 C(8) NOT NULL, ;
                     NDEDUCT5 N(9, 2) NOT NULL, ;
                     CDEDCODE6 C(8) NOT NULL, ;
                     NDEDUCT6 N(9, 2) NOT NULL, ;
                     NTOTDED N(12, 2) NOT NULL, ;
                     NNETPAY N(12, 2) NOT NULL, ;
                     NREGHOURS N(7, 2) NOT NULL, ;
                     NREGRATE N(9, 3) NOT NULL, ;
                     NOV1HOURS N(7, 2) NOT NULL, ;
                     NOV1RATE N(9, 3) NOT NULL, ;
                     NOV1AMT N(12, 2) NOT NULL, ;
                     NOV2HOURS N(7, 2) NOT NULL, ;
                     NOV2RATE N(9, 3) NOT NULL, ;
                     NOV2AMT N(12, 2) NOT NULL, ;
                     NPAYTYPE N(1, 0) NOT NULL, ;
                     NREGAMT N(12, 2) NOT NULL, ;
                     LPRINTED L NOT NULL, ;
                     LVOUCHER L NOT NULL, ;
                     CIDCHEC C(8) NOT NULL, ;
                     CBATCH C(8) NOT NULL, ;
                     NFUTA N(9, 2) NOT NULL, ;
                     NSUTA N(9, 2) NOT NULL, ;
                     CDEPTNO C(8) NOT NULL, ;
                     NFEDWAGE N(12, 2) NOT NULL, ;
                     NGROSSWAGE N(12, 2) NOT NULL, ;
                     NSSWAGE N(12, 2) NOT NULL, ;
                     NMEDWAGE N(12, 2) NOT NULL, ;
                     NSTATEWAGE N(12, 2) NOT NULL, ;
                     NFUTAWAGE N(12, 2) NOT NULL, ;
                     NSUTAWAGE N(12, 2) NOT NULL, ;
                     NLOCWAGE1 N(12, 2) NOT NULL, ;
                     NLOCWAGE2 N(12, 2) NOT NULL, ;
                     LBONUS L NOT NULL, ;
                     LHISTENT L NOT NULL, ;
                     NNONTAXINC N(12, 2) NOT NULL, ;
                     CINC3CODE C(8) NOT NULL, ;
                     NRATE3 N(12, 2) NOT NULL, ;
                     CINC4CODE C(8) NOT NULL, ;
                     NRATE4 N(12, 2) NOT NULL, ;
                     CINC5CODE C(8) NOT NULL, ;
                     NRATE5 N(12, 2) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for PRDATA *****
INDEX ON CEMPID TAG CEMPID COLLATE 'MACHINE'
ALTER TABLE 'PRDATA' ADD PRIMARY KEY CIDPRDATA TAG CIDPRDATA COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON DTOS(DPAYDATE) TAG DPAYDATE COLLATE 'MACHINE'
INDEX ON DPRDEND TAG DPRDEND COLLATE 'MACHINE'
INDEX ON CEMPID+DTOS(DPRDEND) TAG EMPDATE COLLATE 'MACHINE'

***** Change properties for PRDATA *****
DBSETPROP('PRDATA.CIDPRDATA', 'Field', 'Caption', "Primary Key")
DBSETPROP('PRDATA.CEMPID', 'Field', 'Caption', "Employee ID")
DBSETPROP('PRDATA.CPAYFREQ', 'Field', 'Caption', "Pay Frequency")
DBSETPROP('PRDATA.DPRDEND', 'Field', 'Caption', "Period Ending")
DBSETPROP('PRDATA.DPAYDATE', 'Field', 'Caption', "Pay Date")
DBSETPROP('PRDATA.CINC1CODE', 'Field', 'Caption', "Income 1 Code")
DBSETPROP('PRDATA.NRATE1', 'Field', 'Caption', "Income 1 Rate")
DBSETPROP('PRDATA.CINC2CODE', 'Field', 'Caption', "Income 2 Code")
DBSETPROP('PRDATA.NRATE2', 'Field', 'Caption', "Income 2 Rate")
DBSETPROP('PRDATA.NFEDWH', 'Field', 'Caption', "Federal Withholding")
DBSETPROP('PRDATA.NFEDWHEXT', 'Field', 'Caption', "Extra Federal Withholding")
DBSETPROP('PRDATA.NFICA', 'Field', 'Caption', "FICA Withholding")
DBSETPROP('PRDATA.NMEDICARE', 'Field', 'Caption', "Medicare Withholding")
DBSETPROP('PRDATA.NSTATEWH', 'Field', 'Caption', "State Withholding")
DBSETPROP('PRDATA.NSTWHEXT', 'Field', 'Caption', "Extra State Withholding")
DBSETPROP('PRDATA.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('PRDATA.CLOCCODE1', 'Field', 'Caption', "Locality Code 1")
DBSETPROP('PRDATA.NLOCAL1', 'Field', 'Caption', "Locality 1 W/H")
DBSETPROP('PRDATA.CLOCCODE2', 'Field', 'Caption', "Locality Code 2")
DBSETPROP('PRDATA.NLOCAL2', 'Field', 'Caption', "Locality 2 W/H")
DBSETPROP('PRDATA.NTOTINC', 'Field', 'Caption', "Total Income")
DBSETPROP('PRDATA.CDEDCODE1', 'Field', 'Caption', "Deduction Code 1")
DBSETPROP('PRDATA.NDEDUCT1', 'Field', 'Caption', "Deduction Amount 1")
DBSETPROP('PRDATA.CDEDCODE2', 'Field', 'Caption', "Deduction Code 2")
DBSETPROP('PRDATA.NDEDUCT2', 'Field', 'Caption', "Deduction Amount 2")
DBSETPROP('PRDATA.CDEDCODE3', 'Field', 'Caption', "Deduction Code 3")
DBSETPROP('PRDATA.NDEDUCT3', 'Field', 'Caption', "Deduction Amount 3")
DBSETPROP('PRDATA.CDEDCODE4', 'Field', 'Caption', "Deduction Code 4")
DBSETPROP('PRDATA.NDEDUCT4', 'Field', 'Caption', "Deduction Amount 4")
DBSETPROP('PRDATA.CDEDCODE5', 'Field', 'Caption', "Deduction Code 5")
DBSETPROP('PRDATA.NDEDUCT5', 'Field', 'Caption', "Deduction Amount 5")
DBSETPROP('PRDATA.CDEDCODE6', 'Field', 'Caption', "Deduction Code 6")
DBSETPROP('PRDATA.NDEDUCT6', 'Field', 'Caption', "Deduction Amount 6")
DBSETPROP('PRDATA.NTOTDED', 'Field', 'Caption', "Total Deductions")
DBSETPROP('PRDATA.NNETPAY', 'Field', 'Caption', "Net Pay")
DBSETPROP('PRDATA.NREGHOURS', 'Field', 'Caption', "Regular Hours")
DBSETPROP('PRDATA.NREGRATE', 'Field', 'Caption', "Regular Rate")
DBSETPROP('PRDATA.NOV1HOURS', 'Field', 'Caption', "Overtime 1 Hours")
DBSETPROP('PRDATA.NOV1RATE', 'Field', 'Caption', "Overtime 1 Rate")
DBSETPROP('PRDATA.NOV1AMT', 'Field', 'Caption', "Overtime 1 Wages")
DBSETPROP('PRDATA.NOV2HOURS', 'Field', 'Caption', "Overtime 2 Hours")
DBSETPROP('PRDATA.NOV2RATE', 'Field', 'Caption', "Overtime 2 Rate")
DBSETPROP('PRDATA.NOV2AMT', 'Field', 'Caption', "Overtime 2 Wages")
DBSETPROP('PRDATA.NPAYTYPE', 'Field', 'Caption', "Pay Type")
DBSETPROP('PRDATA.NREGAMT', 'Field', 'Caption', "Regular Wages")
DBSETPROP('PRDATA.LPRINTED', 'Field', 'Caption', "Check Printed")
DBSETPROP('PRDATA.LVOUCHER', 'Field', 'Caption', "Voucher Entry")
DBSETPROP('PRDATA.CIDCHEC', 'Field', 'Caption', "Link to Check Register")
DBSETPROP('PRDATA.CBATCH', 'Field', 'Caption', "Payroll Batch")
DBSETPROP('PRDATA.NFUTA', 'Field', 'Caption', "FUTA Amount")
DBSETPROP('PRDATA.NSUTA', 'Field', 'Caption', "SUTA Amount")
DBSETPROP('PRDATA.CDEPTNO', 'Field', 'Caption', "Dept No")
DBSETPROP('PRDATA.NFEDWAGE', 'Field', 'Caption', "Federal Wages")
DBSETPROP('PRDATA.NSSWAGE', 'Field', 'Caption', "Social Security Wages")
DBSETPROP('PRDATA.NMEDWAGE', 'Field', 'Caption', "Medicare Wages")
DBSETPROP('PRDATA.NSTATEWAGE', 'Field', 'Caption', "State Wages")
DBSETPROP('PRDATA.NFUTAWAGE', 'Field', 'Caption', "FUTA Wages")
DBSETPROP('PRDATA.NSUTAWAGE', 'Field', 'Caption', "SUTA Wages")
DBSETPROP('PRDATA.NLOCWAGE1', 'Field', 'Caption', "Locality 1 Wages")
DBSETPROP('PRDATA.NLOCWAGE2', 'Field', 'Caption', "Locality 2 Wages")
DBSETPROP('PRDATA.LBONUS', 'Field', 'Caption', "Bonus Check")
DBSETPROP('PRDATA.LHISTENT', 'Field', 'Caption', "Historical Entry")
DBSETPROP('PRDATA.NNONTAXINC', 'Field', 'Caption', "Non Taxable Income")
DBSETPROP('PRDATA.CINC3CODE', 'Field', 'Caption', "Income 3 Code")
DBSETPROP('PRDATA.NRATE3', 'Field', 'Caption', "Income Rate 3")
DBSETPROP('PRDATA.CINC4CODE', 'Field', 'Caption', "Income 4 Code")
DBSETPROP('PRDATA.NRATE4', 'Field', 'Caption', "Income Rate 4")
DBSETPROP('PRDATA.CINC5CODE', 'Field', 'Caption', "Income 5 Code")
DBSETPROP('PRDATA.NRATE5', 'Field', 'Caption', "Income Rate 5")
DBSETPROP('PRDATA.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('PRDATA.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('PRDATA.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('PRDATA.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'PRDATA' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PRDATA' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PRDATA' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PREMPTAX
***** Table setup for PREMPTAX *****
CREATE TABLE 'PREMPTAX.DBF' NAME 'PREMPTAX' (CIDETAX C(8) NOT NULL, ;
                       CEMPID C(10) NOT NULL, ;
                       CIDPRTAX C(8) NOT NULL, ;
                       LEXEMPT L NOT NULL)

***** Create each index for PREMPTAX *****
INDEX ON CEMPID TAG CEMPID COLLATE 'MACHINE'
ALTER TABLE 'PREMPTAX' ADD PRIMARY KEY CIDETAX TAG CIDETAX COLLATE 'MACHINE'
INDEX ON CIDPRTAX TAG CIDPRTAX COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for PREMPTAX *****
DBSETPROP('PREMPTAX.CIDETAX', 'Field', 'Caption', "Primary Key")
DBSETPROP('PREMPTAX.CEMPID', 'Field', 'Caption', "Employee ID")
DBSETPROP('PREMPTAX.CIDPRTAX', 'Field', 'Caption', "Link To PRTAXES")
DBSETPROP('PREMPTAX.LEXEMPT', 'Field', 'Caption', "Exempt Flag")
CREATE TRIGGER ON 'PREMPTAX' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PREMPTAX' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PREMPTAX' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PREPAYD
***** Table setup for PREPAYD *****
CREATE TABLE 'PREPAYD.DBF' NAME 'PREPAYD' (IPREPAYDPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                      CBATCH C(8) NOT NULL, ;
                      CWELLID C(10) NOT NULL, ;
                      NAMOUNT N(12, 2) NOT NULL, ;
                      CACCTNO C(6) NOT NULL, ;
                      NRUNNO I NOT NULL, ;
                      CRUNYEAR C(4) NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      DEFFDATE D NOT NULL, ;
                      CRECTYPE C(1) NOT NULL, ;
                      LMANUAL L NOT NULL)

***** Create each index for PREPAYD *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON DEFFDATE TAG DEFFDATE COLLATE 'MACHINE'
ALTER TABLE 'PREPAYD' ADD PRIMARY KEY IPREPAYDPK TAG PK COLLATE 'MACHINE'
INDEX ON CRUNYEAR+PADL(TRANSFORM(NRUNNO),3,"0") TAG RUNNO COLLATE 'MACHINE'

***** Change properties for PREPAYD *****
DBSETPROP('PREPAYD.IPREPAYDPK', 'Field', 'Caption', "Primary Key")
DBSETPROP('PREPAYD.CBATCH', 'Field', 'Caption', "Hdr Foreign Key")
DBSETPROP('PREPAYD.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('PREPAYD.NAMOUNT', 'Field', 'Caption', "Prepay Amt")
DBSETPROP('PREPAYD.CACCTNO', 'Field', 'Caption', "Acct No")
DBSETPROP('PREPAYD.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('PREPAYD.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('PREPAYD.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('PREPAYD.DEFFDATE', 'Field', 'Caption', "Effective Date")
DBSETPROP('PREPAYD.CRECTYPE', 'Field', 'Caption', "Pmt Type")
DBSETPROP('PREPAYD.LMANUAL', 'Field', 'Caption', "Manual Entry")
CREATE TRIGGER ON 'PREPAYD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PREPAYD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PREPAYD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PREPAYH
***** Table setup for PREPAYH *****
CREATE TABLE 'PREPAYH.DBF' NAME 'PREPAYH' (CBATCH C(8) NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      DDATE D NOT NULL, ;
                      CIDCHEC C(8) NOT NULL, ;
                      CRECTYPE C(1) NOT NULL, ;
                      NTOTAL N(12, 2) NOT NULL, ;
                      CACCTNO C(6) NOT NULL, ;
                      CREF C(10) NOT NULL, ;
                      LNOQBPOST L NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for PREPAYH *****
ALTER TABLE 'PREPAYH' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'

***** Change properties for PREPAYH *****
DBSETPROP('PREPAYH.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('PREPAYH.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('PREPAYH.DDATE', 'Field', 'Caption', "Pmt Date")
DBSETPROP('PREPAYH.CIDCHEC', 'Field', 'Caption', "Chk Foreign Key")
DBSETPROP('PREPAYH.CRECTYPE', 'Field', 'Caption', "Rec Type")
DBSETPROP('PREPAYH.NTOTAL', 'Field', 'Caption', "Total Pmt")
DBSETPROP('PREPAYH.CACCTNO', 'Field', 'Caption', "Acct No")
DBSETPROP('PREPAYH.CREF', 'Field', 'Caption', "Ref ID")
DBSETPROP('PREPAYH.LNOQBPOST', 'Field', 'Caption', "Post to QB")
DBSETPROP('PREPAYH.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('PREPAYH.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('PREPAYH.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('PREPAYH.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'PREPAYH' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PREPAYH' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PREPAYH' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PROGHSTD
***** Table setup for PROGHSTD *****
CREATE TABLE 'PROGHSTD.DBF' NAME 'PROGHSTD' (CIDPROGH C(8) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       NPERCENTAGE N(11, 7) NOT NULL, ;
                       NAMOUNT N(12, 2) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       COWNNAME C(60) NOT NULL)

***** Create each index for PROGHSTD *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
ALTER TABLE 'PROGHSTD' ADD PRIMARY KEY CIDPROGH TAG CIDPROGH COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'

***** Change properties for PROGHSTD *****
DBSETPROP('PROGHSTD.CIDPROGH', 'Field', 'Caption', "Primary Key")
DBSETPROP('PROGHSTD.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('PROGHSTD.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('PROGHSTD.NPERCENTAGE', 'Field', 'Caption', "Percentage Ownership")
DBSETPROP('PROGHSTD.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('PROGHSTD.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('PROGHSTD.COWNNAME', 'Field', 'Caption', "Owner Name")
CREATE TRIGGER ON 'PROGHSTD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PROGHSTD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PROGHSTD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PROGHSTH
***** Table setup for PROGHSTH *****
CREATE TABLE 'PROGHSTH.DBF' NAME 'PROGHSTH' (CBATCH C(8) NOT NULL, ;
                       CPROGCODE C(10) NOT NULL, ;
                       DPOSTDATE D NOT NULL, ;
                       CREFERENCE C(30) NOT NULL, ;
                       MNOTES M NOT NULL, ;
                       CCASHACCT C(6) NOT NULL, ;
                       NDISTAMT N(12, 2) NOT NULL, ;
                       LPAID L NOT NULL, ;
                       CQBACCOUNT C(36) NOT NULL)

***** Create each index for PROGHSTH *****
ALTER TABLE 'PROGHSTH' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
INDEX ON DPOSTDATE TAG DPOSTDATE COLLATE 'MACHINE'

***** Change properties for PROGHSTH *****
DBSETPROP('PROGHSTH.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('PROGHSTH.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('PROGHSTH.DPOSTDATE', 'Field', 'Caption', "Post Date")
DBSETPROP('PROGHSTH.CREFERENCE', 'Field', 'Caption', "Reference")
DBSETPROP('PROGHSTH.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('PROGHSTH.CCASHACCT', 'Field', 'Caption', "Cash Acct")
DBSETPROP('PROGHSTH.NDISTAMT', 'Field', 'Caption', "Distribution Amount")
DBSETPROP('PROGHSTH.LPAID', 'Field', 'Caption', "Paid Flag")
DBSETPROP('PROGHSTH.CQBACCOUNT', 'Field', 'Caption', "QB Account")
CREATE TRIGGER ON 'PROGHSTH' FOR DELETE AS __ri_delete_proghsth().AND.(foxaudit())
CREATE TRIGGER ON 'PROGHSTH' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PROGHSTH' FOR UPDATE AS __ri_update_proghsth().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_PROGOPT
***** Table setup for PROGOPT *****
CREATE TABLE 'PROGOPT.DBF' NAME 'PROGOPT' (CCASHACCT C(6) NOT NULL, ;
                      CEXPACCT C(6) NOT NULL, ;
                      CCHECKTYPE C(2) NOT NULL, ;
                      CCAPACCT C(36) NOT NULL, ;
                      LJVPOSTING L NOT NULL, ;
                      LDETAILPOST L NOT NULL, ;
                      CQBCASHACCT C(36) NOT NULL, ;
                      CQBEXPACCT C(36) NOT NULL, ;
                      CQBCAPACCT C(10) NOT NULL, ;
                      PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1 DEFAULT (RECNO()-1)+1)

***** Create each index for PROGOPT *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for PROGOPT *****
DBSETPROP('PROGOPT.CCASHACCT', 'Field', 'Caption', "Cash Account")
DBSETPROP('PROGOPT.CEXPACCT', 'Field', 'Caption', "Expense Account")
DBSETPROP('PROGOPT.CCHECKTYPE', 'Field', 'Caption', "Check Type")
DBSETPROP('PROGOPT.CCAPACCT', 'Field', 'Caption', "Capital Account")
DBSETPROP('PROGOPT.LJVPOSTING', 'Field', 'Caption', "JV Posting")
DBSETPROP('PROGOPT.LDETAILPOST', 'Field', 'Caption', "Detail JV Posting")
DBSETPROP('PROGOPT.CQBCASHACCT', 'Field', 'Caption', "QB Cash Acct")
DBSETPROP('PROGOPT.CQBEXPACCT', 'Field', 'Caption', "QB Expense Acct")
DBSETPROP('PROGOPT.CQBCAPACCT', 'Field', 'Caption', "QB Capital Acct")
DBSETPROP('PROGOPT.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'PROGOPT' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'PROGOPT' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'PROGOPT' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_PROGRAMS
***** Table setup for PROGRAMS *****
CREATE TABLE 'PROGRAMS.DBF' NAME 'PROGRAMS' (CPROGCODE C(10) NOT NULL, ;
                       CPROGNAME C(30) NOT NULL, ;
                       NPROGTYPE N(1, 0) NOT NULL, ;
                       LPROG1099 L NOT NULL, ;
                       DPROGSTART D NOT NULL, ;
                       MPROGNOTES M NOT NULL, ;
                       CPROGADD1 C(40) NOT NULL, ;
                       CPROGADD2 C(40) NOT NULL, ;
                       CPROGADD3 C(40) NOT NULL, ;
                       LPROGNET L NOT NULL, ;
                       CPROGTAXID C(15) NOT NULL, ;
                       NACCTMETH N(1, 0) NOT NULL, ;
                       DBEGINDATE D NOT NULL, ;
                       CEXPACCT C(6) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       NPARTNERPCT N(11, 7) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for PROGRAMS *****
ALTER TABLE 'PROGRAMS' ADD PRIMARY KEY CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
INDEX ON LPROGNET TAG LPROGNET BINARY
INDEX ON CPROGNAME TAG PROGNAME COLLATE 'MACHINE'

***** Change properties for PROGRAMS *****
DBSETPROP('PROGRAMS.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('PROGRAMS.CPROGNAME', 'Field', 'Caption', "Program Name")
DBSETPROP('PROGRAMS.NPROGTYPE', 'Field', 'Caption', "Program Type")
DBSETPROP('PROGRAMS.LPROG1099', 'Field', 'Caption', "Program Members Receive 1099s")
DBSETPROP('PROGRAMS.DPROGSTART', 'Field', 'Caption', "Date Program Started")
DBSETPROP('PROGRAMS.MPROGNOTES', 'Field', 'Caption', "Program Notes")
DBSETPROP('PROGRAMS.CPROGADD1', 'Field', 'Caption', "Address 1")
DBSETPROP('PROGRAMS.CPROGADD2', 'Field', 'Caption', "Address 2")
DBSETPROP('PROGRAMS.CPROGADD3', 'Field', 'Caption', "Address 3")
DBSETPROP('PROGRAMS.LPROGNET', 'Field', 'Caption', "Program Nets Outside of Program")
DBSETPROP('PROGRAMS.CPROGTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('PROGRAMS.NACCTMETH', 'Field', 'Caption', "Accounting Method")
DBSETPROP('PROGRAMS.DBEGINDATE', 'Field', 'Caption', "Begin Date")
DBSETPROP('PROGRAMS.CEXPACCT', 'Field', 'Caption', "Expense Acct")
DBSETPROP('PROGRAMS.COWNERID', 'Field', 'Caption', "JV Owner")
DBSETPROP('PROGRAMS.NPARTNERPCT', 'Field', 'Caption', "Owner Pct")
DBSETPROP('PROGRAMS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('PROGRAMS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('PROGRAMS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('PROGRAMS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'PROGRAMS' FOR DELETE AS __ri_delete_programs().AND.(foxaudit())
CREATE TRIGGER ON 'PROGRAMS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PROGRAMS' FOR UPDATE AS __ri_update_programs().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_PROGREL
***** Table setup for PROGREL *****
CREATE TABLE 'PROGREL.DBF' NAME 'PROGREL' (CIDPREL C(8) NOT NULL DEFAULT primarykey(), ;
                      CPROGCODE C(10) NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      NPERCENTAGE N(11, 7) NOT NULL, ;
                      DDEPOSITDATE D NOT NULL, ;
                      NAMOUNT N(12, 2) NOT NULL, ;
                      CBATCH C(8) NOT NULL, ;
                      CCASHACCT C(6) NOT NULL, ;
                      CCHECKNO C(10) NOT NULL, ;
                      CQBTXNID C(36) NOT NULL, ;
                      DEFFDATE D NOT NULL, ;
                      LNOTPOSTED L NOT NULL, ;
                      DADDED T NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      DCHANGED T NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL)

***** Create each index for PROGREL *****
ALTER TABLE 'PROGREL' ADD PRIMARY KEY CIDPREL TAG CIDPREL COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CPROGCODE+COWNERID TAG PROGINV COLLATE 'MACHINE'

***** Change properties for PROGREL *****
DBSETPROP('PROGREL.CIDPREL', 'Field', 'Caption', "Primary Key")
DBSETPROP('PROGREL.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('PROGREL.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('PROGREL.NPERCENTAGE', 'Field', 'Caption', "Percent Ownership")
DBSETPROP('PROGREL.DDEPOSITDATE', 'Field', 'Caption', "Deposit Date")
DBSETPROP('PROGREL.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('PROGREL.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('PROGREL.CCASHACCT', 'Field', 'Caption', "Ccashacct")
DBSETPROP('PROGREL.CCHECKNO', 'Field', 'Caption', "Check No")
DBSETPROP('PROGREL.CQBTXNID', 'Field', 'Caption', "QB Txn Id")
DBSETPROP('PROGREL.DEFFDATE', 'Field', 'Caption', "Effective Date")
DBSETPROP('PROGREL.LNOTPOSTED', 'Field', 'Caption', "Posted")
DBSETPROP('PROGREL.DADDED', 'Field', 'Caption', "Added")
DBSETPROP('PROGREL.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('PROGREL.DCHANGED', 'Field', 'Caption', "Changed")
DBSETPROP('PROGREL.CCHANGEDBY', 'Field', 'Caption', "Changed By")
CREATE TRIGGER ON 'PROGREL' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PROGREL' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PROGREL' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PROPT
***** Table setup for PROPT *****
CREATE TABLE 'PROPT.DBF' NAME 'PROPT' (CPRACCT C(6) NOT NULL, ;
                    CPREXPACCT C(6) NOT NULL, ;
                    NFUTARATE N(7, 4) NOT NULL, ;
                    NFUTALIMIT N(9, 2) NOT NULL, ;
                    CFUTALIAB C(6) NOT NULL, ;
                    CFUTAEXP C(6) NOT NULL, ;
                    CPRCHECK C(10) NOT NULL, ;
                    CCHECKTYPE C(2) NOT NULL, ;
                    LSUMJOURN L NOT NULL, ;
                    LCALCFUTA L NOT NULL, ;
                    LCALCSUTA L NOT NULL, ;
                    CBONEXPACCT C(6) NOT NULL, ;
                    CCOMPID C(10) NOT NULL, ;
                    CDDORIGIN C(10) NOT NULL, ;
                    CDDORIGINNAME C(23) NOT NULL, ;
                    CDDDEST C(10) NOT NULL, ;
                    CDDDESTNAME C(23) NOT NULL, ;
                    LDDALTERNATE L NOT NULL, ;
                    LLUMPSUMPOST L NOT NULL, ;
                    PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1 DEFAULT (RECNO()-1)+1)

***** Create each index for PROPT *****
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for PROPT *****
DBSETPROP('PROPT.CPRACCT', 'Field', 'Caption', "Payroll Cash Account")
DBSETPROP('PROPT.CPREXPACCT', 'Field', 'Caption', "Default Expense Account")
DBSETPROP('PROPT.NFUTARATE', 'Field', 'Caption', "FUTA Rate")
DBSETPROP('PROPT.NFUTALIMIT', 'Field', 'Caption', "FUTA Limit")
DBSETPROP('PROPT.CFUTALIAB', 'Field', 'Caption', "FUTA Liability Account")
DBSETPROP('PROPT.CFUTAEXP', 'Field', 'Caption', "FUTA Expense Account")
DBSETPROP('PROPT.CPRCHECK', 'Field', 'Caption', "Next Payroll Check No")
DBSETPROP('PROPT.CCHECKTYPE', 'Field', 'Caption', "Payroll Check Type")
DBSETPROP('PROPT.LSUMJOURN', 'Field', 'Caption', "Create Summary Journal Entries")
DBSETPROP('PROPT.LCALCFUTA', 'Field', 'Caption', "Calculate FUTA")
DBSETPROP('PROPT.LCALCSUTA', 'Field', 'Caption', "Calculate SUTA")
DBSETPROP('PROPT.CBONEXPACCT', 'Field', 'Caption', "Bonus Expense Account")
DBSETPROP('PROPT.CCOMPID', 'Field', 'Caption', "Company ID")
DBSETPROP('PROPT.CDDORIGIN', 'Field', 'Caption', "DD Origin")
DBSETPROP('PROPT.CDDORIGINNAME', 'Field', 'Caption', "DD Origin Name")
DBSETPROP('PROPT.CDDDEST', 'Field', 'Caption', "DD Destination")
DBSETPROP('PROPT.CDDDESTNAME', 'Field', 'Caption', "DD Dest Name")
DBSETPROP('PROPT.LDDALTERNATE', 'Field', 'Caption', "Use DD Alternate Settings")
DBSETPROP('PROPT.LLUMPSUMPOST', 'Field', 'Caption', "Post Lump  Sum To G/L")
DBSETPROP('PROPT.PK', 'Field', 'Caption', "Pk")
CREATE TRIGGER ON 'PROPT' FOR DELETE AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'PROPT' FOR INSERT AS foxaudit(pk,,,"pk")
CREATE TRIGGER ON 'PROPT' FOR UPDATE AS foxaudit(pk,,,"pk")
ENDFUNC

FUNCTION MakeTable_PRSUTA
***** Table setup for PRSUTA *****
CREATE TABLE 'PRSUTA.DBF' NAME 'PRSUTA' (IIDSUTA I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                     CSTATE C(2) NOT NULL, ;
                     NCOMPRATE N(9, 5) NOT NULL, ;
                     NEMPRATE N(9, 5) NOT NULL, ;
                     NLIMIT N(9, 2) NOT NULL, ;
                     CSUTALIAB C(6) NOT NULL, ;
                     CSUTAEXP C(6) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for PRSUTA *****
INDEX ON CSTATE TAG CSTATE COLLATE 'MACHINE'
ALTER TABLE 'PRSUTA' ADD PRIMARY KEY IIDSUTA TAG PK COLLATE 'MACHINE'

***** Change properties for PRSUTA *****
DBSETPROP('PRSUTA.IIDSUTA', 'Field', 'Caption', "PK")
DBSETPROP('PRSUTA.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('PRSUTA.NCOMPRATE', 'Field', 'Caption', "Company Rate")
DBSETPROP('PRSUTA.NEMPRATE', 'Field', 'Caption', "Employee Rate")
DBSETPROP('PRSUTA.NLIMIT', 'Field', 'Caption', "Limit")
DBSETPROP('PRSUTA.CSUTALIAB', 'Field', 'Caption', "Liability Acct")
DBSETPROP('PRSUTA.CSUTAEXP', 'Field', 'Caption', "Expense Account")
DBSETPROP('PRSUTA.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('PRSUTA.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('PRSUTA.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('PRSUTA.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'PRSUTA' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PRSUTA' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PRSUTA' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PRTAXES
***** Table setup for PRTAXES *****
CREATE TABLE 'PRTAXES.DBF' NAME 'PRTAXES' (CIDPRTAX C(8) NOT NULL, ;
                      CTAXTYPE C(30) NOT NULL, ;
                      CTAXNAME C(25) NOT NULL, ;
                      NRATE N(7, 4) NOT NULL, ;
                      CVENDORID C(10) NOT NULL, ;
                      CSTATE C(2) NOT NULL, ;
                      CLIABEMP C(6) NOT NULL, ;
                      CLIABCOMP C(6) NOT NULL, ;
                      CEXPCOMP C(6) NOT NULL, ;
                      LLOCAL L NOT NULL, ;
                      NWAGELIM N(6, 0) NOT NULL, ;
                      CSTATEID C(15) NOT NULL, ;
                      NCOMPRATE N(7, 4) NOT NULL)

***** Create each index for PRTAXES *****
ALTER TABLE 'PRTAXES' ADD PRIMARY KEY CIDPRTAX TAG CIDPRTAX COLLATE 'MACHINE'
INDEX ON CTAXNAME TAG CTAXNAME COLLATE 'MACHINE'
INDEX ON CTAXTYPE TAG CTAXTYPE COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for PRTAXES *****
DBSETPROP('PRTAXES.CIDPRTAX', 'Field', 'Caption', "Primary Key")
DBSETPROP('PRTAXES.CTAXTYPE', 'Field', 'Caption', "Tax Type")
DBSETPROP('PRTAXES.CTAXNAME', 'Field', 'Caption', "Tax Name")
DBSETPROP('PRTAXES.NRATE', 'Field', 'Caption', "Rate")
DBSETPROP('PRTAXES.CVENDORID', 'Field', 'Caption', "Vendor ID")
DBSETPROP('PRTAXES.CSTATE', 'Field', 'Caption', "State Code for State W/H")
DBSETPROP('PRTAXES.CLIABEMP', 'Field', 'Caption', "Employee Liability Account")
DBSETPROP('PRTAXES.CLIABCOMP', 'Field', 'Caption', "Company Liability Account")
DBSETPROP('PRTAXES.CEXPCOMP', 'Field', 'Caption', "Company Expense Account")
DBSETPROP('PRTAXES.LLOCAL', 'Field', 'Caption', "Local Flag")
DBSETPROP('PRTAXES.NWAGELIM', 'Field', 'Caption', "Wage Limit")
DBSETPROP('PRTAXES.CSTATEID', 'Field', 'Caption', "State")
DBSETPROP('PRTAXES.NCOMPRATE', 'Field', 'Caption', "Company SS Rate")
CREATE TRIGGER ON 'PRTAXES' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PRTAXES' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PRTAXES' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_PRW2FILE
***** Table setup for PRW2FILE *****
CREATE TABLE 'PRW2FILE.DBF' NAME 'PRW2FILE' (CIDW2 C(8) NOT NULL, ;
                       CYEAR C(4) NOT NULL, ;
                       CEMPID C(10) NOT NULL, ;
                       NWAGES N(12, 2) NOT NULL, ;
                       NFEDWH N(12, 2) NOT NULL, ;
                       NSSWAGE N(12, 2) NOT NULL, ;
                       NFICA N(12, 2) NOT NULL, ;
                       NMEDICWAGE N(12, 2) NOT NULL, ;
                       NMEDICARE N(12, 2) NOT NULL, ;
                       CSTATE1 C(2) NOT NULL, ;
                       CSTATEID1 C(15) NOT NULL, ;
                       NSTATE1WG N(12, 2) NOT NULL, ;
                       NSTATETAX1 N(12, 2) NOT NULL, ;
                       CSTATE2 C(2) NOT NULL, ;
                       CSTATEID2 C(15) NOT NULL, ;
                       NSTATE2WG N(12, 2) NOT NULL, ;
                       NSTATETAX2 N(12, 2) NOT NULL, ;
                       CLOCAL1 C(20) NOT NULL, ;
                       NLOCALWG1 N(12, 2) NOT NULL, ;
                       NLOCALTAX1 N(12, 2) NOT NULL, ;
                       CLOCAL2 C(20) NOT NULL, ;
                       NLOCALWG2 N(12, 2) NOT NULL, ;
                       NLOCALTAX2 N(12, 2) NOT NULL, ;
                       CADDRESS1 C(40) NOT NULL, ;
                       CADDRESS2 C(40) NOT NULL, ;
                       CCITY C(20) NOT NULL, ;
                       CSTATE C(2) NOT NULL, ;
                       CZIPCODE C(10) NOT NULL, ;
                       CCOUNTRY C(2) NOT NULL, ;
                       CEMPTAXID C(11) NOT NULL, ;
                       CEMPNAME C(40) NOT NULL, ;
                       NBOX13 N(12, 2) NOT NULL, ;
                       CBOX13 C(1) NOT NULL, ;
                       LPENSION L NOT NULL, ;
                       LDEFERRED L NOT NULL, ;
                       NBOX10 N(12, 2) NOT NULL, ;
                       MBOX14 M NOT NULL, ;
                       CBOX12A C(2) NOT NULL, ;
                       NBOX12A N(12, 2) NOT NULL, ;
                       CBOX12B C(2) NOT NULL, ;
                       NBOX12B N(12, 2) NOT NULL, ;
                       CBOX12C C(2) NOT NULL, ;
                       NBOX12C N(12, 2) NOT NULL, ;
                       CBOX12D C(2) NOT NULL, ;
                       NBOX12D N(12, 2) NOT NULL, ;
                       NSSTIPS N(12, 2) NOT NULL, ;
                       NTIPSALLOC N(12, 2) NOT NULL, ;
                       LSTATUTORY L NOT NULL, ;
                       L3RDPARTYSICK L NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for PRW2FILE *****
ALTER TABLE 'PRW2FILE' ADD PRIMARY KEY CIDW2 TAG CIDW2 COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CYEAR+CEMPID TAG YEAREMPID COLLATE 'MACHINE'

***** Change properties for PRW2FILE *****
DBSETPROP('PRW2FILE.CIDW2', 'Field', 'Caption', "Primary Key")
DBSETPROP('PRW2FILE.CYEAR', 'Field', 'Caption', "Tax Year")
DBSETPROP('PRW2FILE.CEMPID', 'Field', 'Caption', "Employee ID")
DBSETPROP('PRW2FILE.NWAGES', 'Field', 'Caption', "Total Wages")
DBSETPROP('PRW2FILE.NFEDWH', 'Field', 'Caption', "Federal Withholding")
DBSETPROP('PRW2FILE.NSSWAGE', 'Field', 'Caption', "FICA Wages")
DBSETPROP('PRW2FILE.NFICA', 'Field', 'Caption', "FICA Withholding")
DBSETPROP('PRW2FILE.NMEDICWAGE', 'Field', 'Caption', "Medicare Wages")
DBSETPROP('PRW2FILE.NMEDICARE', 'Field', 'Caption', "Medicare Withholding")
DBSETPROP('PRW2FILE.CSTATE1', 'Field', 'Caption', "State 1")
DBSETPROP('PRW2FILE.CSTATEID1', 'Field', 'Caption', "State Tax ID 1")
DBSETPROP('PRW2FILE.NSTATE1WG', 'Field', 'Caption', "State 1 Wages")
DBSETPROP('PRW2FILE.NSTATETAX1', 'Field', 'Caption', "State 1 Withholding")
DBSETPROP('PRW2FILE.CSTATE2', 'Field', 'Caption', "State 2")
DBSETPROP('PRW2FILE.CSTATEID2', 'Field', 'Caption', "State Tax ID 2")
DBSETPROP('PRW2FILE.NSTATE2WG', 'Field', 'Caption', "State 2 Wages")
DBSETPROP('PRW2FILE.NSTATETAX2', 'Field', 'Caption', "State 2 Withholding")
DBSETPROP('PRW2FILE.CLOCAL1', 'Field', 'Caption', "Locality 1")
DBSETPROP('PRW2FILE.NLOCALWG1', 'Field', 'Caption', "Local 1 Wages")
DBSETPROP('PRW2FILE.NLOCALTAX1', 'Field', 'Caption', "Local 1 Withholding")
DBSETPROP('PRW2FILE.CLOCAL2', 'Field', 'Caption', "Locality 2")
DBSETPROP('PRW2FILE.NLOCALWG2', 'Field', 'Caption', "Local 2 Wages")
DBSETPROP('PRW2FILE.NLOCALTAX2', 'Field', 'Caption', "Local 2 Withholding")
DBSETPROP('PRW2FILE.CADDRESS1', 'Field', 'Caption', "Employee Address 1")
DBSETPROP('PRW2FILE.CADDRESS2', 'Field', 'Caption', "Employee Address 2")
DBSETPROP('PRW2FILE.CCITY', 'Field', 'Caption', "Employee City")
DBSETPROP('PRW2FILE.CSTATE', 'Field', 'Caption', "Employee State")
DBSETPROP('PRW2FILE.CZIPCODE', 'Field', 'Caption', "Employee Zip Code")
DBSETPROP('PRW2FILE.CCOUNTRY', 'Field', 'Caption', "Country")
DBSETPROP('PRW2FILE.CEMPTAXID', 'Field', 'Caption', "Employee Tax ID")
DBSETPROP('PRW2FILE.CEMPNAME', 'Field', 'Caption', "Employee Name")
DBSETPROP('PRW2FILE.NBOX13', 'Field', 'Caption', "Box 13 Amount")
DBSETPROP('PRW2FILE.CBOX13', 'Field', 'Caption', "Box 13 Code")
DBSETPROP('PRW2FILE.LPENSION', 'Field', 'Caption', "Pension Flag")
DBSETPROP('PRW2FILE.LDEFERRED', 'Field', 'Caption', "Deferred Flag")
DBSETPROP('PRW2FILE.NBOX10', 'Field', 'Caption', "Box 14")
DBSETPROP('PRW2FILE.MBOX14', 'Field', 'Caption', "Box 14 Other")
DBSETPROP('PRW2FILE.CBOX12A', 'Field', 'Caption', "Cbox12a")
DBSETPROP('PRW2FILE.NBOX12A', 'Field', 'Caption', "Nbox12a")
DBSETPROP('PRW2FILE.CBOX12B', 'Field', 'Caption', "Cbox12b")
DBSETPROP('PRW2FILE.NBOX12B', 'Field', 'Caption', "Nbox12b")
DBSETPROP('PRW2FILE.CBOX12C', 'Field', 'Caption', "Cbox12c")
DBSETPROP('PRW2FILE.NBOX12C', 'Field', 'Caption', "Nbox12c")
DBSETPROP('PRW2FILE.CBOX12D', 'Field', 'Caption', "Cbox12d")
DBSETPROP('PRW2FILE.NBOX12D', 'Field', 'Caption', "Nbox12d")
DBSETPROP('PRW2FILE.NSSTIPS', 'Field', 'Caption', "SS TIPS (Box 7)")
DBSETPROP('PRW2FILE.NTIPSALLOC', 'Field', 'Caption', "Tips Allocated (Box 8)")
DBSETPROP('PRW2FILE.LSTATUTORY', 'Field', 'Caption', "Lstatutory")
DBSETPROP('PRW2FILE.L3RDPARTYSICK', 'Field', 'Caption', "L3rdpartysick")
DBSETPROP('PRW2FILE.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('PRW2FILE.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('PRW2FILE.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('PRW2FILE.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'PRW2FILE' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PRW2FILE' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PRW2FILE' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_RECONSAV
***** Table setup for RECONSAV *****
CREATE TABLE 'RECONSAV.DBF' NAME 'RECONSAV' (CIDCHEC C(8) NOT NULL, ;
                       DRECDATE D NOT NULL, ;
                       NENDBAL N(12, 2) NOT NULL, ;
                       CACCTNO C(6) NOT NULL)

***** Create each index for RECONSAV *****
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON CIDCHEC TAG CIDCHEC COLLATE 'MACHINE'

***** Change properties for RECONSAV *****
DBSETPROP('RECONSAV.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('RECONSAV.DRECDATE', 'Field', 'Caption', "Reconciliation Date")
DBSETPROP('RECONSAV.NENDBAL', 'Field', 'Caption', "Ending Balance")
DBSETPROP('RECONSAV.CACCTNO', 'Field', 'Caption', "Cash Account")
ENDFUNC

FUNCTION MakeTable_REVCAT
***** Table setup for REVCAT *****
CREATE TABLE 'REVCAT.DBF' NAME 'REVCAT' (CREVTYPE C(5) NOT NULL, ;
                     CREVDESC C(20) NOT NULL, ;
                     CREVCLASS C(2) NOT NULL, ;
                     CDRACCTNO C(6) NOT NULL, ;
                     CCRACCTNOW C(6) NOT NULL, ;
                     CCRACCTNOL C(6) NOT NULL, ;
                     CCRACCTNOO C(6) NOT NULL)

***** Create each index for REVCAT *****
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
ALTER TABLE 'REVCAT' ADD PRIMARY KEY CREVTYPE TAG CREVTYPE COLLATE 'MACHINE'
INDEX ON CREVDESC TAG CREVDESC COLLATE 'MACHINE'

***** Change properties for REVCAT *****
DBSETPROP('REVCAT.CREVTYPE', 'Field', 'Caption', "Revenue Type")
DBSETPROP('REVCAT.CREVDESC', 'Field', 'Caption', "Revenue Description")
DBSETPROP('REVCAT.CREVCLASS', 'Field', 'Caption', "Rev Int Class")
DBSETPROP('REVCAT.CDRACCTNO', 'Field', 'Caption', "Debit Account")
DBSETPROP('REVCAT.CCRACCTNOW', 'Field', 'Caption', "Working Int Credit Account")
DBSETPROP('REVCAT.CCRACCTNOL', 'Field', 'Caption', "Landowner Credit Account")
DBSETPROP('REVCAT.CCRACCTNOO', 'Field', 'Caption', "Override Credit Account")
CREATE TRIGGER ON 'REVCAT' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'REVCAT' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'REVCAT' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_REVSRC
***** Table setup for REVSRC *****
CREATE TABLE 'REVSRC.DBF' NAME 'REVSRC' (CREVKEY C(10) NOT NULL, ;
                     CREVNAME C(30) NOT NULL, ;
                     NDEFPRICE N(9, 5) NOT NULL, ;
                     CADDRESS1 C(40) NOT NULL, ;
                     CADDRESS2 C(40) NOT NULL, ;
                     CADDRESS3 C(40) NOT NULL, ;
                     CPHONE C(14) NOT NULL, ;
                     CFAXPHONE C(14) NOT NULL, ;
                     CIDCOMP C(8) NOT NULL, ;
                     CENERGYLINKID C(10) NOT NULL, ;
                     CLISTID C(36) NOT NULL, ;
                     LVERIFIED L NOT NULL)

***** Create each index for REVSRC *****
ALTER TABLE 'REVSRC' ADD PRIMARY KEY CREVKEY TAG CREVKEY COLLATE 'MACHINE'
INDEX ON UPPER(CREVNAME) TAG CREVNAME COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for REVSRC *****
DBSETPROP('REVSRC.CREVKEY', 'Field', 'Caption', "Primary Key")
DBSETPROP('REVSRC.CREVNAME', 'Field', 'Caption', "Purchaser Name")
DBSETPROP('REVSRC.NDEFPRICE', 'Field', 'Caption', "Default Price")
DBSETPROP('REVSRC.CADDRESS1', 'Field', 'Caption', "Address 1")
DBSETPROP('REVSRC.CADDRESS2', 'Field', 'Caption', "Address 2")
DBSETPROP('REVSRC.CADDRESS3', 'Field', 'Caption', "Address 3")
DBSETPROP('REVSRC.CPHONE', 'Field', 'Caption', "Phone Number")
DBSETPROP('REVSRC.CFAXPHONE', 'Field', 'Caption', "Fax Number")
DBSETPROP('REVSRC.CIDCOMP', 'Field', 'Caption', "Cidcomp")
DBSETPROP('REVSRC.CENERGYLINKID', 'Field', 'Caption', "EnergyLink ID")
DBSETPROP('REVSRC.CLISTID', 'Field', 'Caption', "QB ID")
DBSETPROP('REVSRC.LVERIFIED', 'Field', 'Caption', "Verified")
CREATE TRIGGER ON 'REVSRC' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'REVSRC' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'REVSRC' FOR UPDATE AS __ri_update_revsrc().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_ROUNDTMP
***** Table setup for ROUNDTMP *****
CREATE TABLE 'ROUNDTMP.DBF' NAME 'ROUNDTMP' (CWELLID C(10) NOT NULL, ;
                       LUSED L NOT NULL, ;
                       CWELLNAME C(40) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       COWNNAME C(40) NOT NULL, ;
                       NGASREV N(12, 2) NOT NULL, ;
                       NOILREV N(12, 2) NOT NULL, ;
                       NTRPREV N(12, 2) NOT NULL, ;
                       NOTHREV N(12, 2) NOT NULL, ;
                       NCOMPRESS N(12, 2) NOT NULL, ;
                       NGATHER N(12, 2) NOT NULL, ;
                       NMISCREV1 N(12, 2) NOT NULL, ;
                       NMISCREV2 N(12, 2) NOT NULL, ;
                       NEXPENSE N(12, 2) NOT NULL, ;
                       NTOTALE1 N(12, 2) NOT NULL, ;
                       NTOTALE2 N(12, 2) NOT NULL, ;
                       NTOTALE3 N(12, 2) NOT NULL, ;
                       NTOTALE4 N(12, 2) NOT NULL, ;
                       NTOTALE5 N(12, 2) NOT NULL, ;
                       NTOTALEA N(12, 2) NOT NULL, ;
                       NTOTALEB N(12, 2) NOT NULL, ;
                       NOILTAX1 N(12, 2) NOT NULL, ;
                       NOILTAX2 N(12, 2) NOT NULL, ;
                       NOILTAX3 N(12, 2) NOT NULL, ;
                       NOILTAX4 N(12, 2) NOT NULL, ;
                       NGASTAX1 N(12, 2) NOT NULL, ;
                       NGASTAX2 N(12, 2) NOT NULL, ;
                       NGASTAX3 N(12, 2) NOT NULL, ;
                       NGASTAX4 N(12, 2) NOT NULL, ;
                       NOTHTAX1 N(12, 2) NOT NULL, ;
                       NOTHTAX2 N(12, 2) NOT NULL, ;
                       NOTHTAX3 N(12, 2) NOT NULL, ;
                       NOTHTAX4 N(12, 2) NOT NULL, ;
                       CDMBATCH C(8) NOT NULL, ;
                       NMKTGEXP N(12, 2) NOT NULL, ;
                       NPLUGEXP N(12, 2) NOT NULL)

***** Create each index for ROUNDTMP *****
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'

***** Change properties for ROUNDTMP *****
DBSETPROP('ROUNDTMP.NTOTALEA', 'Field', 'Caption', "Ntotalea")
DBSETPROP('ROUNDTMP.NTOTALEB', 'Field', 'Caption', "Ntotaleb")
DBSETPROP('ROUNDTMP.NMKTGEXP', 'Field', 'Caption', "Marketing Expense")
DBSETPROP('ROUNDTMP.NPLUGEXP', 'Field', 'Caption', "Plugging Exp")
ENDFUNC

FUNCTION MakeTable_RUNCLOSE
***** Table setup for RUNCLOSE *****
CREATE TABLE 'RUNCLOSE.DBF' NAME 'RUNCLOSE' (CDMBATCH C(8) NOT NULL, ;
                       NREVENTERED N(12, 2) NOT NULL, ;
                       NREVALLOCATED N(12, 2) NOT NULL, ;
                       NEXPENTERED N(12, 2) NOT NULL, ;
                       NEXPALLOCATED N(12, 2) NOT NULL, ;
                       NJEXPALLOCATED N(12, 2) NOT NULL, ;
                       NJIBINVCOUNT I NOT NULL, ;
                       NJIBINVAMOUNT N(12, 2) NOT NULL, ;
                       NOWNCHKCOUNT I NOT NULL, ;
                       NOWNCHKAMT N(12, 2) NOT NULL, ;
                       NDIRECTDEP N(12, 2) NOT NULL, ;
                       NDIRECTDEPCNT I NOT NULL, ;
                       NOWNERPOST N(12, 2) NOT NULL, ;
                       NVENDORPOST N(12, 2) NOT NULL, ;
                       NVENDCHKCOUNT I NOT NULL, ;
                       NVENDCHKAMT N(12, 2) NOT NULL, ;
                       NSEVTAXWELL N(9, 2) NOT NULL, ;
                       NSEVTAXOWN N(9, 2) NOT NULL, ;
                       NGATHERING N(12, 2) NOT NULL, ;
                       NCOMPRESSION N(12, 2) NOT NULL, ;
                       NDEFPRIOR N(12, 2) NOT NULL, ;
                       NDEFCURR N(12, 2) NOT NULL, ;
                       NMINPRIOR N(12, 2) NOT NULL, ;
                       NMINCURR N(12, 2) NOT NULL, ;
                       NHOLDPRIOR N(12, 2) NOT NULL, ;
                       NHOLDCURR N(12, 2) NOT NULL, ;
                       NBACKWITH N(12, 2) NOT NULL, ;
                       NTAXWITH N(12, 2) NOT NULL, ;
                       NDEFBEFORE N(12, 2) NOT NULL, ;
                       NDEFAFTER N(12, 2) NOT NULL, ;
                       NMINBEFORE N(12, 2) NOT NULL, ;
                       NMINAFTER N(12, 2) NOT NULL, ;
                       NHOLDSBEFORE N(12, 2) NOT NULL, ;
                       NHOLDSAFTER N(12, 2) NOT NULL, ;
                       CREVPRODPRDS C(80) NOT NULL, ;
                       CEXPPRODPRDS C(80) NOT NULL, ;
                       DREVENUE D NOT NULL, ;
                       DEXPENSE D NOT NULL, ;
                       DPOSTDATE D NOT NULL, ;
                       NDEFTRANSFER N(12, 2) NOT NULL, ;
                       NMINTRANSFER N(12, 2) NOT NULL, ;
                       CRUNTIME V(80) NOT NULL, ;
                       NFLATRATE N(12, 2) NOT NULL, ;
                       NPLUGGINGFUND N(12, 2) NOT NULL, ;
                       NPARTNERPOST N(12, 2) NOT NULL)

***** Create each index for RUNCLOSE *****

***** Change properties for RUNCLOSE *****
DBSETPROP('RUNCLOSE.NDEFTRANSFER', 'Field', 'Caption', "Ndeftransfer")
DBSETPROP('RUNCLOSE.NMINTRANSFER', 'Field', 'Caption', "Nmintransfer")
DBSETPROP('RUNCLOSE.CRUNTIME', 'Field', 'Caption', "Close Duration")
DBSETPROP('RUNCLOSE.NFLATRATE', 'Field', 'Caption', "Flat Rates")
DBSETPROP('RUNCLOSE.NPLUGGINGFUND', 'Field', 'Caption', "Plugging Fund")
DBSETPROP('RUNCLOSE.NPARTNERPOST', 'Field', 'Caption', "Partner Posting")
ENDFUNC

FUNCTION MakeTable_SALESTX
***** Table setup for SALESTX *****
CREATE TABLE 'SALESTX.DBF' NAME 'SALESTX' (CTAXCODE C(10) NOT NULL, ;
                      CENTITY C(20) NOT NULL, ;
                      NTAXRATE N(7, 5) NOT NULL, ;
                      LDEFTAX L NOT NULL)

***** Create each index for SALESTX *****
INDEX ON CENTITY TAG CENTITY COLLATE 'MACHINE'
ALTER TABLE 'SALESTX' ADD PRIMARY KEY CTAXCODE TAG CTAXCODE COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for SALESTX *****
DBSETPROP('SALESTX.CTAXCODE', 'Field', 'Caption', "Sales Tax Code")
DBSETPROP('SALESTX.CENTITY', 'Field', 'Caption', "Entity")
DBSETPROP('SALESTX.NTAXRATE', 'Field', 'Caption', "Tax Rate")
DBSETPROP('SALESTX.LDEFTAX', 'Field', 'Caption', "Default Tax Flag")
CREATE TRIGGER ON 'SALESTX' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'SALESTX' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'SALESTX' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_SETTLEMENTNOTES
***** Table setup for SETTLEMENTNOTES *****
CREATE TABLE 'SETTLEMENTNOTES.DBF' NAME 'SETTLEMENTNOTES' (IPRIMARY I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                              CDESCRIPTION C(40) NOT NULL, ;
                              MNOTES M NOT NULL, ;
                              COWNERID C(10) NOT NULL, ;
                              CRUNYEAR C(4) NOT NULL, ;
                              NRUNNO I NOT NULL)

***** Create each index for SETTLEMENTNOTES *****
INDEX ON IPRIMARY TAG PK COLLATE 'MACHINE'

***** Change properties for SETTLEMENTNOTES *****
DBSETPROP('SETTLEMENTNOTES.IPRIMARY', 'Field', 'Caption', "PK")
DBSETPROP('SETTLEMENTNOTES.CDESCRIPTION', 'Field', 'Caption', "Description")
DBSETPROP('SETTLEMENTNOTES.MNOTES', 'Field', 'Caption', "Mnotes")
DBSETPROP('SETTLEMENTNOTES.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('SETTLEMENTNOTES.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('SETTLEMENTNOTES.NRUNNO', 'Field', 'Caption', "Run No")
CREATE TRIGGER ON 'SETTLEMENTNOTES' FOR DELETE AS foxaudit(iprimary,,,"pk")
CREATE TRIGGER ON 'SETTLEMENTNOTES' FOR INSERT AS foxaudit(iprimary,,,"pk")
CREATE TRIGGER ON 'SETTLEMENTNOTES' FOR UPDATE AS foxaudit(iprimary,,,"pk")
ENDFUNC

FUNCTION MakeTable_SEVTAX
***** Table setup for SEVTAX *****
CREATE TABLE 'SEVTAX.DBF' NAME 'SEVTAX' (CTABLE C(2) NOT NULL, ;
                     CDESCRIPTION C(40) NOT NULL, ;
                     NTAXBBL1 N(8, 6) NOT NULL, ;
                     CNAMEBBL1 C(30) NOT NULL, ;
                     NTAXMCF1 N(8, 6) NOT NULL, ;
                     CNAMEMCF1 C(30) NOT NULL, ;
                     NTAXOTH1 N(8, 6) NOT NULL, ;
                     CNAMEOTH1 C(30) NOT NULL, ;
                     CMETHODBBL1 C(1) NOT NULL, ;
                     CMETHODMCF1 C(1) NOT NULL, ;
                     CMETHODOTH1 C(1) NOT NULL, ;
                     NTAXBBL2 N(8, 6) NOT NULL, ;
                     CNAMEBBL2 C(30) NOT NULL, ;
                     NTAXMCF2 N(8, 6) NOT NULL, ;
                     CNAMEMCF2 C(30) NOT NULL, ;
                     NTAXOTH2 N(8, 6) NOT NULL, ;
                     CNAMEOTH2 C(30) NOT NULL, ;
                     CMETHODBBL2 C(1) NOT NULL, ;
                     CMETHODMCF2 C(1) NOT NULL, ;
                     CMETHODOTH2 C(1) NOT NULL, ;
                     NTAXBBL3 N(8, 6) NOT NULL, ;
                     CNAMEBBL3 C(30) NOT NULL, ;
                     NTAXMCF3 N(8, 6) NOT NULL, ;
                     CNAMEMCF3 C(30) NOT NULL, ;
                     NTAXOTH3 N(8, 6) NOT NULL, ;
                     CNAMEOTH3 C(30) NOT NULL, ;
                     CMETHODBBL3 C(1) NOT NULL, ;
                     CMETHODMCF3 C(1) NOT NULL, ;
                     CMETHODOTH3 C(1) NOT NULL, ;
                     NTAXBBL4 N(8, 6) NOT NULL, ;
                     CNAMEBBL4 C(30) NOT NULL, ;
                     NTAXMCF4 N(8, 6) NOT NULL, ;
                     CNAMEMCF4 C(30) NOT NULL, ;
                     NTAXOTH4 N(8, 6) NOT NULL, ;
                     CNAMEOTH4 C(30) NOT NULL, ;
                     CMETHODBBL4 C(1) NOT NULL, ;
                     CMETHODMCF4 C(1) NOT NULL, ;
                     CMETHODOTH4 C(1) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for SEVTAX *****
ALTER TABLE 'SEVTAX' ADD PRIMARY KEY CTABLE TAG CTABLE COLLATE 'MACHINE'

***** Change properties for SEVTAX *****
DBSETPROP('SEVTAX.CTABLE', 'Field', 'Caption', "Table Code")
DBSETPROP('SEVTAX.CDESCRIPTION', 'Field', 'Caption', "Description")
DBSETPROP('SEVTAX.NTAXBBL1', 'Field', 'Caption', "Oil Tax 1")
DBSETPROP('SEVTAX.CNAMEBBL1', 'Field', 'Caption', "Oil Tax 1 Name")
DBSETPROP('SEVTAX.NTAXMCF1', 'Field', 'Caption', "Gas Tax 1")
DBSETPROP('SEVTAX.CNAMEMCF1', 'Field', 'Caption', "Gas Tax 1 Name")
DBSETPROP('SEVTAX.NTAXOTH1', 'Field', 'Caption', "Other Product Tax 1")
DBSETPROP('SEVTAX.CNAMEOTH1', 'Field', 'Caption', "Other Product Tax Name 1")
DBSETPROP('SEVTAX.CMETHODBBL1', 'Field', 'Caption', "Oil Tax 1 Calc Method")
DBSETPROP('SEVTAX.CMETHODMCF1', 'Field', 'Caption', "Gas Calc Method 1")
DBSETPROP('SEVTAX.CMETHODOTH1', 'Field', 'Caption', "Other Product Calc 1")
DBSETPROP('SEVTAX.NTAXBBL2', 'Field', 'Caption', "Oil Tax 2")
DBSETPROP('SEVTAX.CNAMEBBL2', 'Field', 'Caption', "Oil Tax 2 name")
DBSETPROP('SEVTAX.NTAXMCF2', 'Field', 'Caption', "Gas Tax 2")
DBSETPROP('SEVTAX.CNAMEMCF2', 'Field', 'Caption', "Gas Tax 2 Name")
DBSETPROP('SEVTAX.NTAXOTH2', 'Field', 'Caption', "Other Product Tax 2")
DBSETPROP('SEVTAX.CNAMEOTH2', 'Field', 'Caption', "Other Product Tax Name 2")
DBSETPROP('SEVTAX.CMETHODBBL2', 'Field', 'Caption', "Oil Tax 2 Calc Method")
DBSETPROP('SEVTAX.CMETHODMCF2', 'Field', 'Caption', "Gas Tax 2 Calc Method")
DBSETPROP('SEVTAX.CMETHODOTH2', 'Field', 'Caption', "Other Tax 2 Calc Method")
DBSETPROP('SEVTAX.NTAXBBL3', 'Field', 'Caption', "Oil Tax 3")
DBSETPROP('SEVTAX.CNAMEBBL3', 'Field', 'Caption', "Oil Tax 3 Name")
DBSETPROP('SEVTAX.NTAXMCF3', 'Field', 'Caption', "Gas Tax 3")
DBSETPROP('SEVTAX.CNAMEMCF3', 'Field', 'Caption', "Gas Tax Name 2")
DBSETPROP('SEVTAX.NTAXOTH3', 'Field', 'Caption', "Other Product Tax 3")
DBSETPROP('SEVTAX.CNAMEOTH3', 'Field', 'Caption', "Other Product  Tax Name 3")
DBSETPROP('SEVTAX.CMETHODBBL3', 'Field', 'Caption', "Oil Tax 3 Calc Method")
DBSETPROP('SEVTAX.CMETHODMCF3', 'Field', 'Caption', "Gas Calc Method 3")
DBSETPROP('SEVTAX.CMETHODOTH3', 'Field', 'Caption', "Other Product Calc Method 3")
DBSETPROP('SEVTAX.NTAXBBL4', 'Field', 'Caption', "Oil Tax 4")
DBSETPROP('SEVTAX.CNAMEBBL4', 'Field', 'Caption', "Oil Tax Name 4")
DBSETPROP('SEVTAX.NTAXMCF4', 'Field', 'Caption', "Gas Tax 4")
DBSETPROP('SEVTAX.CNAMEMCF4', 'Field', 'Caption', "Gas Tax 4 Name")
DBSETPROP('SEVTAX.NTAXOTH4', 'Field', 'Caption', "Other Product Tax 4")
DBSETPROP('SEVTAX.CNAMEOTH4', 'Field', 'Caption', "Other Product Tax Name 4")
DBSETPROP('SEVTAX.CMETHODBBL4', 'Field', 'Caption', "Oil Tax 4 Calc Method")
DBSETPROP('SEVTAX.CMETHODMCF4', 'Field', 'Caption', "Gas Calc Method 4")
DBSETPROP('SEVTAX.CMETHODOTH4', 'Field', 'Caption', "Other Product Calc Method 4")
DBSETPROP('SEVTAX.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('SEVTAX.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('SEVTAX.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('SEVTAX.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'SEVTAX' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'SEVTAX' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'SEVTAX' FOR UPDATE AS __ri_update_sevtax().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_STATEACCOUNTS
***** Table setup for STATEACCOUNTS *****
CREATE TABLE 'STATEACCOUNTS.DBF' NAME 'STATEACCOUNTS' (CSTATE C(2) NOT NULL, ;
                            CACCOUNT C(20) NOT NULL)

***** Create each index for STATEACCOUNTS *****
INDEX ON CSTATE TAG CSTATE COLLATE 'MACHINE'

***** Change properties for STATEACCOUNTS *****
DBSETPROP('STATEACCOUNTS.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('STATEACCOUNTS.CACCOUNT', 'Field', 'Caption', "Account No")
CREATE TRIGGER ON 'STATEACCOUNTS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'STATEACCOUNTS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'STATEACCOUNTS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_STMTNOTE
***** Table setup for STMTNOTE *****
CREATE TABLE 'STMTNOTE.DBF' NAME 'STMTNOTE' (CWELLID C(10) NOT NULL, ;
                       CYEAR C(4) NOT NULL, ;
                       CPERIOD C(2) NOT NULL, ;
                       CRUNYEAR C(4) NOT NULL, ;
                       NRUNNO I NOT NULL, ;
                       MNOTES M NOT NULL, ;
                       NNOTETYPE I NOT NULL)

***** Create each index for STMTNOTE *****
INDEX ON CPERIOD TAG CPERIOD COLLATE 'MACHINE'
INDEX ON CRUNYEAR TAG CRUNYEAR COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON NRUNNO TAG NRUNNO COLLATE 'MACHINE'

***** Change properties for STMTNOTE *****
DBSETPROP('STMTNOTE.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('STMTNOTE.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('STMTNOTE.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('STMTNOTE.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('STMTNOTE.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('STMTNOTE.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('STMTNOTE.NNOTETYPE', 'Field', 'Caption', "Owner Type")
ENDFUNC

FUNCTION MakeTable_STMTONE1065
***** Table setup for STMTONE1065 *****
CREATE TABLE 'STMTONE1065.DBF' NAME 'STMTONE1065' (CYEAR C(4) NOT NULL, ;
                          CPROGCODE C(10) NOT NULL, ;
                          CTAXCODE C(2) NOT NULL, ;
                          CDESC C(30) NOT NULL, ;
                          CCATCODE C(4) NOT NULL, ;
                          CCATEG C(30) NOT NULL, ;
                          NAMOUNT N(12, 2) NOT NULL, ;
                          CTAXID C(15) NOT NULL, ;
                          CPROGNAME C(40) NOT NULL)

***** Create each index for STMTONE1065 *****
INDEX ON CPROGCODE+CYEAR+CCATCODE TAG PK COLLATE 'MACHINE'

***** Change properties for STMTONE1065 *****
DBSETPROP('STMTONE1065.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('STMTONE1065.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('STMTONE1065.CTAXCODE', 'Field', 'Caption', "Tax Code")
DBSETPROP('STMTONE1065.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('STMTONE1065.CCATCODE', 'Field', 'Caption', "Exp Code")
DBSETPROP('STMTONE1065.CCATEG', 'Field', 'Caption', "Exp Category")
DBSETPROP('STMTONE1065.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('STMTONE1065.CTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('STMTONE1065.CPROGNAME', 'Field', 'Caption', "Program Name")
CREATE TRIGGER ON 'STMTONE1065' FOR DELETE AS foxaudit(cprogcode+cyear+ccatcode,,,"pk")
CREATE TRIGGER ON 'STMTONE1065' FOR INSERT AS foxaudit(cprogcode+cyear+ccatcode,,,"pk")
CREATE TRIGGER ON 'STMTONE1065' FOR UPDATE AS foxaudit(cprogcode+cyear+ccatcode,,,"pk")
ENDFUNC

FUNCTION MakeTable_SUSAUDIT
***** Table setup for SUSAUDIT *****
CREATE TABLE 'SUSAUDIT.DBF' NAME 'SUSAUDIT' (COWNERID C(10) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       CRUNYEAR C(4) NOT NULL, ;
                       NRUNNO I NOT NULL, ;
                       CACTION C(1) NOT NULL, ;
                       CSUSPTYPE C(1) NOT NULL DEFAULT "D", ;
                       CTYPEINV C(1) NOT NULL DEFAULT "W", ;
                       NINCOME N(9, 2) NOT NULL, ;
                       NEXPENSES N(9, 2) NOT NULL, ;
                       NTAXES N(9, 2) NOT NULL, ;
                       NTAXWITH N(12, 2) NOT NULL, ;
                       NBACKWITH N(12, 2) NOT NULL, ;
                       NAMOUNT N(12, 2) NOT NULL, ;
                       CYEAR C(4) NOT NULL, ;
                       CPERIOD C(2) NOT NULL, ;
                       DSUSPDATE D NOT NULL DEFAULT DATE(), ;
                       CTIME C(8) NOT NULL DEFAULT TIME(), ;
                       CGROUP C(2) NOT NULL DEFAULT "00", ;
                       CPROGCODE C(10) NOT NULL, ;
                       CCOMMENT C(40) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       CACCTYR C(4) NOT NULL, ;
                       CACCTPRD C(2) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       CUSERADD C(10) NOT NULL, ;
                       DCHANGED T NOT NULL, ;
                       CIDSUSA C(8) NOT NULL, ;
                       CUSERCHG C(10) NOT NULL, ;
                       DACCTDATE D NOT NULL)

***** Create each index for SUSAUDIT *****
INDEX ON CYEAR+CPERIOD+CACTION TAG AUDITKEY COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD+COWNERID+CTYPEINV+CPROGCODE+CWELLID+CACTION TAG AUDKEY COLLATE 'MACHINE'
ALTER TABLE 'SUSAUDIT' ADD PRIMARY KEY CIDSUSA TAG CIDSUSA COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for SUSAUDIT *****
DBSETPROP('SUSAUDIT.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('SUSAUDIT.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('SUSAUDIT.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('SUSAUDIT.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('SUSAUDIT.CACTION', 'Field', 'Caption', "Action")
DBSETPROP('SUSAUDIT.CSUSPTYPE', 'Field', 'Caption', "Suspense Type")
DBSETPROP('SUSAUDIT.CTYPEINV', 'Field', 'Caption', "Owner Type")
DBSETPROP('SUSAUDIT.NINCOME', 'Field', 'Caption', "Income")
DBSETPROP('SUSAUDIT.NEXPENSES', 'Field', 'Caption', "Expenses")
DBSETPROP('SUSAUDIT.NTAXES', 'Field', 'Caption', "Taxes")
DBSETPROP('SUSAUDIT.NTAXWITH', 'Field', 'Caption', "Tax Withholding")
DBSETPROP('SUSAUDIT.NBACKWITH', 'Field', 'Caption', "Backup Withholding")
DBSETPROP('SUSAUDIT.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('SUSAUDIT.CYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('SUSAUDIT.CPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('SUSAUDIT.DSUSPDATE', 'Field', 'Caption', "Suspense Date")
DBSETPROP('SUSAUDIT.CTIME', 'Field', 'Caption', "Time of Entry")
DBSETPROP('SUSAUDIT.CGROUP', 'Field', 'Caption', "Group")
DBSETPROP('SUSAUDIT.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('SUSAUDIT.CCOMMENT', 'Field', 'Caption', "Comments")
DBSETPROP('SUSAUDIT.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('SUSAUDIT.CACCTYR', 'Field', 'Caption', "Accounting Year")
DBSETPROP('SUSAUDIT.CACCTPRD', 'Field', 'Caption', "Accounting Period")
DBSETPROP('SUSAUDIT.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('SUSAUDIT.CUSERADD', 'Field', 'Caption', "Added By")
DBSETPROP('SUSAUDIT.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('SUSAUDIT.CIDSUSA', 'Field', 'Caption', "Primary Key")
DBSETPROP('SUSAUDIT.CUSERCHG', 'Field', 'Caption', "Changed By")
DBSETPROP('SUSAUDIT.DACCTDATE', 'Field', 'Caption', "Accting Date")
ENDFUNC

FUNCTION MakeTable_SUSPENSE
***** Table setup for SUSPENSE *****
CREATE TABLE 'SUSPENSE.DBF' NAME 'SUSPENSE' (CIDDISB C(8) NOT NULL, ;
                       CRECTYPE C(1) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       HYEAR C(4) NOT NULL, ;
                       HPERIOD C(2) NOT NULL, ;
                       CRUNYEAR C(4) NOT NULL, ;
                       NRUNNO I NOT NULL, ;
                       HDATE D NOT NULL, ;
                       CTYPEINV C(1) NOT NULL, ;
                       CTYPEINT C(1) NOT NULL, ;
                       CGROUP C(2) NOT NULL, ;
                       CPROGCODE C(10) NOT NULL, ;
                       CDIRECT C(1) NOT NULL, ;
                       LJIB L NOT NULL, ;
                       NINCOME N(12, 2) NOT NULL, ;
                       NMKTGEXP N(12, 2) NOT NULL, ;
                       NEXPENSE N(12, 2) NOT NULL, ;
                       NSEVTAXES N(12, 2) NOT NULL, ;
                       NNETCHECK N(12, 2) NOT NULL, ;
                       NTOTALE1 N(12, 2) NOT NULL, ;
                       NTOTALE2 N(12, 2) NOT NULL, ;
                       NTOTALE3 N(12, 2) NOT NULL, ;
                       NTOTALE4 N(12, 2) NOT NULL, ;
                       NTOTALE5 N(12, 2) NOT NULL, ;
                       NTOTALEA N(12, 2) NOT NULL, ;
                       NTOTALEB N(12, 2) NOT NULL, ;
                       NREVOIL N(11, 7) NOT NULL, ;
                       NREVGAS N(11, 7) NOT NULL, ;
                       NREVOTH N(11, 7) NOT NULL, ;
                       NREVTRP N(11, 7) NOT NULL, ;
                       NREVMISC1 N(11, 7) NOT NULL, ;
                       NREVMISC2 N(11, 7) NOT NULL, ;
                       NWORKINT N(11, 7) NOT NULL, ;
                       NINTCLASS1 N(11, 7) NOT NULL, ;
                       NINTCLASS2 N(11, 7) NOT NULL, ;
                       NINTCLASS3 N(11, 7) NOT NULL, ;
                       NINTCLASS4 N(11, 7) NOT NULL, ;
                       NINTCLASS5 N(11, 7) NOT NULL, ;
                       NACPINT N(11, 7) NOT NULL, ;
                       NBCPINT N(11, 7) NOT NULL, ;
                       NAPOINT N(11, 7) NOT NULL, ;
                       LFLAT L NOT NULL, ;
                       NFLATRATE N(7, 2) NOT NULL, ;
                       NOILREV N(10, 2) NOT NULL, ;
                       NGASREV N(10, 2) NOT NULL, ;
                       NOTHREV N(12, 2) NOT NULL, ;
                       NTRPREV N(10, 2) NOT NULL, ;
                       NMISCREV1 N(12, 2) NOT NULL, ;
                       NMISCREV2 N(12, 2) NOT NULL, ;
                       LPROGRAM L NOT NULL, ;
                       LPROGNET L NOT NULL, ;
                       LSEVPURCH L NOT NULL, ;
                       LHOLD L NOT NULL, ;
                       LONHOLD L NOT NULL, ;
                       NGATHER N(12, 2) NOT NULL, ;
                       NCOMPRESS N(12, 2) NOT NULL, ;
                       NOILEXP N(12, 2) NOT NULL, ;
                       NGASEXP N(12, 2) NOT NULL, ;
                       CACCTYR C(4) NOT NULL, ;
                       CACCTPRD C(2) NOT NULL, ;
                       NFLATFREQ I NOT NULL, ;
                       CFLATSTART C(2) NOT NULL, ;
                       NREVTAX1 N(11, 7) NOT NULL, ;
                       NREVTAX4 N(11, 7) NOT NULL, ;
                       NREVTAX7 N(11, 7) NOT NULL, ;
                       NREVTAX10 N(11, 7) NOT NULL, ;
                       NREVTAX2 N(11, 7) NOT NULL, ;
                       NREVTAX5 N(11, 7) NOT NULL, ;
                       NREVTAX8 N(11, 7) NOT NULL, ;
                       NREVTAX11 N(11, 7) NOT NULL, ;
                       NREVTAX3 N(11, 7) NOT NULL, ;
                       NREVTAX6 N(11, 7) NOT NULL, ;
                       NREVTAX9 N(11, 7) NOT NULL, ;
                       NREVTAX12 N(11, 7) NOT NULL, ;
                       NOILTAX1 N(9, 2) NOT NULL, ;
                       NOILTAX2 N(9, 2) NOT NULL, ;
                       NOILTAX3 N(9, 2) NOT NULL, ;
                       NOILTAX4 N(9, 2) NOT NULL, ;
                       NGASTAX1 N(9, 2) NOT NULL, ;
                       NGASTAX2 N(9, 2) NOT NULL, ;
                       NGASTAX3 N(9, 2) NOT NULL, ;
                       NGASTAX4 N(9, 2) NOT NULL, ;
                       NOTHTAX1 N(9, 2) NOT NULL, ;
                       NOTHTAX2 N(9, 2) NOT NULL, ;
                       NOTHTAX3 N(9, 2) NOT NULL, ;
                       NOTHTAX4 N(9, 2) NOT NULL, ;
                       NTAXWITH N(9, 2) NOT NULL, ;
                       NBACKWITH N(12, 2) NOT NULL, ;
                       CIDCHEC C(8) NOT NULL, ;
                       LUSED L NOT NULL, ;
                       LPAYOUT L NOT NULL, ;
                       CSUSPTYPE C(1) NOT NULL, ;
                       NRUNNO_IN I NOT NULL, ;
                       CRUNYEAR_IN C(4) NOT NULL, ;
                       LINTEGGL L NOT NULL, ;
                       LMANUAL L NOT NULL, ;
                       NDISBFREQ I NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       LDIRECTDEP L NOT NULL, ;
                       LTRANSFER L NOT NULL, ;
                       NPLUGEXP N(12, 2) NOT NULL, ;
                       NPLUGPCT N(11, 7) NOT NULL, ;
                       CDECK C(10) NOT NULL, ;
                       NUNITS N(8, 4) NOT NULL, ;
                       CREASON C(3) NOT NULL)

***** Create each index for SUSPENSE *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CGROUP TAG CGROUP COLLATE 'MACHINE'
ALTER TABLE 'SUSPENSE' ADD PRIMARY KEY CIDDISB TAG CIDDISB COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
INDEX ON CRECTYPE TAG CRECTYPE COLLATE 'MACHINE'
INDEX ON CRUNYEAR TAG CRUNYEAR COLLATE 'MACHINE'
INDEX ON CRUNYEAR_IN TAG CRUNYEARIN COLLATE 'MACHINE'
INDEX ON CSUSPTYPE TAG CSUSPTYPE COLLATE 'MACHINE'
INDEX ON CTYPEINV TAG CTYPEINV COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON COWNERID+CWELLID TAG INVWELL COLLATE 'MACHINE'
INDEX ON LHOLD TAG LHOLD BINARY
INDEX ON LMANUAL TAG LMANUAL BINARY
INDEX ON LONHOLD TAG LONHOLD BINARY
INDEX ON NRUNNO TAG NRUNNO COLLATE 'MACHINE'
INDEX ON NRUNNO_IN TAG NRUNNO_IN COLLATE 'MACHINE'
INDEX ON COWNERID+CRECTYPE TAG OWNER_TYPE COLLATE 'MACHINE'
INDEX ON CRUNYEAR_IN+PADL(TRANSFORM(NRUNNO_IN),3,"0") TAG RUN_IN COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED BINARY

***** Change properties for SUSPENSE *****
DBSETPROP('SUSPENSE.CIDDISB', 'Field', 'Caption', "Primary Key")
DBSETPROP('SUSPENSE.CRECTYPE', 'Field', 'Caption', "Record Type")
DBSETPROP('SUSPENSE.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('SUSPENSE.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('SUSPENSE.HYEAR', 'Field', 'Caption', "Prod Yr")
DBSETPROP('SUSPENSE.HPERIOD', 'Field', 'Caption', "Prod Prd")
DBSETPROP('SUSPENSE.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('SUSPENSE.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('SUSPENSE.HDATE', 'Field', 'Caption', "Acct Date")
DBSETPROP('SUSPENSE.CTYPEINV', 'Field', 'Caption', "Owner Type")
DBSETPROP('SUSPENSE.CTYPEINT', 'Field', 'Caption', "Int Type")
DBSETPROP('SUSPENSE.CGROUP', 'Field', 'Caption', "Group")
DBSETPROP('SUSPENSE.CPROGCODE', 'Field', 'Caption', "Prog Code")
DBSETPROP('SUSPENSE.CDIRECT', 'Field', 'Caption', "Direct Paid")
DBSETPROP('SUSPENSE.LJIB', 'Field', 'Caption', "JIB Int")
DBSETPROP('SUSPENSE.NINCOME', 'Field', 'Caption', "Revenue")
DBSETPROP('SUSPENSE.NMKTGEXP', 'Field', 'Caption', "Mkt Exp")
DBSETPROP('SUSPENSE.NEXPENSE', 'Field', 'Caption', "Op Exp")
DBSETPROP('SUSPENSE.NSEVTAXES', 'Field', 'Caption', "Sev Taxes")
DBSETPROP('SUSPENSE.NNETCHECK', 'Field', 'Caption', "Net Amt")
DBSETPROP('SUSPENSE.NTOTALE1', 'Field', 'Caption', "Class 1 Exp")
DBSETPROP('SUSPENSE.NTOTALE2', 'Field', 'Caption', "Class 2 Exp")
DBSETPROP('SUSPENSE.NTOTALE3', 'Field', 'Caption', "Class 3 Exp")
DBSETPROP('SUSPENSE.NTOTALE4', 'Field', 'Caption', "Class 4 Exp")
DBSETPROP('SUSPENSE.NTOTALE5', 'Field', 'Caption', "Class 5 Exp")
DBSETPROP('SUSPENSE.NTOTALEA', 'Field', 'Caption', "ACP Exp")
DBSETPROP('SUSPENSE.NTOTALEB', 'Field', 'Caption', "BCP Exp")
DBSETPROP('SUSPENSE.NREVOIL', 'Field', 'Caption', "Oil NRI")
DBSETPROP('SUSPENSE.NREVGAS', 'Field', 'Caption', "Gas NRI")
DBSETPROP('SUSPENSE.NREVOTH', 'Field', 'Caption', "Oth NRI")
DBSETPROP('SUSPENSE.NREVTRP', 'Field', 'Caption', "Trans Pct")
DBSETPROP('SUSPENSE.NREVMISC1', 'Field', 'Caption', "Misc 1 Pct")
DBSETPROP('SUSPENSE.NREVMISC2', 'Field', 'Caption', "Misc 2 Pct")
DBSETPROP('SUSPENSE.NWORKINT', 'Field', 'Caption', "Working Pct")
DBSETPROP('SUSPENSE.NINTCLASS1', 'Field', 'Caption', "Class 1 Pct")
DBSETPROP('SUSPENSE.NINTCLASS2', 'Field', 'Caption', "Class 2 Pct")
DBSETPROP('SUSPENSE.NINTCLASS3', 'Field', 'Caption', "Class 3 Pct")
DBSETPROP('SUSPENSE.NINTCLASS4', 'Field', 'Caption', "Class 4 Pct")
DBSETPROP('SUSPENSE.NINTCLASS5', 'Field', 'Caption', "Class 5 Pct")
DBSETPROP('SUSPENSE.NACPINT', 'Field', 'Caption', "ACP Pct")
DBSETPROP('SUSPENSE.NBCPINT', 'Field', 'Caption', "BCP Int")
DBSETPROP('SUSPENSE.NAPOINT', 'Field', 'Caption', "After Payout Int")
DBSETPROP('SUSPENSE.LFLAT', 'Field', 'Caption', "Flat Rate Flag")
DBSETPROP('SUSPENSE.NFLATRATE', 'Field', 'Caption', "Flat Rate")
DBSETPROP('SUSPENSE.NOILREV', 'Field', 'Caption', "Oil Rev")
DBSETPROP('SUSPENSE.NGASREV', 'Field', 'Caption', "Gas Rev")
DBSETPROP('SUSPENSE.NOTHREV', 'Field', 'Caption', "Oth Rev")
DBSETPROP('SUSPENSE.NTRPREV', 'Field', 'Caption', "Trans Rev")
DBSETPROP('SUSPENSE.NMISCREV1', 'Field', 'Caption', "Misc 1 Rev")
DBSETPROP('SUSPENSE.NMISCREV2', 'Field', 'Caption', "Misc 2 Rev")
DBSETPROP('SUSPENSE.LPROGRAM', 'Field', 'Caption', "Prog Flag")
DBSETPROP('SUSPENSE.LPROGNET', 'Field', 'Caption', "Prog Net Flag")
DBSETPROP('SUSPENSE.LHOLD', 'Field', 'Caption', "Owner Held")
DBSETPROP('SUSPENSE.LONHOLD', 'Field', 'Caption', "Int Held")
DBSETPROP('SUSPENSE.NGATHER', 'Field', 'Caption', "Gathering Exp")
DBSETPROP('SUSPENSE.NCOMPRESS', 'Field', 'Caption', "Compression Exp")
DBSETPROP('SUSPENSE.CACCTYR', 'Field', 'Caption', "Acct Yr")
DBSETPROP('SUSPENSE.CACCTPRD', 'Field', 'Caption', "Acct Prd")
DBSETPROP('SUSPENSE.NFLATFREQ', 'Field', 'Caption', "Flat Freq")
DBSETPROP('SUSPENSE.CFLATSTART', 'Field', 'Caption', "Flat Starts")
DBSETPROP('SUSPENSE.NREVTAX1', 'Field', 'Caption', "Oil Tax 1 Pct")
DBSETPROP('SUSPENSE.NREVTAX4', 'Field', 'Caption', "Oil Tax 2 Pct")
DBSETPROP('SUSPENSE.NREVTAX7', 'Field', 'Caption', "Oil Tax 3 Pct")
DBSETPROP('SUSPENSE.NREVTAX10', 'Field', 'Caption', "Oil Tax 4 Pct")
DBSETPROP('SUSPENSE.NREVTAX2', 'Field', 'Caption', "Gas Tax 1 Pct")
DBSETPROP('SUSPENSE.NREVTAX5', 'Field', 'Caption', "Gas Tax 2 Pct")
DBSETPROP('SUSPENSE.NREVTAX8', 'Field', 'Caption', "Gas Tax 3 Pct")
DBSETPROP('SUSPENSE.NREVTAX11', 'Field', 'Caption', "Gas Tax 4 Pct")
DBSETPROP('SUSPENSE.NREVTAX3', 'Field', 'Caption', "Oth Tax 1 Pct")
DBSETPROP('SUSPENSE.NREVTAX6', 'Field', 'Caption', "Oth Tax 2 Pct")
DBSETPROP('SUSPENSE.NREVTAX9', 'Field', 'Caption', "Oth Tax 3 Pct")
DBSETPROP('SUSPENSE.NREVTAX12', 'Field', 'Caption', "Oth Tax 4 Pct")
DBSETPROP('SUSPENSE.NOILTAX1', 'Field', 'Caption', "Oil Tax 1")
DBSETPROP('SUSPENSE.NOILTAX2', 'Field', 'Caption', "Oil Tax 2")
DBSETPROP('SUSPENSE.NOILTAX3', 'Field', 'Caption', "Oil Tax 3")
DBSETPROP('SUSPENSE.NOILTAX4', 'Field', 'Caption', "Oil Tax 4")
DBSETPROP('SUSPENSE.NGASTAX1', 'Field', 'Caption', "Gas Tax 1")
DBSETPROP('SUSPENSE.NGASTAX2', 'Field', 'Caption', "Gas Tax 2")
DBSETPROP('SUSPENSE.NGASTAX3', 'Field', 'Caption', "Gas Tax 3")
DBSETPROP('SUSPENSE.NGASTAX4', 'Field', 'Caption', "Gas Tax 4")
DBSETPROP('SUSPENSE.NOTHTAX1', 'Field', 'Caption', "Oth Tax 1")
DBSETPROP('SUSPENSE.NOTHTAX2', 'Field', 'Caption', "Oth Tax 2")
DBSETPROP('SUSPENSE.NOTHTAX3', 'Field', 'Caption', "Oth Tax 3")
DBSETPROP('SUSPENSE.NOTHTAX4', 'Field', 'Caption', "Oth Tax 4")
DBSETPROP('SUSPENSE.NTAXWITH', 'Field', 'Caption', "Tax W/H")
DBSETPROP('SUSPENSE.NBACKWITH', 'Field', 'Caption', "Backup W/H")
DBSETPROP('SUSPENSE.CIDCHEC', 'Field', 'Caption', "Check Key")
DBSETPROP('SUSPENSE.LPAYOUT', 'Field', 'Caption', "Payout Flag")
DBSETPROP('SUSPENSE.CSUSPTYPE', 'Field', 'Caption', "Susp Type")
DBSETPROP('SUSPENSE.NRUNNO_IN', 'Field', 'Caption', "Run No Susp")
DBSETPROP('SUSPENSE.CRUNYEAR_IN', 'Field', 'Caption', "Run Year Susp")
DBSETPROP('SUSPENSE.LINTEGGL', 'Field', 'Caption', "Post to G/L")
DBSETPROP('SUSPENSE.LMANUAL', 'Field', 'Caption', "Manual Entry")
DBSETPROP('SUSPENSE.NDISBFREQ', 'Field', 'Caption', "Pay Freq")
DBSETPROP('SUSPENSE.CBATCH', 'Field', 'Caption', "Batch No")
DBSETPROP('SUSPENSE.LDIRECTDEP', 'Field', 'Caption', "Direct Deposited")
DBSETPROP('SUSPENSE.LTRANSFER', 'Field', 'Caption', "Trans Suspense")
DBSETPROP('SUSPENSE.NPLUGEXP', 'Field', 'Caption', "Plugging Deduction")
DBSETPROP('SUSPENSE.NPLUGPCT', 'Field', 'Caption', "Plugging Pct")
DBSETPROP('SUSPENSE.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('SUSPENSE.NUNITS', 'Field', 'Caption', "JV Units")
DBSETPROP('SUSPENSE.CREASON', 'Field', 'Caption', "Reason Code")
CREATE TRIGGER ON 'SUSPENSE' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'SUSPENSE' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'SUSPENSE' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_SUSPPCTS
***** Table setup for SUSPPCTS *****
CREATE TABLE 'SUSPPCTS.DBF' NAME 'SUSPPCTS' (CIDDISB C(8) NOT NULL, ;
                       NREVOIL N(11, 7) NOT NULL, ;
                       NREVGAS N(11, 7) NOT NULL, ;
                       NREVOTH N(11, 7) NOT NULL, ;
                       NREVTRP N(11, 7) NOT NULL, ;
                       NREVMISC1 N(11, 7) NOT NULL, ;
                       NREVMISC2 N(11, 7) NOT NULL, ;
                       NWORKINT N(11, 7) NOT NULL, ;
                       NINTCLASS1 N(11, 7) NOT NULL, ;
                       NINTCLASS2 N(11, 7) NOT NULL, ;
                       NINTCLASS3 N(11, 7) NOT NULL, ;
                       NINTCLASS4 N(11, 7) NOT NULL, ;
                       NINTCLASS5 N(11, 7) NOT NULL, ;
                       NACPINT N(11, 7) NOT NULL, ;
                       NBCPINT N(11, 7) NOT NULL, ;
                       NAPOINT N(11, 7) NOT NULL, ;
                       NREVTAX1 N(11, 7) NOT NULL, ;
                       NREVTAX4 N(11, 7) NOT NULL, ;
                       NREVTAX7 N(11, 7) NOT NULL, ;
                       NREVTAX10 N(11, 7) NOT NULL, ;
                       NREVTAX2 N(11, 7) NOT NULL, ;
                       NREVTAX5 N(11, 7) NOT NULL, ;
                       NREVTAX8 N(11, 7) NOT NULL, ;
                       NREVTAX11 N(11, 7) NOT NULL, ;
                       NREVTAX3 N(11, 7) NOT NULL, ;
                       NREVTAX6 N(11, 7) NOT NULL, ;
                       NREVTAX9 N(11, 7) NOT NULL, ;
                       NREVTAX12 N(11, 7) NOT NULL, ;
                       NPLUGPCT N(11, 7) NOT NULL)

***** Create each index for SUSPPCTS *****
ALTER TABLE 'SUSPPCTS' ADD PRIMARY KEY CIDDISB TAG CIDDISB COLLATE 'MACHINE'

***** Change properties for SUSPPCTS *****
DBSETPROP('SUSPPCTS.CIDDISB', 'Field', 'Caption', "Primary Key")
DBSETPROP('SUSPPCTS.NREVOIL', 'Field', 'Caption', "Oil NRI")
DBSETPROP('SUSPPCTS.NREVGAS', 'Field', 'Caption', "Gas NRI")
DBSETPROP('SUSPPCTS.NREVOTH', 'Field', 'Caption', "Oth NRI")
DBSETPROP('SUSPPCTS.NREVTRP', 'Field', 'Caption', "Trans Pct")
DBSETPROP('SUSPPCTS.NREVMISC1', 'Field', 'Caption', "Misc 1 Pct")
DBSETPROP('SUSPPCTS.NREVMISC2', 'Field', 'Caption', "Misc 2 Pct")
DBSETPROP('SUSPPCTS.NWORKINT', 'Field', 'Caption', "Working Pct")
DBSETPROP('SUSPPCTS.NINTCLASS1', 'Field', 'Caption', "Class 1 Pct")
DBSETPROP('SUSPPCTS.NINTCLASS2', 'Field', 'Caption', "Class 2 Pct")
DBSETPROP('SUSPPCTS.NINTCLASS3', 'Field', 'Caption', "Class 3 Pct")
DBSETPROP('SUSPPCTS.NINTCLASS4', 'Field', 'Caption', "Class 4 Pct")
DBSETPROP('SUSPPCTS.NINTCLASS5', 'Field', 'Caption', "Class 5 Pct")
DBSETPROP('SUSPPCTS.NACPINT', 'Field', 'Caption', "ACP Pct")
DBSETPROP('SUSPPCTS.NBCPINT', 'Field', 'Caption', "BCP Int")
DBSETPROP('SUSPPCTS.NAPOINT', 'Field', 'Caption', "After Payout Int")
DBSETPROP('SUSPPCTS.NREVTAX1', 'Field', 'Caption', "Oil Tax 1 Pct")
DBSETPROP('SUSPPCTS.NREVTAX4', 'Field', 'Caption', "Oil Tax 2 Pct")
DBSETPROP('SUSPPCTS.NREVTAX7', 'Field', 'Caption', "Oil Tax 3 Pct")
DBSETPROP('SUSPPCTS.NREVTAX10', 'Field', 'Caption', "Oil Tax 4 Pct")
DBSETPROP('SUSPPCTS.NREVTAX2', 'Field', 'Caption', "Gas Tax 1 Pct")
DBSETPROP('SUSPPCTS.NREVTAX5', 'Field', 'Caption', "Gas Tax 2 Pct")
DBSETPROP('SUSPPCTS.NREVTAX8', 'Field', 'Caption', "Gas Tax 3 Pct")
DBSETPROP('SUSPPCTS.NREVTAX11', 'Field', 'Caption', "Gas Tax 4 Pct")
DBSETPROP('SUSPPCTS.NREVTAX3', 'Field', 'Caption', "Oth Tax 1 Pct")
DBSETPROP('SUSPPCTS.NREVTAX6', 'Field', 'Caption', "Oth Tax 2 Pct")
DBSETPROP('SUSPPCTS.NREVTAX9', 'Field', 'Caption', "Oth Tax 3 Pct")
DBSETPROP('SUSPPCTS.NREVTAX12', 'Field', 'Caption', "Oth Tax 4 Pct")
DBSETPROP('SUSPPCTS.NPLUGPCT', 'Field', 'Caption', "Plugging Pct")
CREATE TRIGGER ON 'SUSPPCTS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'SUSPPCTS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'SUSPPCTS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_SUSPREASONS
***** Table setup for SUSPREASONS *****
CREATE TABLE 'SUSPREASONS.DBF' NAME 'SUSPREASONS' (IPK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                          CREASON C(3) NOT NULL, ;
                          DESCRIPTION C(40) NOT NULL, ;
                          LNOUNCLAIMED L NOT NULL, ;
                          LWAITDIVORD L NOT NULL)

***** Create each index for SUSPREASONS *****
ALTER TABLE 'SUSPREASONS' ADD PRIMARY KEY IPK TAG IPK COLLATE 'MACHINE'

***** Change properties for SUSPREASONS *****
DBSETPROP('SUSPREASONS.IPK', 'Field', 'Caption', "PK")
DBSETPROP('SUSPREASONS.CREASON', 'Field', 'Caption', "Reason Code")
DBSETPROP('SUSPREASONS.DESCRIPTION', 'Field', 'Caption', "Description")
DBSETPROP('SUSPREASONS.LNOUNCLAIMED', 'Field', 'Caption', "Exempt from Unclaimed")
DBSETPROP('SUSPREASONS.LWAITDIVORD', 'Field', 'Caption', "Waiting on Division Order")
ENDFUNC

FUNCTION MakeTable_SYSCTL
***** Table setup for SYSCTL *****
CREATE TABLE 'SYSCTL.DBF' NAME 'SYSCTL' (CIDSYSCTL C(8) NOT NULL, ;
                     CYEAR C(4) NOT NULL, ;
                     CPERIOD C(2) NOT NULL, ;
                     CRUNYEAR C(4) NOT NULL, ;
                     NRUNNO I NOT NULL, ;
                     DDATECLOSE D NOT NULL, ;
                     CTIMECLOSE C(8) NOT NULL, ;
                     DACCTDATE D NOT NULL, ;
                     DPOSTDATE D NOT NULL, ;
                     DADVPOSTING D NOT NULL, ;
                     LCOMPANYPOST L NOT NULL, ;
                     LDISBMAN L NOT NULL, ;
                     CGROUP C(2) NOT NULL, ;
                     CDMBATCH C(8) NOT NULL, ;
                     LRELMIN L NOT NULL, ;
                     LYEARCLOSE L NOT NULL, ;
                     CTYPECLOSE C(1) NOT NULL, ;
                     LRELQTR L NOT NULL, ;
                     LPOSTED L NOT NULL, ;
                     DREVDATE D NOT NULL, ;
                     DEXPDATE D NOT NULL, ;
                     CVERSION C(10) NOT NULL, ;
                     LSUMEXP L NOT NULL, ;
                     LSUMREV L NOT NULL, ;
                     DLASTMODIFIED T NOT NULL, ;
                     MODIFIEDBY C(20) NOT NULL)

***** Create each index for SYSCTL *****
INDEX ON CDMBATCH TAG CDMBATCH COLLATE 'MACHINE'
INDEX ON CIDSYSCTL TAG CIDSYSCTL COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD+STR(NRUNNO)+CGROUP+IIF(LDISBMAN,"Y","N")+CTYPECLOSE TAG MAINKEY COLLATE 'MACHINE'
INDEX ON NRUNNO TAG NRUNNO COLLATE 'MACHINE'
INDEX ON CPERIOD+CYEAR+IIF(LDISBMAN,"Y","N")+CTYPECLOSE TAG PRDYRKEY COLLATE 'MACHINE'
INDEX ON CYEAR+IIF(LYEARCLOSE,"Y","N")+CTYPECLOSE TAG YEARCLOSE DESCENDING  COLLATE 'MACHINE'
INDEX ON CRUNYEAR+STR(NRUNNO) TAG YEARRUN COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD+CGROUP+IIF(LDISBMAN,"Y","N")+CTYPECLOSE TAG YRPRDGROUP COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD+CGROUP+IIF(LDISBMAN,"Y","N")+CTYPECLOSE TAG YRPRDGRP DESCENDING  COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD+CGROUP+STR(NRUNNO)+IIF(LDISBMAN,"Y","N")+CTYPECLOSE TAG YRPRDGRPRN COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD+IIF(LDISBMAN,"Y","N")+CTYPECLOSE TAG YRPRDKEY DESCENDING  COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for SYSCTL *****
DBSETPROP('SYSCTL.CIDSYSCTL', 'Field', 'Caption', "Primary Key")
DBSETPROP('SYSCTL.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('SYSCTL.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('SYSCTL.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('SYSCTL.NRUNNO', 'Field', 'Caption', "Run Number")
DBSETPROP('SYSCTL.DDATECLOSE', 'Field', 'Caption', "Date Closed")
DBSETPROP('SYSCTL.CTIMECLOSE', 'Field', 'Caption', "Time Closed")
DBSETPROP('SYSCTL.DACCTDATE', 'Field', 'Caption', "Accounting Date")
DBSETPROP('SYSCTL.DPOSTDATE', 'Field', 'Caption', "Posting Date")
DBSETPROP('SYSCTL.DADVPOSTING', 'Field', 'Caption', "Dadvposting")
DBSETPROP('SYSCTL.LCOMPANYPOST', 'Field', 'Caption', "Company Share Only")
DBSETPROP('SYSCTL.LDISBMAN', 'Field', 'Caption', "Disb Mgr Closing")
DBSETPROP('SYSCTL.CGROUP', 'Field', 'Caption', "Well Group")
DBSETPROP('SYSCTL.CDMBATCH', 'Field', 'Caption', "Disb Mgr Batch")
DBSETPROP('SYSCTL.LRELMIN', 'Field', 'Caption', "Minimums Released")
DBSETPROP('SYSCTL.LYEARCLOSE', 'Field', 'Caption', "Acct Mgr Fiscal Year Close")
DBSETPROP('SYSCTL.CTYPECLOSE', 'Field', 'Caption', "Type of Close")
DBSETPROP('SYSCTL.LRELQTR', 'Field', 'Caption', "Rel Qtr Wells")
DBSETPROP('SYSCTL.LPOSTED', 'Field', 'Caption', "Posted")
DBSETPROP('SYSCTL.DREVDATE', 'Field', 'Caption', "Rev Date")
DBSETPROP('SYSCTL.DEXPDATE', 'Field', 'Caption', "Exp Date")
DBSETPROP('SYSCTL.CVERSION', 'Field', 'Caption', "Version")
DBSETPROP('SYSCTL.LSUMEXP', 'Field', 'Caption', "Summarize Expenses on Stmts")
DBSETPROP('SYSCTL.LSUMREV', 'Field', 'Caption', "Summarize Revenue on Stmts")
DBSETPROP('SYSCTL.DLASTMODIFIED', 'Field', 'Caption', "Last Modified")
DBSETPROP('SYSCTL.MODIFIEDBY', 'Field', 'Caption', "Modified By")
CREATE TRIGGER ON 'SYSCTL' FOR DELETE AS foxaudit(cidsysctl,,,"cidsysctl")
CREATE TRIGGER ON 'SYSCTL' FOR INSERT AS foxaudit(cidsysctl,,,"cidsysctl")
CREATE TRIGGER ON 'SYSCTL' FOR UPDATE AS foxaudit(cidsysctl,,,"cidsysctl")
ENDFUNC

FUNCTION MakeTable_SYSTEM_EMAIL
***** Table setup for SYSTEM_EMAIL *****
CREATE TABLE 'SYSTEM_EMAIL.DBF' NAME 'SYSTEM_EMAIL' (CEMAILCONFNAME C(50) NOT NULL, ;
                           CEMAILSMTP C(50) NOT NULL, ;
                           IEMAILSMTP I NOT NULL, ;
                           LEMAILSERVER L NOT NULL, ;
                           CEMAILPULL C(50) NOT NULL)

***** Create each index for SYSTEM_EMAIL *****

***** Change properties for SYSTEM_EMAIL *****
ENDFUNC

FUNCTION MakeTable_TANKS
***** Table setup for TANKS *****
CREATE TABLE 'TANKS.DBF' NAME 'TANKS' (CIDTANK C(10) NOT NULL, ;
                    CTANKDESC C(30) NOT NULL, ;
                    NTANKSIZE I NOT NULL, ;
                    NONHAND I NOT NULL)

***** Create each index for TANKS *****
ALTER TABLE 'TANKS' ADD PRIMARY KEY CIDTANK TAG CIDTANK COLLATE 'MACHINE'
INDEX ON CTANKDESC TAG CTANKDESC COLLATE 'MACHINE'

***** Change properties for TANKS *****
DBSETPROP('TANKS.CIDTANK', 'Field', 'Caption', "Tank No")
DBSETPROP('TANKS.CIDTANK', 'Field', 'Format', "!")
DBSETPROP('TANKS.CTANKDESC', 'Field', 'Caption', "Tank Desc")
DBSETPROP('TANKS.NTANKSIZE', 'Field', 'Caption', "Tank Size")
DBSETPROP('TANKS.NONHAND', 'Field', 'Caption', "BBL On Hand")
CREATE TRIGGER ON 'TANKS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'TANKS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'TANKS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_TAX1099
***** Table setup for TAX1099 *****
CREATE TABLE 'TAX1099.DBF' NAME 'TAX1099' (CIDTAX1 C(8) NOT NULL, ;
                      CYEAR C(4) NOT NULL, ;
                      CID C(10) NOT NULL, ;
                      CIDTYPE C(1) NOT NULL, ;
                      CPROGCODE C(10) NOT NULL, ;
                      CNAME C(60) NOT NULL, ;
                      CNAME2 C(60) NOT NULL, ;
                      CADDR1 C(60) NOT NULL, ;
                      CADDR2 C(60) NOT NULL, ;
                      CCITY C(40) NOT NULL, ;
                      CSTATE C(2) NOT NULL, ;
                      CZIP C(10) NOT NULL, ;
                      CCOUNTRY C(2) NOT NULL, ;
                      CTAXID C(9) NOT NULL, ;
                      NOTHER N(12, 2) NOT NULL, ;
                      NROYALTY N(12, 2) NOT NULL, ;
                      NRENTS N(12, 2) NOT NULL, ;
                      CTYPE C(1) NOT NULL, ;
                      CTAXSTATE1 C(2) NOT NULL, ;
                      NSTATETAX1 N(12, 2) NOT NULL, ;
                      NSTATEINCOME1 N(12, 2) NOT NULL, ;
                      CSTATEPAYERNO1 C(15) NOT NULL, ;
                      NFEDTAX N(12, 2) NOT NULL, ;
                      CWELLID C(10) NOT NULL, ;
                      CWELLNAME C(60) NOT NULL, ;
                      CWELLTAX C(10) NOT NULL, ;
                      NNONEMP N(12, 2) NOT NULL, ;
                      NATTORNEY N(12, 2) NOT NULL, ;
                      CCHGUSER C(10) NOT NULL, ;
                      TCHANGED T NOT NULL, ;
                      CTAXSTATE2 C(2) NOT NULL, ;
                      NSTATETAX2 N(12, 2) NOT NULL, ;
                      NSTATEINCOME2 N(12, 2) NOT NULL, ;
                      CSTATEPAYERNO2 C(15) NOT NULL, ;
                      LCORRECTED L NOT NULL, ;
                      ICORRECTIONTYPE I NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL, ;
                      CFORMTYPE C(20) NOT NULL, ;
                      CRECORDID C(60) NOT NULL, ;
                      CPHONE C(15) NOT NULL, ;
                      CEMAIL V(254) NOT NULL)

***** Create each index for TAX1099 *****
INDEX ON CID TAG CID COLLATE 'MACHINE'
INDEX ON CIDTAX1 TAG CIDTAX1 COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON CYEAR+CID TAG PRIMKEY COLLATE 'MACHINE'
INDEX ON CYEAR+CWELLID+CID TAG YEARWELL COLLATE 'MACHINE'

***** Change properties for TAX1099 *****
DBSETPROP('TAX1099.CIDTAX1', 'Field', 'Caption', "Primary Key")
DBSETPROP('TAX1099.CYEAR', 'Field', 'Caption', "Tax Year")
DBSETPROP('TAX1099.CID', 'Field', 'Caption', "ID Code")
DBSETPROP('TAX1099.CIDTYPE', 'Field', 'Caption', "ID Type")
DBSETPROP('TAX1099.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('TAX1099.CNAME', 'Field', 'Caption', "Name")
DBSETPROP('TAX1099.CNAME2', 'Field', 'Caption', "Name 2")
DBSETPROP('TAX1099.CADDR1', 'Field', 'Caption', "Address 1")
DBSETPROP('TAX1099.CADDR2', 'Field', 'Caption', "Address 2")
DBSETPROP('TAX1099.CCITY', 'Field', 'Caption', "City")
DBSETPROP('TAX1099.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('TAX1099.CZIP', 'Field', 'Caption', "Zip Code")
DBSETPROP('TAX1099.CCOUNTRY', 'Field', 'Caption', "Country")
DBSETPROP('TAX1099.CTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('TAX1099.NOTHER', 'Field', 'Caption', "Non Employee Compensation")
DBSETPROP('TAX1099.NROYALTY', 'Field', 'Caption', "Royalties")
DBSETPROP('TAX1099.NRENTS', 'Field', 'Caption', "Rents")
DBSETPROP('TAX1099.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('TAX1099.CTAXSTATE1', 'Field', 'Caption', "State WH 1")
DBSETPROP('TAX1099.NSTATETAX1', 'Field', 'Caption', "State Tax Withheld 1")
DBSETPROP('TAX1099.NSTATEINCOME1', 'Field', 'Caption', "State Income 1")
DBSETPROP('TAX1099.CSTATEPAYERNO1', 'Field', 'Caption', "State Payer No 1")
DBSETPROP('TAX1099.NFEDTAX', 'Field', 'Caption', "Federal Tax Withheld")
DBSETPROP('TAX1099.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('TAX1099.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('TAX1099.CWELLTAX', 'Field', 'Caption', "Well Tax ID")
DBSETPROP('TAX1099.NNONEMP', 'Field', 'Caption', "Non Employee Compensation")
DBSETPROP('TAX1099.NATTORNEY', 'Field', 'Caption', "Attorney Fees")
DBSETPROP('TAX1099.CCHGUSER', 'Field', 'Caption', "Cchguser")
DBSETPROP('TAX1099.TCHANGED', 'Field', 'Caption', "Tchanged")
DBSETPROP('TAX1099.CTAXSTATE2', 'Field', 'Caption', "State WH 2")
DBSETPROP('TAX1099.NSTATETAX2', 'Field', 'Caption', "State Tax Withheld 2")
DBSETPROP('TAX1099.NSTATEINCOME2', 'Field', 'Caption', "State Income 2")
DBSETPROP('TAX1099.CSTATEPAYERNO2', 'Field', 'Caption', "State Payer No 2")
DBSETPROP('TAX1099.LCORRECTED', 'Field', 'Caption', "Corrected Return")
DBSETPROP('TAX1099.ICORRECTIONTYPE', 'Field', 'Caption', "Correction Type")
DBSETPROP('TAX1099.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('TAX1099.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('TAX1099.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('TAX1099.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('TAX1099.CFORMTYPE', 'Field', 'Caption', "Form Type")
DBSETPROP('TAX1099.CRECORDID', 'Field', 'Caption', "TB Record ID")
DBSETPROP('TAX1099.CPHONE', 'Field', 'Caption', "Phone")
DBSETPROP('TAX1099.CEMAIL', 'Field', 'Caption', "Email")
CREATE TRIGGER ON 'TAX1099' FOR DELETE AS foxaudit(cidtax1,,,"cidtax1")
CREATE TRIGGER ON 'TAX1099' FOR INSERT AS foxaudit(cidtax1,,,"cidtax1")
CREATE TRIGGER ON 'TAX1099' FOR UPDATE AS foxaudit(cidtax1,,,"cidtax1")
ENDFUNC

FUNCTION MakeTable_TAX1099CORRECTIONS
***** Table setup for TAX1099CORRECTIONS *****
CREATE TABLE 'TAX1099CORRECTIONS.DBF' NAME 'TAX1099CORRECTIONS' (CIDTAX1 C(8) NOT NULL, ;
                                 CYEAR C(4) NOT NULL, ;
                                 CID C(10) NOT NULL, ;
                                 CIDTYPE C(1) NOT NULL, ;
                                 CPROGCODE C(10) NOT NULL, ;
                                 CNAME C(60) NOT NULL, ;
                                 CNAME2 C(60) NOT NULL, ;
                                 CADDR1 C(60) NOT NULL, ;
                                 CADDR2 C(60) NOT NULL, ;
                                 CCITY C(25) NOT NULL, ;
                                 CSTATE C(2) NOT NULL, ;
                                 CZIP C(10) NOT NULL, ;
                                 CCOUNTRY C(2) NOT NULL, ;
                                 CTAXID C(15) NOT NULL, ;
                                 NOTHER N(12, 2) NOT NULL, ;
                                 NROYALTY N(12, 2) NOT NULL, ;
                                 NRENTS N(12, 2) NOT NULL, ;
                                 CTYPE C(1) NOT NULL, ;
                                 CTAXSTATE1 C(2) NOT NULL, ;
                                 NSTATETAX1 N(9, 2) NOT NULL, ;
                                 NSTATEINCOME1 N(12, 2) NOT NULL, ;
                                 CSTATEPAYERNO1 C(15) NOT NULL, ;
                                 NFEDTAX N(9, 2) NOT NULL, ;
                                 CWELLID C(10) NOT NULL, ;
                                 CWELLNAME C(30) NOT NULL, ;
                                 CWELLTAX C(15) NOT NULL, ;
                                 NNONEMP N(12, 2) NOT NULL, ;
                                 NATTORNEY N(12, 2) NOT NULL, ;
                                 CCHGUSER C(10) NOT NULL, ;
                                 TCHANGED T NOT NULL, ;
                                 CTAXSTATE2 C(2) NOT NULL, ;
                                 NSTATETAX2 N(9, 2) NOT NULL, ;
                                 NSTATEINCOME2 N(12, 2) NOT NULL, ;
                                 CSTATEPAYERNO2 C(15) NOT NULL, ;
                                 LCORRECTED L NOT NULL, ;
                                 ICORRECTIONTYPE I NOT NULL, ;
                                 LNEC L NOT NULL, ;
                                 CADDEDBY C(10) NOT NULL, ;
                                 CCHANGEDBY C(10) NOT NULL, ;
                                 DADDED T NOT NULL, ;
                                 DCHANGED T NOT NULL, ;
                                 CFORMTYPE C(20) NOT NULL, ;
                                 CRECORDID C(60) NOT NULL, ;
                                 CNEWRECORDID C(60) NOT NULL, ;
                                 CPHONE C(15) NOT NULL, ;
                                 CEMAIL V(254) NOT NULL)

***** Create each index for TAX1099CORRECTIONS *****
INDEX ON CID TAG CID COLLATE 'MACHINE'
INDEX ON CIDTAX1 TAG CIDTAX1 COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON CYEAR+CID TAG PRIMKEY COLLATE 'MACHINE'
INDEX ON CYEAR+CWELLID+CID TAG YEARWELL COLLATE 'MACHINE'

***** Change properties for TAX1099CORRECTIONS *****
DBSETPROP('TAX1099CORRECTIONS.CIDTAX1', 'Field', 'Caption', "Primary Key")
DBSETPROP('TAX1099CORRECTIONS.CYEAR', 'Field', 'Caption', "Tax Year")
DBSETPROP('TAX1099CORRECTIONS.CID', 'Field', 'Caption', "ID Code")
DBSETPROP('TAX1099CORRECTIONS.CIDTYPE', 'Field', 'Caption', "ID Type")
DBSETPROP('TAX1099CORRECTIONS.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('TAX1099CORRECTIONS.CNAME', 'Field', 'Caption', "Name")
DBSETPROP('TAX1099CORRECTIONS.CNAME2', 'Field', 'Caption', "Name 2")
DBSETPROP('TAX1099CORRECTIONS.CADDR1', 'Field', 'Caption', "Address 1")
DBSETPROP('TAX1099CORRECTIONS.CADDR2', 'Field', 'Caption', "Address 2")
DBSETPROP('TAX1099CORRECTIONS.CCITY', 'Field', 'Caption', "City")
DBSETPROP('TAX1099CORRECTIONS.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('TAX1099CORRECTIONS.CZIP', 'Field', 'Caption', "Zip Code")
DBSETPROP('TAX1099CORRECTIONS.CCOUNTRY', 'Field', 'Caption', "Country")
DBSETPROP('TAX1099CORRECTIONS.CTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('TAX1099CORRECTIONS.NOTHER', 'Field', 'Caption', "Non Employee Compensation")
DBSETPROP('TAX1099CORRECTIONS.NROYALTY', 'Field', 'Caption', "Royalties")
DBSETPROP('TAX1099CORRECTIONS.NRENTS', 'Field', 'Caption', "Rents")
DBSETPROP('TAX1099CORRECTIONS.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('TAX1099CORRECTIONS.CTAXSTATE1', 'Field', 'Caption', "State WH 1")
DBSETPROP('TAX1099CORRECTIONS.NSTATETAX1', 'Field', 'Caption', "State Tax Withheld 1")
DBSETPROP('TAX1099CORRECTIONS.NSTATEINCOME1', 'Field', 'Caption', "State Income 1")
DBSETPROP('TAX1099CORRECTIONS.CSTATEPAYERNO1', 'Field', 'Caption', "State Payer No 1")
DBSETPROP('TAX1099CORRECTIONS.NFEDTAX', 'Field', 'Caption', "Federal Tax Withheld")
DBSETPROP('TAX1099CORRECTIONS.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('TAX1099CORRECTIONS.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('TAX1099CORRECTIONS.CWELLTAX', 'Field', 'Caption', "Well Tax ID")
DBSETPROP('TAX1099CORRECTIONS.NNONEMP', 'Field', 'Caption', "Non Employee Compensation")
DBSETPROP('TAX1099CORRECTIONS.NATTORNEY', 'Field', 'Caption', "Attorney Fees")
DBSETPROP('TAX1099CORRECTIONS.CCHGUSER', 'Field', 'Caption', "Cchguser")
DBSETPROP('TAX1099CORRECTIONS.TCHANGED', 'Field', 'Caption', "Tchanged")
DBSETPROP('TAX1099CORRECTIONS.CTAXSTATE2', 'Field', 'Caption', "State WH 2")
DBSETPROP('TAX1099CORRECTIONS.NSTATETAX2', 'Field', 'Caption', "State Tax Withheld 2")
DBSETPROP('TAX1099CORRECTIONS.NSTATEINCOME2', 'Field', 'Caption', "State Income 2")
DBSETPROP('TAX1099CORRECTIONS.CSTATEPAYERNO2', 'Field', 'Caption', "State Payer No 2")
DBSETPROP('TAX1099CORRECTIONS.LCORRECTED', 'Field', 'Caption', "Corrected Return")
DBSETPROP('TAX1099CORRECTIONS.ICORRECTIONTYPE', 'Field', 'Caption', "Correction Type")
DBSETPROP('TAX1099CORRECTIONS.LNEC', 'Field', 'Caption', "NEC 1099")
DBSETPROP('TAX1099CORRECTIONS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('TAX1099CORRECTIONS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('TAX1099CORRECTIONS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('TAX1099CORRECTIONS.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('TAX1099CORRECTIONS.CFORMTYPE', 'Field', 'Caption', "Form Type")
DBSETPROP('TAX1099CORRECTIONS.CRECORDID', 'Field', 'Caption', "Old TB Record ID")
DBSETPROP('TAX1099CORRECTIONS.CNEWRECORDID', 'Field', 'Caption', "New TB Record ID")
DBSETPROP('TAX1099CORRECTIONS.CPHONE', 'Field', 'Caption', "Phone")
DBSETPROP('TAX1099CORRECTIONS.CEMAIL', 'Field', 'Caption', "Email")
CREATE TRIGGER ON 'TAX1099CORRECTIONS' FOR DELETE AS foxaudit(cidtax1,,,"cidtax1")
CREATE TRIGGER ON 'TAX1099CORRECTIONS' FOR INSERT AS foxaudit(cidtax1,,,"cidtax1")
CREATE TRIGGER ON 'TAX1099CORRECTIONS' FOR UPDATE AS foxaudit(cidtax1,,,"cidtax1")
ENDFUNC

FUNCTION MakeTable_TAX1099DET
***** Table setup for TAX1099DET *****
CREATE TABLE 'TAX1099DET.DBF' NAME 'TAX1099DET' (CIDTAX1 C(8) NOT NULL, ;
                         CYEAR C(4) NOT NULL, ;
                         CID C(10) NOT NULL, ;
                         CIDTYPE C(1) NOT NULL, ;
                         CRPTGROUP C(1) NOT NULL, ;
                         CPROGCODE C(10) NOT NULL, ;
                         CNAME C(40) NOT NULL, ;
                         CNAME2 C(40) NOT NULL, ;
                         CADDR1 C(40) NOT NULL, ;
                         CADDR2 C(40) NOT NULL, ;
                         CCITY C(25) NOT NULL, ;
                         CSTATE C(2) NOT NULL, ;
                         CZIP C(10) NOT NULL, ;
                         CTAXID C(15) NOT NULL, ;
                         CTYPE C(1) NOT NULL, ;
                         CTAXSTATE C(2) NOT NULL, ;
                         CWELLID C(10) NOT NULL, ;
                         CWELLNAME C(30) NOT NULL, ;
                         CWELLTAX C(15) NOT NULL, ;
                         NINCOME N(12, 2) NOT NULL, ;
                         NEXPENSE N(12, 2) NOT NULL, ;
                         NTRPREV N(12, 2) NOT NULL, ;
                         NCOMPGATH N(12, 2) NOT NULL, ;
                         NSEVTAXES N(12, 2) NOT NULL, ;
                         NTAXWITH N(12, 2) NOT NULL, ;
                         NBACKWITH N(12, 2) NOT NULL, ;
                         NNETCHECK N(12, 2) NOT NULL, ;
                         NSTATETAX N(12, 2) NOT NULL, ;
                         NFEDTAX N(12, 2) NOT NULL, ;
                         NMISCREV N(12, 2) NOT NULL, ;
                         NPLUGRESERVE N(12, 2) NOT NULL, ;
                         NRENTS N(12, 2) NOT NULL, ;
                         NPLUGEXP N(12, 2) NOT NULL)

***** Create each index for TAX1099DET *****
INDEX ON CYEAR+CID TAG CID COLLATE 'MACHINE'
INDEX ON CIDTAX1 TAG CIDTAX1 COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON CYEAR+CID+CWELLID TAG PRIMKEY COLLATE 'MACHINE'
INDEX ON CYEAR+CTAXID+CWELLID TAG YEARTAX COLLATE 'MACHINE'
INDEX ON CYEAR+CID+CWELLID+CRPTGROUP TAG YROWNGRP COLLATE 'MACHINE'
INDEX ON CYEAR+CTAXID+CWELLID+CRPTGROUP TAG YRTAXGRP COLLATE 'MACHINE'

***** Change properties for TAX1099DET *****
DBSETPROP('TAX1099DET.CIDTAX1', 'Field', 'Caption', "Primary Key")
DBSETPROP('TAX1099DET.CYEAR', 'Field', 'Caption', "Tax Year")
DBSETPROP('TAX1099DET.CID', 'Field', 'Caption', "ID Code")
DBSETPROP('TAX1099DET.CIDTYPE', 'Field', 'Caption', "ID Type")
DBSETPROP('TAX1099DET.CRPTGROUP', 'Field', 'Caption', "Report Group")
DBSETPROP('TAX1099DET.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('TAX1099DET.CNAME', 'Field', 'Caption', "Name")
DBSETPROP('TAX1099DET.CNAME2', 'Field', 'Caption', "Name 2")
DBSETPROP('TAX1099DET.CADDR1', 'Field', 'Caption', "Address 1")
DBSETPROP('TAX1099DET.CADDR2', 'Field', 'Caption', "Address 2")
DBSETPROP('TAX1099DET.CCITY', 'Field', 'Caption', "City")
DBSETPROP('TAX1099DET.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('TAX1099DET.CZIP', 'Field', 'Caption', "Zip Code")
DBSETPROP('TAX1099DET.CTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('TAX1099DET.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('TAX1099DET.CTAXSTATE', 'Field', 'Caption', "W/H State")
DBSETPROP('TAX1099DET.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('TAX1099DET.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('TAX1099DET.CWELLTAX', 'Field', 'Caption', "Well Tax ID")
DBSETPROP('TAX1099DET.NINCOME', 'Field', 'Caption', "Income")
DBSETPROP('TAX1099DET.NEXPENSE', 'Field', 'Caption', "Expenses")
DBSETPROP('TAX1099DET.NTRPREV', 'Field', 'Caption', "Transportation Revenue")
DBSETPROP('TAX1099DET.NCOMPGATH', 'Field', 'Caption', "Compress/Gather")
DBSETPROP('TAX1099DET.NSEVTAXES', 'Field', 'Caption', "Severance Taxes")
DBSETPROP('TAX1099DET.NTAXWITH', 'Field', 'Caption', "State Tax")
DBSETPROP('TAX1099DET.NBACKWITH', 'Field', 'Caption', "Fed Tax")
DBSETPROP('TAX1099DET.NNETCHECK', 'Field', 'Caption', "Net Check")
DBSETPROP('TAX1099DET.NSTATETAX', 'Field', 'Caption', "State Tax W/H")
DBSETPROP('TAX1099DET.NFEDTAX', 'Field', 'Caption', "Fed Tax W/H")
DBSETPROP('TAX1099DET.NMISCREV', 'Field', 'Caption', "Misc Rev")
DBSETPROP('TAX1099DET.NPLUGRESERVE', 'Field', 'Caption', "Plugging Reserve")
DBSETPROP('TAX1099DET.NRENTS', 'Field', 'Caption', "Rents")
DBSETPROP('TAX1099DET.NPLUGEXP', 'Field', 'Caption', "Plugging Deductions")
CREATE TRIGGER ON 'TAX1099DET' FOR DELETE AS foxaudit(cidtax1,,,"cidtax1")
CREATE TRIGGER ON 'TAX1099DET' FOR INSERT AS foxaudit(cidtax1,,,"cidtax1")
CREATE TRIGGER ON 'TAX1099DET' FOR UPDATE AS foxaudit(cidtax1,,,"cidtax1")
ENDFUNC

FUNCTION MakeTable_TAX1099STATES
***** Table setup for TAX1099STATES *****
CREATE TABLE 'TAX1099STATES.DBF' NAME 'TAX1099STATES' (CSTATE C(2) NOT NULL, ;
                            CPAYERNO C(15) NOT NULL)

***** Create each index for TAX1099STATES *****
INDEX ON CSTATE TAG CSTATE COLLATE 'MACHINE'

***** Change properties for TAX1099STATES *****
DBSETPROP('TAX1099STATES.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('TAX1099STATES.CPAYERNO', 'Field', 'Caption', "State Payer No")
CREATE TRIGGER ON 'TAX1099STATES' FOR DELETE AS foxaudit(cstate,,,"cstate")
CREATE TRIGGER ON 'TAX1099STATES' FOR INSERT AS foxaudit(cstate,,,"cstate")
CREATE TRIGGER ON 'TAX1099STATES' FOR UPDATE AS foxaudit(cstate,,,"cstate")
ENDFUNC

FUNCTION MakeTable_TAXCODES
***** Table setup for TAXCODES *****
CREATE TABLE 'TAXCODES.DBF' NAME 'TAXCODES' (CTAXCODE C(2) NOT NULL, ;
                       CDESC C(30) NOT NULL, ;
                       CADDEDBY C(10) NOT NULL, ;
                       CCHANGEDBY C(10) NOT NULL, ;
                       DADDED T NOT NULL, ;
                       DCHANGED T NOT NULL)

***** Create each index for TAXCODES *****
INDEX ON CDESC TAG CDESC COLLATE 'MACHINE'
ALTER TABLE 'TAXCODES' ADD PRIMARY KEY CTAXCODE TAG CTAXCODE COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for TAXCODES *****
DBSETPROP('TAXCODES.CTAXCODE', 'Field', 'Caption', "Tax Code")
DBSETPROP('TAXCODES.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('TAXCODES.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('TAXCODES.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('TAXCODES.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('TAXCODES.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'TAXCODES' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'TAXCODES' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'TAXCODES' FOR UPDATE AS __ri_update_taxcodes().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_TERMS
***** Table setup for TERMS *****
CREATE TABLE 'TERMS.DBF' NAME 'TERMS' (CIDTERM C(8) NOT NULL, ;
                    CTERMDESC C(20) NOT NULL, ;
                    NNETDUEIN N(4, 0) NOT NULL, ;
                    NDISCIN N(2, 0) NOT NULL, ;
                    NDISCPCT N(4, 2) NOT NULL, ;
                    LDEFTERM L NOT NULL, ;
                    NTERMTYPE N(1, 0) NOT NULL, ;
                    CLISTID C(36) NOT NULL, ;
                    CADDEDBY C(10) NOT NULL, ;
                    CCHANGEDBY C(10) NOT NULL, ;
                    DADDED T NOT NULL, ;
                    DCHANGED T NOT NULL)

***** Create each index for TERMS *****
ALTER TABLE 'TERMS' ADD PRIMARY KEY CIDTERM TAG CIDTERM COLLATE 'MACHINE'
INDEX ON UPPER(TRIM(CTERMDESC)) TAG CTERMDESC COLLATE 'MACHINE'
INDEX ON NTERMTYPE TAG NTERMTYPE COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for TERMS *****
DBSETPROP('TERMS.CIDTERM', 'Field', 'Caption', "Primary Key")
DBSETPROP('TERMS.CTERMDESC', 'Field', 'Caption', "Terms Description")
DBSETPROP('TERMS.NNETDUEIN', 'Field', 'Caption', "Net Due in")
DBSETPROP('TERMS.NDISCIN', 'Field', 'Caption', "Discount In")
DBSETPROP('TERMS.NDISCPCT', 'Field', 'Caption', "Discount Percentage")
DBSETPROP('TERMS.LDEFTERM', 'Field', 'Caption', "Default Terms Flag")
DBSETPROP('TERMS.NTERMTYPE', 'Field', 'Caption', "Terms Type")
DBSETPROP('TERMS.CLISTID', 'Field', 'Caption', "QB List ID")
DBSETPROP('TERMS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('TERMS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('TERMS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('TERMS.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'TERMS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'TERMS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'TERMS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_TRANGROUP
***** Table setup for TRANGROUP *****
CREATE TABLE 'TRANGROUP.DBF' NAME 'TRANGROUP' (CFORMNAME C(40) NOT NULL, ;
                        CBUNCH C(8) NOT NULL, ;
                        CDESC C(60) NOT NULL, ;
                        DTIMESTAMP T NOT NULL DEFAULT DATETIME(), ;
                        LINPROGRESS L NOT NULL)

***** Create each index for TRANGROUP *****
ALTER TABLE 'TRANGROUP' ADD PRIMARY KEY CBUNCH TAG CBUNCH COLLATE 'MACHINE'
INDEX ON CFORMNAME TAG FORMNAME COLLATE 'MACHINE'

***** Change properties for TRANGROUP *****
DBSETPROP('TRANGROUP.CFORMNAME', 'Field', 'Caption', "Form Name")
DBSETPROP('TRANGROUP.CBUNCH', 'Field', 'Caption', "Transaction Group")
DBSETPROP('TRANGROUP.CDESC', 'Field', 'Caption', "Tran Group Description")
DBSETPROP('TRANGROUP.DTIMESTAMP', 'Field', 'Caption', "Time Stamp")
DBSETPROP('TRANGROUP.LINPROGRESS', 'Field', 'Caption', "In Progress Flag")
ENDFUNC

FUNCTION MakeTable_TRUCKS
***** Table setup for TRUCKS *****
CREATE TABLE 'TRUCKS.DBF' NAME 'TRUCKS' (CTRUCK C(4) NOT NULL, ;
                     CDESC C(30) NOT NULL)

***** Create each index for TRUCKS *****
INDEX ON CDESC TAG CDESC COLLATE 'MACHINE'
INDEX ON CTRUCK TAG CTRUCK COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for TRUCKS *****
DBSETPROP('TRUCKS.CTRUCK', 'Field', 'Caption', "Truck Number")
DBSETPROP('TRUCKS.CDESC', 'Field', 'Caption', "Description")
CREATE TRIGGER ON 'TRUCKS' FOR DELETE AS foxaudit(ctruck,,,"ctruck")
CREATE TRIGGER ON 'TRUCKS' FOR INSERT AS foxaudit(ctruck,,,"ctruck")
CREATE TRIGGER ON 'TRUCKS' FOR UPDATE AS foxaudit(ctruck,,,"ctruck")
ENDFUNC

FUNCTION MakeTable_TXRRCDATA
***** Table setup for TXRRCDATA *****
CREATE TABLE 'TXRRCDATA.DBF' NAME 'TXRRCDATA' (CTYPE C(2) NOT NULL, ;
                        CRRCDISTNO C(4) NOT NULL, ;
                        CYEAR C(4) NOT NULL, ;
                        CPERIOD C(2) NOT NULL, ;
                        CFIELDID C(10) NOT NULL, ;
                        CFIELDNAME C(30) NOT NULL, ;
                        CLEASEID C(10) NOT NULL, ;
                        CLEASENAME C(30) NOT NULL, ;
                        CRRCLEASENO C(20) NOT NULL, ;
                        CCOMINGLE C(20) NOT NULL, ;
                        NBEGVOL I NOT NULL, ;
                        NOILPROD I NOT NULL, ;
                        NDISPVOLUME I NOT NULL, ;
                        COILDISPCODE C(1) NOT NULL, ;
                        NENDVOL I NOT NULL, ;
                        CFORMATION C(10) NOT NULL, ;
                        NGASLIFT I NOT NULL, ;
                        NGASVOL I NOT NULL, ;
                        NCONDBEGVOL I NOT NULL, ;
                        NCONDPROD I NOT NULL, ;
                        NCONDDISP I NOT NULL, ;
                        CCONDCODE C(10) NOT NULL, ;
                        NCONDENDVOL I NOT NULL, ;
                        NGASPROD I NOT NULL, ;
                        CGASDISPCODE C(1) NOT NULL, ;
                        CP5OPERNO C(15) NOT NULL, ;
                        CWELLTYPE C(1) NOT NULL)

***** Create each index for TXRRCDATA *****
INDEX ON CFIELDNAME TAG CFIELDNAME COLLATE 'MACHINE'
INDEX ON CLEASENAME TAG CLEASENAME COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD TAG CPERIOD COLLATE 'MACHINE'
INDEX ON CRRCLEASENO TAG CRRCLEASE COLLATE 'MACHINE'
INDEX ON CTYPE+CYEAR+CPERIOD TAG CTYPE COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD TAG CYEAR COLLATE 'MACHINE'
INDEX ON CRRCLEASENO+CYEAR TAG PK COLLATE 'MACHINE'
INDEX ON CRRCDISTNO TAG RRCDIST COLLATE 'MACHINE'
INDEX ON CTYPE TAG TYPE COLLATE 'MACHINE'

***** Change properties for TXRRCDATA *****
DBSETPROP('TXRRCDATA.CTYPE', 'Field', 'Caption', "Report Type")
DBSETPROP('TXRRCDATA.CRRCDISTNO', 'Field', 'Caption', "RRC District")
DBSETPROP('TXRRCDATA.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('TXRRCDATA.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('TXRRCDATA.CFIELDID', 'Field', 'Caption', "Field Code")
DBSETPROP('TXRRCDATA.CFIELDNAME', 'Field', 'Caption', "Field Name")
DBSETPROP('TXRRCDATA.CLEASEID', 'Field', 'Caption', "Lease ID")
DBSETPROP('TXRRCDATA.CLEASENAME', 'Field', 'Caption', "Lease Name")
DBSETPROP('TXRRCDATA.CRRCLEASENO', 'Field', 'Caption', "RRC Lease No")
DBSETPROP('TXRRCDATA.CCOMINGLE', 'Field', 'Caption', "Comingle Permit")
DBSETPROP('TXRRCDATA.NBEGVOL', 'Field', 'Caption', "Beg Volume")
DBSETPROP('TXRRCDATA.NOILPROD', 'Field', 'Caption', "Produced")
DBSETPROP('TXRRCDATA.NDISPVOLUME', 'Field', 'Caption', "Disposition Volume")
DBSETPROP('TXRRCDATA.COILDISPCODE', 'Field', 'Caption', "Disposition Code")
DBSETPROP('TXRRCDATA.NENDVOL', 'Field', 'Caption', "Ending Volume")
DBSETPROP('TXRRCDATA.CFORMATION', 'Field', 'Caption', "Formation")
DBSETPROP('TXRRCDATA.NGASLIFT', 'Field', 'Caption', "Gas Lift Injected")
DBSETPROP('TXRRCDATA.NGASVOL', 'Field', 'Caption', "Gas Volume")
DBSETPROP('TXRRCDATA.NCONDBEGVOL', 'Field', 'Caption', "Condensate Beg Volume")
DBSETPROP('TXRRCDATA.NCONDPROD', 'Field', 'Caption', "Condensate Production")
DBSETPROP('TXRRCDATA.NCONDDISP', 'Field', 'Caption', "Condensate Disp")
DBSETPROP('TXRRCDATA.CCONDCODE', 'Field', 'Caption', "Ccondcode")
DBSETPROP('TXRRCDATA.NCONDENDVOL', 'Field', 'Caption', "Condensate End Volume")
DBSETPROP('TXRRCDATA.NGASPROD', 'Field', 'Caption', "Ngasprod")
DBSETPROP('TXRRCDATA.CGASDISPCODE', 'Field', 'Caption', "Ngasdispcode")
DBSETPROP('TXRRCDATA.CP5OPERNO', 'Field', 'Caption', "Cp5operno")
DBSETPROP('TXRRCDATA.CWELLTYPE', 'Field', 'Caption', "Well Type")
CREATE TRIGGER ON 'TXRRCDATA' FOR DELETE AS foxaudit(crrcleaseno+cyear,,,"pk")
CREATE TRIGGER ON 'TXRRCDATA' FOR INSERT AS foxaudit(crrcleaseno+cyear,,,"pk")
CREATE TRIGGER ON 'TXRRCDATA' FOR UPDATE AS foxaudit(crrcleaseno+cyear,,,"pk")
ENDFUNC

FUNCTION MakeTable_VENDEXP
***** Table setup for VENDEXP *****
CREATE TABLE 'VENDEXP.DBF' NAME 'VENDEXP' (CBATCH C(8) NOT NULL, ;
                      CVENDORID C(10) NOT NULL, ;
                      CREFID C(20) NOT NULL, ;
                      DINVDATE D NOT NULL, ;
                      CPRODYEAR C(4) NOT NULL, ;
                      CPRODPERIOD C(2) NOT NULL, ;
                      NPAYAMT N(12, 2) NOT NULL, ;
                      PAIDBYCK C(8) NOT NULL)

***** Create each index for VENDEXP *****
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CREFID TAG REFID COLLATE 'MACHINE'
INDEX ON CVENDORID TAG VENDORID COLLATE 'MACHINE'
INDEX ON CVENDORID+CPRODYEAR+CPRODPERIOD+CREFID TAG VENDREF COLLATE 'MACHINE'
ALTER TABLE 'VENDEXP' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'

***** Change properties for VENDEXP *****
DBSETPROP('VENDEXP.CBATCH', 'Field', 'Caption', "Primary Key")
DBSETPROP('VENDEXP.CVENDORID', 'Field', 'Caption', "Vendor ID")
DBSETPROP('VENDEXP.CREFID', 'Field', 'Caption', "Reference ID")
DBSETPROP('VENDEXP.DINVDATE', 'Field', 'Caption', "Invoice Date")
DBSETPROP('VENDEXP.CPRODYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('VENDEXP.CPRODPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('VENDEXP.NPAYAMT', 'Field', 'Caption', "Payment Amount")
DBSETPROP('VENDEXP.PAIDBYCK', 'Field', 'Caption', "Link To Paying Check")
CREATE TRIGGER ON 'VENDEXP' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'VENDEXP' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'VENDEXP' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_VENDOR
***** Table setup for VENDOR *****
CREATE TABLE 'VENDOR.DBF' NAME 'VENDOR' (CVENDORID C(10) NOT NULL, ;
                     CVENDNAME C(60) NOT NULL, ;
                     CADDRESS1 C(60) NOT NULL, ;
                     CADDRESS2 C(60) NOT NULL, ;
                     CCITY C(30) NOT NULL, ;
                     CSTATE C(2) NOT NULL, ;
                     CZIP C(10) NOT NULL, ;
                     CCOUNTRY C(2) NOT NULL, ;
                     CTAXID C(15) NOT NULL, ;
                     CPHONE C(14) NOT NULL, ;
                     CPHEXT C(10) NOT NULL, ;
                     CCONTACT C(30) NOT NULL, ;
                     LSEND1099 L NOT NULL, ;
                     CFAXPHONE C(14) NOT NULL, ;
                     CFAXEXT C(10) NOT NULL, ;
                     LINTEGGL L NOT NULL, ;
                     CBADDR1 C(60) NOT NULL, ;
                     CBADDR2 C(60) NOT NULL, ;
                     CBCITY C(30) NOT NULL, ;
                     CBSTATE C(2) NOT NULL, ;
                     CBZIP C(10) NOT NULL, ;
                     CBCOUNTRY C(2) NOT NULL, ;
                     CBCONTACT C(30) NOT NULL, ;
                     CIDTERM C(8) NOT NULL, ;
                     MVENDNOTE M NOT NULL, ;
                     CFINCODE C(1) NOT NULL, ;
                     CTAXSTAT C(1) NOT NULL, ;
                     NPURCHYTD N(12, 2) NOT NULL, ;
                     NPURCHLYTD N(12, 2) NOT NULL, ;
                     DLASTPURCH D NOT NULL, ;
                     NLASTPURCH N(9, 2) NOT NULL, ;
                     DLASTPMT D NOT NULL, ;
                     NLASTPMT N(9, 2) NOT NULL, ;
                     NTOTPURCH N(12, 2) NOT NULL, ;
                     CBPHONE C(14) NOT NULL, ;
                     CBPHEXT C(10) NOT NULL, ;
                     CPHONECELL C(15) NOT NULL, ;
                     CBFAXPHONE C(14) NOT NULL, ;
                     CBFAXEXT C(10) NOT NULL, ;
                     LVENDCOMP L NOT NULL, ;
                     DVENDCOMP D NOT NULL, ;
                     NCURBAL N(12, 2) NOT NULL, ;
                     NBAL30_60 N(12, 2) NOT NULL, ;
                     NBAL60_90 N(12, 2) NOT NULL, ;
                     NBALOV90 N(12, 2) NOT NULL, ;
                     NCREDITLIM N(12, 2) NOT NULL, ;
                     NMINCHECK N(9, 2) NOT NULL, ;
                     LHOLD L NOT NULL, ;
                     CSORTFIELD C(60) NOT NULL, ;
                     LINSURANCE L NOT NULL, ;
                     DINSDATE D NOT NULL, ;
                     LSKIPCHECK L NOT NULL, ;
                     CCHKMEMO C(30) NOT NULL, ;
                     LSTUBDETAIL L NOT NULL, ;
                     CEMAIL V(80) NOT NULL, ;
                     ITAXIDTYPE I NOT NULL, ;
                     DADDED D NOT NULL, ;
                     DCHANGED D NOT NULL, ;
                     CADDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     LINACTIVE L NOT NULL, ;
                     CENERGYLINKID C(10) NOT NULL, ;
                     CQBTERMS C(36) NOT NULL, ;
                     EDITSEQ C(16) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CEMAILCODE C(20) NOT NULL, ;
                     LEMAILOPT L NOT NULL, ;
                     LEMAILVER L NOT NULL, ;
                     CSTRUCT C(5) NOT NULL, ;
                     LVERIFIED L NOT NULL)

***** Create each index for VENDOR *****
INDEX ON UPPER(CSORTFIELD) TAG CSORTFIELD COLLATE 'MACHINE'
INDEX ON UPPER(CVENDNAME) TAG CVENDNAME COLLATE 'MACHINE'
ALTER TABLE 'VENDOR' ADD PRIMARY KEY UPPER(CVENDORID) TAG CVENDORID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for VENDOR *****
DBSETPROP('VENDOR.CVENDORID', 'Field', 'Caption', "Vendor ID")
DBSETPROP('VENDOR.CVENDNAME', 'Field', 'Caption', "Vendor Name")
DBSETPROP('VENDOR.CADDRESS1', 'Field', 'Caption', "Mailing Address 1")
DBSETPROP('VENDOR.CADDRESS2', 'Field', 'Caption', "Mailing Address 2")
DBSETPROP('VENDOR.CCITY', 'Field', 'Caption', "Mailing City")
DBSETPROP('VENDOR.CSTATE', 'Field', 'Caption', "Mailing State")
DBSETPROP('VENDOR.CZIP', 'Field', 'Caption', "Mailing Zip")
DBSETPROP('VENDOR.CCOUNTRY', 'Field', 'Caption', "Country")
DBSETPROP('VENDOR.CTAXID', 'Field', 'Caption', "Tax ID")
DBSETPROP('VENDOR.CPHONE', 'Field', 'Caption', "Mailing Phone")
DBSETPROP('VENDOR.CPHEXT', 'Field', 'Caption', "Mailing Phone Ext")
DBSETPROP('VENDOR.CCONTACT', 'Field', 'Caption', "Mailing Contact")
DBSETPROP('VENDOR.LSEND1099', 'Field', 'Caption', "Send a 1099")
DBSETPROP('VENDOR.CFAXPHONE', 'Field', 'Caption', "Mailing Fax Phone")
DBSETPROP('VENDOR.CFAXEXT', 'Field', 'Caption', "Mailing Fax Phone Ext")
DBSETPROP('VENDOR.LINTEGGL', 'Field', 'Caption', "Post Disbursement Entries To G/L")
DBSETPROP('VENDOR.CBADDR1', 'Field', 'Caption', "Billing Address 1")
DBSETPROP('VENDOR.CBADDR2', 'Field', 'Caption', "Billing Address 2")
DBSETPROP('VENDOR.CBCITY', 'Field', 'Caption', "Billing City")
DBSETPROP('VENDOR.CBSTATE', 'Field', 'Caption', "Billing State")
DBSETPROP('VENDOR.CBZIP', 'Field', 'Caption', "Billing Zip")
DBSETPROP('VENDOR.CBCOUNTRY', 'Field', 'Caption', "Country")
DBSETPROP('VENDOR.CBCONTACT', 'Field', 'Caption', "Billing Contact")
DBSETPROP('VENDOR.CIDTERM', 'Field', 'Caption', "Link To Terms Table")
DBSETPROP('VENDOR.MVENDNOTE', 'Field', 'Caption', "Vendor Notes")
DBSETPROP('VENDOR.CFINCODE', 'Field', 'Caption', "Link To Finance Chg Table")
DBSETPROP('VENDOR.CTAXSTAT', 'Field', 'Caption', "Tax Status")
DBSETPROP('VENDOR.NPURCHYTD', 'Field', 'Caption', "YTD Purchases")
DBSETPROP('VENDOR.NPURCHLYTD', 'Field', 'Caption', "Last Year Purchases")
DBSETPROP('VENDOR.DLASTPURCH', 'Field', 'Caption', "Date of Last Purchase")
DBSETPROP('VENDOR.NLASTPURCH', 'Field', 'Caption', "Last Purchase Amount")
DBSETPROP('VENDOR.DLASTPMT', 'Field', 'Caption', "Date of Last Payment")
DBSETPROP('VENDOR.NLASTPMT', 'Field', 'Caption', "Last Payment Amount")
DBSETPROP('VENDOR.NTOTPURCH', 'Field', 'Caption', "Total Purchases")
DBSETPROP('VENDOR.CBPHONE', 'Field', 'Caption', "Billing Phone")
DBSETPROP('VENDOR.CBPHEXT', 'Field', 'Caption', "Billing Phone Ext")
DBSETPROP('VENDOR.CPHONECELL', 'Field', 'Caption', "Cell Phone")
DBSETPROP('VENDOR.CBFAXPHONE', 'Field', 'Caption', "Billing Fax Phone")
DBSETPROP('VENDOR.CBFAXEXT', 'Field', 'Caption', "Billing Fax Phone Ext")
DBSETPROP('VENDOR.LVENDCOMP', 'Field', 'Caption', "Workers Comp Flag")
DBSETPROP('VENDOR.DVENDCOMP', 'Field', 'Caption', "Workers Comp Expiration")
DBSETPROP('VENDOR.NCURBAL', 'Field', 'Caption', "Current Balance")
DBSETPROP('VENDOR.NBAL30_60', 'Field', 'Caption', "30 - 60 Balance")
DBSETPROP('VENDOR.NBAL60_90', 'Field', 'Caption', "60 - 90 Balance")
DBSETPROP('VENDOR.NBALOV90', 'Field', 'Caption', "Over 90 Balance")
DBSETPROP('VENDOR.NCREDITLIM', 'Field', 'Caption', "Credit Limit")
DBSETPROP('VENDOR.NMINCHECK', 'Field', 'Caption', "Minimum Check Amount")
DBSETPROP('VENDOR.LHOLD', 'Field', 'Caption', "Vendor On Hold")
DBSETPROP('VENDOR.CSORTFIELD', 'Field', 'Caption', "Vendor Name")
DBSETPROP('VENDOR.LINSURANCE', 'Field', 'Caption', "Insurance Certificate")
DBSETPROP('VENDOR.DINSDATE', 'Field', 'Caption', "Insurance Valid-Through")
DBSETPROP('VENDOR.LSKIPCHECK', 'Field', 'Caption', "Don't create a check for this vendor.")
DBSETPROP('VENDOR.CCHKMEMO', 'Field', 'Caption', "Check Memo")
DBSETPROP('VENDOR.LSTUBDETAIL', 'Field', 'Caption', "Print Detailed Stub")
DBSETPROP('VENDOR.CEMAIL', 'Field', 'Caption', "Email")
DBSETPROP('VENDOR.ITAXIDTYPE', 'Field', 'Caption', "Type of TIN")
DBSETPROP('VENDOR.DADDED', 'Field', 'Caption', "Added")
DBSETPROP('VENDOR.DCHANGED', 'Field', 'Caption', "Changed")
DBSETPROP('VENDOR.CADDBY', 'Field', 'Caption', "Added By")
DBSETPROP('VENDOR.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('VENDOR.LINACTIVE', 'Field', 'Caption', "Linactive")
DBSETPROP('VENDOR.CENERGYLINKID', 'Field', 'Caption', "EnergyLinkID")
DBSETPROP('VENDOR.CQBTERMS', 'Field', 'Caption', "QB Terms")
DBSETPROP('VENDOR.EDITSEQ', 'Field', 'Caption', "QB Edit Seq")
DBSETPROP('VENDOR.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('VENDOR.CEMAILCODE', 'Field', 'Caption', "Email Verification Code")
DBSETPROP('VENDOR.LEMAILOPT', 'Field', 'Caption', "Email Opt Out")
DBSETPROP('VENDOR.LEMAILVER', 'Field', 'Caption', "Email Verification")
DBSETPROP('VENDOR.CSTRUCT', 'Field', 'Caption', "Structure")
DBSETPROP('VENDOR.LVERIFIED', 'Field', 'Caption', "Verified")
CREATE TRIGGER ON 'VENDOR' FOR DELETE AS __ri_delete_vendor().AND.(foxaudit())
CREATE TRIGGER ON 'VENDOR' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'VENDOR' FOR UPDATE AS __ri_update_vendor().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_WELLHIST
***** Table setup for WELLHIST *****
CREATE TABLE 'WELLHIST.DBF' NAME 'WELLHIST' (PK I NOT NULL, ;
                       CIDWHST C(8) NOT NULL, ;
                       CRECTYPE C(1) NOT NULL DEFAULT "R", ;
                       CWELLID C(10) NOT NULL, ;
                       HYEAR C(4) NOT NULL, ;
                       HPERIOD C(2) NOT NULL, ;
                       CRUNYEAR C(4) NOT NULL, ;
                       NRUNNO I NOT NULL, ;
                       HDATE D NOT NULL, ;
                       NGASINC N(12, 2) NOT NULL, ;
                       NGROSSGAS N(12, 2) NOT NULL, ;
                       NOILINC N(12, 2) NOT NULL, ;
                       NGROSSOIL N(12, 2) NOT NULL, ;
                       NOTHINC N(12, 2) NOT NULL, ;
                       NTRPINC N(12, 2) NOT NULL, ;
                       NMISCINC1 N(12, 2) NOT NULL, ;
                       NMISCINC2 N(12, 2) NOT NULL, ;
                       NTOTMKTG N(12, 2) NOT NULL, ;
                       NTOTALE N(12, 2) NOT NULL, ;
                       NEXPCL1 N(12, 2) NOT NULL, ;
                       NEXPCL2 N(12, 2) NOT NULL, ;
                       NEXPCL3 N(12, 2) NOT NULL, ;
                       NEXPCL4 N(12, 2) NOT NULL, ;
                       NEXPCL5 N(12, 2) NOT NULL, ;
                       NEXPCLA N(12, 2) NOT NULL, ;
                       NEXPCLB N(12, 2) NOT NULL, ;
                       NTOTBBLTXR N(9, 2) NOT NULL, ;
                       NTOTBBLTXW N(9, 2) NOT NULL, ;
                       NTOTMCFTXR N(9, 2) NOT NULL, ;
                       NTOTMCFTXW N(9, 2) NOT NULL, ;
                       NTOTBBLTX1 N(9, 2) NOT NULL, ;
                       NTOTBBLTX2 N(9, 2) NOT NULL, ;
                       NTOTBBLTX3 N(9, 2) NOT NULL, ;
                       NTOTBBLTX4 N(9, 2) NOT NULL, ;
                       NTOTMCFTX1 N(9, 2) NOT NULL, ;
                       NTOTMCFTX2 N(9, 2) NOT NULL, ;
                       NTOTMCFTX3 N(9, 2) NOT NULL, ;
                       NTOTMCFTX4 N(9, 2) NOT NULL, ;
                       NTOTOTHTX1 N(9, 2) NOT NULL, ;
                       NTOTOTHTX2 N(9, 2) NOT NULL, ;
                       NTOTOTHTX3 N(9, 2) NOT NULL, ;
                       NTOTOTHTX4 N(9, 2) NOT NULL, ;
                       NGBBLTAX1 N(9, 2) NOT NULL, ;
                       NGBBLTAX2 N(9, 2) NOT NULL, ;
                       NGBBLTAX3 N(9, 2) NOT NULL, ;
                       NGBBLTAX4 N(9, 2) NOT NULL, ;
                       NGMCFTAX1 N(9, 2) NOT NULL, ;
                       NGMCFTAX2 N(9, 2) NOT NULL, ;
                       NGMCFTAX3 N(9, 2) NOT NULL, ;
                       NGMCFTAX4 N(9, 2) NOT NULL, ;
                       NGOTHTAX1 N(9, 2) NOT NULL, ;
                       NGOTHTAX2 N(9, 2) NOT NULL, ;
                       NGOTHTAX3 N(9, 2) NOT NULL, ;
                       NGOTHTAX4 N(9, 2) NOT NULL, ;
                       NGROSSBBL N(15, 2) NOT NULL, ;
                       NTOTBBL N(15, 2) NOT NULL, ;
                       NGROSSMCF N(15, 2) NOT NULL, ;
                       NTOTMCF N(15, 2) NOT NULL, ;
                       NTOTPROD N(15, 2) NOT NULL, ;
                       NTOTSALT I NOT NULL, ;
                       NGASINT N(11, 7) NOT NULL, ;
                       NOILINT N(11, 7) NOT NULL, ;
                       NROYINT N(12, 2) NOT NULL, ;
                       NWRKINT N(12, 2) NOT NULL, ;
                       CGROUP C(2) NOT NULL, ;
                       NROYGAS N(12, 2) NOT NULL, ;
                       NROYOIL N(12, 2) NOT NULL, ;
                       LROYSEVTX L NOT NULL, ;
                       NDAYSON N(5, 0) NOT NULL, ;
                       NPROCESS N(1, 0) NOT NULL, ;
                       NFLATGAS N(7, 2) NOT NULL, ;
                       NFLATOIL N(7, 2) NOT NULL, ;
                       NGATHER N(12, 2) NOT NULL, ;
                       NCOMPRESS N(12, 2) NOT NULL, ;
                       NNETEXP N(12, 2) NOT NULL, ;
                       LSEVPURCHOIL L NOT NULL, ;
                       LSEVPURCHGAS L NOT NULL, ;
                       LMANUAL L NOT NULL, ;
                       NTOTMISC1 N(12, 5) NOT NULL, ;
                       NTOTMISC2 N(12, 5) NOT NULL, ;
                       NPLUGAMT N(12, 2) NOT NULL, ;
                       CDECK C(10) NOT NULL, ;
                       NREVINC1 N(12, 2) NOT NULL, ;
                       NREVINC2 N(12, 2) NOT NULL, ;
                       NREVINC3 N(12, 2) NOT NULL, ;
                       NREVINC4 N(12, 2) NOT NULL, ;
                       NREVINC5 N(12, 2) NOT NULL, ;
                       NREVINC6 N(12, 2) NOT NULL, ;
                       NREVINC7 N(12, 2) NOT NULL, ;
                       NREVGROSS1 N(12, 2) NOT NULL, ;
                       NREVGROSS2 N(12, 2) NOT NULL, ;
                       NREVGROSS3 N(12, 2) NOT NULL, ;
                       NREVGROSS4 N(12, 2) NOT NULL, ;
                       NREVGROSS5 N(12, 2) NOT NULL, ;
                       NREVGROSS6 N(12, 2) NOT NULL, ;
                       NREVGROSS7 N(12, 2) NOT NULL, ;
                       NUNITS1 N(12, 4) NOT NULL, ;
                       NUNITS2 N(12, 4) NOT NULL, ;
                       NUNITS3 N(12, 4) NOT NULL, ;
                       NUNITS4 N(12, 4) NOT NULL, ;
                       NUNITS5 N(12, 4) NOT NULL, ;
                       NUNITS6 N(12, 4) NOT NULL, ;
                       NUNITS7 N(12, 4) NOT NULL, ;
                       NGROSSUNITS1 N(12, 4) NOT NULL, ;
                       NGROSSUNITS2 N(12, 4) NOT NULL, ;
                       NGROSSUNITS3 N(12, 4) NOT NULL, ;
                       NGROSSUNITS4 N(12, 4) NOT NULL, ;
                       NGROSSUNITS5 N(12, 4) NOT NULL, ;
                       NGROSSUNITS6 N(12, 4) NOT NULL, ;
                       NGROSSUNITS7 N(12, 4) NOT NULL)

***** Create each index for WELLHIST *****
INDEX ON CGROUP TAG CGROUP COLLATE 'MACHINE'
INDEX ON CIDWHST TAG CIDWHST COLLATE 'MACHINE'
INDEX ON CRECTYPE TAG CRECTYPE COLLATE 'MACHINE'
INDEX ON CRUNYEAR TAG CRUNYEAR COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON YEAR(HDATE) TAG HDATE COLLATE 'MACHINE'
INDEX ON NRUNNO TAG NRUNNO COLLATE 'MACHINE'
INDEX ON CWELLID+PADL(ALLTRIM(STR(NRUNNO)),3,"0")+CRUNYEAR+HYEAR+HPERIOD+CRECTYPE TAG WELLHIST COLLATE 'MACHINE'
INDEX ON CWELLID+HYEAR+HPERIOD+CRECTYPE TAG WELLPRD COLLATE 'MACHINE'
INDEX ON CWELLID+HYEAR+HPERIOD+STR(NRUNNO) TAG WELLPRDRUN COLLATE 'MACHINE'
INDEX ON HYEAR+HPERIOD TAG YEARPRD COLLATE 'MACHINE'

***** Change properties for WELLHIST *****
DBSETPROP('WELLHIST.PK', 'Field', 'Caption', "PK")
DBSETPROP('WELLHIST.CIDWHST', 'Field', 'Caption', "Primary Key")
DBSETPROP('WELLHIST.CRECTYPE', 'Field', 'Caption', "Record Type")
DBSETPROP('WELLHIST.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('WELLHIST.HYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('WELLHIST.HPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('WELLHIST.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('WELLHIST.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('WELLHIST.HDATE', 'Field', 'Caption', "Accounting Date")
DBSETPROP('WELLHIST.NGASINC', 'Field', 'Caption', "Net Gas Revenue")
DBSETPROP('WELLHIST.NGROSSGAS', 'Field', 'Caption', "Gross Gas Revenue")
DBSETPROP('WELLHIST.NOILINC', 'Field', 'Caption', "Net Oil Revenue")
DBSETPROP('WELLHIST.NGROSSOIL', 'Field', 'Caption', "Gross Oil Revenue")
DBSETPROP('WELLHIST.NOTHINC', 'Field', 'Caption', "Other Product Revenue")
DBSETPROP('WELLHIST.NTRPINC', 'Field', 'Caption', "Transportation Revenue")
DBSETPROP('WELLHIST.NMISCINC1', 'Field', 'Caption', "Misc Revenue 1")
DBSETPROP('WELLHIST.NMISCINC2', 'Field', 'Caption', "Misc Revenue 2")
DBSETPROP('WELLHIST.NTOTMKTG', 'Field', 'Caption', "Marketing Expense")
DBSETPROP('WELLHIST.NTOTALE', 'Field', 'Caption', "Operating Expenses")
DBSETPROP('WELLHIST.NEXPCL1', 'Field', 'Caption', "Expense Class 1 Expenses")
DBSETPROP('WELLHIST.NEXPCL2', 'Field', 'Caption', "Expense Class 2 Expenses")
DBSETPROP('WELLHIST.NEXPCL3', 'Field', 'Caption', "Expense Class 3 Expenses")
DBSETPROP('WELLHIST.NEXPCL4', 'Field', 'Caption', "Expense Class 4 Expenses")
DBSETPROP('WELLHIST.NEXPCL5', 'Field', 'Caption', "Expense Class 5 Expenses")
DBSETPROP('WELLHIST.NEXPCLA', 'Field', 'Caption', "After Casing Point Expenses")
DBSETPROP('WELLHIST.NEXPCLB', 'Field', 'Caption', "Before Casing Point Expenses")
DBSETPROP('WELLHIST.NTOTBBLTXR', 'Field', 'Caption', "Royalty Owner Oil Tax")
DBSETPROP('WELLHIST.NTOTBBLTXW', 'Field', 'Caption', "Working Int Owner Oil Tax")
DBSETPROP('WELLHIST.NTOTMCFTXR', 'Field', 'Caption', "Royalty Owner Gas Tax")
DBSETPROP('WELLHIST.NTOTMCFTXW', 'Field', 'Caption', "Working Int Owner Gas Tax")
DBSETPROP('WELLHIST.NTOTBBLTX1', 'Field', 'Caption', "Net Oil Tax 1")
DBSETPROP('WELLHIST.NTOTBBLTX2', 'Field', 'Caption', "Net Oil Tax 2")
DBSETPROP('WELLHIST.NTOTBBLTX3', 'Field', 'Caption', "Net Oil Tax 3")
DBSETPROP('WELLHIST.NTOTBBLTX4', 'Field', 'Caption', "Net Oil Tax 4")
DBSETPROP('WELLHIST.NTOTMCFTX1', 'Field', 'Caption', "Net Gas Tax 1")
DBSETPROP('WELLHIST.NTOTMCFTX2', 'Field', 'Caption', "Net Gas Tax 2")
DBSETPROP('WELLHIST.NTOTMCFTX3', 'Field', 'Caption', "Net Gas Tax 3")
DBSETPROP('WELLHIST.NTOTMCFTX4', 'Field', 'Caption', "Net Gas Tax 4")
DBSETPROP('WELLHIST.NTOTOTHTX1', 'Field', 'Caption', "Net Other Tax 1")
DBSETPROP('WELLHIST.NTOTOTHTX2', 'Field', 'Caption', "Net Other Tax 2")
DBSETPROP('WELLHIST.NTOTOTHTX3', 'Field', 'Caption', "Net Other Tax 3")
DBSETPROP('WELLHIST.NTOTOTHTX4', 'Field', 'Caption', "Net Other Tax 4")
DBSETPROP('WELLHIST.NGBBLTAX1', 'Field', 'Caption', "Gross Oil Tax 1")
DBSETPROP('WELLHIST.NGBBLTAX2', 'Field', 'Caption', "Gross Oil Tax 2")
DBSETPROP('WELLHIST.NGBBLTAX3', 'Field', 'Caption', "Gross BBL Tax 3")
DBSETPROP('WELLHIST.NGBBLTAX4', 'Field', 'Caption', "Gross Oil Tax 4")
DBSETPROP('WELLHIST.NGMCFTAX1', 'Field', 'Caption', "Gross Gas Tax 1")
DBSETPROP('WELLHIST.NGMCFTAX2', 'Field', 'Caption', "Gross Gas Tax 2")
DBSETPROP('WELLHIST.NGMCFTAX3', 'Field', 'Caption', "Gross Gas Tax 3")
DBSETPROP('WELLHIST.NGMCFTAX4', 'Field', 'Caption', "Gross Gas Tax 4")
DBSETPROP('WELLHIST.NGOTHTAX1', 'Field', 'Caption', "Gross Other Tax 1")
DBSETPROP('WELLHIST.NGOTHTAX2', 'Field', 'Caption', "Gross Other Tax 2")
DBSETPROP('WELLHIST.NGOTHTAX3', 'Field', 'Caption', "Gross Other Tax 3")
DBSETPROP('WELLHIST.NGOTHTAX4', 'Field', 'Caption', "Gross Other Tax 4")
DBSETPROP('WELLHIST.NGROSSBBL', 'Field', 'Caption', "Gross BBL Produced")
DBSETPROP('WELLHIST.NTOTBBL', 'Field', 'Caption', "Net BBL Produced")
DBSETPROP('WELLHIST.NGROSSMCF', 'Field', 'Caption', "Gross MCF Produced")
DBSETPROP('WELLHIST.NTOTMCF', 'Field', 'Caption', "Net MCF Produced")
DBSETPROP('WELLHIST.NTOTPROD', 'Field', 'Caption', "Total Other Produced")
DBSETPROP('WELLHIST.NTOTSALT', 'Field', 'Caption', "Total BBL of Water")
DBSETPROP('WELLHIST.NGASINT', 'Field', 'Caption', "Royalty Gas Pct")
DBSETPROP('WELLHIST.NOILINT', 'Field', 'Caption', "Royalty Oil Pct")
DBSETPROP('WELLHIST.NROYINT', 'Field', 'Caption', "Paid to Royalty Owners")
DBSETPROP('WELLHIST.NWRKINT', 'Field', 'Caption', "Paid to Working Int Owners")
DBSETPROP('WELLHIST.CGROUP', 'Field', 'Caption', "Well Group")
DBSETPROP('WELLHIST.LROYSEVTX', 'Field', 'Caption', "Royalty Owners Exempt From Sev Tax")
DBSETPROP('WELLHIST.NDAYSON', 'Field', 'Caption', "Total Days of Production")
DBSETPROP('WELLHIST.NPROCESS', 'Field', 'Caption', "Well Processed")
DBSETPROP('WELLHIST.NFLATGAS', 'Field', 'Caption', "Flat Gas Amount")
DBSETPROP('WELLHIST.NFLATOIL', 'Field', 'Caption', "Flat Oil Amount")
DBSETPROP('WELLHIST.NGATHER', 'Field', 'Caption', "Gathering Charge")
DBSETPROP('WELLHIST.NCOMPRESS', 'Field', 'Caption', "Compression Charge")
DBSETPROP('WELLHIST.NNETEXP', 'Field', 'Caption', "Net Expenses")
DBSETPROP('WELLHIST.LSEVPURCHOIL', 'Field', 'Caption', "Purchaser Pays Oil Sev Tax")
DBSETPROP('WELLHIST.LSEVPURCHGAS', 'Field', 'Caption', "Purchaser Pays Gas Sev Tax")
DBSETPROP('WELLHIST.LMANUAL', 'Field', 'Caption', "Manual Entry")
DBSETPROP('WELLHIST.NTOTMISC1', 'Field', 'Caption', "Misc1 Units")
DBSETPROP('WELLHIST.NTOTMISC2', 'Field', 'Caption', "Misc2 Units")
DBSETPROP('WELLHIST.NPLUGAMT', 'Field', 'Caption', "Plugging Amt")
DBSETPROP('WELLHIST.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('WELLHIST.NREVINC1', 'Field', 'Caption', "Rev Inc 1")
DBSETPROP('WELLHIST.NREVINC2', 'Field', 'Caption', "Rev Inc 2")
DBSETPROP('WELLHIST.NREVINC3', 'Field', 'Caption', "Rev Inc 3")
DBSETPROP('WELLHIST.NREVINC4', 'Field', 'Caption', "Rev Inc 4")
DBSETPROP('WELLHIST.NREVINC5', 'Field', 'Caption', "Rev Inc 5")
DBSETPROP('WELLHIST.NREVINC6', 'Field', 'Caption', "Rev In 6")
DBSETPROP('WELLHIST.NREVINC7', 'Field', 'Caption', "Rev Inc 7")
DBSETPROP('WELLHIST.NREVGROSS1', 'Field', 'Caption', "Gross Rev 1")
DBSETPROP('WELLHIST.NREVGROSS2', 'Field', 'Caption', "Gross Rev 2")
DBSETPROP('WELLHIST.NREVGROSS3', 'Field', 'Caption', "Gross Rev 3")
DBSETPROP('WELLHIST.NREVGROSS4', 'Field', 'Caption', "Gross Rev 4")
DBSETPROP('WELLHIST.NREVGROSS5', 'Field', 'Caption', "Gross Rev 5")
DBSETPROP('WELLHIST.NREVGROSS6', 'Field', 'Caption', "Gross Rev 6")
DBSETPROP('WELLHIST.NREVGROSS7', 'Field', 'Caption', "Gross Rev 7")
DBSETPROP('WELLHIST.NUNITS1', 'Field', 'Caption', "Rev 1 Units")
DBSETPROP('WELLHIST.NUNITS2', 'Field', 'Caption', "Rev 2 Units")
DBSETPROP('WELLHIST.NUNITS3', 'Field', 'Caption', "Rev 3 Units")
DBSETPROP('WELLHIST.NUNITS4', 'Field', 'Caption', "Rev 4 Units")
DBSETPROP('WELLHIST.NUNITS5', 'Field', 'Caption', "Rev 5 Units")
DBSETPROP('WELLHIST.NUNITS6', 'Field', 'Caption', "Rev 6 Units")
DBSETPROP('WELLHIST.NUNITS7', 'Field', 'Caption', "Rev 7 Units")
DBSETPROP('WELLHIST.NGROSSUNITS1', 'Field', 'Caption', "Rev 1 Gross Units")
DBSETPROP('WELLHIST.NGROSSUNITS2', 'Field', 'Caption', "Rev 2 Gross Units")
DBSETPROP('WELLHIST.NGROSSUNITS3', 'Field', 'Caption', "Rev 3 Gross Units")
DBSETPROP('WELLHIST.NGROSSUNITS4', 'Field', 'Caption', "Rev 4 Gross Units")
DBSETPROP('WELLHIST.NGROSSUNITS5', 'Field', 'Caption', "Rev 5 Gross Units")
DBSETPROP('WELLHIST.NGROSSUNITS6', 'Field', 'Caption', "Rev 6 Gross Units")
DBSETPROP('WELLHIST.NGROSSUNITS7', 'Field', 'Caption', "Rev 7 Gross Units")
CREATE TRIGGER ON 'WELLHIST' FOR DELETE AS foxaudit(cidwhst,,,"CIDWHST")
CREATE TRIGGER ON 'WELLHIST' FOR INSERT AS foxaudit(cidwhst,,,"CIDWHST")
CREATE TRIGGER ON 'WELLHIST' FOR UPDATE AS foxaudit(cidwhst,,,"CIDWHST")
ENDFUNC

FUNCTION MakeTable_WELLINV
***** Table setup for WELLINV *****
CREATE TABLE 'WELLINV.DBF' NAME 'WELLINV' (CIDWINV C(8) NOT NULL, ;
                      CWELLID C(10) NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      NWORKINT N(11, 7) NOT NULL, ;
                      CTYPEINT C(1) NOT NULL DEFAULT "B", ;
                      CTYPEINV C(1) NOT NULL DEFAULT "W", ;
                      NINTCLASS1 N(11, 7) NOT NULL DEFAULT 0, ;
                      NINTCLASS2 N(11, 7) NOT NULL DEFAULT 0, ;
                      NINTCLASS3 N(11, 7) NOT NULL DEFAULT 0, ;
                      NINTCLASS4 N(11, 7) NOT NULL DEFAULT 0, ;
                      NINTCLASS5 N(11, 7) NOT NULL DEFAULT 0, ;
                      NREVOIL N(11, 7) NOT NULL DEFAULT 0, ;
                      NREVGAS N(11, 7) NOT NULL DEFAULT 0, ;
                      NREVTRP N(11, 7) NOT NULL DEFAULT 0, ;
                      NREVOTH N(11, 7) NOT NULL, ;
                      NREVMISC1 N(11, 7) NOT NULL DEFAULT 0, ;
                      NREVMISC2 N(11, 7) NOT NULL DEFAULT 0, ;
                      CDIRECT C(1) NOT NULL DEFAULT "N", ;
                      NFLATRATE N(7, 2) NOT NULL DEFAULT 0, ;
                      CPROGCODE C(10) NOT NULL, ;
                      LPROGRAM L NOT NULL DEFAULT .F., ;
                      LJIB L NOT NULL DEFAULT .F., ;
                      DINVDATE D NOT NULL DEFAULT {}, ;
                      NINVAMOUNT N(12, 2) NOT NULL DEFAULT 0, ;
                      NINTANPCT N(6, 2) NOT NULL DEFAULT 0, ;
                      NLEASEPCT N(6, 2) NOT NULL DEFAULT 0, ;
                      NTANPCT N(6, 2) NOT NULL DEFAULT 0, ;
                      NINTANAMT N(9, 2) NOT NULL DEFAULT 0, ;
                      NLEASEAMT N(9, 2) NOT NULL DEFAULT 0, ;
                      NTANAMT N(9, 2) NOT NULL DEFAULT 0, ;
                      LONHOLD L NOT NULL DEFAULT .F., ;
                      CREASON C(3) NOT NULL, ;
                      LTANWO L NOT NULL DEFAULT .F., ;
                      CTAXFLAG C(1) NOT NULL, ;
                      MNOTES M NOT NULL, ;
                      NBCPINT N(11, 7) NOT NULL DEFAULT 0, ;
                      NACPINT N(11, 7) NOT NULL DEFAULT 0, ;
                      NAPOINT N(11, 7) NOT NULL, ;
                      LFLAT L NOT NULL DEFAULT .F., ;
                      CFLATSTART C(2) NOT NULL, ;
                      NFLATFREQ I NOT NULL, ;
                      NREVTAX1 N(11, 7) NOT NULL DEFAULT 0, ;
                      NREVTAX2 N(11, 7) NOT NULL DEFAULT 0, ;
                      NREVTAX3 N(11, 7) NOT NULL, ;
                      NREVTAX4 N(11, 7) NOT NULL, ;
                      NREVTAX5 N(11, 7) NOT NULL, ;
                      NREVTAX6 N(11, 7) NOT NULL, ;
                      NREVTAX7 N(11, 7) NOT NULL, ;
                      NREVTAX8 N(11, 7) NOT NULL, ;
                      NREVTAX9 N(11, 7) NOT NULL, ;
                      NREVTAX10 N(11, 7) NOT NULL, ;
                      NREVTAX11 N(11, 7) NOT NULL, ;
                      NREVTAX12 N(11, 7) NOT NULL, ;
                      LPAYOUT L NOT NULL, ;
                      DADDED T NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      DCHANGED T NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      NSURFACEPEN N(11, 7) NOT NULL, ;
                      NPLUGPCT N(11, 7) NOT NULL, ;
                      NWI N(11, 7) NOT NULL, ;
                      NRI N(11, 7) NOT NULL, ;
                      NFLATMCF N(9, 2) NOT NULL, ;
                      NFLATBBL N(9, 2) NOT NULL, ;
                      NTAXPCT N(5, 2) NOT NULL, ;
                      CDECK C(10) NOT NULL, ;
                      LDEFAULT L NOT NULL, ;
                      NNRI N(11, 7) NOT NULL, ;
                      NOTHERPEN N(11, 7) NOT NULL, ;
                      NUNITS N(8, 4) NOT NULL, ;
                      NREVINT1 N(11, 7) NOT NULL, ;
                      NREVINT2 N(11, 7) NOT NULL, ;
                      NREVINT3 N(11, 7) NOT NULL, ;
                      NREVINT4 N(11, 7) NOT NULL, ;
                      NREVINT5 N(11, 7) NOT NULL, ;
                      NREVINT6 N(11, 7) NOT NULL, ;
                      NREVINT7 N(11, 7) NOT NULL)

***** Create each index for WELLINV *****
INDEX ON CDECK TAG CDECK COLLATE 'MACHINE'
INDEX ON CIDWINV+COWNERID+CWELLID TAG CIDINVWELL COLLATE 'MACHINE'
INDEX ON CIDWINV TAG CIDWINV COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CPROGCODE TAG CPROGCODE COLLATE 'MACHINE'
INDEX ON CTYPEINV TAG CTYPEINV COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CDECK+COWNERID+CWELLID+CTYPEINV+CPROGCODE TAG DECKLOOKUP COLLATE 'MACHINE'
INDEX ON CDECK+CWELLID+COWNERID+CTYPEINV TAG DECKORDER COLLATE 'MACHINE'
INDEX ON LFLAT TAG LFLAT BINARY
INDEX ON LONHOLD TAG LONHOLD BINARY
INDEX ON CWELLID+COWNERID+CTYPEINV TAG WELLINVID COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'

***** Change properties for WELLINV *****
DBSETPROP('WELLINV.CIDWINV', 'Field', 'Caption', "Primary Key")
DBSETPROP('WELLINV.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('WELLINV.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('WELLINV.NWORKINT', 'Field', 'Caption', "Working Interest")
DBSETPROP('WELLINV.CTYPEINT', 'Field', 'Caption', "Interest Type")
DBSETPROP('WELLINV.CTYPEINV', 'Field', 'Caption', "Owner Type")
DBSETPROP('WELLINV.NINTCLASS1', 'Field', 'Caption', "Expense Class 1 Interest")
DBSETPROP('WELLINV.NINTCLASS2', 'Field', 'Caption', "Expense Class 2 Interest")
DBSETPROP('WELLINV.NINTCLASS3', 'Field', 'Caption', "Expense Class 3 Interest")
DBSETPROP('WELLINV.NINTCLASS4', 'Field', 'Caption', "Expense Class 4 Interest")
DBSETPROP('WELLINV.NINTCLASS5', 'Field', 'Caption', "Expense Class 5 Interest")
DBSETPROP('WELLINV.NREVOIL', 'Field', 'Caption', "Oil Revenue Interest")
DBSETPROP('WELLINV.NREVGAS', 'Field', 'Caption', "Gas Revenue Interest")
DBSETPROP('WELLINV.NREVTRP', 'Field', 'Caption', "Transportation Revenue Interest")
DBSETPROP('WELLINV.NREVOTH', 'Field', 'Caption', "Other Revenue Pct")
DBSETPROP('WELLINV.NREVMISC1', 'Field', 'Caption', "Miscellaneous Revenue Interest 1")
DBSETPROP('WELLINV.NREVMISC2', 'Field', 'Caption', "Miscellaneous Revenue Interest 2")
DBSETPROP('WELLINV.CDIRECT', 'Field', 'Caption', "Direct Pay Flag")
DBSETPROP('WELLINV.NFLATRATE', 'Field', 'Caption', "Flat Rate Royalty Amount")
DBSETPROP('WELLINV.CPROGCODE', 'Field', 'Caption', "Program Code")
DBSETPROP('WELLINV.LPROGRAM', 'Field', 'Caption', "Program Flag")
DBSETPROP('WELLINV.LJIB', 'Field', 'Caption', "JIB Flag")
DBSETPROP('WELLINV.DINVDATE', 'Field', 'Caption', "Investment Date")
DBSETPROP('WELLINV.NINVAMOUNT', 'Field', 'Caption', "Investment Amount")
DBSETPROP('WELLINV.NINTANPCT', 'Field', 'Caption', "Intangible Percentage")
DBSETPROP('WELLINV.NLEASEPCT', 'Field', 'Caption', "Leasehold Percentage")
DBSETPROP('WELLINV.NTANPCT', 'Field', 'Caption', "Tangible Percentage")
DBSETPROP('WELLINV.NINTANAMT', 'Field', 'Caption', "Intangible Amount")
DBSETPROP('WELLINV.NLEASEAMT', 'Field', 'Caption', "Leasehold Amount")
DBSETPROP('WELLINV.NTANAMT', 'Field', 'Caption', "Tangible Amount")
DBSETPROP('WELLINV.LONHOLD', 'Field', 'Caption', "Interest On Hold Flag")
DBSETPROP('WELLINV.CREASON', 'Field', 'Caption', "Suspense Reason Code")
DBSETPROP('WELLINV.LTANWO', 'Field', 'Caption', "Write-Off Tangible")
DBSETPROP('WELLINV.CTAXFLAG', 'Field', 'Caption', "Tax Paid Flag")
DBSETPROP('WELLINV.MNOTES', 'Field', 'Caption', "Notes")
DBSETPROP('WELLINV.NBCPINT', 'Field', 'Caption', "Before Casing Point Interest")
DBSETPROP('WELLINV.NACPINT', 'Field', 'Caption', "After Casing Point Interest")
DBSETPROP('WELLINV.NAPOINT', 'Field', 'Caption', "After Payout Interest")
DBSETPROP('WELLINV.LFLAT', 'Field', 'Caption', "Flat Rate Flag")
DBSETPROP('WELLINV.CFLATSTART', 'Field', 'Caption', "Flat Rate Starts")
DBSETPROP('WELLINV.NFLATFREQ', 'Field', 'Caption', "Flat Rate Frequency")
DBSETPROP('WELLINV.NREVTAX1', 'Field', 'Caption', "Oil Tax Interest")
DBSETPROP('WELLINV.NREVTAX2', 'Field', 'Caption', "Gas Tax Interest")
DBSETPROP('WELLINV.NREVTAX3', 'Field', 'Caption', "Other Tax 1")
DBSETPROP('WELLINV.NREVTAX4', 'Field', 'Caption', "Oil Tax 2")
DBSETPROP('WELLINV.NREVTAX5', 'Field', 'Caption', "Gas Tax 2")
DBSETPROP('WELLINV.NREVTAX6', 'Field', 'Caption', "Other Tax 2")
DBSETPROP('WELLINV.NREVTAX7', 'Field', 'Caption', "Oil Tax 3")
DBSETPROP('WELLINV.NREVTAX8', 'Field', 'Caption', "Gas Tax 3")
DBSETPROP('WELLINV.NREVTAX9', 'Field', 'Caption', "Other Tax 3")
DBSETPROP('WELLINV.NREVTAX10', 'Field', 'Caption', "Oil Tax 4")
DBSETPROP('WELLINV.NREVTAX11', 'Field', 'Caption', "Gas Tax 4")
DBSETPROP('WELLINV.NREVTAX12', 'Field', 'Caption', "Other Tax 4")
DBSETPROP('WELLINV.LPAYOUT', 'Field', 'Caption', "Reached Payout")
DBSETPROP('WELLINV.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('WELLINV.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('WELLINV.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('WELLINV.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('WELLINV.NSURFACEPEN', 'Field', 'Caption', "Surface Penalty")
DBSETPROP('WELLINV.NPLUGPCT', 'Field', 'Caption', "Plugging Pct")
DBSETPROP('WELLINV.NWI', 'Field', 'Caption', "WI From Farmout")
DBSETPROP('WELLINV.NRI', 'Field', 'Caption', "NRI Before Farmout")
DBSETPROP('WELLINV.NFLATMCF', 'Field', 'Caption', "Flat Rate per MCF")
DBSETPROP('WELLINV.NFLATBBL', 'Field', 'Caption', "Flat Rate per BBL")
DBSETPROP('WELLINV.NTAXPCT', 'Field', 'Caption', "State Tax W/H Pct")
DBSETPROP('WELLINV.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('WELLINV.LDEFAULT', 'Field', 'Caption', "Default Deck")
DBSETPROP('WELLINV.NNRI', 'Field', 'Caption', "NRI")
DBSETPROP('WELLINV.NOTHERPEN', 'Field', 'Caption', "Other Penalty")
DBSETPROP('WELLINV.NUNITS', 'Field', 'Caption', "JV Units")
DBSETPROP('WELLINV.NREVINT1', 'Field', 'Caption', "Rev Int 1")
DBSETPROP('WELLINV.NREVINT2', 'Field', 'Caption', "Rev Int 2")
DBSETPROP('WELLINV.NREVINT3', 'Field', 'Caption', "Rev Int 3")
DBSETPROP('WELLINV.NREVINT4', 'Field', 'Caption', "Rev Int 4")
DBSETPROP('WELLINV.NREVINT5', 'Field', 'Caption', "Rev Int 5")
DBSETPROP('WELLINV.NREVINT6', 'Field', 'Caption', "Rev Int 6")
DBSETPROP('WELLINV.NREVINT7', 'Field', 'Caption', "Rev Int 7")
CREATE TRIGGER ON 'WELLINV' FOR DELETE AS foxaudit(cidwinv,,,"cidwinv")
CREATE TRIGGER ON 'WELLINV' FOR INSERT AS foxaudit(cidwinv,,,"cidwinv")
CREATE TRIGGER ON 'WELLINV' FOR UPDATE AS foxaudit(cidwinv,,,"cidwinv")
ENDFUNC

FUNCTION MakeTable_WELLS
***** Table setup for WELLS *****
CREATE TABLE 'WELLS.DBF' NAME 'WELLS' (CWELLID C(10) NOT NULL, ;
                    CWELLNAME C(60) NOT NULL, ;
                    CLEGALNAME C(60) NOT NULL, ;
                    CTOWNSHIP C(40) NOT NULL, ;
                    CCOUNTY C(20) NOT NULL, ;
                    CSTATE C(2) NOT NULL, ;
                    NDEPTH N(5, 0) NOT NULL, ;
                    PRODDATE D NOT NULL, ;
                    CPARCEL C(30) NOT NULL, ;
                    CREVMCF C(10) NOT NULL, ;
                    CREVBBL C(10) NOT NULL, ;
                    NLANDPCT N(11, 7) NOT NULL, ;
                    NOVERPCT N(11, 7) NOT NULL, ;
                    NMCFPRICE N(9, 4) NOT NULL, ;
                    NBBLPRICE N(9, 4) NOT NULL, ;
                    CWELLSTAT C(1) NOT NULL, ;
                    CGROUP C(2) NOT NULL, ;
                    NOILINT N(11, 7) NOT NULL, ;
                    NGASINT N(11, 7) NOT NULL, ;
                    CMETERID C(15) NOT NULL, ;
                    CMETERID2 C(15) NOT NULL, ;
                    CMETERID3 C(15) NOT NULL, ;
                    CMETERID4 C(15) NOT NULL, ;
                    CMETERID5 C(15) NOT NULL, ;
                    LTHIRD_PRTY L NOT NULL, ;
                    LROYSEVTX L NOT NULL, ;
                    NPROCESS N(1, 0) NOT NULL, ;
                    MWELLNOTE M NOT NULL, ;
                    CFIELDID C(10) NOT NULL, ;
                    CFORMATION C(30) NOT NULL, ;
                    NACRES N(12, 2) NOT NULL, ;
                    NWELLCOUNT N(3, 0) NOT NULL, ;
                    CPERMIT1 C(20) NOT NULL, ;
                    CPERMIT2 C(20) NOT NULL, ;
                    CPERMIT3 C(20) NOT NULL, ;
                    CPERMIT4 C(20) NOT NULL, ;
                    CPERMIT5 C(20) NOT NULL, ;
                    CPERMIT6 C(20) NOT NULL, ;
                    CUSER1 C(20) NOT NULL, ;
                    CUSER2 C(20) NOT NULL, ;
                    CUSER3 C(20) NOT NULL, ;
                    CUSER4 C(20) NOT NULL, ;
                    CUSER5 C(20) NOT NULL, ;
                    CUSER6 C(20) NOT NULL, ;
                    NWRKSEVO N(11, 7) NOT NULL, ;
                    NWRKSEVG N(11, 7) NOT NULL, ;
                    NROYSEVG N(11, 7) NOT NULL, ;
                    NROYSEVO N(11, 7) NOT NULL, ;
                    LUSESEV L NOT NULL, ;
                    NELEVATION N(6, 0) NOT NULL, ;
                    LRECALC L NOT NULL, ;
                    LCOMPRESS L NOT NULL, ;
                    LGATHER L NOT NULL, ;
                    LSECTION29 L NOT NULL, ;
                    LDEVSHALE L NOT NULL, ;
                    NPCTELIG N(9, 4) NOT NULL, ;
                    DSOLD D NOT NULL, ;
                    NSELLPRICE N(12, 2) NOT NULL, ;
                    NCOMPRESS N(11, 7) NOT NULL, ;
                    NGATHER N(11, 7) NOT NULL, ;
                    DPRODDATE D NOT NULL, ;
                    LTAXEXEMPT1 L NOT NULL, ;
                    LTAXEXEMPT2 L NOT NULL, ;
                    CSECTION C(10) NOT NULL, ;
                    CLOT C(4) NOT NULL, ;
                    CRANGE C(20) NOT NULL, ;
                    CLOCATION C(25) NOT NULL, ;
                    CTNR C(30) NOT NULL, ;
                    CTABLE C(2) NOT NULL, ;
                    LTAXEXEMPT3 L NOT NULL, ;
                    LTAXEXEMPT4 L NOT NULL, ;
                    LSEV1O L NOT NULL, ;
                    LSEV2O L NOT NULL, ;
                    LSEV3O L NOT NULL, ;
                    LSEV4O L NOT NULL, ;
                    LSEV1G L NOT NULL, ;
                    LSEV2G L NOT NULL, ;
                    LSEV3G L NOT NULL, ;
                    LSEV4G L NOT NULL, ;
                    LSEV1P L NOT NULL, ;
                    LSEV2P L NOT NULL, ;
                    LSEV3P L NOT NULL, ;
                    LSEV4P L NOT NULL, ;
                    NINVESTMENT N(12, 2) NOT NULL, ;
                    LPAYOUT L NOT NULL, ;
                    COWNERID C(10) NOT NULL, ;
                    LDIROILPURCH L NOT NULL, ;
                    LDIRGASPURCH L NOT NULL, ;
                    LHOUSEGAS L NOT NULL, ;
                    CIDTANK C(10) NOT NULL, ;
                    DADDED T NOT NULL, ;
                    CADDEDBY C(10) NOT NULL, ;
                    DCHANGED T NOT NULL, ;
                    CCHANGEDBY C(10) NOT NULL, ;
                    LSECREC L NOT NULL, ;
                    CUNIT C(10) NOT NULL, ;
                    CPROSPECT C(10) NOT NULL, ;
                    CLEASENO C(10) NOT NULL, ;
                    DCOMPDATE D NOT NULL, ;
                    DSPUDDATE D NOT NULL, ;
                    CFARMNO C(20) NOT NULL, ;
                    CIDPUMPER C(8) NOT NULL, ;
                    LCOMPRESSOR L NOT NULL, ;
                    LEXCLROYCOMP L NOT NULL, ;
                    CLEASEID C(10) NOT NULL, ;
                    CWELLTAXID C(15) NOT NULL, ;
                    CMETERID6 C(15) NOT NULL, ;
                    CMETERID7 C(15) NOT NULL, ;
                    CMETERID8 C(15) NOT NULL, ;
                    CMETERID9 C(15) NOT NULL, ;
                    CMETERID10 C(15) NOT NULL, ;
                    CLATITUDE C(15) NOT NULL, ;
                    CLONGITUDE C(15) NOT NULL, ;
                    DPURCHASED D NOT NULL, ;
                    CPURCHFROM C(40) NOT NULL, ;
                    DPLUGGED D NOT NULL, ;
                    LLEGALDISP L NOT NULL, ;
                    CSYSTEM C(30) NOT NULL, ;
                    CPROPNO C(20) NOT NULL, ;
                    COILPURCHNO C(20) NOT NULL, ;
                    CGASPURCHNO C(20) NOT NULL, ;
                    COTHPURCHNO C(20) NOT NULL, ;
                    LSTRIPPER L NOT NULL, ;
                    CNRA1 C(15) NOT NULL, ;
                    CNRA2 C(15) NOT NULL, ;
                    CNRA3 C(15) NOT NULL, ;
                    CNRA4 C(15) NOT NULL, ;
                    CNRA5 C(15) NOT NULL, ;
                    CNRA6 C(15) NOT NULL, ;
                    LNGLETHANE L NOT NULL, ;
                    LNGLPROPANE L NOT NULL, ;
                    LNGLBUTANE L NOT NULL, ;
                    LNGLISOBUTANE L NOT NULL, ;
                    LNGLPENTANE L NOT NULL, ;
                    CWVDISTRICT C(60) NOT NULL, ;
                    CLISTID C(36) NOT NULL, ;
                    EDITSEQ C(16) NOT NULL, ;
                    IOPERATORPK I NOT NULL)

***** Create each index for WELLS *****
INDEX ON UPPER(CGROUP) TAG CGROUP COLLATE 'MACHINE'
INDEX ON UPPER(CMETERID) TAG CMETERID COLLATE 'MACHINE'
INDEX ON UPPER(CTABLE) TAG CTABLE COLLATE 'MACHINE'
ALTER TABLE 'WELLS' ADD PRIMARY KEY CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON UPPER(CWELLNAME) TAG CWELLNAME COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'
INDEX ON CWELLSTAT TAG CWELLSTAT COLLATE 'MACHINE'
INDEX ON CCOUNTY TAG CCOUNTY COLLATE 'MACHINE'
INDEX ON CIDPUMPER TAG CIDPUMPER COLLATE 'MACHINE'
INDEX ON UPPER(CLEASEID) TAG CLEASEID COLLATE 'MACHINE'
INDEX ON CPERMIT1 TAG CPERMIT1 COLLATE 'MACHINE'
INDEX ON CTOWNSHIP TAG CTOWNSHIP COLLATE 'MACHINE'
INDEX ON CUSER3 TAG CUSER3 COLLATE 'MACHINE'

***** Change properties for WELLS *****
DBSETPROP('WELLS.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('WELLS.CWELLNAME', 'Field', 'Caption', "Well Name")
DBSETPROP('WELLS.CLEGALNAME', 'Field', 'Caption', "Legal Name")
DBSETPROP('WELLS.CTOWNSHIP', 'Field', 'Caption', "Township")
DBSETPROP('WELLS.CCOUNTY', 'Field', 'Caption', "County")
DBSETPROP('WELLS.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('WELLS.NDEPTH', 'Field', 'Caption', "Depth")
DBSETPROP('WELLS.PRODDATE', 'Field', 'Caption', "First Production Date")
DBSETPROP('WELLS.CPARCEL', 'Field', 'Caption', "Parcel")
DBSETPROP('WELLS.CREVMCF', 'Field', 'Caption', "Gas Purch")
DBSETPROP('WELLS.CREVBBL', 'Field', 'Caption', "Oil Purch")
DBSETPROP('WELLS.NLANDPCT', 'Field', 'Caption', "Landowner Pct")
DBSETPROP('WELLS.NOVERPCT', 'Field', 'Caption', "Overriding Royalty Pct")
DBSETPROP('WELLS.NMCFPRICE', 'Field', 'Caption', "Default Gas Price")
DBSETPROP('WELLS.NBBLPRICE', 'Field', 'Caption', "Default Oil Price")
DBSETPROP('WELLS.CWELLSTAT', 'Field', 'Caption', "Status")
DBSETPROP('WELLS.CGROUP', 'Field', 'Caption', "Group")
DBSETPROP('WELLS.NOILINT', 'Field', 'Caption', "Royalty Oil Pct")
DBSETPROP('WELLS.NGASINT', 'Field', 'Caption', "Royalty Gas Pct")
DBSETPROP('WELLS.CMETERID', 'Field', 'Caption', "Master Meter ID")
DBSETPROP('WELLS.CMETERID2', 'Field', 'Caption', "2nd Master Meter")
DBSETPROP('WELLS.CMETERID3', 'Field', 'Caption', "3rd Master Meter")
DBSETPROP('WELLS.CMETERID4', 'Field', 'Caption', "Meter 4")
DBSETPROP('WELLS.CMETERID5', 'Field', 'Caption', "Meter 5")
DBSETPROP('WELLS.LTHIRD_PRTY', 'Field', 'Caption', "3rd Party Well Flag")
DBSETPROP('WELLS.LROYSEVTX', 'Field', 'Caption', "Royalty Owners Exempt From Sevtax")
DBSETPROP('WELLS.NPROCESS', 'Field', 'Caption', "Process")
DBSETPROP('WELLS.MWELLNOTE', 'Field', 'Caption', "Well Notes")
DBSETPROP('WELLS.CFIELDID', 'Field', 'Caption', "Field Code")
DBSETPROP('WELLS.CFORMATION', 'Field', 'Caption', "Formation")
DBSETPROP('WELLS.NACRES', 'Field', 'Caption', "No of Acres")
DBSETPROP('WELLS.NWELLCOUNT', 'Field', 'Caption', "No of Wells")
DBSETPROP('WELLS.CPERMIT1', 'Field', 'Caption', "Permit 1")
DBSETPROP('WELLS.CPERMIT2', 'Field', 'Caption', "Permit 2")
DBSETPROP('WELLS.CPERMIT3', 'Field', 'Caption', "Permit 3")
DBSETPROP('WELLS.CPERMIT4', 'Field', 'Caption', "Permit 4")
DBSETPROP('WELLS.CPERMIT5', 'Field', 'Caption', "Permit 5")
DBSETPROP('WELLS.CPERMIT6', 'Field', 'Caption', "Permit 6")
DBSETPROP('WELLS.CUSER1', 'Field', 'Caption', "User Field 1")
DBSETPROP('WELLS.CUSER2', 'Field', 'Caption', "User Field 2")
DBSETPROP('WELLS.CUSER3', 'Field', 'Caption', "User Field 3")
DBSETPROP('WELLS.CUSER4', 'Field', 'Caption', "User Field 4")
DBSETPROP('WELLS.CUSER5', 'Field', 'Caption', "User Field 5")
DBSETPROP('WELLS.CUSER6', 'Field', 'Caption', "User Field 6")
DBSETPROP('WELLS.NWRKSEVO', 'Field', 'Caption', "Oil Tax Rate for Wrk Ints")
DBSETPROP('WELLS.NWRKSEVG', 'Field', 'Caption', "Gas Tax Rate for Wrk Ints")
DBSETPROP('WELLS.NROYSEVG', 'Field', 'Caption', "Gas Tax Rate for Royalty Owners")
DBSETPROP('WELLS.NROYSEVO', 'Field', 'Caption', "Oil Tax Rate for Royalty Owners")
DBSETPROP('WELLS.LUSESEV', 'Field', 'Caption', "Use Well Tax Rates Instead of Tax Table")
DBSETPROP('WELLS.NELEVATION', 'Field', 'Caption', "Elevation")
DBSETPROP('WELLS.LRECALC', 'Field', 'Caption', "Specify Revenue Interests")
DBSETPROP('WELLS.LCOMPRESS', 'Field', 'Caption', "Charge Compression")
DBSETPROP('WELLS.LGATHER', 'Field', 'Caption', "Charge Gathering")
DBSETPROP('WELLS.LSECTION29', 'Field', 'Caption', "Section 29 Well")
DBSETPROP('WELLS.LDEVSHALE', 'Field', 'Caption', "Devonian Shale")
DBSETPROP('WELLS.NPCTELIG', 'Field', 'Caption', "Pct of Well Eligible for Section 29")
DBSETPROP('WELLS.DSOLD', 'Field', 'Caption', "Date Well Sold")
DBSETPROP('WELLS.NSELLPRICE', 'Field', 'Caption', "Well Selling Price")
DBSETPROP('WELLS.NCOMPRESS', 'Field', 'Caption', "Compression Chg per MCF")
DBSETPROP('WELLS.NGATHER', 'Field', 'Caption', "Gathering Chg per MCF")
DBSETPROP('WELLS.DPRODDATE', 'Field', 'Caption', "Date of 1st Production")
DBSETPROP('WELLS.LTAXEXEMPT1', 'Field', 'Caption', "Well is Exempt From Oil Taxes")
DBSETPROP('WELLS.LTAXEXEMPT2', 'Field', 'Caption', "Well is Exempt From Gas Taxes")
DBSETPROP('WELLS.CSECTION', 'Field', 'Caption', "Section #")
DBSETPROP('WELLS.CLOT', 'Field', 'Caption', "Lot")
DBSETPROP('WELLS.CRANGE', 'Field', 'Caption', "Range")
DBSETPROP('WELLS.CLOCATION', 'Field', 'Caption', "Location")
DBSETPROP('WELLS.CTNR', 'Field', 'Caption', "TNR")
DBSETPROP('WELLS.CTABLE', 'Field', 'Caption', "Tax Table to Use")
DBSETPROP('WELLS.LTAXEXEMPT3', 'Field', 'Caption', "Well Is Exempt From Other Taxes")
DBSETPROP('WELLS.LTAXEXEMPT4', 'Field', 'Caption', "Well is Exempt from Tax 4")
DBSETPROP('WELLS.LSEV1O', 'Field', 'Caption', "Purchaser Withholds Oil Tax 1")
DBSETPROP('WELLS.LSEV2O', 'Field', 'Caption', "Purchaser Withholds Oil Tax 2")
DBSETPROP('WELLS.LSEV3O', 'Field', 'Caption', "Purchaser Withholds Oil Tax 3")
DBSETPROP('WELLS.LSEV4O', 'Field', 'Caption', "Purchaser Withholds Oil Tax 4")
DBSETPROP('WELLS.LSEV1G', 'Field', 'Caption', "Purchaser Withholds Gas Tax 1")
DBSETPROP('WELLS.LSEV2G', 'Field', 'Caption', "Purchaser Withholds Gas Tax 2")
DBSETPROP('WELLS.LSEV3G', 'Field', 'Caption', "Purchaser Withholds Gas Tax 3")
DBSETPROP('WELLS.LSEV4G', 'Field', 'Caption', "Purchaser Withholds Gas Tax 4")
DBSETPROP('WELLS.LSEV1P', 'Field', 'Caption', "Purchaser Withholds Other Tax 1")
DBSETPROP('WELLS.LSEV2P', 'Field', 'Caption', "Purchaser Withholds Other Tax 2")
DBSETPROP('WELLS.LSEV3P', 'Field', 'Caption', "Purchaser Withholds Other Tax 3")
DBSETPROP('WELLS.LSEV4P', 'Field', 'Caption', "Purchaser Withholds Other Tax 4")
DBSETPROP('WELLS.NINVESTMENT', 'Field', 'Caption', "Total Investment")
DBSETPROP('WELLS.LPAYOUT', 'Field', 'Caption', "Paid Out")
DBSETPROP('WELLS.COWNERID', 'Field', 'Caption', "Owner ID To Adjust Rounding")
DBSETPROP('WELLS.LDIROILPURCH', 'Field', 'Caption', "Purchaser Withholds Oil Tax")
DBSETPROP('WELLS.LDIRGASPURCH', 'Field', 'Caption', "Purchaser Withholds Gas Tax")
DBSETPROP('WELLS.LHOUSEGAS', 'Field', 'Caption', "House Gas")
DBSETPROP('WELLS.CIDTANK', 'Field', 'Caption', "Tank Key")
DBSETPROP('WELLS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('WELLS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('WELLS.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('WELLS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('WELLS.LSECREC', 'Field', 'Caption', "Secondary Recovery")
DBSETPROP('WELLS.CUNIT', 'Field', 'Caption', "Unit No")
DBSETPROP('WELLS.CPROSPECT', 'Field', 'Caption', "Prospect")
DBSETPROP('WELLS.CLEASENO', 'Field', 'Caption', "Lease No")
DBSETPROP('WELLS.DCOMPDATE', 'Field', 'Caption', "Date Completed")
DBSETPROP('WELLS.DSPUDDATE', 'Field', 'Caption', "Date Spudded")
DBSETPROP('WELLS.CFARMNO', 'Field', 'Caption', "Farm No.")
DBSETPROP('WELLS.CIDPUMPER', 'Field', 'Caption', "Pumper")
DBSETPROP('WELLS.LCOMPRESSOR', 'Field', 'Caption', "Lcompressor")
DBSETPROP('WELLS.LEXCLROYCOMP', 'Field', 'Caption', "Excl Royalty Owners From Comp/Gath")
DBSETPROP('WELLS.CLEASEID', 'Field', 'Caption', "Lease ID")
DBSETPROP('WELLS.CWELLTAXID', 'Field', 'Caption', "Well Tax ID")
DBSETPROP('WELLS.CMETERID6', 'Field', 'Caption', "Meter6")
DBSETPROP('WELLS.CMETERID7', 'Field', 'Caption', "Meter7")
DBSETPROP('WELLS.CMETERID8', 'Field', 'Caption', "Meter8")
DBSETPROP('WELLS.CMETERID9', 'Field', 'Caption', "Meter9")
DBSETPROP('WELLS.CMETERID10', 'Field', 'Caption', "Meter10")
DBSETPROP('WELLS.CLATITUDE', 'Field', 'Caption', "Latitude")
DBSETPROP('WELLS.CLONGITUDE', 'Field', 'Caption', "Longitude")
DBSETPROP('WELLS.DPURCHASED', 'Field', 'Caption', "Purchase Date")
DBSETPROP('WELLS.CPURCHFROM', 'Field', 'Caption', "Purchased From")
DBSETPROP('WELLS.DPLUGGED', 'Field', 'Caption', "Date Plugged")
DBSETPROP('WELLS.LLEGALDISP', 'Field', 'Caption', "Legal Dispute")
DBSETPROP('WELLS.CSYSTEM', 'Field', 'Caption', "System")
DBSETPROP('WELLS.CPROPNO', 'Field', 'Caption', "Property No")
DBSETPROP('WELLS.COILPURCHNO', 'Field', 'Caption', "Oil Purch No")
DBSETPROP('WELLS.CGASPURCHNO', 'Field', 'Caption', "Gas Purch No")
DBSETPROP('WELLS.COTHPURCHNO', 'Field', 'Caption', "Other Purch no")
DBSETPROP('WELLS.LSTRIPPER', 'Field', 'Caption', "Stripper Well")
DBSETPROP('WELLS.CNRA1', 'Field', 'Caption', "Account #")
DBSETPROP('WELLS.CNRA2', 'Field', 'Caption', "NRA 2")
DBSETPROP('WELLS.CNRA3', 'Field', 'Caption', "NRA 3")
DBSETPROP('WELLS.CNRA4', 'Field', 'Caption', "NRA 4")
DBSETPROP('WELLS.CNRA5', 'Field', 'Caption', "NRA 5")
DBSETPROP('WELLS.CNRA6', 'Field', 'Caption', "NRA 6")
DBSETPROP('WELLS.LNGLETHANE', 'Field', 'Caption', "Ethane")
DBSETPROP('WELLS.LNGLPROPANE', 'Field', 'Caption', "Propane")
DBSETPROP('WELLS.LNGLBUTANE', 'Field', 'Caption', "Butane")
DBSETPROP('WELLS.LNGLISOBUTANE', 'Field', 'Caption', "ISO Butane")
DBSETPROP('WELLS.LNGLPENTANE', 'Field', 'Caption', "Pentane")
DBSETPROP('WELLS.CWVDISTRICT', 'Field', 'Caption', "WV District")
DBSETPROP('WELLS.CLISTID', 'Field', 'Caption', "QB List ID")
DBSETPROP('WELLS.EDITSEQ', 'Field', 'Caption', "QB Edit Seq")
DBSETPROP('WELLS.IOPERATORPK', 'Field', 'Caption', "Operator FK")
CREATE TRIGGER ON 'WELLS' FOR DELETE AS __ri_delete_wells().AND.(foxaudit())
CREATE TRIGGER ON 'WELLS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'WELLS' FOR UPDATE AS __ri_update_wells().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_WELLTOTS
***** Table setup for WELLTOTS *****
CREATE TABLE 'WELLTOTS.DBF' NAME 'WELLTOTS' (CIDWTOT C(8) NOT NULL, ;
                       CWELLID C(10) NOT NULL, ;
                       YTDGASINC N(12, 2) NOT NULL, ;
                       YTDOILINC N(12, 2) NOT NULL, ;
                       YTDTRPINC N(12, 2) NOT NULL, ;
                       YTDCLASS0 N(12, 2) NOT NULL, ;
                       YTDCLASS1 N(12, 2) NOT NULL, ;
                       YTDCLASS2 N(12, 2) NOT NULL, ;
                       YTDCLASS3 N(12, 2) NOT NULL, ;
                       YTDCLASS4 N(12, 2) NOT NULL, ;
                       YTDCLASS5 N(12, 2) NOT NULL, ;
                       ITDGASINC N(12, 2) NOT NULL, ;
                       ITDOILINC N(12, 2) NOT NULL, ;
                       ITDTRPINC N(12, 2) NOT NULL, ;
                       ITDCLASS0 N(12, 2) NOT NULL, ;
                       ITDCLASS1 N(12, 2) NOT NULL, ;
                       ITDCLASS2 N(12, 2) NOT NULL, ;
                       ITDCLASS3 N(12, 2) NOT NULL, ;
                       ITDCLASS4 N(12, 2) NOT NULL, ;
                       ITDCLASS5 N(12, 2) NOT NULL, ;
                       YTDROYALTY N(12, 2) NOT NULL, ;
                       ITDROYALTY N(12, 2) NOT NULL, ;
                       YTDWORKING N(12, 2) NOT NULL, ;
                       ITDWORKING N(12, 2) NOT NULL, ;
                       YTDMCF N(12, 4) NOT NULL, ;
                       ITDMCF N(12, 4) NOT NULL, ;
                       YTDBBL N(12, 4) NOT NULL, ;
                       ITDBBL N(12, 4) NOT NULL, ;
                       TOTDAYS I NOT NULL, ;
                       AVGMCF I NOT NULL, ;
                       AVGBBL I NOT NULL, ;
                       AVGREV N(12, 2) NOT NULL, ;
                       AVGEXP N(12, 2) NOT NULL, ;
                       TOTMONTHS I NOT NULL, ;
                       TOTYEARS I NOT NULL, ;
                       AVGBBLPRC N(12, 4) NOT NULL, ;
                       AVGMCFPRC N(12, 4) NOT NULL, ;
                       ITDGATHER N(12, 2) NOT NULL, ;
                       ITDCOMPRES N(12, 2) NOT NULL, ;
                       YTDGATHER N(12, 2) NOT NULL, ;
                       YTDCOMPRES N(12, 2) NOT NULL, ;
                       YTDCLASSA N(12, 2) NOT NULL, ;
                       ITDCLASSA N(12, 2) NOT NULL, ;
                       YTDCLASSB N(12, 2) NOT NULL, ;
                       ITDCLASSB N(12, 2) NOT NULL)

***** Create each index for WELLTOTS *****
ALTER TABLE 'WELLTOTS' ADD PRIMARY KEY CIDWTOT TAG CIDWTOT COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'

***** Change properties for WELLTOTS *****
DBSETPROP('WELLTOTS.CIDWTOT', 'Field', 'Caption', "Primary Key")
DBSETPROP('WELLTOTS.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('WELLTOTS.YTDGASINC', 'Field', 'Caption', "YTD Gas Income")
DBSETPROP('WELLTOTS.YTDOILINC', 'Field', 'Caption', "YTD Oil Income")
DBSETPROP('WELLTOTS.YTDTRPINC', 'Field', 'Caption', "YTD Transportation Income")
DBSETPROP('WELLTOTS.YTDCLASS0', 'Field', 'Caption', "YTD Operating Expenses")
DBSETPROP('WELLTOTS.YTDCLASS1', 'Field', 'Caption', "YTD Class 1 Expenses")
DBSETPROP('WELLTOTS.YTDCLASS2', 'Field', 'Caption', "YTD Class 2 Expenses")
DBSETPROP('WELLTOTS.YTDCLASS3', 'Field', 'Caption', "YTD Class 3 Expenses")
DBSETPROP('WELLTOTS.YTDCLASS4', 'Field', 'Caption', "YTD Class 4 Expenses")
DBSETPROP('WELLTOTS.YTDCLASS5', 'Field', 'Caption', "YTD Class 5 Expenses")
DBSETPROP('WELLTOTS.ITDGASINC', 'Field', 'Caption', "Inception to Date Gas Income")
DBSETPROP('WELLTOTS.ITDOILINC', 'Field', 'Caption', "Inception to Date Oil Income")
DBSETPROP('WELLTOTS.ITDTRPINC', 'Field', 'Caption', "Inception to Date Trans Income")
DBSETPROP('WELLTOTS.ITDCLASS0', 'Field', 'Caption', "Inception to Date Operating Expenses")
DBSETPROP('WELLTOTS.ITDCLASS1', 'Field', 'Caption', "Inception to Date Class 1 Expenses")
DBSETPROP('WELLTOTS.ITDCLASS2', 'Field', 'Caption', "Inception to Date Class 2 Expenses")
DBSETPROP('WELLTOTS.ITDCLASS3', 'Field', 'Caption', "Inception to Date Class 3 Expenses")
DBSETPROP('WELLTOTS.ITDCLASS4', 'Field', 'Caption', "Inception to Date Class 4 Expenses")
DBSETPROP('WELLTOTS.ITDCLASS5', 'Field', 'Caption', "Inception to Date Class 5 Expenses")
DBSETPROP('WELLTOTS.YTDROYALTY', 'Field', 'Caption', "YTD Royalty Payments")
DBSETPROP('WELLTOTS.ITDROYALTY', 'Field', 'Caption', "Inception to Date Royalty Payments")
DBSETPROP('WELLTOTS.YTDWORKING', 'Field', 'Caption', "YTD Working Int Payments")
DBSETPROP('WELLTOTS.ITDWORKING', 'Field', 'Caption', "Inception to Date Working Int Payments")
DBSETPROP('WELLTOTS.YTDMCF', 'Field', 'Caption', "YTD MCF Produced")
DBSETPROP('WELLTOTS.ITDMCF', 'Field', 'Caption', "Inception to Date MCF Produced")
DBSETPROP('WELLTOTS.YTDBBL', 'Field', 'Caption', "YTD BBL Produced")
DBSETPROP('WELLTOTS.ITDBBL', 'Field', 'Caption', "Inception to Date BBL Produced")
DBSETPROP('WELLTOTS.TOTDAYS', 'Field', 'Caption', "Total Days of Production")
DBSETPROP('WELLTOTS.AVGMCF', 'Field', 'Caption', "Average MCF")
DBSETPROP('WELLTOTS.AVGBBL', 'Field', 'Caption', "Average BBL")
DBSETPROP('WELLTOTS.AVGREV', 'Field', 'Caption', "Average Revenue")
DBSETPROP('WELLTOTS.AVGEXP', 'Field', 'Caption', "Average Expenses")
DBSETPROP('WELLTOTS.TOTMONTHS', 'Field', 'Caption', "Total Months of Production")
DBSETPROP('WELLTOTS.TOTYEARS', 'Field', 'Caption', "Total Years of Production")
DBSETPROP('WELLTOTS.AVGBBLPRC', 'Field', 'Caption', "Average Price per BBL")
DBSETPROP('WELLTOTS.AVGMCFPRC', 'Field', 'Caption', "Average Price per MCF")
DBSETPROP('WELLTOTS.ITDGATHER', 'Field', 'Caption', "Inception to Date Gathering Charges")
DBSETPROP('WELLTOTS.ITDCOMPRES', 'Field', 'Caption', "Inception to Date Compression Charges")
DBSETPROP('WELLTOTS.YTDGATHER', 'Field', 'Caption', "YTD Gathering Charges")
DBSETPROP('WELLTOTS.YTDCOMPRES', 'Field', 'Caption', "YTD Compression Charges")
DBSETPROP('WELLTOTS.YTDCLASSA', 'Field', 'Caption', "YTD After Casing")
DBSETPROP('WELLTOTS.ITDCLASSA', 'Field', 'Caption', "ITD After Casing")
DBSETPROP('WELLTOTS.YTDCLASSB', 'Field', 'Caption', "YTD Before Casing")
DBSETPROP('WELLTOTS.ITDCLASSB', 'Field', 'Caption', "ITD Before Casing")
CREATE TRIGGER ON 'WELLTOTS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'WELLTOTS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'WELLTOTS' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_WORKORD
***** Table setup for WORKORD *****
CREATE TABLE 'WORKORD.DBF' NAME 'WORKORD' (CBATCH C(8) NOT NULL, ;
                      NWONUMBER N(6, 0) NOT NULL, ;
                      CCUSTID C(10) NOT NULL, ;
                      DWRKDATE D NOT NULL, ;
                      CWELLID C(8) NOT NULL, ;
                      CPERMIT C(6) NOT NULL, ;
                      CTRUCK C(4) NOT NULL, ;
                      CDRIVER C(20) NOT NULL, ;
                      NHOURS N(5, 2) NOT NULL, ;
                      CTYPE C(1) NOT NULL, ;
                      NBBLS N(6, 2) NOT NULL, ;
                      CDISPERM C(6) NOT NULL, ;
                      CDESC M NOT NULL, ;
                      CLOADTIME C(8) NOT NULL, ;
                      CDISPTIME C(8) NOT NULL, ;
                      NHOURCOST N(9, 2) NOT NULL, ;
                      NBBLCOST N(5, 2) NOT NULL, ;
                      NHOURTOTAL N(9, 2) NOT NULL, ;
                      NBBLTOTAL N(9, 2) NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for WORKORD *****
ALTER TABLE 'WORKORD' ADD PRIMARY KEY CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON CCUSTID TAG CCUSTID COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON NWONUMBER TAG WORKORD COLLATE 'MACHINE'

***** Change properties for WORKORD *****
DBSETPROP('WORKORD.CBATCH', 'Field', 'Caption', "Batch Number")
DBSETPROP('WORKORD.NWONUMBER', 'Field', 'Caption', "Work Order No")
DBSETPROP('WORKORD.CCUSTID', 'Field', 'Caption', "Customer ID")
DBSETPROP('WORKORD.DWRKDATE', 'Field', 'Caption', "Date")
DBSETPROP('WORKORD.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('WORKORD.CPERMIT', 'Field', 'Caption', "Well Permit")
DBSETPROP('WORKORD.CTRUCK', 'Field', 'Caption', "Truck No")
DBSETPROP('WORKORD.CDRIVER', 'Field', 'Caption', "Driver")
DBSETPROP('WORKORD.NHOURS', 'Field', 'Caption', "Hours")
DBSETPROP('WORKORD.CTYPE', 'Field', 'Caption', "Type")
DBSETPROP('WORKORD.NBBLS', 'Field', 'Caption', "BBLs")
DBSETPROP('WORKORD.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('WORKORD.CDESC', 'Field', 'Caption', "Description")
DBSETPROP('WORKORD.CLOADTIME', 'Field', 'Caption', "Load Time")
DBSETPROP('WORKORD.CDISPTIME', 'Field', 'Caption', "Disposal Time")
DBSETPROP('WORKORD.NHOURCOST', 'Field', 'Caption', "Charge per Hour")
DBSETPROP('WORKORD.NBBLCOST', 'Field', 'Caption', "Charge per BBL")
DBSETPROP('WORKORD.NHOURTOTAL', 'Field', 'Caption', "Hour Total")
DBSETPROP('WORKORD.NBBLTOTAL', 'Field', 'Caption', "BBL Total")
DBSETPROP('WORKORD.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('WORKORD.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('WORKORD.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('WORKORD.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'WORKORD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'WORKORD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'WORKORD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_MPLHIST
***** Table setup for MPLHIST *****
CREATE TABLE 'MPLHIST.DBF' NAME 'MPLHIST' (IKEY I NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      DACCTDATE D NOT NULL, ;
                      CIDCHEC C(8) NOT NULL, ;
                      IUNITS I NOT NULL, ;
                      NPRICE N(9, 2) NOT NULL, ;
                      NTOTALDIST N(12, 2) NOT NULL)

***** Create each index for MPLHIST *****
INDEX ON IKEY TAG IKEY COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON DACCTDATE TAG DACCTDATE COLLATE 'MACHINE'

***** Change properties for MPLHIST *****
ENDFUNC

FUNCTION MakeTable_MPLOPT
***** Table setup for MPLOPT *****
CREATE TABLE 'MPLOPT.DBF' NAME 'MPLOPT' (CCASHACCT C(6) NOT NULL, ;
                     CDISTACCT C(6) NOT NULL, ;
                     CCHECKTYPE C(2) NOT NULL)

***** Create each index for MPLOPT *****

***** Change properties for MPLOPT *****
ENDFUNC

FUNCTION MakeTable_MPLTRANS
***** Table setup for MPLTRANS *****
CREATE TABLE 'MPLTRANS.DBF' NAME 'MPLTRANS' (IKEY I NOT NULL, ;
                       COWNERID1 C(10) NOT NULL, ;
                       COWNERID2 C(10) NOT NULL, ;
                       DTRANSDATE D NOT NULL, ;
                       IUNITS I NOT NULL, ;
                       MCOMMENTS M NOT NULL)

***** Create each index for MPLTRANS *****
INDEX ON IKEY TAG IKEY COLLATE 'MACHINE'
INDEX ON COWNERID1 TAG COWNERID1 COLLATE 'MACHINE'
INDEX ON COWNERID2 TAG COWNERID2 COLLATE 'MACHINE'
INDEX ON DTRANSDATE TAG DTRANSDATE COLLATE 'MACHINE'

***** Change properties for MPLTRANS *****
ENDFUNC

FUNCTION MakeTable_MPLUNITS
***** Table setup for MPLUNITS *****
CREATE TABLE 'MPLUNITS.DBF' NAME 'MPLUNITS' (IKEY I NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       IUNITS I NOT NULL)

***** Create each index for MPLUNITS *****
INDEX ON IKEY TAG IKEY COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON IUNITS TAG IUNITS COLLATE 'MACHINE'

***** Change properties for MPLUNITS *****
ENDFUNC

FUNCTION MakeTable_P18FORMP1
***** Table setup for P18FORMP1 *****
CREATE TABLE 'P18FORMP1.DBF' NAME 'P18FORMP1' (PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                        GATHERFK I NOT NULL, ;
                        CRPTPERIOD C(2) NOT NULL, ;
                        CRPTYEAR C(4) NOT NULL, ;
                        ILEASES I NOT NULL, ;
                        IWATERPROD I NOT NULL, ;
                        IWATERNON I NOT NULL, ;
                        ISKIMMED I NOT NULL, ;
                        ISLUGS I NOT NULL, ;
                        IHYDROBEGIN I NOT NULL, ;
                        IHYDROSOLD I NOT NULL, ;
                        CCUSTID C(10) NOT NULL, ;
                        LCORRECTED L NOT NULL, ;
                        TADDED T NOT NULL, ;
                        CADDEDBY C(10) NOT NULL, ;
                        TCHANGED T NOT NULL, ;
                        CCHANGEDBY C(10) NOT NULL)

***** Create each index for P18FORMP1 *****
INDEX ON PK TAG PK CANDIDATE COLLATE 'MACHINE'

***** Change properties for P18FORMP1 *****
ENDFUNC

FUNCTION MakeTable_P18FORMP2
***** Table setup for P18FORMP2 *****
CREATE TABLE 'P18FORMP2.DBF' NAME 'P18FORMP2' (PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                        PAGE1FK I NOT NULL, ;
                        PROPFK I NOT NULL, ;
                        IALLOCATED I NOT NULL, ;
                        ISLUGS I NOT NULL, ;
                        IWATER I NOT NULL)

***** Create each index for P18FORMP2 *****
INDEX ON PK TAG PK CANDIDATE COLLATE 'MACHINE'

***** Change properties for P18FORMP2 *****
ENDFUNC

FUNCTION MakeTable_P18GATHERSYS
***** Table setup for P18GATHERSYS *****
CREATE TABLE 'P18GATHERSYS.DBF' NAME 'P18GATHERSYS' (PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                           COPERNO C(10) NOT NULL, ;
                           CNAME C(60) NOT NULL, ;
                           CCOUNTY C(15) NOT NULL, ;
                           CDISPCODE C(2) NOT NULL, ;
                           CSERIALNO C(20) NOT NULL, ;
                           CLEASEID C(10) NOT NULL, ;
                           CLOCATION C(80) NOT NULL, ;
                           CDISTANDDIR C(80) NOT NULL, ;
                           CRRCDISTRICT C(5) NOT NULL, ;
                           CRESERVOIR C(40) NOT NULL, ;
                           CDISPOSALWELL C(40) NOT NULL, ;
                           CDISPMETH C(40) NOT NULL, ;
                           CUICPERMIT C(10) NOT NULL, ;
                           LMULTIOPER L NOT NULL, ;
                           CCUSTID C(10) NOT NULL, ;
                           TADDED T NOT NULL, ;
                           CADDEDBY C(10) NOT NULL, ;
                           TCHANGED T NOT NULL, ;
                           CCHANGEDBY C(10) NOT NULL)

***** Create each index for P18GATHERSYS *****
INDEX ON CDISPCODE TAG CDISPCODE COLLATE 'MACHINE'
INDEX ON COPERNO TAG PERMIT COLLATE 'MACHINE'
INDEX ON PK TAG PK CANDIDATE COLLATE 'MACHINE'

***** Change properties for P18GATHERSYS *****
ENDFUNC

FUNCTION MakeTable_P18PROPERTIES
***** Table setup for P18PROPERTIES *****
CREATE TABLE 'P18PROPERTIES.DBF' NAME 'P18PROPERTIES' (PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                            CLEASENAME C(40) NOT NULL, ;
                            CFIELDNAME C(40) NOT NULL, ;
                            CCUSTID C(10) NOT NULL, ;
                            CRRCLEASENO C(10) NOT NULL, ;
                            CPERMIT C(6) NOT NULL, ;
                            CCOUNTY C(15) NOT NULL, ;
                            CSTATE C(2) NOT NULL, ;
                            IWELLTYPE I NOT NULL, ;
                            TADDED T NOT NULL, ;
                            CADDEDBY C(10) NOT NULL, ;
                            TCHANGED T NOT NULL, ;
                            CCHANGEDBY C(10) NOT NULL)

***** Create each index for P18PROPERTIES *****
INDEX ON CCUSTID TAG CCUSTID COLLATE 'MACHINE'
INDEX ON CCOUNTY TAG COUNTY COLLATE 'MACHINE'
INDEX ON PK TAG CWELLID COLLATE 'MACHINE'
INDEX ON UPPER(CLEASENAME) TAG LEASE COLLATE 'MACHINE'
INDEX ON UPPER(CPERMIT) TAG PERMIT COLLATE 'MACHINE'
INDEX ON CPERMIT+CCOUNTY TAG PERMITKEY COLLATE 'MACHINE'
INDEX ON PK TAG PK CANDIDATE COLLATE 'MACHINE'

***** Change properties for P18PROPERTIES *****
ENDFUNC

FUNCTION MakeTable_PURCHASERMAP
***** Table setup for PURCHASERMAP *****
CREATE TABLE 'PURCHASERMAP.DBF' NAME 'PURCHASERMAP' (CREVKEY C(10) NOT NULL, ;
                           CMETERCOL C(2) NOT NULL, ;
                           CMETERVOLCOL C(2) NOT NULL, ;
                           CMETERPAYCOL C(2) NOT NULL, ;
                           CDATEONCOL C(2) NOT NULL, ;
                           CDATEOFFCOL C(2) NOT NULL, ;
                           CTAX1COL C(2) NOT NULL, ;
                           CTAX2COL C(2) NOT NULL, ;
                           CTAX3COL C(2) NOT NULL, ;
                           CTAX4COL C(2) NOT NULL, ;
                           CDED1COL C(2) NOT NULL, ;
                           CDED1CODECOL C(2) NOT NULL, ;
                           CDED2COL C(2) NOT NULL, ;
                           CDED2CODECOL C(2) NOT NULL, ;
                           CDED3COL C(2) NOT NULL, ;
                           CDED3CODECOL C(2) NOT NULL, ;
                           CDED4COL C(2) NOT NULL, ;
                           CDED4CODECOL C(2) NOT NULL, ;
                           CDED5COL C(2) NOT NULL, ;
                           CDED5CODECOL C(2) NOT NULL, ;
                           CPRODPRDCOL C(2) NOT NULL)

***** Create each index for PURCHASERMAP *****

***** Change properties for PURCHASERMAP *****
ENDFUNC

FUNCTION MakeTable_BRINEINJECTION
***** Table setup for BRINEINJECTION *****
CREATE TABLE 'BRINEINJECTION.DBF' NAME 'BRINEINJECTION' (CPRODUCER C(40) NOT NULL, ;
                             COWNERNO C(10) NOT NULL, ;
                             CPRODADD1 C(40) NOT NULL, ;
                             CPRODADD2 C(40) NOT NULL, ;
                             CPRODADD3 C(40) NOT NULL, ;
                             CPRODPHONE C(15) NOT NULL, ;
                             CPRODEMAIL C(128) NOT NULL, ;
                             NQTR I NOT NULL, ;
                             CQTR C(3) NOT NULL, ;
                             CYEAR C(4) NOT NULL, ;
                             CPERMIT C(15) NOT NULL, ;
                             CWELLNAME C(30) NOT NULL, ;
                             CSWIW_NO C(10) NOT NULL, ;
                             CCOUNTY C(25) NOT NULL, ;
                             CTOWNSHIP C(25) NOT NULL, ;
                             CMONTH1 C(3) NOT NULL, ;
                             NINDIST1 I NOT NULL, ;
                             NOUTDIST1 I NOT NULL, ;
                             NMAXPRESS1 I NOT NULL, ;
                             NAVGPRESS1 I NOT NULL, ;
                             CMONTH2 C(3) NOT NULL, ;
                             NINDIST2 I NOT NULL, ;
                             NOUTDIST2 I NOT NULL, ;
                             NMAXPRESS2 I NOT NULL, ;
                             NAVGPRESS2 I NOT NULL, ;
                             CMONTH3 C(3) NOT NULL, ;
                             NINDIST3 I NOT NULL, ;
                             NOUTDIST3 I NOT NULL, ;
                             NMAXPRESS3 I NOT NULL, ;
                             NAVGPRESS3 I NOT NULL, ;
                             NMAXANN1 I NOT NULL, ;
                             DMAXDATE1 D NOT NULL, ;
                             NMINANN1 I NOT NULL, ;
                             DMINDATE1 D NOT NULL, ;
                             NMAXANN2 I NOT NULL, ;
                             DMAXDATE2 D NOT NULL, ;
                             NMINANN2 I NOT NULL, ;
                             DMINDATE2 D NOT NULL, ;
                             NMAXANN3 I NOT NULL, ;
                             DMAXDATE3 D NOT NULL, ;
                             NMINANN3 I NOT NULL, ;
                             DMINDATE3 D NOT NULL, ;
                             LQ10 L NOT NULL, ;
                             LQ11 L NOT NULL, ;
                             LQ12 L NOT NULL, ;
                             LQ13 L NOT NULL, ;
                             CRESULTS14 M NOT NULL, ;
                             CQUEST15 M NOT NULL)

***** Create each index for BRINEINJECTION *****

***** Change properties for BRINEINJECTION *****
ENDFUNC

FUNCTION MakeTable_NELCOBATCHES
***** Table setup for NELCOBATCHES *****
CREATE TABLE 'NELCOBATCHES.DBF' NAME 'NELCOBATCHES' (CYEAR C(4) NOT NULL, ;
                           CBATCHID C(60) NOT NULL, ;
                           TTRANSMITTED T NOT NULL, ;
                           TACCEPTED T NOT NULL, ;
                           ICOUNT I NOT NULL, ;
                           ILASTSTATUS I NOT NULL, ;
                           MSTATUS M NOT NULL)

***** Create each index for NELCOBATCHES *****

***** Change properties for NELCOBATCHES *****
ENDFUNC

FUNCTION MakeTable_TAXBANDIT1099
***** Table setup for TAXBANDIT1099 *****
CREATE TABLE 'TAXBANDIT1099.DBF' NAME 'TAXBANDIT1099' (PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                            CTAXYEAR C(4) NOT NULL, ;
                            CFORMTYPE C(10) NOT NULL, ;
                            CBUSINESSID C(60) NOT NULL, ;
                            CSUBMISSIONID C(60) NOT NULL, ;
                            CRECORDID C(60) NOT NULL, ;
                            CRECIPIENTID C(60) NOT NULL, ;
                            CSTATUS C(60) NOT NULL, ;
                            TIMESTAMP C(25) NOT NULL, ;
                            CSTATE1 C(2) NOT NULL, ;
                            CSTATE1STATUS C(25) NOT NULL, ;
                            CSTATE1TIME C(25) NOT NULL, ;
                            CSTATE2 C(2) NOT NULL, ;
                            CSTATE2STATUS C(25) NOT NULL, ;
                            CSTATE2TIME C(25) NOT NULL, ;
                            CPOSTALSTATUS C(25) NOT NULL, ;
                            CONLINESTATUS C(25) NOT NULL, ;
                            NCOST N(12, 2) NOT NULL, ;
                            CRECONSTATUS C(20) NOT NULL, ;
                            LCORRECTED L NOT NULL)

***** Create each index for TAXBANDIT1099 *****

***** Change properties for TAXBANDIT1099 *****
ENDFUNC

FUNCTION MakeTable_EMAILLOG
***** Table setup for EMAILLOG *****
CREATE TABLE 'EMAILLOG.DBF' NAME 'EMAILLOG' (PK I NOT NULL AUTOINC NEXTVALUE 1 STEP 1, ;
                       CID C(10) NOT NULL, ;
                       CNAME C(60) NOT NULL, ;
                       CEMAIL V(128) NOT NULL, ;
                       TSENT T NOT NULL, ;
                       CSENTBY C(20) NOT NULL, ;
                       CRESULT C(20) NOT NULL, ;
                       MLOG M NOT NULL, ;
                       CATTACHMENT V(254) NOT NULL)

***** Create each index for EMAILLOG *****
INDEX ON TSENT TAG DATEORD COLLATE 'MACHINE'
INDEX ON PK TAG PK COLLATE 'MACHINE'

***** Change properties for EMAILLOG *****
ENDFUNC

FUNCTION MakeTable_VERSION
***** Table setup for VERSION *****
CREATE TABLE 'VERSION.DBF' NAME 'VERSION' (CIDCOMP C(8) NOT NULL, ;
                      CPRODUCER C(120) NOT NULL, ;
                      CALIAS C(120) NOT NULL, ;
                      CADDRESS1 C(80) NOT NULL, ;
                      CADDRESS2 C(80) NOT NULL, ;
                      CCITY C(40) NOT NULL, ;
                      CSTATE C(2) NOT NULL, ;
                      CZIPCODE C(10) NOT NULL, ;
                      CTAXID C(15) NOT NULL, ;
                      CPHONENO C(15) NOT NULL, ;
                      CCONTACT C(80) NOT NULL, ;
                      CPROCESSOR C(80) NOT NULL, ;
                      CVERSION C(20) NOT NULL, ;
                      XFLAG C(20) NOT NULL, ;
                      CFAX C(15) NOT NULL, ;
                      LUPDATE L NOT NULL, ;
                      LAUDIT L NOT NULL, ;
                      DREINDEX D NOT NULL, ;
                      DSYNCQB D NOT NULL, ;
                      CEMAIL V(254) NOT NULL, ;
                      IYEAR I NOT NULL, ;
                      IMONTH I NOT NULL, ;
                      IREVISION I NOT NULL)

***** Create each index for VERSION *****

***** Change properties for VERSION *****
ENDFUNC

FUNCTION MakeTable_PUMPERS
***** Table setup for PUMPERS *****
CREATE TABLE 'PUMPERS.DBF' NAME 'PUMPERS' (CIDPUMPER C(8) NOT NULL, ;
                      CPUMPERNAME C(60) NOT NULL, ;
                      CADDRESS1 C(40) NOT NULL, ;
                      CCITY C(25) NOT NULL, ;
                      CSTATE C(2) NOT NULL, ;
                      CZIP C(10) NOT NULL, ;
                      CPHONE C(15) NOT NULL, ;
                      CPHONECELL C(15) NOT NULL, ;
                      CEMAIL C(128) NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL, ;
                      CEMAILCODE C(20) NOT NULL, ;
                      LEMAILOPT L NOT NULL, ;
                      LEMAILVER L NOT NULL)

***** Create each index for PUMPERS *****
ALTER TABLE 'PUMPERS' ADD PRIMARY KEY CIDPUMPER TAG CIDPUMPER COLLATE 'MACHINE'
INDEX ON CPUMPERNAME TAG CNAME COLLATE 'MACHINE'

***** Change properties for PUMPERS *****
DBSETPROP('PUMPERS.CIDPUMPER', 'Field', 'Caption', "Pumper Key")
DBSETPROP('PUMPERS.CPUMPERNAME', 'Field', 'Caption', "Name")
DBSETPROP('PUMPERS.CADDRESS1', 'Field', 'Caption', "Address")
DBSETPROP('PUMPERS.CCITY', 'Field', 'Caption', "City")
DBSETPROP('PUMPERS.CSTATE', 'Field', 'Caption', "State")
DBSETPROP('PUMPERS.CZIP', 'Field', 'Caption', "Zip Code")
DBSETPROP('PUMPERS.CPHONE', 'Field', 'Caption', "Phone")
DBSETPROP('PUMPERS.CPHONECELL', 'Field', 'Caption', "Mobile Phone")
DBSETPROP('PUMPERS.CEMAIL', 'Field', 'Caption', "Email Address")
DBSETPROP('PUMPERS.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('PUMPERS.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('PUMPERS.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('PUMPERS.DCHANGED', 'Field', 'Caption', "Date Changed")
DBSETPROP('PUMPERS.CEMAILCODE', 'Field', 'Caption', "Email Verification Code")
DBSETPROP('PUMPERS.LEMAILOPT', 'Field', 'Caption', "Email Opt Out")
DBSETPROP('PUMPERS.LEMAILVER', 'Field', 'Caption', "Email Verification")
CREATE TRIGGER ON 'PUMPERS' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'PUMPERS' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'PUMPERS' FOR UPDATE AS __ri_update_pumpers().AND.(foxaudit())
ENDFUNC

FUNCTION MakeTable_TAX1099ST
***** Table setup for TAX1099ST *****
CREATE TABLE 'TAX1099ST.DBF' NAME 'TAX1099ST' (CIDTAX1 C(8) NOT NULL, ;
                        C1099STATE C(2) NOT NULL, ;
                        CFORMTYPE C(20) NOT NULL, ;
                        CYEAR C(4) NOT NULL, ;
                        CID C(10) NOT NULL, ;
                        CIDTYPE C(1) NOT NULL, ;
                        CPROGCODE C(10) NOT NULL, ;
                        CNAME C(40) NOT NULL, ;
                        CNAME2 C(40) NOT NULL, ;
                        CADDR1 C(40) NOT NULL, ;
                        CADDR2 C(40) NOT NULL, ;
                        CCITY C(25) NOT NULL, ;
                        CSTATE C(2) NOT NULL, ;
                        CZIP C(10) NOT NULL, ;
                        CTAXID C(15) NOT NULL, ;
                        NOTHER N(12, 2) NOT NULL, ;
                        NROYALTY N(12, 2) NOT NULL, ;
                        NRENTS N(12, 2) NOT NULL, ;
                        CTYPE C(1) NOT NULL, ;
                        NSTATETAX N(9, 2) NOT NULL, ;
                        NFEDTAX N(9, 2) NOT NULL, ;
                        CWELLID C(10) NOT NULL, ;
                        CWELLNAME C(30) NOT NULL, ;
                        CWELLTAX C(15) NOT NULL, ;
                        NATTORNEY N(12, 2) NOT NULL, ;
                        NNONEMP N(12, 2) NOT NULL, ;
                        LCORRECTED L NOT NULL, ;
                        ICORRECTIONTYPE I NOT NULL, ;
                        CEMAIL V(254) NOT NULL, ;
                        CPHONE C(15) NOT NULL)

***** Create each index for TAX1099ST *****
INDEX ON C1099STATE TAG C1099STATE COLLATE 'MACHINE'
INDEX ON CID TAG CID COLLATE 'MACHINE'
INDEX ON CID+C1099STATE TAG CIDSTATE COLLATE 'MACHINE'
INDEX ON CIDTAX1 TAG CIDTAX1 COLLATE 'MACHINE'
INDEX ON CNAME TAG CNAME COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON CYEAR+CID TAG PRIMKEY COLLATE 'MACHINE'
INDEX ON CYEAR+CWELLID+CID TAG YEARWELL COLLATE 'MACHINE'

***** Change properties for TAX1099ST *****
DBSETPROP('TAX1099ST.CFORMTYPE', 'Field', 'Caption', "Form Type")
DBSETPROP('TAX1099ST.LCORRECTED', 'Field', 'Caption', "Corrected Return")
DBSETPROP('TAX1099ST.ICORRECTIONTYPE', 'Field', 'Caption', "Correction Type")
DBSETPROP('TAX1099ST.CEMAIL', 'Field', 'Caption', "Email")
DBSETPROP('TAX1099ST.CPHONE', 'Field', 'Caption', "Phone")
CREATE TRIGGER ON 'TAX1099ST' FOR DELETE AS foxaudit(cidtax1,,,"cidtax1")
CREATE TRIGGER ON 'TAX1099ST' FOR INSERT AS foxaudit(cidtax1,,,"cidtax1")
CREATE TRIGGER ON 'TAX1099ST' FOR UPDATE AS foxaudit(cidtax1,,,"cidtax1")
ENDFUNC

FUNCTION MakeTable_EXPENSE
***** Table setup for EXPENSE *****
CREATE TABLE 'EXPENSE.DBF' NAME 'EXPENSE' (CIDEXPE C(8) NOT NULL, ;
                      CWELLID C(10) NOT NULL, ;
                      CYEAR C(4) NOT NULL, ;
                      CPERIOD C(2) NOT NULL, ;
                      DEXPDATE D NOT NULL, ;
                      CREFID C(15) NOT NULL, ;
                      CCATEG C(25) NOT NULL, ;
                      CPAYEE C(40) NOT NULL, ;
                      NNETAMOUNT N(12, 2) NOT NULL, ;
                      NAMOUNT N(12, 2) NOT NULL, ;
                      CMEMO C(40) NOT NULL, ;
                      CVENDORID C(10) NOT NULL, ;
                      CPAIDBYCK C(8) NOT NULL, ;
                      CEXPCLASS C(1) NOT NULL, ;
                      NSALTWATER I NOT NULL, ;
                      CPRDPAID C(6) NOT NULL, ;
                      LFIXED L NOT NULL, ;
                      LAPTRAN L NOT NULL, ;
                      CBATCH C(8) NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      LONEMAN L NOT NULL, ;
                      CCATCODE C(4) NOT NULL, ;
                      LCLOSED L NOT NULL, ;
                      CIDEXPH C(8) NOT NULL, ;
                      CACCTYEAR C(4) NOT NULL, ;
                      CACCTPRD C(2) NOT NULL, ;
                      DACCTDATE D NOT NULL, ;
                      CRUNYEARREV C(4) NOT NULL, ;
                      NRUNNOREV I NOT NULL, ;
                      CRUNYEARJIB C(4) NOT NULL, ;
                      NRUNNOJIB I NOT NULL, ;
                      CDISPERM C(6) NOT NULL, ;
                      CAFENO C(10) NOT NULL, ;
                      NGROSSVAL N(12, 2) NOT NULL, ;
                      ITYPE I NOT NULL, ;
                      NMAXAMOUNT N(12, 2) NOT NULL, ;
                      CDECK C(10) NOT NULL, ;
                      LNOPOSTQB L NOT NULL, ;
                      NINTEREST N(11, 7) NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for EXPENSE *****
INDEX ON CCATCODE TAG CCATCODE COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON DEXPDATE TAG DEXPDATE COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'
INDEX ON CIDEXPE TAG CIDEXPE COLLATE 'MACHINE'
INDEX ON CEXPCLASS TAG CEXPCLASS COLLATE 'MACHINE'
INDEX ON CVENDORID TAG CVENDORID COLLATE 'MACHINE'
INDEX ON CYEAR TAG CYEAR COLLATE 'MACHINE'
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CPAIDBYCK TAG CPAIDBYCK COLLATE 'MACHINE'
INDEX ON CRUNYEARJIB TAG CRUNYRJIB COLLATE 'MACHINE'
INDEX ON CRUNYEARREV TAG CRUNYRREV COLLATE 'MACHINE'
INDEX ON NRUNNOJIB TAG NRUNNOJIB COLLATE 'MACHINE'
INDEX ON NRUNNOREV TAG NRUNNOREV COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD TAG PRODPRD COLLATE 'MACHINE'
INDEX ON CDECK TAG CDECK COLLATE 'MACHINE'

***** Change properties for EXPENSE *****
DBSETPROP('EXPENSE.CIDEXPE', 'Field', 'Caption', "Primary Key")
DBSETPROP('EXPENSE.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('EXPENSE.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('EXPENSE.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('EXPENSE.DEXPDATE', 'Field', 'Caption', "Date")
DBSETPROP('EXPENSE.CREFID', 'Field', 'Caption', "Reference")
DBSETPROP('EXPENSE.CCATEG', 'Field', 'Caption', "Category")
DBSETPROP('EXPENSE.CPAYEE', 'Field', 'Caption', "Payee")
DBSETPROP('EXPENSE.NNETAMOUNT', 'Field', 'Caption', "Net Amount")
DBSETPROP('EXPENSE.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('EXPENSE.CMEMO', 'Field', 'Caption', "Notes")
DBSETPROP('EXPENSE.CVENDORID', 'Field', 'Caption', "Vendor ID")
DBSETPROP('EXPENSE.CPAIDBYCK', 'Field', 'Caption', "Check Key")
DBSETPROP('EXPENSE.CEXPCLASS', 'Field', 'Caption', "Exp Class")
DBSETPROP('EXPENSE.NSALTWATER', 'Field', 'Caption', "BBL of Water")
DBSETPROP('EXPENSE.CPRDPAID', 'Field', 'Caption', "Period Paid")
DBSETPROP('EXPENSE.LFIXED', 'Field', 'Caption', "Fixed Expense")
DBSETPROP('EXPENSE.LAPTRAN', 'Field', 'Caption', "A/P Flag")
DBSETPROP('EXPENSE.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('EXPENSE.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('EXPENSE.LONEMAN', 'Field', 'Caption', "One Man Item")
DBSETPROP('EXPENSE.CCATCODE', 'Field', 'Caption', "Cat Code")
DBSETPROP('EXPENSE.LCLOSED', 'Field', 'Caption', "Closed Flag")
DBSETPROP('EXPENSE.CIDEXPH', 'Field', 'Caption', "Hdr Key")
DBSETPROP('EXPENSE.CACCTYEAR', 'Field', 'Caption', "Acct Year")
DBSETPROP('EXPENSE.CACCTPRD', 'Field', 'Caption', "Acct Prd")
DBSETPROP('EXPENSE.DACCTDATE', 'Field', 'Caption', "Accounting Date")
DBSETPROP('EXPENSE.CRUNYEARREV', 'Field', 'Caption', "Run Year")
DBSETPROP('EXPENSE.NRUNNOREV', 'Field', 'Caption', "Run No")
DBSETPROP('EXPENSE.CRUNYEARJIB', 'Field', 'Caption', "JIB Run Year")
DBSETPROP('EXPENSE.NRUNNOJIB', 'Field', 'Caption', "JIB Run No")
DBSETPROP('EXPENSE.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('EXPENSE.CAFENO', 'Field', 'Caption', "AFE No")
DBSETPROP('EXPENSE.NGROSSVAL', 'Field', 'Caption', "Gross Exp")
DBSETPROP('EXPENSE.ITYPE', 'Field', 'Caption', "Amt or Pct")
DBSETPROP('EXPENSE.NMAXAMOUNT', 'Field', 'Caption', "Max Amount")
DBSETPROP('EXPENSE.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('EXPENSE.LNOPOSTQB', 'Field', 'Caption', "Post to QB")
DBSETPROP('EXPENSE.NINTEREST', 'Field', 'Caption', "Interest")
DBSETPROP('EXPENSE.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('EXPENSE.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('EXPENSE.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('EXPENSE.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'EXPENSE' FOR DELETE AS foxaudit(cidexpe,,,"cidexpe")
CREATE TRIGGER ON 'EXPENSE' FOR INSERT AS foxaudit(cidexpe,,,"cidexpe")
CREATE TRIGGER ON 'EXPENSE' FOR UPDATE AS foxaudit(cidexpe,,,"cidexpe")
ENDFUNC

FUNCTION MakeTable_INCOME
***** Table setup for INCOME *****
CREATE TABLE 'INCOME.DBF' NAME 'INCOME' (CIDINCO C(8) NOT NULL, ;
                     CWELLID C(10) NOT NULL, ;
                     CPERIOD C(2) NOT NULL, ;
                     CYEAR C(4) NOT NULL, ;
                     CRUNYEAR C(4) NOT NULL, ;
                     NRUNNO I NOT NULL, ;
                     CSOURCE C(5) NOT NULL, ;
                     DREVDATE D NOT NULL, ;
                     NUNITS N(15, 2) NOT NULL, ;
                     NPRICE N(12, 6) NOT NULL, ;
                     NNETAMOUNT N(12, 2) NOT NULL, ;
                     NTOTALINC N(12, 2) NOT NULL, ;
                     CREFID C(15) NOT NULL, ;
                     CMEMO C(40) NOT NULL, ;
                     CREVKEY C(10) NOT NULL, ;
                     MINCNOTE M NOT NULL, ;
                     COWNERID C(10) NOT NULL, ;
                     LONEMAN L NOT NULL, ;
                     LCSTRAN L NOT NULL, ;
                     CBATCH C(8) NOT NULL, ;
                     CBEGRANGE C(5) NOT NULL, ;
                     CENDRANGE C(5) NOT NULL, ;
                     NDAYSON N(4, 0) NOT NULL, ;
                     LCLOSED L NOT NULL, ;
                     CACCTYEAR C(4) NOT NULL, ;
                     CACCTPRD C(2) NOT NULL, ;
                     NBTU N(4, 0) NOT NULL, ;
                     DACCTDATE D NOT NULL, ;
                     CIDINCH C(8) NOT NULL, ;
                     CACCTNO C(6) NOT NULL, ;
                     NGROSSUNITS N(12, 2) NOT NULL, ;
                     NGROSSVAL N(12, 2) NOT NULL, ;
                     CDECK C(10) NOT NULL, ;
                     LNOPOSTQB L NOT NULL, ;
                     NINTEREST N(11, 7) NOT NULL, ;
                     CADDEDBY C(10) NOT NULL, ;
                     CCHANGEDBY C(10) NOT NULL, ;
                     DADDED T NOT NULL, ;
                     DCHANGED T NOT NULL)

***** Create each index for INCOME *****
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD+CREFID TAG PRDREF COLLATE 'MACHINE'
INDEX ON CREVKEY TAG REVKEY COLLATE 'MACHINE'
INDEX ON CWELLID+CYEAR+CPERIOD+CSOURCE TAG WELLKEY COLLATE 'MACHINE'
INDEX ON CWELLID+CYEAR+CPERIOD TAG WELLPRD COLLATE 'MACHINE'
INDEX ON CIDINCO TAG CIDINCO COLLATE 'MACHINE'
INDEX ON CYEAR+CPERIOD TAG YEARPRD COLLATE 'MACHINE'
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CWELLID+CYEAR+CPERIOD+STR(NRUNNO) TAG WELLPRDRUN COLLATE 'MACHINE'
INDEX ON CRUNYEAR TAG CRUNYEAR COLLATE 'MACHINE'
INDEX ON NRUNNO TAG NRUNNO COLLATE 'MACHINE'
INDEX ON DREVDATE TAG DREVDATE COLLATE 'MACHINE'
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'
INDEX ON CREFID TAG CREFID COLLATE 'MACHINE'
INDEX ON CSOURCE TAG CSOURCE COLLATE 'MACHINE'

***** Change properties for INCOME *****
DBSETPROP('INCOME.CIDINCO', 'Field', 'Caption', "Primary Key")
DBSETPROP('INCOME.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('INCOME.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('INCOME.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('INCOME.CRUNYEAR', 'Field', 'Caption', "Run Year")
DBSETPROP('INCOME.NRUNNO', 'Field', 'Caption', "Run No")
DBSETPROP('INCOME.CSOURCE', 'Field', 'Caption', "Type")
DBSETPROP('INCOME.DREVDATE', 'Field', 'Caption', "Date")
DBSETPROP('INCOME.NUNITS', 'Field', 'Caption', "Units")
DBSETPROP('INCOME.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('INCOME.NNETAMOUNT', 'Field', 'Caption', "Net Amount")
DBSETPROP('INCOME.NTOTALINC', 'Field', 'Caption', "Total")
DBSETPROP('INCOME.CREFID', 'Field', 'Caption', "Reference")
DBSETPROP('INCOME.CMEMO', 'Field', 'Caption', "Notes")
DBSETPROP('INCOME.CREVKEY', 'Field', 'Caption', "Rev Source")
DBSETPROP('INCOME.MINCNOTE', 'Field', 'Caption', "Statement Notes")
DBSETPROP('INCOME.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('INCOME.LONEMAN', 'Field', 'Caption', "One Man Item")
DBSETPROP('INCOME.LCSTRAN', 'Field', 'Caption', "Cash Rcpt Flag")
DBSETPROP('INCOME.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('INCOME.CBEGRANGE', 'Field', 'Caption', "Beg Range")
DBSETPROP('INCOME.CENDRANGE', 'Field', 'Caption', "End Range")
DBSETPROP('INCOME.NDAYSON', 'Field', 'Caption', "Days On")
DBSETPROP('INCOME.LCLOSED', 'Field', 'Caption', "Closed Flag")
DBSETPROP('INCOME.CACCTYEAR', 'Field', 'Caption', "Acct Year")
DBSETPROP('INCOME.CACCTPRD', 'Field', 'Caption', "Acct Prd")
DBSETPROP('INCOME.NBTU', 'Field', 'Caption', "BTU Factor")
DBSETPROP('INCOME.DACCTDATE', 'Field', 'Caption', "Accounting Date")
DBSETPROP('INCOME.CIDINCH', 'Field', 'Caption', "Hdr Key")
DBSETPROP('INCOME.CACCTNO', 'Field', 'Caption', "Account")
DBSETPROP('INCOME.NGROSSUNITS', 'Field', 'Caption', "Gross Units")
DBSETPROP('INCOME.NGROSSVAL', 'Field', 'Caption', "Gross Value")
DBSETPROP('INCOME.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('INCOME.LNOPOSTQB', 'Field', 'Caption', "Post to QB")
DBSETPROP('INCOME.NINTEREST', 'Field', 'Caption', "Interest")
DBSETPROP('INCOME.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('INCOME.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('INCOME.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('INCOME.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'INCOME' FOR DELETE AS foxaudit(cidinco,,,"cidinco")
CREATE TRIGGER ON 'INCOME' FOR INSERT AS foxaudit(cidinco,,,"cidinco")
CREATE TRIGGER ON 'INCOME' FOR UPDATE AS foxaudit(cidinco,,,"cidinco")
ENDFUNC

FUNCTION MakeTable_EXPSUSP
***** Table setup for EXPSUSP *****
CREATE TABLE 'EXPSUSP.DBF' NAME 'EXPSUSP' (CIDEXPS C(8) NOT NULL, ;
                      CWELLID C(10) NOT NULL, ;
                      CPERIOD C(2) NOT NULL, ;
                      CYEAR C(4) NOT NULL, ;
                      DEXPDATE D NOT NULL, ;
                      CREFID C(20) NOT NULL, ;
                      CCATEG C(25) NOT NULL, ;
                      CPAYEE C(40) NOT NULL, ;
                      NNETAMOUNT N(12, 2) NOT NULL, ;
                      NAMOUNT N(12, 2) NOT NULL, ;
                      CMEMO C(40) NOT NULL, ;
                      CVENDORID C(10) NOT NULL, ;
                      CBATCH C(8) NOT NULL, ;
                      CEXPCLASS C(1) NOT NULL, ;
                      NSALTWATER N(5, 0) NOT NULL, ;
                      CPRDPAID C(6) NOT NULL, ;
                      LFIXED L NOT NULL, ;
                      CPAIDBYCK C(8) NOT NULL, ;
                      DPOSTDATE D NOT NULL, ;
                      CCATCODE C(4) NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      LALLOCATED L NOT NULL, ;
                      DALLOCATED D NOT NULL, ;
                      LAFETYPE L NOT NULL, ;
                      LAPTRAN L NOT NULL, ;
                      CAFENO C(10) NOT NULL, ;
                      NGROSSVAL N(12, 2) NOT NULL, ;
                      CDECK C(10) NOT NULL, ;
                      LNOPOSTQB L NOT NULL, ;
                      NINTEREST N(11, 7) NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for EXPSUSP *****
INDEX ON CCATEG TAG CATEG COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
INDEX ON CWELLID+CYEAR+CPERIOD TAG WELLPRD COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'
INDEX ON DTOS(DEXPDATE) TAG EXPDATE COLLATE 'MACHINE'
ALTER TABLE 'EXPSUSP' ADD PRIMARY KEY CIDEXPS TAG CIDEXPS COLLATE 'MACHINE'
INDEX ON CCATCODE TAG CCATCODE COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'

***** Change properties for EXPSUSP *****
DBSETPROP('EXPSUSP.CIDEXPS', 'Field', 'Caption', "Primary Key")
DBSETPROP('EXPSUSP.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('EXPSUSP.CPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('EXPSUSP.CYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('EXPSUSP.DEXPDATE', 'Field', 'Caption', "Expense Date")
DBSETPROP('EXPSUSP.CREFID', 'Field', 'Caption', "Ref ID")
DBSETPROP('EXPSUSP.CCATEG', 'Field', 'Caption', "Exp Category")
DBSETPROP('EXPSUSP.CPAYEE', 'Field', 'Caption', "Payee")
DBSETPROP('EXPSUSP.NNETAMOUNT', 'Field', 'Caption', "Net Amount")
DBSETPROP('EXPSUSP.NAMOUNT', 'Field', 'Caption', "Amount")
DBSETPROP('EXPSUSP.CMEMO', 'Field', 'Caption', "Notes")
DBSETPROP('EXPSUSP.CVENDORID', 'Field', 'Caption', "Vendor ID")
DBSETPROP('EXPSUSP.CBATCH', 'Field', 'Caption', "Acct Mgr Batch No")
DBSETPROP('EXPSUSP.CEXPCLASS', 'Field', 'Caption', "Expense Class")
DBSETPROP('EXPSUSP.NSALTWATER', 'Field', 'Caption', "BBL of Water")
DBSETPROP('EXPSUSP.CPRDPAID', 'Field', 'Caption', "Period Paid")
DBSETPROP('EXPSUSP.LFIXED', 'Field', 'Caption', "Fixed Expense")
DBSETPROP('EXPSUSP.CPAIDBYCK', 'Field', 'Caption', "Paid By Check")
DBSETPROP('EXPSUSP.DPOSTDATE', 'Field', 'Caption', "Post Date")
DBSETPROP('EXPSUSP.CCATCODE', 'Field', 'Caption', "Category Code")
DBSETPROP('EXPSUSP.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('EXPSUSP.LALLOCATED', 'Field', 'Caption', "Allocated")
DBSETPROP('EXPSUSP.DALLOCATED', 'Field', 'Caption', "Date Allocated")
DBSETPROP('EXPSUSP.LAFETYPE', 'Field', 'Caption', "AFE Expense")
DBSETPROP('EXPSUSP.LAPTRAN', 'Field', 'Caption', "A/P Flag")
DBSETPROP('EXPSUSP.CAFENO', 'Field', 'Caption', "AFE No")
DBSETPROP('EXPSUSP.NGROSSVAL', 'Field', 'Caption', "Gross Value")
DBSETPROP('EXPSUSP.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('EXPSUSP.LNOPOSTQB', 'Field', 'Caption', "Post to QB")
DBSETPROP('EXPSUSP.NINTEREST', 'Field', 'Caption', "Interest")
DBSETPROP('EXPSUSP.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('EXPSUSP.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('EXPSUSP.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('EXPSUSP.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'EXPSUSP' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'EXPSUSP' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'EXPSUSP' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_INCSUSP
***** Table setup for INCSUSP *****
CREATE TABLE 'INCSUSP.DBF' NAME 'INCSUSP' (CIDINCS C(8) NOT NULL, ;
                      CWELLID C(10) NOT NULL, ;
                      CPERIOD C(2) NOT NULL, ;
                      CYEAR C(4) NOT NULL, ;
                      CREFID C(10) NOT NULL, ;
                      CSOURCE C(5) NOT NULL, ;
                      DREVDATE D NOT NULL, ;
                      NUNITS N(8, 2) NOT NULL, ;
                      NPRICE N(12, 6) NOT NULL, ;
                      CMEMO C(40) NOT NULL, ;
                      NNETAMOUNT N(12, 2) NOT NULL, ;
                      NTOTALINC N(12, 2) NOT NULL, ;
                      CREVKEY C(10) NOT NULL, ;
                      COWNERID C(10) NOT NULL, ;
                      LONEMAN L NOT NULL, ;
                      CBATCH C(8) NOT NULL, ;
                      DPOSTDATE D NOT NULL, ;
                      CBEGRANGE C(5) NOT NULL, ;
                      CENDRANGE C(5) NOT NULL, ;
                      NDAYSON N(3, 0) NOT NULL, ;
                      LALLOCATED L NOT NULL, ;
                      DALLOCATED D NOT NULL, ;
                      LCSTRAN L NOT NULL, ;
                      NGROSSUNITS N(12, 2) NOT NULL, ;
                      CDECK C(10) NOT NULL, ;
                      LNOPOSTQB L NOT NULL, ;
                      NINTEREST N(11, 7) NOT NULL, ;
                      NGROSSVAL N(12, 2) NOT NULL, ;
                      CADDEDBY C(10) NOT NULL, ;
                      CCHANGEDBY C(10) NOT NULL, ;
                      DADDED T NOT NULL, ;
                      DCHANGED T NOT NULL)

***** Create each index for INCSUSP *****
INDEX ON DELETED() TAG DELETED COLLATE 'MACHINE'
INDEX ON CWELLID+CYEAR+CPERIOD TAG WELLPRD COLLATE 'MACHINE'
INDEX ON DTOS(DREVDATE) TAG REVDATE COLLATE 'MACHINE'
INDEX ON CSOURCE TAG TYPE COLLATE 'MACHINE'
INDEX ON CWELLID TAG CWELLID COLLATE 'MACHINE'
ALTER TABLE 'INCSUSP' ADD PRIMARY KEY CIDINCS TAG CIDINCS COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'

***** Change properties for INCSUSP *****
DBSETPROP('INCSUSP.CIDINCS', 'Field', 'Caption', "Primary Key")
DBSETPROP('INCSUSP.CWELLID', 'Field', 'Caption', "Well ID")
DBSETPROP('INCSUSP.CPERIOD', 'Field', 'Caption', "Period")
DBSETPROP('INCSUSP.CYEAR', 'Field', 'Caption', "Year")
DBSETPROP('INCSUSP.CREFID', 'Field', 'Caption', "Reference")
DBSETPROP('INCSUSP.CSOURCE', 'Field', 'Caption', "Type")
DBSETPROP('INCSUSP.DREVDATE', 'Field', 'Caption', "Date")
DBSETPROP('INCSUSP.NUNITS', 'Field', 'Caption', "Units")
DBSETPROP('INCSUSP.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('INCSUSP.CMEMO', 'Field', 'Caption', "Notes")
DBSETPROP('INCSUSP.NNETAMOUNT', 'Field', 'Caption', "Net Amount")
DBSETPROP('INCSUSP.NTOTALINC', 'Field', 'Caption', "Total")
DBSETPROP('INCSUSP.CREVKEY', 'Field', 'Caption', "Purch Key")
DBSETPROP('INCSUSP.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('INCSUSP.LONEMAN', 'Field', 'Caption', "One Man Item")
DBSETPROP('INCSUSP.CBATCH', 'Field', 'Caption', "Batch")
DBSETPROP('INCSUSP.DPOSTDATE', 'Field', 'Caption', "Post Date")
DBSETPROP('INCSUSP.CBEGRANGE', 'Field', 'Caption', "Beg Range")
DBSETPROP('INCSUSP.CENDRANGE', 'Field', 'Caption', "End Range")
DBSETPROP('INCSUSP.NDAYSON', 'Field', 'Caption', "Days On")
DBSETPROP('INCSUSP.LALLOCATED', 'Field', 'Caption', "Alloc Flag")
DBSETPROP('INCSUSP.DALLOCATED', 'Field', 'Caption', "Date Allocated")
DBSETPROP('INCSUSP.LCSTRAN', 'Field', 'Caption', "Cash Flag")
DBSETPROP('INCSUSP.NGROSSUNITS', 'Field', 'Caption', "Gross Units")
DBSETPROP('INCSUSP.CDECK', 'Field', 'Caption', "DOI Deck")
DBSETPROP('INCSUSP.LNOPOSTQB', 'Field', 'Caption', "Post to QB")
DBSETPROP('INCSUSP.NINTEREST', 'Field', 'Caption', "Interest")
DBSETPROP('INCSUSP.NGROSSVAL', 'Field', 'Caption', "Gross Value")
DBSETPROP('INCSUSP.CADDEDBY', 'Field', 'Caption', "Added By")
DBSETPROP('INCSUSP.CCHANGEDBY', 'Field', 'Caption', "Changed By")
DBSETPROP('INCSUSP.DADDED', 'Field', 'Caption', "Date Added")
DBSETPROP('INCSUSP.DCHANGED', 'Field', 'Caption', "Date Changed")
CREATE TRIGGER ON 'INCSUSP' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'INCSUSP' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'INCSUSP' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_CASHEXPENSES
***** Table setup for CASHEXPENSES *****
CREATE TABLE 'CASHEXPENSES.DBF' NAME 'CASHEXPENSES' (CBATCH C(4) NOT NULL, ;
                           DPOSTDATE D NOT NULL, ;
                           CFROMACCT C(6) NOT NULL, ;
                           CVENDORID C(10) NOT NULL, ;
                           CVENDNAME C(60) NOT NULL, ;
                           CGLEXPACCT C(6) NOT NULL, ;
                           NAMOUNT N(12, 2) NOT NULL, ;
                           CADDEDBY C(10) NOT NULL, ;
                           DDATEADDED T NOT NULL, ;
                           CCHANGEDBY C(10) NOT NULL, ;
                           DDATECHANGED T NOT NULL, ;
                           CIDCHECFROM C(8) NOT NULL, ;
                           MNOTES M NOT NULL)

***** Create each index for CASHEXPENSES *****
INDEX ON CBATCH TAG CBATCH CANDIDATE COLLATE 'MACHINE'
INDEX ON CFROMACCT TAG CFROMACCT COLLATE 'MACHINE'
INDEX ON DPOSTDATE TAG DPOSTDATE COLLATE 'MACHINE'
INDEX ON NAMOUNT TAG NAMOUNT COLLATE 'MACHINE'
INDEX ON CGLEXPACCT TAG CTOACCT COLLATE 'MACHINE'

***** Change properties for CASHEXPENSES *****
ENDFUNC

FUNCTION MakeTable_CASHTRANSFERS
***** Table setup for CASHTRANSFERS *****
CREATE TABLE 'CASHTRANSFERS.DBF' NAME 'CASHTRANSFERS' (CBATCH C(8) NOT NULL, ;
                            DPOSTDATE D NOT NULL, ;
                            CFROMACCT C(6) NOT NULL, ;
                            CTOACCT C(6) NOT NULL, ;
                            NAMOUNT N(12, 2) NOT NULL, ;
                            CADDEDBY C(10) NOT NULL, ;
                            DDATEADDED T NOT NULL, ;
                            CCHANGEDBY C(10) NOT NULL, ;
                            DDATECHANGED T NOT NULL, ;
                            CIDCHECFROM C(8) NOT NULL, ;
                            CIDCHECTO C(8) NOT NULL, ;
                            MNOTES M NOT NULL)

***** Create each index for CASHTRANSFERS *****
INDEX ON CBATCH TAG CBATCH CANDIDATE COLLATE 'MACHINE'
INDEX ON CFROMACCT TAG CFROMACCT COLLATE 'MACHINE'
INDEX ON CTOACCT TAG CTOACCT COLLATE 'MACHINE'
INDEX ON DPOSTDATE TAG DPOSTDATE COLLATE 'MACHINE'
INDEX ON NAMOUNT TAG NAMOUNT COLLATE 'MACHINE'

***** Change properties for CASHTRANSFERS *****
ENDFUNC

FUNCTION MakeTable_APPURCHD
***** Table setup for APPURCHD *****
CREATE TABLE 'APPURCHD.DBF' NAME 'APPURCHD' (CIDPURD C(8) NOT NULL, ;
                       CITEMID C(10) NOT NULL, ;
                       CITEMDESC C(40) NOT NULL, ;
                       NPRICE N(12, 2) NOT NULL, ;
                       NQUANTITY N(12, 4) NOT NULL, ;
                       NEXTENSION N(12, 2) NOT NULL, ;
                       NGROSSEXT N(12, 2) NOT NULL, ;
                       CACCTNO C(6) NOT NULL, ;
                       CTAXABLE C(1) NOT NULL, ;
                       CUNITNO C(10) NOT NULL, ;
                       CDEPTNO C(8) NOT NULL, ;
                       CBATCH C(8) NOT NULL, ;
                       LNON1099 L NOT NULL, ;
                       CCATCODE C(4) NOT NULL, ;
                       CPRODYEAR C(4) NOT NULL, ;
                       CPRODPERIOD C(2) NOT NULL, ;
                       COWNERID C(10) NOT NULL, ;
                       LITEMDETAIL L NOT NULL, ;
                       CEXPCLASS C(1) NOT NULL, ;
                       NSALTBBL I NOT NULL, ;
                       CDISPERM C(10) NOT NULL, ;
                       CWASTECODE C(3) NOT NULL, ;
                       CDISPCODE C(2) NOT NULL, ;
                       CAFENO C(10) NOT NULL, ;
                       CDECK C(10) NOT NULL)

***** Create each index for APPURCHD *****
INDEX ON CBATCH TAG CBATCH COLLATE 'MACHINE'
ALTER TABLE 'APPURCHD' ADD PRIMARY KEY CIDPURD TAG CIDPURD COLLATE 'MACHINE'
INDEX ON DELETED() TAG _DELETED COLLATE 'MACHINE'
INDEX ON CUNITNO TAG CUNITNO COLLATE 'MACHINE'
INDEX ON CACCTNO TAG CACCTNO COLLATE 'MACHINE'
INDEX ON CCATCODE TAG CCATCODE COLLATE 'MACHINE'
INDEX ON CDEPTNO TAG CDEPTNO COLLATE 'MACHINE'
INDEX ON CITEMID TAG CITEMID COLLATE 'MACHINE'
INDEX ON COWNERID TAG COWNERID COLLATE 'MACHINE'

***** Change properties for APPURCHD *****
DBSETPROP('APPURCHD.CIDPURD', 'Field', 'Caption', "Primary Key")
DBSETPROP('APPURCHD.CITEMID', 'Field', 'Caption', "Item ID")
DBSETPROP('APPURCHD.CITEMDESC', 'Field', 'Caption', "Item Description")
DBSETPROP('APPURCHD.NPRICE', 'Field', 'Caption', "Price")
DBSETPROP('APPURCHD.NQUANTITY', 'Field', 'Caption', "Quantity")
DBSETPROP('APPURCHD.NEXTENSION', 'Field', 'Caption', "Extension")
DBSETPROP('APPURCHD.NGROSSEXT', 'Field', 'Caption', "Gross Amont")
DBSETPROP('APPURCHD.CACCTNO', 'Field', 'Caption', "Account Number")
DBSETPROP('APPURCHD.CTAXABLE', 'Field', 'Caption', "Taxable Flag")
DBSETPROP('APPURCHD.CUNITNO', 'Field', 'Caption', "Well ID")
DBSETPROP('APPURCHD.CDEPTNO', 'Field', 'Caption', "Dept Number")
DBSETPROP('APPURCHD.CBATCH', 'Field', 'Caption', "Link to Header File")
DBSETPROP('APPURCHD.LNON1099', 'Field', 'Caption', "Non 1099 Expense")
DBSETPROP('APPURCHD.CCATCODE', 'Field', 'Caption', "Category Code")
DBSETPROP('APPURCHD.CPRODYEAR', 'Field', 'Caption', "Production Year")
DBSETPROP('APPURCHD.CPRODPERIOD', 'Field', 'Caption', "Production Period")
DBSETPROP('APPURCHD.COWNERID', 'Field', 'Caption', "Owner ID")
DBSETPROP('APPURCHD.LITEMDETAIL', 'Field', 'Caption', "Item Detail")
DBSETPROP('APPURCHD.CEXPCLASS', 'Field', 'Caption', "Exp Class")
DBSETPROP('APPURCHD.NSALTBBL', 'Field', 'Caption', "BBL of Water")
DBSETPROP('APPURCHD.CDISPERM', 'Field', 'Caption', "Disposal Permit")
DBSETPROP('APPURCHD.CWASTECODE', 'Field', 'Caption', "Waste Code")
DBSETPROP('APPURCHD.CDISPCODE', 'Field', 'Caption', "Disposal Code")
DBSETPROP('APPURCHD.CAFENO', 'Field', 'Caption', "AFENo")
DBSETPROP('APPURCHD.CDECK', 'Field', 'Caption', "DOI Deck")
CREATE TRIGGER ON 'APPURCHD' FOR DELETE AS foxaudit()
CREATE TRIGGER ON 'APPURCHD' FOR INSERT AS foxaudit()
CREATE TRIGGER ON 'APPURCHD' FOR UPDATE AS foxaudit()
ENDFUNC

FUNCTION MakeTable_TINMATCHING
***** Table setup for TINMATCHING *****
CREATE TABLE 'TINMATCHING.DBF' NAME 'TINMATCHING' (CSEQUENCEID C(10) NOT NULL, ;
                          CID C(10) NOT NULL, ;
                          CTYPE C(1) NOT NULL, ;
                          CRECIPIENT C(60) NOT NULL, ;
                          LMATCHED L NOT NULL, ;
                          LERROR L NOT NULL, ;
                          MRESPONSE M NOT NULL, ;
                          CSTATUSTIME C(25) NOT NULL, ;
                          ITRYSLEFT I NOT NULL)

***** Create each index for TINMATCHING *****

***** Change properties for TINMATCHING *****
ENDFUNC

FUNCTION MakeView_AROUTINV
***************** View setup for AROUTINV ***************

CREATE SQL VIEW "AROUTINV" ; 
   AS SELECT Invhdr.cbatch, Invhdr.dinvdate, Invhdr.cinvnum, Invhdr.ninvtot,  Invhdr.ninvbal, Invhdr.ndisctot, Invhdr.ddiscdate, Invhdr.cinvtype,  0.00 AS ndistaken, 0.00 AS namtapp FROM APPDATA!invhdr WHERE Invhdr.ccustid = ?lcCustId   AND Invhdr.ninvbal <> 0 ORDER BY Invhdr.dinvdate, Invhdr.cinvnum

DBSetProp('AROUTINV', 'View', 'UpdateType', 1)
DBSetProp('AROUTINV', 'View', 'WhereType', 3)
DBSetProp('AROUTINV', 'View', 'FetchMemo', .T.)
DBSetProp('AROUTINV', 'View', 'SendUpdates', .T.)
DBSetProp('AROUTINV', 'View', 'UseMemoSize', 255)
DBSetProp('AROUTINV', 'View', 'FetchSize', 100)
DBSetProp('AROUTINV', 'View', 'MaxRecords', -1)
DBSetProp('AROUTINV', 'View', 'Tables', 'APPDATA!invhdr')
DBSetProp('AROUTINV', 'View', 'Prepared', .F.)
DBSetProp('AROUTINV', 'View', 'CompareMemo', .T.)
DBSetProp('AROUTINV', 'View', 'FetchAsNeeded', .F.)
DBSetProp('AROUTINV', 'View', 'Comment', "")
DBSetProp('AROUTINV', 'View', 'BatchUpdateCount', 1)
DBSetProp('AROUTINV', 'View', 'ShareConnection', .F.)
DBSetProp('AROUTINV', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for AROUTINV
* Props for the AROUTINV.cbatch field.
DBSetProp('AROUTINV.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.cbatch', 'Field', 'Updatable', .F.)
DBSetProp('AROUTINV.cbatch', 'Field', 'UpdateName', 'APPDATA!invhdr.cbatch')
DBSetProp('AROUTINV.cbatch', 'Field', 'Caption', "Batch Number")
DBSetProp('AROUTINV.cbatch', 'Field', 'DataType', "C(8)")
* Props for the AROUTINV.dinvdate field.
DBSetProp('AROUTINV.dinvdate', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.dinvdate', 'Field', 'Updatable', .T.)
DBSetProp('AROUTINV.dinvdate', 'Field', 'UpdateName', 'APPDATA!invhdr.dinvdate')
DBSetProp('AROUTINV.dinvdate', 'Field', 'Caption', "Invoice Date")
DBSetProp('AROUTINV.dinvdate', 'Field', 'DataType', "D")
* Props for the AROUTINV.cinvnum field.
DBSetProp('AROUTINV.cinvnum', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.cinvnum', 'Field', 'Updatable', .T.)
DBSetProp('AROUTINV.cinvnum', 'Field', 'UpdateName', 'APPDATA!invhdr.cinvnum')
DBSetProp('AROUTINV.cinvnum', 'Field', 'Caption', "Invoice Number")
DBSetProp('AROUTINV.cinvnum', 'Field', 'DataType', "C(10)")
* Props for the AROUTINV.ninvtot field.
DBSetProp('AROUTINV.ninvtot', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.ninvtot', 'Field', 'Updatable', .T.)
DBSetProp('AROUTINV.ninvtot', 'Field', 'UpdateName', 'APPDATA!invhdr.ninvtot')
DBSetProp('AROUTINV.ninvtot', 'Field', 'Caption', "Invoice Total")
DBSetProp('AROUTINV.ninvtot', 'Field', 'DataType', "N(13,2)")
* Props for the AROUTINV.ninvbal field.
DBSetProp('AROUTINV.ninvbal', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.ninvbal', 'Field', 'Updatable', .T.)
DBSetProp('AROUTINV.ninvbal', 'Field', 'UpdateName', 'APPDATA!invhdr.ninvbal')
DBSetProp('AROUTINV.ninvbal', 'Field', 'Caption', "Invoice Balance")
DBSetProp('AROUTINV.ninvbal', 'Field', 'DataType', "N(13,2)")
* Props for the AROUTINV.ndisctot field.
DBSetProp('AROUTINV.ndisctot', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.ndisctot', 'Field', 'Updatable', .T.)
DBSetProp('AROUTINV.ndisctot', 'Field', 'UpdateName', 'APPDATA!invhdr.ndisctot')
DBSetProp('AROUTINV.ndisctot', 'Field', 'Caption', "Discount Total")
DBSetProp('AROUTINV.ndisctot', 'Field', 'DataType', "N(12,2)")
* Props for the AROUTINV.ddiscdate field.
DBSetProp('AROUTINV.ddiscdate', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.ddiscdate', 'Field', 'Updatable', .T.)
DBSetProp('AROUTINV.ddiscdate', 'Field', 'UpdateName', 'APPDATA!invhdr.ddiscdate')
DBSetProp('AROUTINV.ddiscdate', 'Field', 'Caption', "Discount Date")
DBSetProp('AROUTINV.ddiscdate', 'Field', 'DataType', "D")
* Props for the AROUTINV.cinvtype field.
DBSetProp('AROUTINV.cinvtype', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.cinvtype', 'Field', 'Updatable', .T.)
DBSetProp('AROUTINV.cinvtype', 'Field', 'UpdateName', 'APPDATA!invhdr.cinvtype')
DBSetProp('AROUTINV.cinvtype', 'Field', 'Caption', "Invoice Type")
DBSetProp('AROUTINV.cinvtype', 'Field', 'DataType', "C(2)")
* Props for the AROUTINV.ndistaken field.
DBSetProp('AROUTINV.ndistaken', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.ndistaken', 'Field', 'Updatable', .F.)
DBSetProp('AROUTINV.ndistaken', 'Field', 'UpdateName', 'Invhdr.cinvtype**')
DBSetProp('AROUTINV.ndistaken', 'Field', 'DataType', "N(4,2)")
* Props for the AROUTINV.namtapp field.
DBSetProp('AROUTINV.namtapp', 'Field', 'KeyField', .F.)
DBSetProp('AROUTINV.namtapp', 'Field', 'Updatable', .F.)
DBSetProp('AROUTINV.namtapp', 'Field', 'UpdateName', 'Invhdr.cinvtype**')
DBSetProp('AROUTINV.namtapp', 'Field', 'DataType', "N(4,2)")
ENDFUNC
 
FUNCTION MakeView_BATCHES
***************** View setup for BATCHES ***************

CREATE SQL VIEW "BATCHES" ; 
   AS SELECT Glmaster.cbatch, Glmaster.cref FROM appdata!glmaster GROUP BY Glmaster.cbatch ORDER BY Glmaster.cbatch

DBSetProp('BATCHES', 'View', 'UpdateType', 1)
DBSetProp('BATCHES', 'View', 'WhereType', 3)
DBSetProp('BATCHES', 'View', 'FetchMemo', .T.)
DBSetProp('BATCHES', 'View', 'SendUpdates', .F.)
DBSetProp('BATCHES', 'View', 'UseMemoSize', 255)
DBSetProp('BATCHES', 'View', 'FetchSize', 100)
DBSetProp('BATCHES', 'View', 'MaxRecords', -1)
DBSetProp('BATCHES', 'View', 'Tables', 'appdata!glmaster')
DBSetProp('BATCHES', 'View', 'Prepared', .F.)
DBSetProp('BATCHES', 'View', 'CompareMemo', .T.)
DBSetProp('BATCHES', 'View', 'FetchAsNeeded', .F.)
DBSetProp('BATCHES', 'View', 'Comment', "")
DBSetProp('BATCHES', 'View', 'BatchUpdateCount', 1)
DBSetProp('BATCHES', 'View', 'ShareConnection', .F.)
DBSetProp('BATCHES', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for BATCHES
* Props for the BATCHES.cbatch field.
DBSetProp('BATCHES.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('BATCHES.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('BATCHES.cbatch', 'Field', 'UpdateName', 'appdata!glmaster.cbatch')
DBSetProp('BATCHES.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('BATCHES.cbatch', 'Field', 'DataType', "C(8)")
* Props for the BATCHES.cref field.
DBSetProp('BATCHES.cref', 'Field', 'KeyField', .F.)
DBSetProp('BATCHES.cref', 'Field', 'Updatable', .T.)
DBSetProp('BATCHES.cref', 'Field', 'UpdateName', 'appdata!glmaster.cref')
DBSetProp('BATCHES.cref', 'Field', 'Caption', "Reference")
DBSetProp('BATCHES.cref', 'Field', 'DataType', "C(25)")
ENDFUNC
 
FUNCTION MakeView_DEDVIEW
***************** View setup for DEDVIEW ***************

CREATE SQL VIEW "DEDVIEW" ; 
   AS SELECT Prcodef.cdesc, Prcodes.namount, Prcodes.cempid, Prcodes.cidprcode,  Prcodes.cidprcodef, Prcodes.lfedwh, Prcodes.lstatewh, Prcodes.llocaltax,  Prcodes.lschool, Prcodes.lsocsec, Prcodes.lmedicare, Prcodes.lfedue,  Prcodes.lstateue, Prcodes.lstateda, Prcodes.lworkcomp, Prcodes.ccalc,  Prcodes.ldedaffect, Prcodef.cacctno, Prcodef.ccompliab, Prcodef.ccompexp,  Prcodef.lmatched FROM  appdata!prcodes INNER JOIN appdata!prcodef    ON  Prcodes.cidprcodef = Prcodef.cidprcodef WHERE Prcodes.ctype = "D" ORDER BY Prcodef.cdesc

DBSetProp('DEDVIEW', 'View', 'UpdateType', 1)
DBSetProp('DEDVIEW', 'View', 'WhereType', 3)
DBSetProp('DEDVIEW', 'View', 'FetchMemo', .T.)
DBSetProp('DEDVIEW', 'View', 'SendUpdates', .T.)
DBSetProp('DEDVIEW', 'View', 'UseMemoSize', 255)
DBSetProp('DEDVIEW', 'View', 'FetchSize', 100)
DBSetProp('DEDVIEW', 'View', 'MaxRecords', -1)
DBSetProp('DEDVIEW', 'View', 'Tables', 'appdata!prcodef,appdata!prcodes')
DBSetProp('DEDVIEW', 'View', 'Prepared', .F.)
DBSetProp('DEDVIEW', 'View', 'CompareMemo', .T.)
DBSetProp('DEDVIEW', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DEDVIEW', 'View', 'Comment', "* ML - Used to populate Deduction grid on premp.scx" + CHR(13) + "* *" + CHR(13) + "*")
DBSetProp('DEDVIEW', 'View', 'BatchUpdateCount', 1)
DBSetProp('DEDVIEW', 'View', 'ShareConnection', .F.)
DBSetProp('DEDVIEW', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DEDVIEW
* Props for the DEDVIEW.cdesc field.
DBSetProp('DEDVIEW.cdesc', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.cdesc', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.cdesc', 'Field', 'UpdateName', 'appdata!prcodef.cdesc')
DBSetProp('DEDVIEW.cdesc', 'Field', 'Caption', "Code Description")
DBSetProp('DEDVIEW.cdesc', 'Field', 'Comment', "Description")
DBSetProp('DEDVIEW.cdesc', 'Field', 'DataType', "C(40)")
* Props for the DEDVIEW.namount field.
DBSetProp('DEDVIEW.namount', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.namount', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.namount', 'Field', 'UpdateName', 'appdata!prcodes.namount')
DBSetProp('DEDVIEW.namount', 'Field', 'Caption', "Amount")
DBSetProp('DEDVIEW.namount', 'Field', 'Comment', "The amount of the check.")
DBSetProp('DEDVIEW.namount', 'Field', 'InputMask', "999999999.99")
DBSetProp('DEDVIEW.namount', 'Field', 'DataType', "N(12,2)")
* Props for the DEDVIEW.cempid field.
DBSetProp('DEDVIEW.cempid', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.cempid', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.cempid', 'Field', 'UpdateName', 'appdata!prcodes.cempid')
DBSetProp('DEDVIEW.cempid', 'Field', 'Caption', "Employee ID")
DBSetProp('DEDVIEW.cempid', 'Field', 'DataType', "C(10)")
* Props for the DEDVIEW.cidprcode field.
DBSetProp('DEDVIEW.cidprcode', 'Field', 'KeyField', .T.)
DBSetProp('DEDVIEW.cidprcode', 'Field', 'Updatable', .F.)
DBSetProp('DEDVIEW.cidprcode', 'Field', 'UpdateName', 'appdata!prcodes.cidprcode')
DBSetProp('DEDVIEW.cidprcode', 'Field', 'Caption', "Primary Key")
DBSetProp('DEDVIEW.cidprcode', 'Field', 'Comment', "Unique Primary Key")
DBSetProp('DEDVIEW.cidprcode', 'Field', 'DataType', "C(8)")
* Props for the DEDVIEW.cidprcodef field.
DBSetProp('DEDVIEW.cidprcodef', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.cidprcodef', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.cidprcodef', 'Field', 'UpdateName', 'appdata!prcodes.cidprcodef')
DBSetProp('DEDVIEW.cidprcodef', 'Field', 'Caption', "Link to PRCODEF")
DBSetProp('DEDVIEW.cidprcodef', 'Field', 'DataType', "C(8)")
* Props for the DEDVIEW.lfedwh field.
DBSetProp('DEDVIEW.lfedwh', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lfedwh', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lfedwh', 'Field', 'UpdateName', 'appdata!prcodes.lfedwh')
DBSetProp('DEDVIEW.lfedwh', 'Field', 'Caption', "Fed W/H Flag")
DBSetProp('DEDVIEW.lfedwh', 'Field', 'DataType', "L")
* Props for the DEDVIEW.lstatewh field.
DBSetProp('DEDVIEW.lstatewh', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lstatewh', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lstatewh', 'Field', 'UpdateName', 'appdata!prcodes.lstatewh')
DBSetProp('DEDVIEW.lstatewh', 'Field', 'Caption', "State W/H Flag")
DBSetProp('DEDVIEW.lstatewh', 'Field', 'DataType', "L")
* Props for the DEDVIEW.llocaltax field.
DBSetProp('DEDVIEW.llocaltax', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.llocaltax', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.llocaltax', 'Field', 'UpdateName', 'appdata!prcodes.llocaltax')
DBSetProp('DEDVIEW.llocaltax', 'Field', 'Caption', "Local W/H Flag")
DBSetProp('DEDVIEW.llocaltax', 'Field', 'DataType', "L")
* Props for the DEDVIEW.lschool field.
DBSetProp('DEDVIEW.lschool', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lschool', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lschool', 'Field', 'UpdateName', 'appdata!prcodes.lschool')
DBSetProp('DEDVIEW.lschool', 'Field', 'Caption', "School Dist W/H Flag")
DBSetProp('DEDVIEW.lschool', 'Field', 'DataType', "L")
* Props for the DEDVIEW.lsocsec field.
DBSetProp('DEDVIEW.lsocsec', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lsocsec', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lsocsec', 'Field', 'UpdateName', 'appdata!prcodes.lsocsec')
DBSetProp('DEDVIEW.lsocsec', 'Field', 'Caption', "FICA Flag")
DBSetProp('DEDVIEW.lsocsec', 'Field', 'DataType', "L")
* Props for the DEDVIEW.lmedicare field.
DBSetProp('DEDVIEW.lmedicare', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lmedicare', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lmedicare', 'Field', 'UpdateName', 'appdata!prcodes.lmedicare')
DBSetProp('DEDVIEW.lmedicare', 'Field', 'Caption', "Medicare Flag")
DBSetProp('DEDVIEW.lmedicare', 'Field', 'DataType', "L")
* Props for the DEDVIEW.lfedue field.
DBSetProp('DEDVIEW.lfedue', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lfedue', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lfedue', 'Field', 'UpdateName', 'appdata!prcodes.lfedue')
DBSetProp('DEDVIEW.lfedue', 'Field', 'Caption', "FUTA Flag")
DBSetProp('DEDVIEW.lfedue', 'Field', 'DataType', "L")
* Props for the DEDVIEW.lstateue field.
DBSetProp('DEDVIEW.lstateue', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lstateue', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lstateue', 'Field', 'UpdateName', 'appdata!prcodes.lstateue')
DBSetProp('DEDVIEW.lstateue', 'Field', 'Caption', "SUTA Flag")
DBSetProp('DEDVIEW.lstateue', 'Field', 'DataType', "L")
* Props for the DEDVIEW.lstateda field.
DBSetProp('DEDVIEW.lstateda', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lstateda', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lstateda', 'Field', 'UpdateName', 'appdata!prcodes.lstateda')
DBSetProp('DEDVIEW.lstateda', 'Field', 'Caption', "State Disability Flag")
DBSetProp('DEDVIEW.lstateda', 'Field', 'DataType', "L")
* Props for the DEDVIEW.lworkcomp field.
DBSetProp('DEDVIEW.lworkcomp', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lworkcomp', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lworkcomp', 'Field', 'UpdateName', 'appdata!prcodes.lworkcomp')
DBSetProp('DEDVIEW.lworkcomp', 'Field', 'Caption', "Workers Comp Flag")
DBSetProp('DEDVIEW.lworkcomp', 'Field', 'DataType', "L")
* Props for the DEDVIEW.ccalc field.
DBSetProp('DEDVIEW.ccalc', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.ccalc', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.ccalc', 'Field', 'UpdateName', 'appdata!prcodes.ccalc')
DBSetProp('DEDVIEW.ccalc', 'Field', 'Caption', "Calc Type")
DBSetProp('DEDVIEW.ccalc', 'Field', 'DataType', "C(1)")
* Props for the DEDVIEW.ldedaffect field.
DBSetProp('DEDVIEW.ldedaffect', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.ldedaffect', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.ldedaffect', 'Field', 'UpdateName', 'appdata!prcodes.ldedaffect')
DBSetProp('DEDVIEW.ldedaffect', 'Field', 'Caption', "Deduct Before Taxes")
DBSetProp('DEDVIEW.ldedaffect', 'Field', 'DataType', "L")
* Props for the DEDVIEW.cacctno field.
DBSetProp('DEDVIEW.cacctno', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.cacctno', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.cacctno', 'Field', 'UpdateName', 'appdata!prcodef.cacctno')
DBSetProp('DEDVIEW.cacctno', 'Field', 'Caption', "Account Number")
DBSetProp('DEDVIEW.cacctno', 'Field', 'DataType', "C(6)")
* Props for the DEDVIEW.ccompliab field.
DBSetProp('DEDVIEW.ccompliab', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.ccompliab', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.ccompliab', 'Field', 'UpdateName', 'appdata!prcodef.ccompliab')
DBSetProp('DEDVIEW.ccompliab', 'Field', 'Caption', "Company Liability Acct")
DBSetProp('DEDVIEW.ccompliab', 'Field', 'DataType', "C(6)")
* Props for the DEDVIEW.ccompexp field.
DBSetProp('DEDVIEW.ccompexp', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.ccompexp', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.ccompexp', 'Field', 'UpdateName', 'appdata!prcodef.ccompexp')
DBSetProp('DEDVIEW.ccompexp', 'Field', 'Caption', "Company Expense Acct")
DBSetProp('DEDVIEW.ccompexp', 'Field', 'DataType', "C(6)")
* Props for the DEDVIEW.lmatched field.
DBSetProp('DEDVIEW.lmatched', 'Field', 'KeyField', .F.)
DBSetProp('DEDVIEW.lmatched', 'Field', 'Updatable', .T.)
DBSetProp('DEDVIEW.lmatched', 'Field', 'UpdateName', 'appdata!prcodef.lmatched')
DBSetProp('DEDVIEW.lmatched', 'Field', 'Caption', "Match Contribution")
DBSetProp('DEDVIEW.lmatched', 'Field', 'DataType', "L")
ENDFUNC
 
FUNCTION MakeView_GLBATCH
***************** View setup for GLBATCH ***************

CREATE SQL VIEW "GLBATCH" ; 
   AS SELECT Glmaster.cbatch, Glmaster.cref, Glmaster.ddate FROM appdata!glmaster GROUP BY Glmaster.cbatch ORDER BY Glmaster.cbatch

DBSetProp('GLBATCH', 'View', 'UpdateType', 1)
DBSetProp('GLBATCH', 'View', 'WhereType', 3)
DBSetProp('GLBATCH', 'View', 'FetchMemo', .T.)
DBSetProp('GLBATCH', 'View', 'SendUpdates', .F.)
DBSetProp('GLBATCH', 'View', 'UseMemoSize', 255)
DBSetProp('GLBATCH', 'View', 'FetchSize', 100)
DBSetProp('GLBATCH', 'View', 'MaxRecords', -1)
DBSetProp('GLBATCH', 'View', 'Tables', 'appdata!glmaster')
DBSetProp('GLBATCH', 'View', 'Prepared', .F.)
DBSetProp('GLBATCH', 'View', 'CompareMemo', .T.)
DBSetProp('GLBATCH', 'View', 'FetchAsNeeded', .F.)
DBSetProp('GLBATCH', 'View', 'Comment', "")
DBSetProp('GLBATCH', 'View', 'BatchUpdateCount', 1)
DBSetProp('GLBATCH', 'View', 'ShareConnection', .F.)
DBSetProp('GLBATCH', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for GLBATCH
* Props for the GLBATCH.cbatch field.
DBSetProp('GLBATCH.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('GLBATCH.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('GLBATCH.cbatch', 'Field', 'UpdateName', 'appdata!glmaster.cbatch')
DBSetProp('GLBATCH.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('GLBATCH.cbatch', 'Field', 'DataType', "C(8)")
* Props for the GLBATCH.cref field.
DBSetProp('GLBATCH.cref', 'Field', 'KeyField', .F.)
DBSetProp('GLBATCH.cref', 'Field', 'Updatable', .T.)
DBSetProp('GLBATCH.cref', 'Field', 'UpdateName', 'appdata!glmaster.cref')
DBSetProp('GLBATCH.cref', 'Field', 'Caption', "Reference")
DBSetProp('GLBATCH.cref', 'Field', 'DataType', "C(25)")
* Props for the GLBATCH.ddate field.
DBSetProp('GLBATCH.ddate', 'Field', 'KeyField', .F.)
DBSetProp('GLBATCH.ddate', 'Field', 'Updatable', .T.)
DBSetProp('GLBATCH.ddate', 'Field', 'UpdateName', 'appdata!glmaster.ddate')
DBSetProp('GLBATCH.ddate', 'Field', 'Caption', "Date")
DBSetProp('GLBATCH.ddate', 'Field', 'DataType', "D")
ENDFUNC
 
FUNCTION MakeView_INCVIEW
***************** View setup for INCVIEW ***************

CREATE SQL VIEW "INCVIEW" ; 
   AS SELECT Prcodef.cdesc, Prcodes.namount, Prcodes.cempid, Prcodes.cidprcode,  Prcodes.cidprcodef, Prcodes.lfedwh, Prcodes.lstatewh, Prcodes.llocaltax,  Prcodes.lschool, Prcodes.lsocsec, Prcodes.lmedicare, Prcodes.lfedue,  Prcodes.lstateue, Prcodes.lstateda, Prcodes.lworkcomp, Prcodes.lincgross,  Prcodes.ccalc, Prcodef.cacctno FROM  appdata!prcodef INNER JOIN appdata!prcodes    ON  Prcodef.cidprcodef = Prcodes.cidprcodef WHERE Prcodes.ctype = "I" ORDER BY Prcodef.cdesc

DBSetProp('INCVIEW', 'View', 'UpdateType', 1)
DBSetProp('INCVIEW', 'View', 'WhereType', 3)
DBSetProp('INCVIEW', 'View', 'FetchMemo', .T.)
DBSetProp('INCVIEW', 'View', 'SendUpdates', .T.)
DBSetProp('INCVIEW', 'View', 'UseMemoSize', 255)
DBSetProp('INCVIEW', 'View', 'FetchSize', 100)
DBSetProp('INCVIEW', 'View', 'MaxRecords', -1)
DBSetProp('INCVIEW', 'View', 'Tables', 'appdata!prcodes')
DBSetProp('INCVIEW', 'View', 'Prepared', .F.)
DBSetProp('INCVIEW', 'View', 'CompareMemo', .T.)
DBSetProp('INCVIEW', 'View', 'FetchAsNeeded', .F.)
DBSetProp('INCVIEW', 'View', 'Comment', "L -  Used to populate Other Income grid on premp.scx" + CHR(13) + "*")
DBSetProp('INCVIEW', 'View', 'BatchUpdateCount', 1)
DBSetProp('INCVIEW', 'View', 'ShareConnection', .F.)
DBSetProp('INCVIEW', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for INCVIEW
* Props for the INCVIEW.cdesc field.
DBSetProp('INCVIEW.cdesc', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.cdesc', 'Field', 'Updatable', .F.)
DBSetProp('INCVIEW.cdesc', 'Field', 'UpdateName', 'appdata!prcodef.cdesc')
DBSetProp('INCVIEW.cdesc', 'Field', 'Caption', "Code Description")
DBSetProp('INCVIEW.cdesc', 'Field', 'Comment', "Description")
DBSetProp('INCVIEW.cdesc', 'Field', 'DataType', "C(40)")
* Props for the INCVIEW.namount field.
DBSetProp('INCVIEW.namount', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.namount', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.namount', 'Field', 'UpdateName', 'appdata!prcodes.namount')
DBSetProp('INCVIEW.namount', 'Field', 'Caption', "Amount")
DBSetProp('INCVIEW.namount', 'Field', 'Comment', "The amount of the check.")
DBSetProp('INCVIEW.namount', 'Field', 'InputMask', "999999999.99")
DBSetProp('INCVIEW.namount', 'Field', 'DataType', "N(12,2)")
* Props for the INCVIEW.cempid field.
DBSetProp('INCVIEW.cempid', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.cempid', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.cempid', 'Field', 'UpdateName', 'appdata!prcodes.cempid')
DBSetProp('INCVIEW.cempid', 'Field', 'Caption', "Employee ID")
DBSetProp('INCVIEW.cempid', 'Field', 'DataType', "C(10)")
* Props for the INCVIEW.cidprcode field.
DBSetProp('INCVIEW.cidprcode', 'Field', 'KeyField', .T.)
DBSetProp('INCVIEW.cidprcode', 'Field', 'Updatable', .F.)
DBSetProp('INCVIEW.cidprcode', 'Field', 'UpdateName', 'appdata!prcodes.cidprcode')
DBSetProp('INCVIEW.cidprcode', 'Field', 'Caption', "Primary Key")
DBSetProp('INCVIEW.cidprcode', 'Field', 'Comment', "Unique Primary Key")
DBSetProp('INCVIEW.cidprcode', 'Field', 'DataType', "C(8)")
* Props for the INCVIEW.cidprcodef field.
DBSetProp('INCVIEW.cidprcodef', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.cidprcodef', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.cidprcodef', 'Field', 'UpdateName', 'appdata!prcodes.cidprcodef')
DBSetProp('INCVIEW.cidprcodef', 'Field', 'Caption', "Link to PRCODEF")
DBSetProp('INCVIEW.cidprcodef', 'Field', 'DataType', "C(8)")
* Props for the INCVIEW.lfedwh field.
DBSetProp('INCVIEW.lfedwh', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lfedwh', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lfedwh', 'Field', 'UpdateName', 'appdata!prcodes.lfedwh')
DBSetProp('INCVIEW.lfedwh', 'Field', 'Caption', "Fed W/H Flag")
DBSetProp('INCVIEW.lfedwh', 'Field', 'DataType', "L")
* Props for the INCVIEW.lstatewh field.
DBSetProp('INCVIEW.lstatewh', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lstatewh', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lstatewh', 'Field', 'UpdateName', 'appdata!prcodes.lstatewh')
DBSetProp('INCVIEW.lstatewh', 'Field', 'Caption', "State W/H Flag")
DBSetProp('INCVIEW.lstatewh', 'Field', 'DataType', "L")
* Props for the INCVIEW.llocaltax field.
DBSetProp('INCVIEW.llocaltax', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.llocaltax', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.llocaltax', 'Field', 'UpdateName', 'appdata!prcodes.llocaltax')
DBSetProp('INCVIEW.llocaltax', 'Field', 'Caption', "Local W/H Flag")
DBSetProp('INCVIEW.llocaltax', 'Field', 'DataType', "L")
* Props for the INCVIEW.lschool field.
DBSetProp('INCVIEW.lschool', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lschool', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lschool', 'Field', 'UpdateName', 'appdata!prcodes.lschool')
DBSetProp('INCVIEW.lschool', 'Field', 'Caption', "School Dist W/H Flag")
DBSetProp('INCVIEW.lschool', 'Field', 'DataType', "L")
* Props for the INCVIEW.lsocsec field.
DBSetProp('INCVIEW.lsocsec', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lsocsec', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lsocsec', 'Field', 'UpdateName', 'appdata!prcodes.lsocsec')
DBSetProp('INCVIEW.lsocsec', 'Field', 'Caption', "FICA Flag")
DBSetProp('INCVIEW.lsocsec', 'Field', 'DataType', "L")
* Props for the INCVIEW.lmedicare field.
DBSetProp('INCVIEW.lmedicare', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lmedicare', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lmedicare', 'Field', 'UpdateName', 'appdata!prcodes.lmedicare')
DBSetProp('INCVIEW.lmedicare', 'Field', 'Caption', "Medicare Flag")
DBSetProp('INCVIEW.lmedicare', 'Field', 'DataType', "L")
* Props for the INCVIEW.lfedue field.
DBSetProp('INCVIEW.lfedue', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lfedue', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lfedue', 'Field', 'UpdateName', 'appdata!prcodes.lfedue')
DBSetProp('INCVIEW.lfedue', 'Field', 'Caption', "FUTA Flag")
DBSetProp('INCVIEW.lfedue', 'Field', 'DataType', "L")
* Props for the INCVIEW.lstateue field.
DBSetProp('INCVIEW.lstateue', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lstateue', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lstateue', 'Field', 'UpdateName', 'appdata!prcodes.lstateue')
DBSetProp('INCVIEW.lstateue', 'Field', 'Caption', "SUTA Flag")
DBSetProp('INCVIEW.lstateue', 'Field', 'DataType', "L")
* Props for the INCVIEW.lstateda field.
DBSetProp('INCVIEW.lstateda', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lstateda', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lstateda', 'Field', 'UpdateName', 'appdata!prcodes.lstateda')
DBSetProp('INCVIEW.lstateda', 'Field', 'Caption', "State Disability Flag")
DBSetProp('INCVIEW.lstateda', 'Field', 'DataType', "L")
* Props for the INCVIEW.lworkcomp field.
DBSetProp('INCVIEW.lworkcomp', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lworkcomp', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lworkcomp', 'Field', 'UpdateName', 'appdata!prcodes.lworkcomp')
DBSetProp('INCVIEW.lworkcomp', 'Field', 'Caption', "Workers Comp Flag")
DBSetProp('INCVIEW.lworkcomp', 'Field', 'DataType', "L")
* Props for the INCVIEW.lincgross field.
DBSetProp('INCVIEW.lincgross', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.lincgross', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.lincgross', 'Field', 'UpdateName', 'appdata!prcodes.lincgross')
DBSetProp('INCVIEW.lincgross', 'Field', 'Caption', "Include in Gross Income")
DBSetProp('INCVIEW.lincgross', 'Field', 'DataType', "L")
* Props for the INCVIEW.ccalc field.
DBSetProp('INCVIEW.ccalc', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.ccalc', 'Field', 'Updatable', .T.)
DBSetProp('INCVIEW.ccalc', 'Field', 'UpdateName', 'appdata!prcodes.ccalc')
DBSetProp('INCVIEW.ccalc', 'Field', 'Caption', "Calc Type")
DBSetProp('INCVIEW.ccalc', 'Field', 'DataType', "C(1)")
* Props for the INCVIEW.cacctno field.
DBSetProp('INCVIEW.cacctno', 'Field', 'KeyField', .F.)
DBSetProp('INCVIEW.cacctno', 'Field', 'Updatable', .F.)
DBSetProp('INCVIEW.cacctno', 'Field', 'UpdateName', 'appdata!prcodef.cacctno')
DBSetProp('INCVIEW.cacctno', 'Field', 'Caption', "Account Number")
DBSetProp('INCVIEW.cacctno', 'Field', 'DataType', "C(6)")
ENDFUNC
 
FUNCTION MakeView_TAXVIEW
***************** View setup for TAXVIEW ***************

CREATE SQL VIEW "TAXVIEW" ; 
   AS SELECT Prtaxes.ctaxname, Premptax.lexempt, Premptax.cempid, Premptax.cidetax, Prtaxes.cidprtax, Premptax.cidprtax, Prtaxes.ncomprate FROM  APPDATA!premptax  INNER JOIN APPDATA!prtaxes  ON  Premptax.cidprtax = Prtaxes.cidprtax ORDER BY Prtaxes.ctaxname

DBSetProp('TAXVIEW', 'View', 'UpdateType', 1)
DBSetProp('TAXVIEW', 'View', 'WhereType', 3)
DBSetProp('TAXVIEW', 'View', 'FetchMemo', .T.)
DBSetProp('TAXVIEW', 'View', 'SendUpdates', .T.)
DBSetProp('TAXVIEW', 'View', 'UseMemoSize', 255)
DBSetProp('TAXVIEW', 'View', 'FetchSize', 100)
DBSetProp('TAXVIEW', 'View', 'MaxRecords', -1)
DBSetProp('TAXVIEW', 'View', 'Tables', 'appdata!prtaxes,appdata!premptax')
DBSetProp('TAXVIEW', 'View', 'Prepared', .F.)
DBSetProp('TAXVIEW', 'View', 'CompareMemo', .T.)
DBSetProp('TAXVIEW', 'View', 'FetchAsNeeded', .F.)
DBSetProp('TAXVIEW', 'View', 'Comment', "")
DBSetProp('TAXVIEW', 'View', 'BatchUpdateCount', 1)
DBSetProp('TAXVIEW', 'View', 'ShareConnection', .F.)
DBSetProp('TAXVIEW', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for TAXVIEW
* Props for the TAXVIEW.ctaxname field.
DBSetProp('TAXVIEW.ctaxname', 'Field', 'KeyField', .F.)
DBSetProp('TAXVIEW.ctaxname', 'Field', 'Updatable', .T.)
DBSetProp('TAXVIEW.ctaxname', 'Field', 'UpdateName', 'appdata!prtaxes.ctaxname')
DBSetProp('TAXVIEW.ctaxname', 'Field', 'Caption', "Tax Name")
DBSetProp('TAXVIEW.ctaxname', 'Field', 'DataType', "C(25)")
* Props for the TAXVIEW.lexempt field.
DBSetProp('TAXVIEW.lexempt', 'Field', 'KeyField', .F.)
DBSetProp('TAXVIEW.lexempt', 'Field', 'Updatable', .T.)
DBSetProp('TAXVIEW.lexempt', 'Field', 'UpdateName', 'appdata!premptax.lexempt')
DBSetProp('TAXVIEW.lexempt', 'Field', 'Caption', "Exempt Flag")
DBSetProp('TAXVIEW.lexempt', 'Field', 'DataType', "L")
* Props for the TAXVIEW.cempid field.
DBSetProp('TAXVIEW.cempid', 'Field', 'KeyField', .F.)
DBSetProp('TAXVIEW.cempid', 'Field', 'Updatable', .T.)
DBSetProp('TAXVIEW.cempid', 'Field', 'UpdateName', 'appdata!premptax.cempid')
DBSetProp('TAXVIEW.cempid', 'Field', 'Caption', "Employee ID")
DBSetProp('TAXVIEW.cempid', 'Field', 'DataType', "C(10)")
* Props for the TAXVIEW.cidetax field.
DBSetProp('TAXVIEW.cidetax', 'Field', 'KeyField', .T.)
DBSetProp('TAXVIEW.cidetax', 'Field', 'Updatable', .F.)
DBSetProp('TAXVIEW.cidetax', 'Field', 'UpdateName', 'appdata!premptax.cidetax')
DBSetProp('TAXVIEW.cidetax', 'Field', 'Caption', "Primary Key")
DBSetProp('TAXVIEW.cidetax', 'Field', 'DataType', "C(8)")
* Props for the TAXVIEW.cidprtax_a field.
DBSetProp('TAXVIEW.cidprtax_a', 'Field', 'KeyField', .T.)
DBSetProp('TAXVIEW.cidprtax_a', 'Field', 'Updatable', .F.)
DBSetProp('TAXVIEW.cidprtax_a', 'Field', 'UpdateName', 'appdata!prtaxes.cidprtax')
DBSetProp('TAXVIEW.cidprtax_a', 'Field', 'Caption', "Primary Key")
DBSetProp('TAXVIEW.cidprtax_a', 'Field', 'DataType', "C(8)")
* Props for the TAXVIEW.cidprtax_b field.
DBSetProp('TAXVIEW.cidprtax_b', 'Field', 'KeyField', .F.)
DBSetProp('TAXVIEW.cidprtax_b', 'Field', 'Updatable', .T.)
DBSetProp('TAXVIEW.cidprtax_b', 'Field', 'UpdateName', 'appdata!premptax.cidprtax')
DBSetProp('TAXVIEW.cidprtax_b', 'Field', 'Caption', "Link To PRTAXES")
DBSetProp('TAXVIEW.cidprtax_b', 'Field', 'DataType', "C(8)")
* Props for the TAXVIEW.ncomprate field.
DBSetProp('TAXVIEW.ncomprate', 'Field', 'KeyField', .F.)
DBSetProp('TAXVIEW.ncomprate', 'Field', 'Updatable', .T.)
DBSetProp('TAXVIEW.ncomprate', 'Field', 'UpdateName', 'appdata!prtaxes.ncomprate')
DBSetProp('TAXVIEW.ncomprate', 'Field', 'DataType', "N(7,4)")
ENDFUNC
 
FUNCTION MakeView_WELLS_ATTACHED_TO_MASTER_METER
***************** View setup for WELLS_ATTACHED_TO_MASTER_METER ***************

CREATE SQL VIEW "WELLS_ATTACHED_TO_MASTER_METER" ; 
   AS SELECT wells.CWELLID, wells.CWELLNAME FROM APPDATA!wells WHERE wells.CMETERID = ?lcMeterId ORDER BY wells.CWELLID

DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'UpdateType', 1)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'WhereType', 3)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'FetchMemo', .T.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'SendUpdates', .T.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'UseMemoSize', 255)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'FetchSize', 100)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'MaxRecords', -1)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'Tables', 'APPDATA!wells')
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'Prepared', .F.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'CompareMemo', .T.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'FetchAsNeeded', .F.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'Comment', "")
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'BatchUpdateCount', 1)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'ShareConnection', .F.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for WELLS_ATTACHED_TO_MASTER_METER
* Props for the WELLS_ATTACHED_TO_MASTER_METER.cwellid field.
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellid', 'Field', 'KeyField', .T.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellid', 'Field', 'Updatable', .F.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellid', 'Field', 'UpdateName', 'APPDATA!wells.CWELLID')
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellid', 'Field', 'DataType', "C(10)")
* Props for the WELLS_ATTACHED_TO_MASTER_METER.cwellname field.
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellname', 'Field', 'KeyField', .F.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellname', 'Field', 'Updatable', .T.)
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellname', 'Field', 'UpdateName', 'APPDATA!wells.CWELLNAME')
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellname', 'Field', 'Caption', "Well Name")
DBSetProp('WELLS_ATTACHED_TO_MASTER_METER.cwellname', 'Field', 'DataType', "C(30)")
ENDFUNC
 
FUNCTION MakeView_ALLUNITS
***************** View setup for ALLUNITS ***************

CREATE SQL VIEW "ALLUNITS" ; 
   AS SELECT wells.cwellid           AS cUnitNo,  wells.cwellname         AS cName,  wells.cwellstat         AS cstatus,  'Well    '            AS cType  FROM APPDATA!wells  UNION  SELECT land.cleaseid             AS cUnitNo,  left(land.cleasename,30)  AS cName,  left(land.cleasestatus,1) as cstatus,  'Lease   '             AS cType  FROM APPDATA!Land  ORDER BY 3, 1

DBSetProp('ALLUNITS', 'View', 'UpdateType', 1)
DBSetProp('ALLUNITS', 'View', 'WhereType', 3)
DBSetProp('ALLUNITS', 'View', 'FetchMemo', .T.)
DBSetProp('ALLUNITS', 'View', 'SendUpdates', .F.)
DBSetProp('ALLUNITS', 'View', 'UseMemoSize', 255)
DBSetProp('ALLUNITS', 'View', 'FetchSize', 100)
DBSetProp('ALLUNITS', 'View', 'MaxRecords', -1)
DBSetProp('ALLUNITS', 'View', 'Tables', 'APPDATA!wells')
DBSetProp('ALLUNITS', 'View', 'Prepared', .F.)
DBSetProp('ALLUNITS', 'View', 'CompareMemo', .T.)
DBSetProp('ALLUNITS', 'View', 'FetchAsNeeded', .F.)
DBSetProp('ALLUNITS', 'View', 'Comment', "")
DBSetProp('ALLUNITS', 'View', 'BatchUpdateCount', 1)
DBSetProp('ALLUNITS', 'View', 'ShareConnection', .F.)
DBSetProp('ALLUNITS', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for ALLUNITS
* Props for the ALLUNITS.cunitno field.
DBSetProp('ALLUNITS.cunitno', 'Field', 'KeyField', .F.)
DBSetProp('ALLUNITS.cunitno', 'Field', 'Updatable', .F.)
DBSetProp('ALLUNITS.cunitno', 'Field', 'UpdateName', 'cunitno')
DBSetProp('ALLUNITS.cunitno', 'Field', 'DataType', "C(10)")
* Props for the ALLUNITS.cname field.
DBSetProp('ALLUNITS.cname', 'Field', 'KeyField', .F.)
DBSetProp('ALLUNITS.cname', 'Field', 'Updatable', .F.)
DBSetProp('ALLUNITS.cname', 'Field', 'UpdateName', 'cname')
DBSetProp('ALLUNITS.cname', 'Field', 'DataType', "C(30)")
* Props for the ALLUNITS.cstatus field.
DBSetProp('ALLUNITS.cstatus', 'Field', 'KeyField', .F.)
DBSetProp('ALLUNITS.cstatus', 'Field', 'Updatable', .F.)
DBSetProp('ALLUNITS.cstatus', 'Field', 'UpdateName', 'cstatus')
DBSetProp('ALLUNITS.cstatus', 'Field', 'DataType', "C(1)")
* Props for the ALLUNITS.ctype field.
DBSetProp('ALLUNITS.ctype', 'Field', 'KeyField', .F.)
DBSetProp('ALLUNITS.ctype', 'Field', 'Updatable', .F.)
DBSetProp('ALLUNITS.ctype', 'Field', 'UpdateName', 'ctype')
DBSetProp('ALLUNITS.ctype', 'Field', 'DataType', "C(8)")
ENDFUNC
 
FUNCTION MakeView_CUSTVEND
***************** View setup for CUSTVEND ***************

CREATE SQL VIEW "CUSTVEND" ; 
   AS SELECT Vendor.cvendorid     AS cId,  Vendor.cSortField AS cName,  'Vendor   '         AS cType,  Vendor.cbAddr1    AS cAddr1,  Vendor.cbAddr2    AS cAddr2,  padr(allt(Vendor.cbcity)+' '+Vendor.cbstate+' '+Vendor.cbZip,44,' ') AS cAddr3,  Vendor.cbContact  AS cContact,  Vendor.cbphone    AS cPhone,  Vendor.cidterm  FROM APPDATA!Vendor  UNION  SELECT custs.ccustid     AS cId,  custs.ccustname AS cName,  'Customer '      AS cType,  custs.cbAddr1    AS cAddr1,  custs.cbAddr2    AS cAddr2,  padr(allt(custs.cbcity)+' '+custs.cbstate+' '+custs.cbZip,44,' ') AS cAddr3,  custs.cbContact  AS cContact,  custs.cbphone    AS cPhone,  custs.cidterm  FROM APPDATA!custs  UNION  SELECT Emps.cempid  AS cID,   PADR((ALLT(emps.cLastName) + ' ' + ALLT(cFirstName)),60,' ') AS cName,  'Employee ' AS cType,  emps.caddress      AS caddr1,  SPACE(60) AS caddr2,  padr(allt(emps.ccity)+' '+emps.cstate+' '+emps.czipcode,44,' ') AS cAddr3,  space(30) AS ccontact,  space(14) AS cPhone,  space(8)  AS cidterm  FROM appdata!emps  UNION SELECT revsrc.crevkey as cid,  padr(allt(revsrc.crevname),60,' ') as cname,  'Purchaser' as ctype,  space(60) as caddr1,  space(60) as caddr2,  space(44) as caddr3,  space(30) AS ccontact,  space(14) AS cPhone,  space(8)  AS cidterm  FROM appdata!revsrc  ORDER BY 3, 1

DBSetProp('CUSTVEND', 'View', 'UpdateType', 1)
DBSetProp('CUSTVEND', 'View', 'WhereType', 3)
DBSetProp('CUSTVEND', 'View', 'FetchMemo', .T.)
DBSetProp('CUSTVEND', 'View', 'SendUpdates', .F.)
DBSetProp('CUSTVEND', 'View', 'UseMemoSize', 255)
DBSetProp('CUSTVEND', 'View', 'FetchSize', 100)
DBSetProp('CUSTVEND', 'View', 'MaxRecords', -1)
DBSetProp('CUSTVEND', 'View', 'Tables', 'APPDATA!Investor')
DBSetProp('CUSTVEND', 'View', 'Prepared', .F.)
DBSetProp('CUSTVEND', 'View', 'CompareMemo', .T.)
DBSetProp('CUSTVEND', 'View', 'FetchAsNeeded', .F.)
DBSetProp('CUSTVEND', 'View', 'Comment', "")
DBSetProp('CUSTVEND', 'View', 'BatchUpdateCount', 1)
DBSetProp('CUSTVEND', 'View', 'ShareConnection', .F.)
DBSetProp('CUSTVEND', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for CUSTVEND
* Props for the CUSTVEND.cid field.
DBSetProp('CUSTVEND.cid', 'Field', 'KeyField', .T.)
DBSetProp('CUSTVEND.cid', 'Field', 'Updatable', .F.)
DBSetProp('CUSTVEND.cid', 'Field', 'UpdateName', 'APPDATA!Vendor.cvendorid')
DBSetProp('CUSTVEND.cid', 'Field', 'Caption', "Vendor ID")
DBSetProp('CUSTVEND.cid', 'Field', 'DataType', "C(10)")
* Props for the CUSTVEND.cname field.
DBSetProp('CUSTVEND.cname', 'Field', 'KeyField', .F.)
DBSetProp('CUSTVEND.cname', 'Field', 'Updatable', .T.)
DBSetProp('CUSTVEND.cname', 'Field', 'UpdateName', 'APPDATA!Vendor.cSortField')
DBSetProp('CUSTVEND.cname', 'Field', 'Caption', "Vendor Name")
DBSetProp('CUSTVEND.cname', 'Field', 'DataType', "C(60)")
* Props for the CUSTVEND.ctype field.
DBSetProp('CUSTVEND.ctype', 'Field', 'KeyField', .F.)
DBSetProp('CUSTVEND.ctype', 'Field', 'Updatable', .F.)
DBSetProp('CUSTVEND.ctype', 'Field', 'UpdateName', "'Vendor   '")
DBSetProp('CUSTVEND.ctype', 'Field', 'DataType', "C(9)")
* Props for the CUSTVEND.caddr1 field.
DBSetProp('CUSTVEND.caddr1', 'Field', 'KeyField', .F.)
DBSetProp('CUSTVEND.caddr1', 'Field', 'Updatable', .T.)
DBSetProp('CUSTVEND.caddr1', 'Field', 'UpdateName', 'APPDATA!Vendor.cbAddr1')
DBSetProp('CUSTVEND.caddr1', 'Field', 'Caption', "Billing Address 1")
DBSetProp('CUSTVEND.caddr1', 'Field', 'DataType', "C(60)")
* Props for the CUSTVEND.caddr2 field.
DBSetProp('CUSTVEND.caddr2', 'Field', 'KeyField', .F.)
DBSetProp('CUSTVEND.caddr2', 'Field', 'Updatable', .T.)
DBSetProp('CUSTVEND.caddr2', 'Field', 'UpdateName', 'APPDATA!Vendor.cbAddr2')
DBSetProp('CUSTVEND.caddr2', 'Field', 'Caption', "Billing Address 2")
DBSetProp('CUSTVEND.caddr2', 'Field', 'DataType', "C(60)")
* Props for the CUSTVEND.caddr3 field.
DBSetProp('CUSTVEND.caddr3', 'Field', 'KeyField', .F.)
DBSetProp('CUSTVEND.caddr3', 'Field', 'Updatable', .F.)
DBSetProp('CUSTVEND.caddr3', 'Field', 'UpdateName', "')")
DBSetProp('CUSTVEND.caddr3', 'Field', 'DataType', "C(44)")
* Props for the CUSTVEND.ccontact field.
DBSetProp('CUSTVEND.ccontact', 'Field', 'KeyField', .F.)
DBSetProp('CUSTVEND.ccontact', 'Field', 'Updatable', .T.)
DBSetProp('CUSTVEND.ccontact', 'Field', 'UpdateName', 'APPDATA!Vendor.cbContact')
DBSetProp('CUSTVEND.ccontact', 'Field', 'Caption', "Billing Contact")
DBSetProp('CUSTVEND.ccontact', 'Field', 'DataType', "C(30)")
* Props for the CUSTVEND.cphone field.
DBSetProp('CUSTVEND.cphone', 'Field', 'KeyField', .F.)
DBSetProp('CUSTVEND.cphone', 'Field', 'Updatable', .T.)
DBSetProp('CUSTVEND.cphone', 'Field', 'UpdateName', 'APPDATA!Vendor.cbphone')
DBSetProp('CUSTVEND.cphone', 'Field', 'Caption', "Billing Phone")
DBSetProp('CUSTVEND.cphone', 'Field', 'DataType', "C(14)")
* Props for the CUSTVEND.cidterm field.
DBSetProp('CUSTVEND.cidterm', 'Field', 'KeyField', .F.)
DBSetProp('CUSTVEND.cidterm', 'Field', 'Updatable', .T.)
DBSetProp('CUSTVEND.cidterm', 'Field', 'UpdateName', 'APPDATA!Vendor.cidterm')
DBSetProp('CUSTVEND.cidterm', 'Field', 'Caption', "Link To Terms Table")
DBSetProp('CUSTVEND.cidterm', 'Field', 'DataType', "C(8)")
ENDFUNC
 
FUNCTION MakeView_CUSTOWNVEND
***************** View setup for CUSTOWNVEND ***************

CREATE SQL VIEW "CUSTOWNVEND" ; 
   AS SELECT Investor.cownerid      AS cId,  Investor.cSortField AS cName,  'Owner    '          AS cType,  Investor.cAddress1a AS cAddr1,  Investor.cAddress1b AS cAddr2,  padr(allt(Investor.cCity1)+' '+Investor.cState1+' '+Investor.cZip1,44,' ') AS cAddr3,  SPACE(30)         AS cContact,  cphoneh           AS cPhone,  cidterm  FROM APPDATA!Investor  UNION  SELECT Vendor.cvendorid     AS cId,  Vendor.cSortField AS cName,  'Vendor   '         AS cType,  Vendor.cbAddr1    AS cAddr1,  Vendor.cbAddr2    AS cAddr2,  padr(allt(Vendor.cbcity)+' '+Vendor.cbstate+' '+Vendor.cbZip,44,' ') AS cAddr3,  Vendor.cbContact  AS cContact,  Vendor.cbphone    AS cPhone,  Vendor.cidterm  FROM APPDATA!Vendor  UNION  SELECT custs.ccustid     AS cId,  custs.ccustname AS cName,  'Customer '      AS cType,  custs.cbAddr1    AS cAddr1,  custs.cbAddr2    AS cAddr2,  padr(allt(custs.cbcity)+' '+custs.cbstate+' '+custs.cbZip,44,' ') AS cAddr3,  custs.cbContact  AS cContact,  custs.cbphone    AS cPhone,  custs.cidterm  FROM APPDATA!custs  UNION  SELECT Emps.cempid  AS cID,   PADR((ALLT(emps.cLastName) + ' ' + ALLT(cFirstName)),60,' ') AS cName,  'Employee ' AS cType,  emps.caddress      AS caddr1,  SPACE(60) AS caddr2,  padr(allt(emps.ccity)+' '+emps.cstate+' '+emps.czipcode,44,' ') AS cAddr3,  space(30) AS ccontact,  space(14) AS cPhone,  space(8)  AS cidterm  FROM appdata!emps  UNION SELECT revsrc.crevkey as cid,  padr(allt(revsrc.crevname),60,' ') as cname,  'Purchaser' as ctype,  space(60) as caddr1,  space(60) as caddr2,  space(44) as caddr3,  space(30) AS ccontact,  space(14) AS cPhone,  space(8)  AS cidterm  FROM appdata!revsrc  ORDER BY 3, 1

DBSetProp('CUSTOWNVEND', 'View', 'UpdateType', 1)
DBSetProp('CUSTOWNVEND', 'View', 'WhereType', 3)
DBSetProp('CUSTOWNVEND', 'View', 'FetchMemo', .T.)
DBSetProp('CUSTOWNVEND', 'View', 'SendUpdates', .F.)
DBSetProp('CUSTOWNVEND', 'View', 'UseMemoSize', 255)
DBSetProp('CUSTOWNVEND', 'View', 'FetchSize', 100)
DBSetProp('CUSTOWNVEND', 'View', 'MaxRecords', -1)
DBSetProp('CUSTOWNVEND', 'View', 'Tables', 'APPDATA!Investor')
DBSetProp('CUSTOWNVEND', 'View', 'Prepared', .F.)
DBSetProp('CUSTOWNVEND', 'View', 'CompareMemo', .T.)
DBSetProp('CUSTOWNVEND', 'View', 'FetchAsNeeded', .F.)
DBSetProp('CUSTOWNVEND', 'View', 'Comment', "")
DBSetProp('CUSTOWNVEND', 'View', 'BatchUpdateCount', 1)
DBSetProp('CUSTOWNVEND', 'View', 'ShareConnection', .F.)
DBSetProp('CUSTOWNVEND', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for CUSTOWNVEND
* Props for the CUSTOWNVEND.cid field.
DBSetProp('CUSTOWNVEND.cid', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.cid', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWNVEND.cid', 'Field', 'UpdateName', 'cid')
DBSetProp('CUSTOWNVEND.cid', 'Field', 'DataType', "C(10)")
* Props for the CUSTOWNVEND.cname field.
DBSetProp('CUSTOWNVEND.cname', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.cname', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWNVEND.cname', 'Field', 'UpdateName', 'INVESTOR.CSORTFIELD')
DBSetProp('CUSTOWNVEND.cname', 'Field', 'Caption', "Owner Name (Alpha)")
DBSetProp('CUSTOWNVEND.cname', 'Field', 'DataType', "C(60)")
* Props for the CUSTOWNVEND.ctype field.
DBSetProp('CUSTOWNVEND.ctype', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.ctype', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWNVEND.ctype', 'Field', 'UpdateName', 'ctype')
DBSetProp('CUSTOWNVEND.ctype', 'Field', 'DataType', "C(9)")
* Props for the CUSTOWNVEND.caddr1 field.
DBSetProp('CUSTOWNVEND.caddr1', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.caddr1', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWNVEND.caddr1', 'Field', 'UpdateName', 'INVESTOR.CADDRESS1A')
DBSetProp('CUSTOWNVEND.caddr1', 'Field', 'Caption', "Primary Addr 1")
DBSetProp('CUSTOWNVEND.caddr1', 'Field', 'DataType', "C(60)")
* Props for the CUSTOWNVEND.caddr2 field.
DBSetProp('CUSTOWNVEND.caddr2', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.caddr2', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWNVEND.caddr2', 'Field', 'UpdateName', 'INVESTOR.CADDRESS1B')
DBSetProp('CUSTOWNVEND.caddr2', 'Field', 'Caption', "Primary Addr 2")
DBSetProp('CUSTOWNVEND.caddr2', 'Field', 'DataType', "C(60)")
* Props for the CUSTOWNVEND.caddr3 field.
DBSetProp('CUSTOWNVEND.caddr3', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.caddr3', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWNVEND.caddr3', 'Field', 'UpdateName', "')")
DBSetProp('CUSTOWNVEND.caddr3', 'Field', 'DataType', "C(44)")
* Props for the CUSTOWNVEND.ccontact field.
DBSetProp('CUSTOWNVEND.ccontact', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.ccontact', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWNVEND.ccontact', 'Field', 'UpdateName', 'ccontact')
DBSetProp('CUSTOWNVEND.ccontact', 'Field', 'DataType', "C(30)")
* Props for the CUSTOWNVEND.cphone field.
DBSetProp('CUSTOWNVEND.cphone', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.cphone', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWNVEND.cphone', 'Field', 'UpdateName', 'cphone')
DBSetProp('CUSTOWNVEND.cphone', 'Field', 'DataType', "C(14)")
* Props for the CUSTOWNVEND.cidterm field.
DBSetProp('CUSTOWNVEND.cidterm', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWNVEND.cidterm', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWNVEND.cidterm', 'Field', 'UpdateName', 'APPDATA!Investor.cidterm')
DBSetProp('CUSTOWNVEND.cidterm', 'Field', 'Caption', "Terms Foreign Key")
DBSetProp('CUSTOWNVEND.cidterm', 'Field', 'DataType', "C(8)")
ENDFUNC
 
FUNCTION MakeView_WELLEXP
***************** View setup for WELLEXP ***************

CREATE SQL VIEW "WELLEXP" ; 
   AS SELECT * FROM  appdata!expense WHERE  Expense.cwellid = ( ?lcWellID ) AND  IIF(?lcType="R",Expense.crunyearrev=?lcRunYear.AND.Expense.nrunnorev=?lnRunNo,Expense.crunyearjib=?lcRunYear.AND.Expense.nrunnojib=?lnRunNo)  ORDER BY Expense.cyear, Expense.cperiod, Expense.ccateg

DBSetProp('WELLEXP', 'View', 'UpdateType', 1)
DBSetProp('WELLEXP', 'View', 'WhereType', 3)
DBSetProp('WELLEXP', 'View', 'FetchMemo', .T.)
DBSetProp('WELLEXP', 'View', 'SendUpdates', .T.)
DBSetProp('WELLEXP', 'View', 'UseMemoSize', 255)
DBSetProp('WELLEXP', 'View', 'FetchSize', 100)
DBSetProp('WELLEXP', 'View', 'MaxRecords', -1)
DBSetProp('WELLEXP', 'View', 'Tables', 'appdata!expense')
DBSetProp('WELLEXP', 'View', 'Prepared', .F.)
DBSetProp('WELLEXP', 'View', 'CompareMemo', .T.)
DBSetProp('WELLEXP', 'View', 'FetchAsNeeded', .F.)
DBSetProp('WELLEXP', 'View', 'ParameterList', "lcWellID,'C';lcRunYear,'C';lnRunNo,'I';lcType,'C'")
DBSetProp('WELLEXP', 'View', 'Comment', "")
DBSetProp('WELLEXP', 'View', 'BatchUpdateCount', 1)
DBSetProp('WELLEXP', 'View', 'ShareConnection', .F.)
DBSetProp('WELLEXP', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for WELLEXP
* Props for the WELLEXP.cidexpe field.
DBSetProp('WELLEXP.cidexpe', 'Field', 'KeyField', .T.)
DBSetProp('WELLEXP.cidexpe', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cidexpe', 'Field', 'UpdateName', 'appdata!expense.cidexpe')
DBSetProp('WELLEXP.cidexpe', 'Field', 'Caption', "Primary Key")
DBSetProp('WELLEXP.cidexpe', 'Field', 'DataType', "C(8)")
* Props for the WELLEXP.cwellid field.
DBSetProp('WELLEXP.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cwellid', 'Field', 'UpdateName', 'appdata!expense.cwellid')
DBSetProp('WELLEXP.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('WELLEXP.cwellid', 'Field', 'DataType', "C(10)")
* Props for the WELLEXP.cyear field.
DBSetProp('WELLEXP.cyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cyear', 'Field', 'UpdateName', 'appdata!expense.cyear')
DBSetProp('WELLEXP.cyear', 'Field', 'Caption', "Year")
DBSetProp('WELLEXP.cyear', 'Field', 'DataType', "C(4)")
* Props for the WELLEXP.cperiod field.
DBSetProp('WELLEXP.cperiod', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cperiod', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cperiod', 'Field', 'UpdateName', 'appdata!expense.cperiod')
DBSetProp('WELLEXP.cperiod', 'Field', 'Caption', "Period")
DBSetProp('WELLEXP.cperiod', 'Field', 'DataType', "C(2)")
* Props for the WELLEXP.dexpdate field.
DBSetProp('WELLEXP.dexpdate', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.dexpdate', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.dexpdate', 'Field', 'UpdateName', 'appdata!expense.dexpdate')
DBSetProp('WELLEXP.dexpdate', 'Field', 'Caption', "Date")
DBSetProp('WELLEXP.dexpdate', 'Field', 'DataType', "D")
* Props for the WELLEXP.crefid field.
DBSetProp('WELLEXP.crefid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.crefid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.crefid', 'Field', 'UpdateName', 'appdata!expense.crefid')
DBSetProp('WELLEXP.crefid', 'Field', 'Caption', "Reference")
DBSetProp('WELLEXP.crefid', 'Field', 'DataType', "C(15)")
* Props for the WELLEXP.ccateg field.
DBSetProp('WELLEXP.ccateg', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.ccateg', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.ccateg', 'Field', 'UpdateName', 'appdata!expense.ccateg')
DBSetProp('WELLEXP.ccateg', 'Field', 'Caption', "Category")
DBSetProp('WELLEXP.ccateg', 'Field', 'DataType', "C(25)")
* Props for the WELLEXP.cpayee field.
DBSetProp('WELLEXP.cpayee', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cpayee', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cpayee', 'Field', 'UpdateName', 'appdata!expense.cpayee')
DBSetProp('WELLEXP.cpayee', 'Field', 'Caption', "Payee")
DBSetProp('WELLEXP.cpayee', 'Field', 'DataType', "C(40)")
* Props for the WELLEXP.nnetamount field.
DBSetProp('WELLEXP.nnetamount', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.nnetamount', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.nnetamount', 'Field', 'UpdateName', 'appdata!expense.nnetamount')
DBSetProp('WELLEXP.nnetamount', 'Field', 'Caption', "Net Amount")
DBSetProp('WELLEXP.nnetamount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLEXP.namount field.
DBSetProp('WELLEXP.namount', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.namount', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.namount', 'Field', 'UpdateName', 'appdata!expense.namount')
DBSetProp('WELLEXP.namount', 'Field', 'Caption', "Amount")
DBSetProp('WELLEXP.namount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLEXP.cmemo field.
DBSetProp('WELLEXP.cmemo', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cmemo', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cmemo', 'Field', 'UpdateName', 'appdata!expense.cmemo')
DBSetProp('WELLEXP.cmemo', 'Field', 'Caption', "Notes")
DBSetProp('WELLEXP.cmemo', 'Field', 'DataType', "C(40)")
* Props for the WELLEXP.cvendorid field.
DBSetProp('WELLEXP.cvendorid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cvendorid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cvendorid', 'Field', 'UpdateName', 'appdata!expense.cvendorid')
DBSetProp('WELLEXP.cvendorid', 'Field', 'Caption', "Vendor ID")
DBSetProp('WELLEXP.cvendorid', 'Field', 'DataType', "C(10)")
* Props for the WELLEXP.cpaidbyck field.
DBSetProp('WELLEXP.cpaidbyck', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cpaidbyck', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cpaidbyck', 'Field', 'UpdateName', 'appdata!expense.cpaidbyck')
DBSetProp('WELLEXP.cpaidbyck', 'Field', 'Caption', "Check Key")
DBSetProp('WELLEXP.cpaidbyck', 'Field', 'DataType', "C(8)")
* Props for the WELLEXP.cexpclass field.
DBSetProp('WELLEXP.cexpclass', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cexpclass', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cexpclass', 'Field', 'UpdateName', 'appdata!expense.cexpclass')
DBSetProp('WELLEXP.cexpclass', 'Field', 'Caption', "Exp Class")
DBSetProp('WELLEXP.cexpclass', 'Field', 'DataType', "C(1)")
* Props for the WELLEXP.nsaltwater field.
DBSetProp('WELLEXP.nsaltwater', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.nsaltwater', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.nsaltwater', 'Field', 'UpdateName', 'appdata!expense.nsaltwater')
DBSetProp('WELLEXP.nsaltwater', 'Field', 'Caption', "BBL of Water")
DBSetProp('WELLEXP.nsaltwater', 'Field', 'DataType', "I")
* Props for the WELLEXP.cprdpaid field.
DBSetProp('WELLEXP.cprdpaid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cprdpaid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cprdpaid', 'Field', 'UpdateName', 'appdata!expense.cprdpaid')
DBSetProp('WELLEXP.cprdpaid', 'Field', 'Caption', "Period Paid")
DBSetProp('WELLEXP.cprdpaid', 'Field', 'DataType', "C(6)")
* Props for the WELLEXP.lfixed field.
DBSetProp('WELLEXP.lfixed', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.lfixed', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.lfixed', 'Field', 'UpdateName', 'appdata!expense.lfixed')
DBSetProp('WELLEXP.lfixed', 'Field', 'Caption', "Fixed Expense")
DBSetProp('WELLEXP.lfixed', 'Field', 'DataType', "L")
* Props for the WELLEXP.laptran field.
DBSetProp('WELLEXP.laptran', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.laptran', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.laptran', 'Field', 'UpdateName', 'appdata!expense.laptran')
DBSetProp('WELLEXP.laptran', 'Field', 'Caption', "A/P Flag")
DBSetProp('WELLEXP.laptran', 'Field', 'DataType', "L")
* Props for the WELLEXP.cbatch field.
DBSetProp('WELLEXP.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cbatch', 'Field', 'UpdateName', 'appdata!expense.cbatch')
DBSetProp('WELLEXP.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('WELLEXP.cbatch', 'Field', 'DataType', "C(8)")
* Props for the WELLEXP.cownerid field.
DBSetProp('WELLEXP.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cownerid', 'Field', 'UpdateName', 'appdata!expense.cownerid')
DBSetProp('WELLEXP.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('WELLEXP.cownerid', 'Field', 'DataType', "C(10)")
* Props for the WELLEXP.loneman field.
DBSetProp('WELLEXP.loneman', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.loneman', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.loneman', 'Field', 'UpdateName', 'appdata!expense.loneman')
DBSetProp('WELLEXP.loneman', 'Field', 'Caption', "One Man Item")
DBSetProp('WELLEXP.loneman', 'Field', 'DataType', "L")
* Props for the WELLEXP.ccatcode field.
DBSetProp('WELLEXP.ccatcode', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.ccatcode', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.ccatcode', 'Field', 'UpdateName', 'appdata!expense.ccatcode')
DBSetProp('WELLEXP.ccatcode', 'Field', 'Caption', "Cat Code")
DBSetProp('WELLEXP.ccatcode', 'Field', 'DataType', "C(4)")
* Props for the WELLEXP.lclosed field.
DBSetProp('WELLEXP.lclosed', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.lclosed', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.lclosed', 'Field', 'UpdateName', 'appdata!expense.lclosed')
DBSetProp('WELLEXP.lclosed', 'Field', 'Caption', "Closed Flag")
DBSetProp('WELLEXP.lclosed', 'Field', 'DataType', "L")
* Props for the WELLEXP.cidexph field.
DBSetProp('WELLEXP.cidexph', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cidexph', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cidexph', 'Field', 'UpdateName', 'appdata!expense.cidexph')
DBSetProp('WELLEXP.cidexph', 'Field', 'Caption', "Hdr Key")
DBSetProp('WELLEXP.cidexph', 'Field', 'DataType', "C(8)")
* Props for the WELLEXP.cacctyear field.
DBSetProp('WELLEXP.cacctyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cacctyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cacctyear', 'Field', 'UpdateName', 'appdata!expense.cacctyear')
DBSetProp('WELLEXP.cacctyear', 'Field', 'Caption', "Acct Year")
DBSetProp('WELLEXP.cacctyear', 'Field', 'DataType', "C(4)")
* Props for the WELLEXP.cacctprd field.
DBSetProp('WELLEXP.cacctprd', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cacctprd', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cacctprd', 'Field', 'UpdateName', 'appdata!expense.cacctprd')
DBSetProp('WELLEXP.cacctprd', 'Field', 'Caption', "Acct Prd")
DBSetProp('WELLEXP.cacctprd', 'Field', 'DataType', "C(2)")
* Props for the WELLEXP.dacctdate field.
DBSetProp('WELLEXP.dacctdate', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.dacctdate', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.dacctdate', 'Field', 'UpdateName', 'appdata!expense.dacctdate')
DBSetProp('WELLEXP.dacctdate', 'Field', 'Caption', "Accounting Date")
DBSetProp('WELLEXP.dacctdate', 'Field', 'DataType', "D")
* Props for the WELLEXP.crunyearrev field.
DBSetProp('WELLEXP.crunyearrev', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.crunyearrev', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.crunyearrev', 'Field', 'UpdateName', 'appdata!expense.crunyearrev')
DBSetProp('WELLEXP.crunyearrev', 'Field', 'Caption', "Run Year")
DBSetProp('WELLEXP.crunyearrev', 'Field', 'DataType', "C(4)")
* Props for the WELLEXP.nrunnorev field.
DBSetProp('WELLEXP.nrunnorev', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.nrunnorev', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.nrunnorev', 'Field', 'UpdateName', 'appdata!expense.nrunnorev')
DBSetProp('WELLEXP.nrunnorev', 'Field', 'Caption', "Run No")
DBSetProp('WELLEXP.nrunnorev', 'Field', 'DataType', "I")
* Props for the WELLEXP.crunyearjib field.
DBSetProp('WELLEXP.crunyearjib', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.crunyearjib', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.crunyearjib', 'Field', 'UpdateName', 'appdata!expense.crunyearjib')
DBSetProp('WELLEXP.crunyearjib', 'Field', 'Caption', "JIB Run Year")
DBSetProp('WELLEXP.crunyearjib', 'Field', 'DataType', "C(4)")
* Props for the WELLEXP.nrunnojib field.
DBSetProp('WELLEXP.nrunnojib', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.nrunnojib', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.nrunnojib', 'Field', 'UpdateName', 'appdata!expense.nrunnojib')
DBSetProp('WELLEXP.nrunnojib', 'Field', 'Caption', "JIB Run No")
DBSetProp('WELLEXP.nrunnojib', 'Field', 'DataType', "I")
* Props for the WELLEXP.cdisperm field.
DBSetProp('WELLEXP.cdisperm', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cdisperm', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cdisperm', 'Field', 'UpdateName', 'appdata!expense.cdisperm')
DBSetProp('WELLEXP.cdisperm', 'Field', 'Caption', "Disposal Permit")
DBSetProp('WELLEXP.cdisperm', 'Field', 'DataType', "C(6)")
* Props for the WELLEXP.cafeno field.
DBSetProp('WELLEXP.cafeno', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cafeno', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cafeno', 'Field', 'UpdateName', 'appdata!expense.cafeno')
DBSetProp('WELLEXP.cafeno', 'Field', 'Caption', "AFE No")
DBSetProp('WELLEXP.cafeno', 'Field', 'DataType', "C(10)")
* Props for the WELLEXP.ngrossval field.
DBSetProp('WELLEXP.ngrossval', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.ngrossval', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.ngrossval', 'Field', 'UpdateName', 'appdata!expense.ngrossval')
DBSetProp('WELLEXP.ngrossval', 'Field', 'Caption', "Gross Exp")
DBSetProp('WELLEXP.ngrossval', 'Field', 'DataType', "N(12,2)")
* Props for the WELLEXP.itype field.
DBSetProp('WELLEXP.itype', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.itype', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.itype', 'Field', 'UpdateName', 'appdata!expense.itype')
DBSetProp('WELLEXP.itype', 'Field', 'Caption', "Amt or Pct")
DBSetProp('WELLEXP.itype', 'Field', 'DataType', "I")
* Props for the WELLEXP.nmaxamount field.
DBSetProp('WELLEXP.nmaxamount', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.nmaxamount', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.nmaxamount', 'Field', 'UpdateName', 'appdata!expense.nmaxamount')
DBSetProp('WELLEXP.nmaxamount', 'Field', 'Caption', "Max Amount")
DBSetProp('WELLEXP.nmaxamount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLEXP.cdeck field.
DBSetProp('WELLEXP.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cdeck', 'Field', 'UpdateName', 'appdata!expense.cdeck')
DBSetProp('WELLEXP.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('WELLEXP.cdeck', 'Field', 'DataType', "C(10)")
* Props for the WELLEXP.lnopostqb field.
DBSetProp('WELLEXP.lnopostqb', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.lnopostqb', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.lnopostqb', 'Field', 'UpdateName', 'appdata!expense.lnopostqb')
DBSetProp('WELLEXP.lnopostqb', 'Field', 'Caption', "Post to QB")
DBSetProp('WELLEXP.lnopostqb', 'Field', 'DataType', "L")
* Props for the WELLEXP.ninterest field.
DBSetProp('WELLEXP.ninterest', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.ninterest', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.ninterest', 'Field', 'UpdateName', 'appdata!expense.ninterest')
DBSetProp('WELLEXP.ninterest', 'Field', 'Caption', "Interest")
DBSetProp('WELLEXP.ninterest', 'Field', 'DataType', "N(11,7)")
* Props for the WELLEXP.caddedby field.
DBSetProp('WELLEXP.caddedby', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.caddedby', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.caddedby', 'Field', 'UpdateName', 'appdata!expense.caddedby')
DBSetProp('WELLEXP.caddedby', 'Field', 'Caption', "Added By")
DBSetProp('WELLEXP.caddedby', 'Field', 'DataType', "C(10)")
* Props for the WELLEXP.cchangedby field.
DBSetProp('WELLEXP.cchangedby', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.cchangedby', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.cchangedby', 'Field', 'UpdateName', 'appdata!expense.cchangedby')
DBSetProp('WELLEXP.cchangedby', 'Field', 'Caption', "Changed By")
DBSetProp('WELLEXP.cchangedby', 'Field', 'DataType', "C(10)")
* Props for the WELLEXP.dadded field.
DBSetProp('WELLEXP.dadded', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.dadded', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.dadded', 'Field', 'UpdateName', 'appdata!expense.dadded')
DBSetProp('WELLEXP.dadded', 'Field', 'Caption', "Date Added")
DBSetProp('WELLEXP.dadded', 'Field', 'DataType', "T")
* Props for the WELLEXP.dchanged field.
DBSetProp('WELLEXP.dchanged', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXP.dchanged', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXP.dchanged', 'Field', 'UpdateName', 'appdata!expense.dchanged')
DBSetProp('WELLEXP.dchanged', 'Field', 'Caption', "Date Changed")
DBSetProp('WELLEXP.dchanged', 'Field', 'DataType', "T")
ENDFUNC
 
FUNCTION MakeView_WELLEXPJ
***************** View setup for WELLEXPJ ***************

CREATE SQL VIEW "WELLEXPJ" ; 
   AS SELECT * FROM appdata!expense WHERE Expense.cwellid = ?lcWellID   AND Expense.crunyearjib = ?lcRunYear   AND Expense.nrunnojib = ?lnRunNo ORDER BY Expense.cyear, Expense.cperiod, Expense.ccateg

DBSetProp('WELLEXPJ', 'View', 'UpdateType', 1)
DBSetProp('WELLEXPJ', 'View', 'WhereType', 3)
DBSetProp('WELLEXPJ', 'View', 'FetchMemo', .T.)
DBSetProp('WELLEXPJ', 'View', 'SendUpdates', .T.)
DBSetProp('WELLEXPJ', 'View', 'UseMemoSize', 255)
DBSetProp('WELLEXPJ', 'View', 'FetchSize', 100)
DBSetProp('WELLEXPJ', 'View', 'MaxRecords', -1)
DBSetProp('WELLEXPJ', 'View', 'Tables', 'appdata!expense')
DBSetProp('WELLEXPJ', 'View', 'Prepared', .F.)
DBSetProp('WELLEXPJ', 'View', 'CompareMemo', .T.)
DBSetProp('WELLEXPJ', 'View', 'FetchAsNeeded', .F.)
DBSetProp('WELLEXPJ', 'View', 'Comment', "")
DBSetProp('WELLEXPJ', 'View', 'BatchUpdateCount', 1)
DBSetProp('WELLEXPJ', 'View', 'ShareConnection', .F.)
DBSetProp('WELLEXPJ', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for WELLEXPJ
* Props for the WELLEXPJ.cidexpe field.
DBSetProp('WELLEXPJ.cidexpe', 'Field', 'KeyField', .T.)
DBSetProp('WELLEXPJ.cidexpe', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cidexpe', 'Field', 'UpdateName', 'appdata!expense.cidexpe')
DBSetProp('WELLEXPJ.cidexpe', 'Field', 'Caption', "Primary Key")
DBSetProp('WELLEXPJ.cidexpe', 'Field', 'DataType', "C(8)")
* Props for the WELLEXPJ.cwellid field.
DBSetProp('WELLEXPJ.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cwellid', 'Field', 'UpdateName', 'appdata!expense.cwellid')
DBSetProp('WELLEXPJ.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('WELLEXPJ.cwellid', 'Field', 'DataType', "C(10)")
* Props for the WELLEXPJ.cyear field.
DBSetProp('WELLEXPJ.cyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cyear', 'Field', 'UpdateName', 'appdata!expense.cyear')
DBSetProp('WELLEXPJ.cyear', 'Field', 'Caption', "Year")
DBSetProp('WELLEXPJ.cyear', 'Field', 'DataType', "C(4)")
* Props for the WELLEXPJ.cperiod field.
DBSetProp('WELLEXPJ.cperiod', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cperiod', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cperiod', 'Field', 'UpdateName', 'appdata!expense.cperiod')
DBSetProp('WELLEXPJ.cperiod', 'Field', 'Caption', "Period")
DBSetProp('WELLEXPJ.cperiod', 'Field', 'DataType', "C(2)")
* Props for the WELLEXPJ.dexpdate field.
DBSetProp('WELLEXPJ.dexpdate', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.dexpdate', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.dexpdate', 'Field', 'UpdateName', 'appdata!expense.dexpdate')
DBSetProp('WELLEXPJ.dexpdate', 'Field', 'Caption', "Date")
DBSetProp('WELLEXPJ.dexpdate', 'Field', 'DataType', "D")
* Props for the WELLEXPJ.crefid field.
DBSetProp('WELLEXPJ.crefid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.crefid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.crefid', 'Field', 'UpdateName', 'appdata!expense.crefid')
DBSetProp('WELLEXPJ.crefid', 'Field', 'Caption', "Reference")
DBSetProp('WELLEXPJ.crefid', 'Field', 'DataType', "C(15)")
* Props for the WELLEXPJ.ccateg field.
DBSetProp('WELLEXPJ.ccateg', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.ccateg', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.ccateg', 'Field', 'UpdateName', 'appdata!expense.ccateg')
DBSetProp('WELLEXPJ.ccateg', 'Field', 'Caption', "Category")
DBSetProp('WELLEXPJ.ccateg', 'Field', 'DataType', "C(25)")
* Props for the WELLEXPJ.cpayee field.
DBSetProp('WELLEXPJ.cpayee', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cpayee', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cpayee', 'Field', 'UpdateName', 'appdata!expense.cpayee')
DBSetProp('WELLEXPJ.cpayee', 'Field', 'Caption', "Payee")
DBSetProp('WELLEXPJ.cpayee', 'Field', 'DataType', "C(40)")
* Props for the WELLEXPJ.nnetamount field.
DBSetProp('WELLEXPJ.nnetamount', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.nnetamount', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.nnetamount', 'Field', 'UpdateName', 'appdata!expense.nnetamount')
DBSetProp('WELLEXPJ.nnetamount', 'Field', 'Caption', "Net Amount")
DBSetProp('WELLEXPJ.nnetamount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLEXPJ.namount field.
DBSetProp('WELLEXPJ.namount', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.namount', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.namount', 'Field', 'UpdateName', 'appdata!expense.namount')
DBSetProp('WELLEXPJ.namount', 'Field', 'Caption', "Amount")
DBSetProp('WELLEXPJ.namount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLEXPJ.cmemo field.
DBSetProp('WELLEXPJ.cmemo', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cmemo', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cmemo', 'Field', 'UpdateName', 'appdata!expense.cmemo')
DBSetProp('WELLEXPJ.cmemo', 'Field', 'Caption', "Notes")
DBSetProp('WELLEXPJ.cmemo', 'Field', 'DataType', "C(40)")
* Props for the WELLEXPJ.cvendorid field.
DBSetProp('WELLEXPJ.cvendorid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cvendorid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cvendorid', 'Field', 'UpdateName', 'appdata!expense.cvendorid')
DBSetProp('WELLEXPJ.cvendorid', 'Field', 'Caption', "Vendor ID")
DBSetProp('WELLEXPJ.cvendorid', 'Field', 'DataType', "C(10)")
* Props for the WELLEXPJ.cpaidbyck field.
DBSetProp('WELLEXPJ.cpaidbyck', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cpaidbyck', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cpaidbyck', 'Field', 'UpdateName', 'appdata!expense.cpaidbyck')
DBSetProp('WELLEXPJ.cpaidbyck', 'Field', 'Caption', "Check Key")
DBSetProp('WELLEXPJ.cpaidbyck', 'Field', 'DataType', "C(8)")
* Props for the WELLEXPJ.cexpclass field.
DBSetProp('WELLEXPJ.cexpclass', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cexpclass', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cexpclass', 'Field', 'UpdateName', 'appdata!expense.cexpclass')
DBSetProp('WELLEXPJ.cexpclass', 'Field', 'Caption', "Exp Class")
DBSetProp('WELLEXPJ.cexpclass', 'Field', 'DataType', "C(1)")
* Props for the WELLEXPJ.nsaltwater field.
DBSetProp('WELLEXPJ.nsaltwater', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.nsaltwater', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.nsaltwater', 'Field', 'UpdateName', 'appdata!expense.nsaltwater')
DBSetProp('WELLEXPJ.nsaltwater', 'Field', 'Caption', "BBL of Water")
DBSetProp('WELLEXPJ.nsaltwater', 'Field', 'DataType', "N(5)")
* Props for the WELLEXPJ.cprdpaid field.
DBSetProp('WELLEXPJ.cprdpaid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cprdpaid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cprdpaid', 'Field', 'UpdateName', 'appdata!expense.cprdpaid')
DBSetProp('WELLEXPJ.cprdpaid', 'Field', 'Caption', "Period Paid")
DBSetProp('WELLEXPJ.cprdpaid', 'Field', 'DataType', "C(6)")
* Props for the WELLEXPJ.lfixed field.
DBSetProp('WELLEXPJ.lfixed', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.lfixed', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.lfixed', 'Field', 'UpdateName', 'appdata!expense.lfixed')
DBSetProp('WELLEXPJ.lfixed', 'Field', 'Caption', "Fixed Expense")
DBSetProp('WELLEXPJ.lfixed', 'Field', 'DataType', "L")
* Props for the WELLEXPJ.laptran field.
DBSetProp('WELLEXPJ.laptran', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.laptran', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.laptran', 'Field', 'UpdateName', 'appdata!expense.laptran')
DBSetProp('WELLEXPJ.laptran', 'Field', 'Caption', "A/P Flag")
DBSetProp('WELLEXPJ.laptran', 'Field', 'DataType', "L")
* Props for the WELLEXPJ.cbatch field.
DBSetProp('WELLEXPJ.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cbatch', 'Field', 'UpdateName', 'appdata!expense.cbatch')
DBSetProp('WELLEXPJ.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('WELLEXPJ.cbatch', 'Field', 'DataType', "C(8)")
* Props for the WELLEXPJ.cownerid field.
DBSetProp('WELLEXPJ.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cownerid', 'Field', 'UpdateName', 'appdata!expense.cownerid')
DBSetProp('WELLEXPJ.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('WELLEXPJ.cownerid', 'Field', 'DataType', "C(10)")
* Props for the WELLEXPJ.loneman field.
DBSetProp('WELLEXPJ.loneman', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.loneman', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.loneman', 'Field', 'UpdateName', 'appdata!expense.loneman')
DBSetProp('WELLEXPJ.loneman', 'Field', 'Caption', "One Man Item")
DBSetProp('WELLEXPJ.loneman', 'Field', 'DataType', "L")
* Props for the WELLEXPJ.ccatcode field.
DBSetProp('WELLEXPJ.ccatcode', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.ccatcode', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.ccatcode', 'Field', 'UpdateName', 'appdata!expense.ccatcode')
DBSetProp('WELLEXPJ.ccatcode', 'Field', 'Caption', "Cat Code")
DBSetProp('WELLEXPJ.ccatcode', 'Field', 'DataType', "C(4)")
* Props for the WELLEXPJ.lclosed field.
DBSetProp('WELLEXPJ.lclosed', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.lclosed', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.lclosed', 'Field', 'UpdateName', 'appdata!expense.lclosed')
DBSetProp('WELLEXPJ.lclosed', 'Field', 'Caption', "Closed Flag")
DBSetProp('WELLEXPJ.lclosed', 'Field', 'DataType', "L")
* Props for the WELLEXPJ.cidexph field.
DBSetProp('WELLEXPJ.cidexph', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cidexph', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cidexph', 'Field', 'UpdateName', 'appdata!expense.cidexph')
DBSetProp('WELLEXPJ.cidexph', 'Field', 'Caption', "Hdr Key")
DBSetProp('WELLEXPJ.cidexph', 'Field', 'DataType', "C(8)")
* Props for the WELLEXPJ.cacctyear field.
DBSetProp('WELLEXPJ.cacctyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cacctyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cacctyear', 'Field', 'UpdateName', 'appdata!expense.cacctyear')
DBSetProp('WELLEXPJ.cacctyear', 'Field', 'Caption', "Acct Year")
DBSetProp('WELLEXPJ.cacctyear', 'Field', 'DataType', "C(4)")
* Props for the WELLEXPJ.cacctprd field.
DBSetProp('WELLEXPJ.cacctprd', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cacctprd', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cacctprd', 'Field', 'UpdateName', 'appdata!expense.cacctprd')
DBSetProp('WELLEXPJ.cacctprd', 'Field', 'Caption', "Acct Prd")
DBSetProp('WELLEXPJ.cacctprd', 'Field', 'DataType', "C(2)")
* Props for the WELLEXPJ.dacctdate field.
DBSetProp('WELLEXPJ.dacctdate', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.dacctdate', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.dacctdate', 'Field', 'UpdateName', 'appdata!expense.dacctdate')
DBSetProp('WELLEXPJ.dacctdate', 'Field', 'Caption', "Accounting Date")
DBSetProp('WELLEXPJ.dacctdate', 'Field', 'DataType', "D")
* Props for the WELLEXPJ.crunyearrev field.
DBSetProp('WELLEXPJ.crunyearrev', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.crunyearrev', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.crunyearrev', 'Field', 'UpdateName', 'appdata!expense.crunyearrev')
DBSetProp('WELLEXPJ.crunyearrev', 'Field', 'Caption', "Run Year")
DBSetProp('WELLEXPJ.crunyearrev', 'Field', 'DataType', "C(4)")
* Props for the WELLEXPJ.nrunnorev field.
DBSetProp('WELLEXPJ.nrunnorev', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.nrunnorev', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.nrunnorev', 'Field', 'UpdateName', 'appdata!expense.nrunnorev')
DBSetProp('WELLEXPJ.nrunnorev', 'Field', 'Caption', "Run No")
DBSetProp('WELLEXPJ.nrunnorev', 'Field', 'DataType', "I")
* Props for the WELLEXPJ.crunyearjib field.
DBSetProp('WELLEXPJ.crunyearjib', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.crunyearjib', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.crunyearjib', 'Field', 'UpdateName', 'appdata!expense.crunyearjib')
DBSetProp('WELLEXPJ.crunyearjib', 'Field', 'Caption', "JIB Run Year")
DBSetProp('WELLEXPJ.crunyearjib', 'Field', 'DataType', "C(4)")
* Props for the WELLEXPJ.nrunnojib field.
DBSetProp('WELLEXPJ.nrunnojib', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.nrunnojib', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.nrunnojib', 'Field', 'UpdateName', 'appdata!expense.nrunnojib')
DBSetProp('WELLEXPJ.nrunnojib', 'Field', 'Caption', "JIB Run No")
DBSetProp('WELLEXPJ.nrunnojib', 'Field', 'DataType', "I")
* Props for the WELLEXPJ.cdisperm field.
DBSetProp('WELLEXPJ.cdisperm', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cdisperm', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cdisperm', 'Field', 'UpdateName', 'appdata!expense.cdisperm')
DBSetProp('WELLEXPJ.cdisperm', 'Field', 'Caption', "Disposal Permit")
DBSetProp('WELLEXPJ.cdisperm', 'Field', 'DataType', "C(6)")
* Props for the WELLEXPJ.cafeno field.
DBSetProp('WELLEXPJ.cafeno', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cafeno', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cafeno', 'Field', 'UpdateName', 'appdata!expense.cafeno')
DBSetProp('WELLEXPJ.cafeno', 'Field', 'Caption', "AFE No")
DBSetProp('WELLEXPJ.cafeno', 'Field', 'DataType', "C(10)")
* Props for the WELLEXPJ.ngrossval field.
DBSetProp('WELLEXPJ.ngrossval', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.ngrossval', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.ngrossval', 'Field', 'UpdateName', 'appdata!EXPENSE.NGROSSVAL')
DBSetProp('WELLEXPJ.ngrossval', 'Field', 'Caption', "Gross Exp")
DBSetProp('WELLEXPJ.ngrossval', 'Field', 'DataType', "N(12,2)")
* Props for the WELLEXPJ.itype field.
DBSetProp('WELLEXPJ.itype', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.itype', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.itype', 'Field', 'UpdateName', 'appdata!expense.itype')
DBSetProp('WELLEXPJ.itype', 'Field', 'Caption', "Amt or Pct")
DBSetProp('WELLEXPJ.itype', 'Field', 'DataType', "I")
* Props for the WELLEXPJ.nmaxamount field.
DBSetProp('WELLEXPJ.nmaxamount', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.nmaxamount', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.nmaxamount', 'Field', 'UpdateName', 'appdata!expense.nmaxamount')
DBSetProp('WELLEXPJ.nmaxamount', 'Field', 'Caption', "Max Amount")
DBSetProp('WELLEXPJ.nmaxamount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLEXPJ.cdeck field.
DBSetProp('WELLEXPJ.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cdeck', 'Field', 'UpdateName', 'appdata!expense.cdeck')
DBSetProp('WELLEXPJ.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('WELLEXPJ.cdeck', 'Field', 'DataType', "C(10)")
* Props for the WELLEXPJ.lnopostqb field.
DBSetProp('WELLEXPJ.lnopostqb', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.lnopostqb', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.lnopostqb', 'Field', 'UpdateName', 'appdata!expense.lnopostqb')
DBSetProp('WELLEXPJ.lnopostqb', 'Field', 'Caption', "Post to QB")
DBSetProp('WELLEXPJ.lnopostqb', 'Field', 'DataType', "L")
* Props for the WELLEXPJ.ninterest field.
DBSetProp('WELLEXPJ.ninterest', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.ninterest', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.ninterest', 'Field', 'UpdateName', 'appdata!expense.ninterest')
DBSetProp('WELLEXPJ.ninterest', 'Field', 'Caption', "Interest")
DBSetProp('WELLEXPJ.ninterest', 'Field', 'DataType', "N(11,7)")
* Props for the WELLEXPJ.caddedby field.
DBSetProp('WELLEXPJ.caddedby', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.caddedby', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.caddedby', 'Field', 'UpdateName', 'appdata!expense.caddedby')
DBSetProp('WELLEXPJ.caddedby', 'Field', 'Caption', "Added By")
DBSetProp('WELLEXPJ.caddedby', 'Field', 'DataType', "C(10)")
* Props for the WELLEXPJ.cchangedby field.
DBSetProp('WELLEXPJ.cchangedby', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.cchangedby', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.cchangedby', 'Field', 'UpdateName', 'appdata!expense.cchangedby')
DBSetProp('WELLEXPJ.cchangedby', 'Field', 'Caption', "Changed By")
DBSetProp('WELLEXPJ.cchangedby', 'Field', 'DataType', "C(10)")
* Props for the WELLEXPJ.dadded field.
DBSetProp('WELLEXPJ.dadded', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.dadded', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.dadded', 'Field', 'UpdateName', 'appdata!expense.dadded')
DBSetProp('WELLEXPJ.dadded', 'Field', 'Caption', "Date Added")
DBSetProp('WELLEXPJ.dadded', 'Field', 'DataType', "T")
* Props for the WELLEXPJ.dchanged field.
DBSetProp('WELLEXPJ.dchanged', 'Field', 'KeyField', .F.)
DBSetProp('WELLEXPJ.dchanged', 'Field', 'Updatable', .T.)
DBSetProp('WELLEXPJ.dchanged', 'Field', 'UpdateName', 'appdata!expense.dchanged')
DBSetProp('WELLEXPJ.dchanged', 'Field', 'Caption', "Date Changed")
DBSetProp('WELLEXPJ.dchanged', 'Field', 'DataType', "T")
ENDFUNC
 
FUNCTION MakeView_WELLFIXED
***************** View setup for WELLFIXED ***************

CREATE SQL VIEW "WELLFIXED" ; 
   AS SELECT * FROM appdata!expense WHERE Expense.cwellid = ?lcWellID AND Expense.cyear = 'FIXD' ORDER BY Expense.ccateg

DBSetProp('WELLFIXED', 'View', 'UpdateType', 1)
DBSetProp('WELLFIXED', 'View', 'WhereType', 3)
DBSetProp('WELLFIXED', 'View', 'FetchMemo', .T.)
DBSetProp('WELLFIXED', 'View', 'SendUpdates', .T.)
DBSetProp('WELLFIXED', 'View', 'UseMemoSize', 255)
DBSetProp('WELLFIXED', 'View', 'FetchSize', 100)
DBSetProp('WELLFIXED', 'View', 'MaxRecords', -1)
DBSetProp('WELLFIXED', 'View', 'Tables', 'appdata!expense')
DBSetProp('WELLFIXED', 'View', 'Prepared', .F.)
DBSetProp('WELLFIXED', 'View', 'CompareMemo', .T.)
DBSetProp('WELLFIXED', 'View', 'FetchAsNeeded', .F.)
DBSetProp('WELLFIXED', 'View', 'ParameterList', "lcWellID,'C'")
DBSetProp('WELLFIXED', 'View', 'Comment', "")
DBSetProp('WELLFIXED', 'View', 'BatchUpdateCount', 1)
DBSetProp('WELLFIXED', 'View', 'ShareConnection', .F.)
DBSetProp('WELLFIXED', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for WELLFIXED
* Props for the WELLFIXED.cidexpe field.
DBSetProp('WELLFIXED.cidexpe', 'Field', 'KeyField', .T.)
DBSetProp('WELLFIXED.cidexpe', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cidexpe', 'Field', 'UpdateName', 'appdata!expense.cidexpe')
DBSetProp('WELLFIXED.cidexpe', 'Field', 'Caption', "Primary Key")
DBSetProp('WELLFIXED.cidexpe', 'Field', 'DataType', "C(8)")
* Props for the WELLFIXED.cwellid field.
DBSetProp('WELLFIXED.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cwellid', 'Field', 'UpdateName', 'appdata!expense.cwellid')
DBSetProp('WELLFIXED.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('WELLFIXED.cwellid', 'Field', 'DataType', "C(10)")
* Props for the WELLFIXED.cyear field.
DBSetProp('WELLFIXED.cyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cyear', 'Field', 'UpdateName', 'appdata!expense.cyear')
DBSetProp('WELLFIXED.cyear', 'Field', 'Caption', "Year")
DBSetProp('WELLFIXED.cyear', 'Field', 'DataType', "C(4)")
* Props for the WELLFIXED.cperiod field.
DBSetProp('WELLFIXED.cperiod', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cperiod', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cperiod', 'Field', 'UpdateName', 'appdata!expense.cperiod')
DBSetProp('WELLFIXED.cperiod', 'Field', 'Caption', "Period")
DBSetProp('WELLFIXED.cperiod', 'Field', 'DataType', "C(2)")
* Props for the WELLFIXED.dexpdate field.
DBSetProp('WELLFIXED.dexpdate', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.dexpdate', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.dexpdate', 'Field', 'UpdateName', 'appdata!expense.dexpdate')
DBSetProp('WELLFIXED.dexpdate', 'Field', 'Caption', "Date")
DBSetProp('WELLFIXED.dexpdate', 'Field', 'DataType', "D")
* Props for the WELLFIXED.crefid field.
DBSetProp('WELLFIXED.crefid', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.crefid', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.crefid', 'Field', 'UpdateName', 'appdata!expense.crefid')
DBSetProp('WELLFIXED.crefid', 'Field', 'Caption', "Reference")
DBSetProp('WELLFIXED.crefid', 'Field', 'DataType', "C(15)")
* Props for the WELLFIXED.ccateg field.
DBSetProp('WELLFIXED.ccateg', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.ccateg', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.ccateg', 'Field', 'UpdateName', 'appdata!expense.ccateg')
DBSetProp('WELLFIXED.ccateg', 'Field', 'Caption', "Category")
DBSetProp('WELLFIXED.ccateg', 'Field', 'DataType', "C(25)")
* Props for the WELLFIXED.cpayee field.
DBSetProp('WELLFIXED.cpayee', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cpayee', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cpayee', 'Field', 'UpdateName', 'appdata!expense.cpayee')
DBSetProp('WELLFIXED.cpayee', 'Field', 'Caption', "Payee")
DBSetProp('WELLFIXED.cpayee', 'Field', 'DataType', "C(40)")
* Props for the WELLFIXED.nnetamount field.
DBSetProp('WELLFIXED.nnetamount', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.nnetamount', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.nnetamount', 'Field', 'UpdateName', 'appdata!expense.nnetamount')
DBSetProp('WELLFIXED.nnetamount', 'Field', 'Caption', "Net Amount")
DBSetProp('WELLFIXED.nnetamount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLFIXED.namount field.
DBSetProp('WELLFIXED.namount', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.namount', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.namount', 'Field', 'UpdateName', 'appdata!expense.namount')
DBSetProp('WELLFIXED.namount', 'Field', 'Caption', "Amount")
DBSetProp('WELLFIXED.namount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLFIXED.cmemo field.
DBSetProp('WELLFIXED.cmemo', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cmemo', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cmemo', 'Field', 'UpdateName', 'appdata!expense.cmemo')
DBSetProp('WELLFIXED.cmemo', 'Field', 'Caption', "Notes")
DBSetProp('WELLFIXED.cmemo', 'Field', 'DataType', "C(40)")
* Props for the WELLFIXED.cvendorid field.
DBSetProp('WELLFIXED.cvendorid', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cvendorid', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cvendorid', 'Field', 'UpdateName', 'appdata!expense.cvendorid')
DBSetProp('WELLFIXED.cvendorid', 'Field', 'Caption', "Vendor ID")
DBSetProp('WELLFIXED.cvendorid', 'Field', 'DataType', "C(10)")
* Props for the WELLFIXED.cpaidbyck field.
DBSetProp('WELLFIXED.cpaidbyck', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cpaidbyck', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cpaidbyck', 'Field', 'UpdateName', 'appdata!expense.cpaidbyck')
DBSetProp('WELLFIXED.cpaidbyck', 'Field', 'Caption', "Check Key")
DBSetProp('WELLFIXED.cpaidbyck', 'Field', 'DataType', "C(8)")
* Props for the WELLFIXED.cexpclass field.
DBSetProp('WELLFIXED.cexpclass', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cexpclass', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cexpclass', 'Field', 'UpdateName', 'appdata!expense.cexpclass')
DBSetProp('WELLFIXED.cexpclass', 'Field', 'Caption', "Exp Class")
DBSetProp('WELLFIXED.cexpclass', 'Field', 'DataType', "C(1)")
* Props for the WELLFIXED.nsaltwater field.
DBSetProp('WELLFIXED.nsaltwater', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.nsaltwater', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.nsaltwater', 'Field', 'UpdateName', 'appdata!expense.nsaltwater')
DBSetProp('WELLFIXED.nsaltwater', 'Field', 'Caption', "BBL of Water")
DBSetProp('WELLFIXED.nsaltwater', 'Field', 'DataType', "N(5)")
* Props for the WELLFIXED.cprdpaid field.
DBSetProp('WELLFIXED.cprdpaid', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cprdpaid', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cprdpaid', 'Field', 'UpdateName', 'appdata!expense.cprdpaid')
DBSetProp('WELLFIXED.cprdpaid', 'Field', 'Caption', "Period Paid")
DBSetProp('WELLFIXED.cprdpaid', 'Field', 'DataType', "C(6)")
* Props for the WELLFIXED.lfixed field.
DBSetProp('WELLFIXED.lfixed', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.lfixed', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.lfixed', 'Field', 'UpdateName', 'appdata!expense.lfixed')
DBSetProp('WELLFIXED.lfixed', 'Field', 'Caption', "Fixed Expense")
DBSetProp('WELLFIXED.lfixed', 'Field', 'DataType', "L")
* Props for the WELLFIXED.laptran field.
DBSetProp('WELLFIXED.laptran', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.laptran', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.laptran', 'Field', 'UpdateName', 'appdata!expense.laptran')
DBSetProp('WELLFIXED.laptran', 'Field', 'Caption', "A/P Flag")
DBSetProp('WELLFIXED.laptran', 'Field', 'DataType', "L")
* Props for the WELLFIXED.cbatch field.
DBSetProp('WELLFIXED.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cbatch', 'Field', 'UpdateName', 'appdata!expense.cbatch')
DBSetProp('WELLFIXED.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('WELLFIXED.cbatch', 'Field', 'DataType', "C(8)")
* Props for the WELLFIXED.cownerid field.
DBSetProp('WELLFIXED.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cownerid', 'Field', 'UpdateName', 'appdata!expense.cownerid')
DBSetProp('WELLFIXED.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('WELLFIXED.cownerid', 'Field', 'DataType', "C(10)")
* Props for the WELLFIXED.loneman field.
DBSetProp('WELLFIXED.loneman', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.loneman', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.loneman', 'Field', 'UpdateName', 'appdata!expense.loneman')
DBSetProp('WELLFIXED.loneman', 'Field', 'Caption', "One Man Item")
DBSetProp('WELLFIXED.loneman', 'Field', 'DataType', "L")
* Props for the WELLFIXED.ccatcode field.
DBSetProp('WELLFIXED.ccatcode', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.ccatcode', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.ccatcode', 'Field', 'UpdateName', 'appdata!expense.ccatcode')
DBSetProp('WELLFIXED.ccatcode', 'Field', 'Caption', "Cat Code")
DBSetProp('WELLFIXED.ccatcode', 'Field', 'DataType', "C(4)")
* Props for the WELLFIXED.lclosed field.
DBSetProp('WELLFIXED.lclosed', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.lclosed', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.lclosed', 'Field', 'UpdateName', 'appdata!expense.lclosed')
DBSetProp('WELLFIXED.lclosed', 'Field', 'Caption', "Closed Flag")
DBSetProp('WELLFIXED.lclosed', 'Field', 'DataType', "L")
* Props for the WELLFIXED.cidexph field.
DBSetProp('WELLFIXED.cidexph', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cidexph', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cidexph', 'Field', 'UpdateName', 'appdata!expense.cidexph')
DBSetProp('WELLFIXED.cidexph', 'Field', 'Caption', "Hdr Key")
DBSetProp('WELLFIXED.cidexph', 'Field', 'DataType', "C(8)")
* Props for the WELLFIXED.cacctyear field.
DBSetProp('WELLFIXED.cacctyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cacctyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cacctyear', 'Field', 'UpdateName', 'appdata!expense.cacctyear')
DBSetProp('WELLFIXED.cacctyear', 'Field', 'Caption', "Acct Year")
DBSetProp('WELLFIXED.cacctyear', 'Field', 'DataType', "C(4)")
* Props for the WELLFIXED.cacctprd field.
DBSetProp('WELLFIXED.cacctprd', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cacctprd', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cacctprd', 'Field', 'UpdateName', 'appdata!expense.cacctprd')
DBSetProp('WELLFIXED.cacctprd', 'Field', 'Caption', "Acct Prd")
DBSetProp('WELLFIXED.cacctprd', 'Field', 'DataType', "C(2)")
* Props for the WELLFIXED.dacctdate field.
DBSetProp('WELLFIXED.dacctdate', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.dacctdate', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.dacctdate', 'Field', 'UpdateName', 'appdata!expense.dacctdate')
DBSetProp('WELLFIXED.dacctdate', 'Field', 'Caption', "Accounting Date")
DBSetProp('WELLFIXED.dacctdate', 'Field', 'DataType', "D")
* Props for the WELLFIXED.crunyearrev field.
DBSetProp('WELLFIXED.crunyearrev', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.crunyearrev', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.crunyearrev', 'Field', 'UpdateName', 'appdata!expense.crunyearrev')
DBSetProp('WELLFIXED.crunyearrev', 'Field', 'Caption', "Run Year")
DBSetProp('WELLFIXED.crunyearrev', 'Field', 'DataType', "C(4)")
* Props for the WELLFIXED.nrunnorev field.
DBSetProp('WELLFIXED.nrunnorev', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.nrunnorev', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.nrunnorev', 'Field', 'UpdateName', 'appdata!expense.nrunnorev')
DBSetProp('WELLFIXED.nrunnorev', 'Field', 'Caption', "Run No")
DBSetProp('WELLFIXED.nrunnorev', 'Field', 'DataType', "I")
* Props for the WELLFIXED.crunyearjib field.
DBSetProp('WELLFIXED.crunyearjib', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.crunyearjib', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.crunyearjib', 'Field', 'UpdateName', 'appdata!expense.crunyearjib')
DBSetProp('WELLFIXED.crunyearjib', 'Field', 'Caption', "JIB Run Year")
DBSetProp('WELLFIXED.crunyearjib', 'Field', 'DataType', "C(4)")
* Props for the WELLFIXED.nrunnojib field.
DBSetProp('WELLFIXED.nrunnojib', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.nrunnojib', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.nrunnojib', 'Field', 'UpdateName', 'appdata!expense.nrunnojib')
DBSetProp('WELLFIXED.nrunnojib', 'Field', 'Caption', "JIB Run No")
DBSetProp('WELLFIXED.nrunnojib', 'Field', 'DataType', "I")
* Props for the WELLFIXED.cdisperm field.
DBSetProp('WELLFIXED.cdisperm', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cdisperm', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cdisperm', 'Field', 'UpdateName', 'appdata!expense.cdisperm')
DBSetProp('WELLFIXED.cdisperm', 'Field', 'Caption', "Disposal Permit")
DBSetProp('WELLFIXED.cdisperm', 'Field', 'DataType', "C(6)")
* Props for the WELLFIXED.cafeno field.
DBSetProp('WELLFIXED.cafeno', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cafeno', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cafeno', 'Field', 'UpdateName', 'appdata!expense.cafeno')
DBSetProp('WELLFIXED.cafeno', 'Field', 'Caption', "AFE No")
DBSetProp('WELLFIXED.cafeno', 'Field', 'DataType', "C(10)")
* Props for the WELLFIXED.ngrossval field.
DBSetProp('WELLFIXED.ngrossval', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.ngrossval', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.ngrossval', 'Field', 'UpdateName', 'appdata!EXPENSE.NGROSSVAL')
DBSetProp('WELLFIXED.ngrossval', 'Field', 'Caption', "Gross Exp")
DBSetProp('WELLFIXED.ngrossval', 'Field', 'DataType', "N(12,2)")
* Props for the WELLFIXED.itype field.
DBSetProp('WELLFIXED.itype', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.itype', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.itype', 'Field', 'UpdateName', 'appdata!expense.itype')
DBSetProp('WELLFIXED.itype', 'Field', 'Caption', "Amt or Pct")
DBSetProp('WELLFIXED.itype', 'Field', 'DataType', "I")
* Props for the WELLFIXED.nmaxamount field.
DBSetProp('WELLFIXED.nmaxamount', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.nmaxamount', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.nmaxamount', 'Field', 'UpdateName', 'appdata!expense.nmaxamount')
DBSetProp('WELLFIXED.nmaxamount', 'Field', 'Caption', "Max Amount")
DBSetProp('WELLFIXED.nmaxamount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLFIXED.cdeck field.
DBSetProp('WELLFIXED.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cdeck', 'Field', 'UpdateName', 'appdata!expense.cdeck')
DBSetProp('WELLFIXED.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('WELLFIXED.cdeck', 'Field', 'DataType', "C(10)")
* Props for the WELLFIXED.lnopostqb field.
DBSetProp('WELLFIXED.lnopostqb', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.lnopostqb', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.lnopostqb', 'Field', 'UpdateName', 'appdata!expense.lnopostqb')
DBSetProp('WELLFIXED.lnopostqb', 'Field', 'Caption', "Post to QB")
DBSetProp('WELLFIXED.lnopostqb', 'Field', 'DataType', "L")
* Props for the WELLFIXED.ninterest field.
DBSetProp('WELLFIXED.ninterest', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.ninterest', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.ninterest', 'Field', 'UpdateName', 'appdata!expense.ninterest')
DBSetProp('WELLFIXED.ninterest', 'Field', 'Caption', "Interest")
DBSetProp('WELLFIXED.ninterest', 'Field', 'DataType', "N(11,7)")
* Props for the WELLFIXED.caddedby field.
DBSetProp('WELLFIXED.caddedby', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.caddedby', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.caddedby', 'Field', 'UpdateName', 'appdata!expense.caddedby')
DBSetProp('WELLFIXED.caddedby', 'Field', 'Caption', "Added By")
DBSetProp('WELLFIXED.caddedby', 'Field', 'DataType', "C(10)")
* Props for the WELLFIXED.cchangedby field.
DBSetProp('WELLFIXED.cchangedby', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.cchangedby', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.cchangedby', 'Field', 'UpdateName', 'appdata!expense.cchangedby')
DBSetProp('WELLFIXED.cchangedby', 'Field', 'Caption', "Changed By")
DBSetProp('WELLFIXED.cchangedby', 'Field', 'DataType', "C(10)")
* Props for the WELLFIXED.dadded field.
DBSetProp('WELLFIXED.dadded', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.dadded', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.dadded', 'Field', 'UpdateName', 'appdata!expense.dadded')
DBSetProp('WELLFIXED.dadded', 'Field', 'Caption', "Date Added")
DBSetProp('WELLFIXED.dadded', 'Field', 'DataType', "T")
* Props for the WELLFIXED.dchanged field.
DBSetProp('WELLFIXED.dchanged', 'Field', 'KeyField', .F.)
DBSetProp('WELLFIXED.dchanged', 'Field', 'Updatable', .T.)
DBSetProp('WELLFIXED.dchanged', 'Field', 'UpdateName', 'appdata!expense.dchanged')
DBSetProp('WELLFIXED.dchanged', 'Field', 'Caption', "Date Changed")
DBSetProp('WELLFIXED.dchanged', 'Field', 'DataType', "T")
ENDFUNC
 
FUNCTION MakeView_WELLREV
***************** View setup for WELLREV ***************

CREATE SQL VIEW "WELLREV" ; 
   AS SELECT Income.*, Revsrc.crevname FROM  appdata!income INNER JOIN appdata!revsrc    ON  Income.crevkey = Revsrc.crevkey WHERE Income.cwellid = ?lcWellID   AND Income.crunyear = ?lcRunYear   AND Income.nrunno = ?lnRunNo ORDER BY Income.cyear, Income.cperiod, Income.csource

DBSetProp('WELLREV', 'View', 'UpdateType', 1)
DBSetProp('WELLREV', 'View', 'WhereType', 2)
DBSetProp('WELLREV', 'View', 'FetchMemo', .T.)
DBSetProp('WELLREV', 'View', 'SendUpdates', .T.)
DBSetProp('WELLREV', 'View', 'UseMemoSize', 255)
DBSetProp('WELLREV', 'View', 'FetchSize', 100)
DBSetProp('WELLREV', 'View', 'MaxRecords', -1)
DBSetProp('WELLREV', 'View', 'Tables', 'appdata!income')
DBSetProp('WELLREV', 'View', 'Prepared', .F.)
DBSetProp('WELLREV', 'View', 'CompareMemo', .T.)
DBSetProp('WELLREV', 'View', 'FetchAsNeeded', .F.)
DBSetProp('WELLREV', 'View', 'Comment', "")
DBSetProp('WELLREV', 'View', 'BatchUpdateCount', 1)
DBSetProp('WELLREV', 'View', 'ShareConnection', .F.)
DBSetProp('WELLREV', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for WELLREV
* Props for the WELLREV.cidinco field.
DBSetProp('WELLREV.cidinco', 'Field', 'KeyField', .T.)
DBSetProp('WELLREV.cidinco', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cidinco', 'Field', 'UpdateName', 'appdata!income.cidinco')
DBSetProp('WELLREV.cidinco', 'Field', 'Caption', "Primary Key")
DBSetProp('WELLREV.cidinco', 'Field', 'DataType', "C(8)")
* Props for the WELLREV.cwellid field.
DBSetProp('WELLREV.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cwellid', 'Field', 'UpdateName', 'appdata!income.cwellid')
DBSetProp('WELLREV.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('WELLREV.cwellid', 'Field', 'DataType', "C(10)")
* Props for the WELLREV.cperiod field.
DBSetProp('WELLREV.cperiod', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cperiod', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cperiod', 'Field', 'UpdateName', 'appdata!income.cperiod')
DBSetProp('WELLREV.cperiod', 'Field', 'Caption', "Period")
DBSetProp('WELLREV.cperiod', 'Field', 'DataType', "C(2)")
* Props for the WELLREV.cyear field.
DBSetProp('WELLREV.cyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cyear', 'Field', 'UpdateName', 'appdata!income.cyear')
DBSetProp('WELLREV.cyear', 'Field', 'Caption', "Year")
DBSetProp('WELLREV.cyear', 'Field', 'DataType', "C(4)")
* Props for the WELLREV.crunyear field.
DBSetProp('WELLREV.crunyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.crunyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.crunyear', 'Field', 'UpdateName', 'appdata!income.crunyear')
DBSetProp('WELLREV.crunyear', 'Field', 'Caption', "Run Year")
DBSetProp('WELLREV.crunyear', 'Field', 'DataType', "C(4)")
* Props for the WELLREV.nrunno field.
DBSetProp('WELLREV.nrunno', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.nrunno', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.nrunno', 'Field', 'UpdateName', 'appdata!income.nrunno')
DBSetProp('WELLREV.nrunno', 'Field', 'Caption', "Run No")
DBSetProp('WELLREV.nrunno', 'Field', 'DataType', "I")
* Props for the WELLREV.csource field.
DBSetProp('WELLREV.csource', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.csource', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.csource', 'Field', 'UpdateName', 'appdata!income.csource')
DBSetProp('WELLREV.csource', 'Field', 'Caption', "Type")
DBSetProp('WELLREV.csource', 'Field', 'DataType', "C(5)")
* Props for the WELLREV.drevdate field.
DBSetProp('WELLREV.drevdate', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.drevdate', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.drevdate', 'Field', 'UpdateName', 'appdata!income.drevdate')
DBSetProp('WELLREV.drevdate', 'Field', 'Caption', "Date")
DBSetProp('WELLREV.drevdate', 'Field', 'DataType', "D")
* Props for the WELLREV.nunits field.
DBSetProp('WELLREV.nunits', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.nunits', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.nunits', 'Field', 'UpdateName', 'appdata!income.nunits')
DBSetProp('WELLREV.nunits', 'Field', 'Caption', "Units")
DBSetProp('WELLREV.nunits', 'Field', 'DataType', "N(8,2)")
* Props for the WELLREV.nprice field.
DBSetProp('WELLREV.nprice', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.nprice', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.nprice', 'Field', 'UpdateName', 'appdata!income.nprice')
DBSetProp('WELLREV.nprice', 'Field', 'Caption', "Price")
DBSetProp('WELLREV.nprice', 'Field', 'DataType', "N(12,6)")
* Props for the WELLREV.nnetamount field.
DBSetProp('WELLREV.nnetamount', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.nnetamount', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.nnetamount', 'Field', 'UpdateName', 'appdata!income.nnetamount')
DBSetProp('WELLREV.nnetamount', 'Field', 'Caption', "Net Amount")
DBSetProp('WELLREV.nnetamount', 'Field', 'DataType', "N(12,2)")
* Props for the WELLREV.ntotalinc field.
DBSetProp('WELLREV.ntotalinc', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.ntotalinc', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.ntotalinc', 'Field', 'UpdateName', 'appdata!income.ntotalinc')
DBSetProp('WELLREV.ntotalinc', 'Field', 'Caption', "Total")
DBSetProp('WELLREV.ntotalinc', 'Field', 'DataType', "N(12,2)")
* Props for the WELLREV.crefid field.
DBSetProp('WELLREV.crefid', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.crefid', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.crefid', 'Field', 'UpdateName', 'appdata!income.crefid')
DBSetProp('WELLREV.crefid', 'Field', 'Caption', "Reference")
DBSetProp('WELLREV.crefid', 'Field', 'DataType', "C(15)")
* Props for the WELLREV.cmemo field.
DBSetProp('WELLREV.cmemo', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cmemo', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cmemo', 'Field', 'UpdateName', 'appdata!income.cmemo')
DBSetProp('WELLREV.cmemo', 'Field', 'Caption', "Notes")
DBSetProp('WELLREV.cmemo', 'Field', 'DataType', "C(40)")
* Props for the WELLREV.crevkey field.
DBSetProp('WELLREV.crevkey', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.crevkey', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.crevkey', 'Field', 'UpdateName', 'appdata!income.crevkey')
DBSetProp('WELLREV.crevkey', 'Field', 'Caption', "Rev Source")
DBSetProp('WELLREV.crevkey', 'Field', 'DataType', "C(10)")
* Props for the WELLREV.mincnote field.
DBSetProp('WELLREV.mincnote', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.mincnote', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.mincnote', 'Field', 'UpdateName', 'appdata!income.mincnote')
DBSetProp('WELLREV.mincnote', 'Field', 'Caption', "Statement Notes")
DBSetProp('WELLREV.mincnote', 'Field', 'DataType', "M")
* Props for the WELLREV.cownerid field.
DBSetProp('WELLREV.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cownerid', 'Field', 'UpdateName', 'appdata!income.cownerid')
DBSetProp('WELLREV.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('WELLREV.cownerid', 'Field', 'DataType', "C(10)")
* Props for the WELLREV.loneman field.
DBSetProp('WELLREV.loneman', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.loneman', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.loneman', 'Field', 'UpdateName', 'appdata!income.loneman')
DBSetProp('WELLREV.loneman', 'Field', 'Caption', "One Man Item")
DBSetProp('WELLREV.loneman', 'Field', 'DataType', "L")
* Props for the WELLREV.lcstran field.
DBSetProp('WELLREV.lcstran', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.lcstran', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.lcstran', 'Field', 'UpdateName', 'appdata!income.lcstran')
DBSetProp('WELLREV.lcstran', 'Field', 'Caption', "Cash Rcpt Flag")
DBSetProp('WELLREV.lcstran', 'Field', 'DataType', "L")
* Props for the WELLREV.cbatch field.
DBSetProp('WELLREV.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cbatch', 'Field', 'UpdateName', 'appdata!income.cbatch')
DBSetProp('WELLREV.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('WELLREV.cbatch', 'Field', 'DataType', "C(8)")
* Props for the WELLREV.cbegrange field.
DBSetProp('WELLREV.cbegrange', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cbegrange', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cbegrange', 'Field', 'UpdateName', 'appdata!income.cbegrange')
DBSetProp('WELLREV.cbegrange', 'Field', 'Caption', "Beg Range")
DBSetProp('WELLREV.cbegrange', 'Field', 'DataType', "C(5)")
* Props for the WELLREV.cendrange field.
DBSetProp('WELLREV.cendrange', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cendrange', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cendrange', 'Field', 'UpdateName', 'appdata!income.cendrange')
DBSetProp('WELLREV.cendrange', 'Field', 'Caption', "End Range")
DBSetProp('WELLREV.cendrange', 'Field', 'DataType', "C(5)")
* Props for the WELLREV.ndayson field.
DBSetProp('WELLREV.ndayson', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.ndayson', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.ndayson', 'Field', 'UpdateName', 'appdata!income.ndayson')
DBSetProp('WELLREV.ndayson', 'Field', 'Caption', "Days On")
DBSetProp('WELLREV.ndayson', 'Field', 'DataType', "N(4)")
* Props for the WELLREV.lclosed field.
DBSetProp('WELLREV.lclosed', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.lclosed', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.lclosed', 'Field', 'UpdateName', 'appdata!income.lclosed')
DBSetProp('WELLREV.lclosed', 'Field', 'Caption', "Closed Flag")
DBSetProp('WELLREV.lclosed', 'Field', 'DataType', "L")
* Props for the WELLREV.cacctyear field.
DBSetProp('WELLREV.cacctyear', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cacctyear', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cacctyear', 'Field', 'UpdateName', 'appdata!income.cacctyear')
DBSetProp('WELLREV.cacctyear', 'Field', 'Caption', "Acct Year")
DBSetProp('WELLREV.cacctyear', 'Field', 'DataType', "C(4)")
* Props for the WELLREV.cacctprd field.
DBSetProp('WELLREV.cacctprd', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cacctprd', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cacctprd', 'Field', 'UpdateName', 'appdata!income.cacctprd')
DBSetProp('WELLREV.cacctprd', 'Field', 'Caption', "Acct Prd")
DBSetProp('WELLREV.cacctprd', 'Field', 'DataType', "C(2)")
* Props for the WELLREV.nbtu field.
DBSetProp('WELLREV.nbtu', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.nbtu', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.nbtu', 'Field', 'UpdateName', 'appdata!income.nbtu')
DBSetProp('WELLREV.nbtu', 'Field', 'Caption', "BTU Factor")
DBSetProp('WELLREV.nbtu', 'Field', 'DataType', "N(4)")
* Props for the WELLREV.dacctdate field.
DBSetProp('WELLREV.dacctdate', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.dacctdate', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.dacctdate', 'Field', 'UpdateName', 'appdata!income.dacctdate')
DBSetProp('WELLREV.dacctdate', 'Field', 'Caption', "Accounting Date")
DBSetProp('WELLREV.dacctdate', 'Field', 'DataType', "D")
* Props for the WELLREV.cidinch field.
DBSetProp('WELLREV.cidinch', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cidinch', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cidinch', 'Field', 'UpdateName', 'appdata!income.cidinch')
DBSetProp('WELLREV.cidinch', 'Field', 'Caption', "Hdr Key")
DBSetProp('WELLREV.cidinch', 'Field', 'DataType', "C(8)")
* Props for the WELLREV.cacctno field.
DBSetProp('WELLREV.cacctno', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cacctno', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cacctno', 'Field', 'UpdateName', 'appdata!income.cacctno')
DBSetProp('WELLREV.cacctno', 'Field', 'Caption', "Account")
DBSetProp('WELLREV.cacctno', 'Field', 'DataType', "C(6)")
* Props for the WELLREV.ngrossunits field.
DBSetProp('WELLREV.ngrossunits', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.ngrossunits', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.ngrossunits', 'Field', 'UpdateName', 'appdata!income.ngrossunits')
DBSetProp('WELLREV.ngrossunits', 'Field', 'Caption', "Gross Units")
DBSetProp('WELLREV.ngrossunits', 'Field', 'DataType', "N(12,2)")
* Props for the WELLREV.ngrossval field.
DBSetProp('WELLREV.ngrossval', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.ngrossval', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.ngrossval', 'Field', 'UpdateName', 'appdata!INCOME.NGROSSVAL')
DBSetProp('WELLREV.ngrossval', 'Field', 'Caption', "Gross Value")
DBSetProp('WELLREV.ngrossval', 'Field', 'DataType', "N(12,2)")
* Props for the WELLREV.cdeck field.
DBSetProp('WELLREV.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cdeck', 'Field', 'UpdateName', 'appdata!income.cdeck')
DBSetProp('WELLREV.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('WELLREV.cdeck', 'Field', 'DataType', "C(10)")
* Props for the WELLREV.lnopostqb field.
DBSetProp('WELLREV.lnopostqb', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.lnopostqb', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.lnopostqb', 'Field', 'UpdateName', 'appdata!income.lnopostqb')
DBSetProp('WELLREV.lnopostqb', 'Field', 'Caption', "Post to QB")
DBSetProp('WELLREV.lnopostqb', 'Field', 'DataType', "L")
* Props for the WELLREV.ninterest field.
DBSetProp('WELLREV.ninterest', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.ninterest', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.ninterest', 'Field', 'UpdateName', 'appdata!income.ninterest')
DBSetProp('WELLREV.ninterest', 'Field', 'Caption', "Interest")
DBSetProp('WELLREV.ninterest', 'Field', 'DataType', "N(11,7)")
* Props for the WELLREV.caddedby field.
DBSetProp('WELLREV.caddedby', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.caddedby', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.caddedby', 'Field', 'UpdateName', 'appdata!income.caddedby')
DBSetProp('WELLREV.caddedby', 'Field', 'Caption', "Added By")
DBSetProp('WELLREV.caddedby', 'Field', 'DataType', "C(10)")
* Props for the WELLREV.cchangedby field.
DBSetProp('WELLREV.cchangedby', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.cchangedby', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.cchangedby', 'Field', 'UpdateName', 'appdata!income.cchangedby')
DBSetProp('WELLREV.cchangedby', 'Field', 'Caption', "Changed By")
DBSetProp('WELLREV.cchangedby', 'Field', 'DataType', "C(10)")
* Props for the WELLREV.dadded field.
DBSetProp('WELLREV.dadded', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.dadded', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.dadded', 'Field', 'UpdateName', 'appdata!income.dadded')
DBSetProp('WELLREV.dadded', 'Field', 'Caption', "Date Added")
DBSetProp('WELLREV.dadded', 'Field', 'DataType', "T")
* Props for the WELLREV.dchanged field.
DBSetProp('WELLREV.dchanged', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.dchanged', 'Field', 'Updatable', .T.)
DBSetProp('WELLREV.dchanged', 'Field', 'UpdateName', 'appdata!income.dchanged')
DBSetProp('WELLREV.dchanged', 'Field', 'Caption', "Date Changed")
DBSetProp('WELLREV.dchanged', 'Field', 'DataType', "T")
* Props for the WELLREV.crevname field.
DBSetProp('WELLREV.crevname', 'Field', 'KeyField', .F.)
DBSetProp('WELLREV.crevname', 'Field', 'Updatable', .F.)
DBSetProp('WELLREV.crevname', 'Field', 'UpdateName', 'appdata!revsrc.crevname')
DBSetProp('WELLREV.crevname', 'Field', 'Caption', "Purchaser Name")
DBSetProp('WELLREV.crevname', 'Field', 'DataType', "C(30)")
ENDFUNC
 
FUNCTION MakeView_OWNHIST
***************** View setup for OWNHIST ***************

CREATE SQL VIEW "OWNHIST" ; 
   AS SELECT Disbhist.ciddisb, Disbhist.crectype, Disbhist.cwellid, Disbhist.cownerid, Disbhist.hyear, Disbhist.hperiod, Disbhist.crunyear, Disbhist.nrunno, Disbhist.hdate, Disbhist.ctypeinv, Disbhist.ctypeint, Disbhist.cgroup, Disbhist.cdirect, Disbhist.nincome, Disbhist.nmktgexp, Disbhist.nsevtaxes, Disbhist.nexpense, Disbhist.nnetcheck, Disbhist.ntotale1, Disbhist.ntotale2, Disbhist.ntotale3, Disbhist.ntotale4, Disbhist.ntotale5, Disbhist.ntotalea, Disbhist.ntotaleb, Disbhist.nflatrate, Disbhist.noilrev, Disbhist.ngasrev, Disbhist.nothrev, Disbhist.ntrprev, Disbhist.lprogram, Disbhist.cprogcode, Disbhist.lprognet, Disbhist.nmiscrev1, Disbhist.nmiscrev2, Disbhist.ljib, Disbhist.ngather, Disbhist.ncompress, Disbhist.lsevpurch, Disbhist.lhold, Disbhist.lonhold, Disbhist.noilexp, Disbhist.ngasexp, Disbhist.cacctyr, Disbhist.cacctprd, Disbhist.lflat, Disbhist.nflatfreq, Disbhist.cflatstart, Disbhist.noiltax1, Disbhist.noiltax2, Disbhist.noiltax3, Disbhist.noiltax4, Disbhist.ngastax1, Disbhist.ngastax2, Disbhist.ngastax3, Disbhist.ngastax4, Disbhist.nothtax1, Disbhist.nothtax2, Disbhist.nothtax3, Disbhist.nothtax4, Disbhist.ntaxwith, Disbhist.ntaxpct, Disbhist.nbackwith, Disbhist.cidchec, Disbhist.lused, Disbhist.lpayout, Disbhist.csusptype, Disbhist.nrunno_in, Disbhist.crunyear_in, Disbhist.linteggl, Disbhist.ndisbfreq, Disbhist.lmanual, Disbhist.cbatch, Ownpcts.nrevoil, Ownpcts.nrevgas, Ownpcts.nrevoth, Ownpcts.nrevtrp, Ownpcts.nworkint, Ownpcts.nintclass1, Ownpcts.nintclass2, Ownpcts.nintclass3, Ownpcts.nintclass4, Ownpcts.nintclass5, Ownpcts.nacpint, Ownpcts.nbcpint, Ownpcts.napoint, Ownpcts.nrevmisc1, Ownpcts.nrevmisc2, Ownpcts.nrevtax1, Ownpcts.nrevtax4, Ownpcts.nrevtax7, Ownpcts.nrevtax10, Ownpcts.nrevtax2, Ownpcts.nrevtax5, Ownpcts.nrevtax8, Ownpcts.nrevtax11, Ownpcts.nrevtax3, Ownpcts.nrevtax6, Ownpcts.nrevtax9, Ownpcts.nrevtax12, Ownpcts.ciddisb, Disbhist.cdeck FROM  APPDATA!DISBHIST  INNER JOIN APPDATA!OWNPCTS  ON  Disbhist.ciddisb = Ownpcts.ciddisb ORDER BY Disbhist.hyear, Disbhist.hperiod, Disbhist.cownerid

DBSetProp('OWNHIST', 'View', 'UpdateType', 1)
DBSetProp('OWNHIST', 'View', 'WhereType', 3)
DBSetProp('OWNHIST', 'View', 'FetchMemo', .T.)
DBSetProp('OWNHIST', 'View', 'SendUpdates', .T.)
DBSetProp('OWNHIST', 'View', 'UseMemoSize', 255)
DBSetProp('OWNHIST', 'View', 'FetchSize', 100)
DBSetProp('OWNHIST', 'View', 'MaxRecords', -1)
DBSetProp('OWNHIST', 'View', 'Tables', 'appdata!disbhist,appdata!ownpcts')
DBSetProp('OWNHIST', 'View', 'Prepared', .F.)
DBSetProp('OWNHIST', 'View', 'CompareMemo', .T.)
DBSetProp('OWNHIST', 'View', 'FetchAsNeeded', .F.)
DBSetProp('OWNHIST', 'View', 'Comment', "")
DBSetProp('OWNHIST', 'View', 'BatchUpdateCount', 1)
DBSetProp('OWNHIST', 'View', 'ShareConnection', .F.)
DBSetProp('OWNHIST', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for OWNHIST
* Props for the OWNHIST.ciddisb_a field.
DBSetProp('OWNHIST.ciddisb_a', 'Field', 'KeyField', .T.)
DBSetProp('OWNHIST.ciddisb_a', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ciddisb_a', 'Field', 'UpdateName', 'appdata!disbhist.ciddisb')
DBSetProp('OWNHIST.ciddisb_a', 'Field', 'Caption', "Primary Key")
DBSetProp('OWNHIST.ciddisb_a', 'Field', 'DataType', "C(8)")
* Props for the OWNHIST.crectype field.
DBSetProp('OWNHIST.crectype', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.crectype', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.crectype', 'Field', 'UpdateName', 'appdata!disbhist.crectype')
DBSetProp('OWNHIST.crectype', 'Field', 'Caption', "Record Type")
DBSetProp('OWNHIST.crectype', 'Field', 'DataType', "C(1)")
* Props for the OWNHIST.cwellid field.
DBSetProp('OWNHIST.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cwellid', 'Field', 'UpdateName', 'appdata!disbhist.cwellid')
DBSetProp('OWNHIST.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('OWNHIST.cwellid', 'Field', 'DataType', "C(10)")
* Props for the OWNHIST.cownerid field.
DBSetProp('OWNHIST.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cownerid', 'Field', 'UpdateName', 'appdata!disbhist.cownerid')
DBSetProp('OWNHIST.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('OWNHIST.cownerid', 'Field', 'DataType', "C(10)")
* Props for the OWNHIST.hyear field.
DBSetProp('OWNHIST.hyear', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.hyear', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.hyear', 'Field', 'UpdateName', 'appdata!disbhist.hyear')
DBSetProp('OWNHIST.hyear', 'Field', 'Caption', "Production Year")
DBSetProp('OWNHIST.hyear', 'Field', 'DataType', "C(4)")
* Props for the OWNHIST.hperiod field.
DBSetProp('OWNHIST.hperiod', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.hperiod', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.hperiod', 'Field', 'UpdateName', 'appdata!disbhist.hperiod')
DBSetProp('OWNHIST.hperiod', 'Field', 'Caption', "Production Period")
DBSetProp('OWNHIST.hperiod', 'Field', 'DataType', "C(2)")
* Props for the OWNHIST.crunyear field.
DBSetProp('OWNHIST.crunyear', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.crunyear', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.crunyear', 'Field', 'UpdateName', 'appdata!disbhist.crunyear')
DBSetProp('OWNHIST.crunyear', 'Field', 'Caption', "Run Year")
DBSetProp('OWNHIST.crunyear', 'Field', 'DataType', "C(4)")
* Props for the OWNHIST.nrunno field.
DBSetProp('OWNHIST.nrunno', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrunno', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrunno', 'Field', 'UpdateName', 'appdata!disbhist.nrunno')
DBSetProp('OWNHIST.nrunno', 'Field', 'Caption', "Run No")
DBSetProp('OWNHIST.nrunno', 'Field', 'DataType', "I")
* Props for the OWNHIST.hdate field.
DBSetProp('OWNHIST.hdate', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.hdate', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.hdate', 'Field', 'UpdateName', 'appdata!disbhist.hdate')
DBSetProp('OWNHIST.hdate', 'Field', 'Caption', "Accounting Date")
DBSetProp('OWNHIST.hdate', 'Field', 'DataType', "D")
* Props for the OWNHIST.ctypeinv field.
DBSetProp('OWNHIST.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ctypeinv', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ctypeinv', 'Field', 'UpdateName', 'appdata!disbhist.ctypeinv')
DBSetProp('OWNHIST.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('OWNHIST.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the OWNHIST.ctypeint field.
DBSetProp('OWNHIST.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ctypeint', 'Field', 'UpdateName', 'appdata!disbhist.ctypeint')
DBSetProp('OWNHIST.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('OWNHIST.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the OWNHIST.cgroup field.
DBSetProp('OWNHIST.cgroup', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cgroup', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cgroup', 'Field', 'UpdateName', 'appdata!disbhist.cgroup')
DBSetProp('OWNHIST.cgroup', 'Field', 'Caption', "Well Group")
DBSetProp('OWNHIST.cgroup', 'Field', 'DataType', "C(2)")
* Props for the OWNHIST.cdirect field.
DBSetProp('OWNHIST.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cdirect', 'Field', 'UpdateName', 'appdata!disbhist.cdirect')
DBSetProp('OWNHIST.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('OWNHIST.cdirect', 'Field', 'DataType', "C(1)")
* Props for the OWNHIST.nincome field.
DBSetProp('OWNHIST.nincome', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nincome', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nincome', 'Field', 'UpdateName', 'appdata!disbhist.nincome')
DBSetProp('OWNHIST.nincome', 'Field', 'Caption', "Total Income")
DBSetProp('OWNHIST.nincome', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.nmktgexp field.
DBSetProp('OWNHIST.nmktgexp', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nmktgexp', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nmktgexp', 'Field', 'UpdateName', 'appdata!disbhist.nmktgexp')
DBSetProp('OWNHIST.nmktgexp', 'Field', 'Caption', "Marketing Expense")
DBSetProp('OWNHIST.nmktgexp', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.nsevtaxes field.
DBSetProp('OWNHIST.nsevtaxes', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nsevtaxes', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nsevtaxes', 'Field', 'UpdateName', 'appdata!disbhist.nsevtaxes')
DBSetProp('OWNHIST.nsevtaxes', 'Field', 'Caption', "Severance Taxes")
DBSetProp('OWNHIST.nsevtaxes', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.nexpense field.
DBSetProp('OWNHIST.nexpense', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nexpense', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nexpense', 'Field', 'UpdateName', 'appdata!disbhist.nexpense')
DBSetProp('OWNHIST.nexpense', 'Field', 'Caption', "Total Oper Expense")
DBSetProp('OWNHIST.nexpense', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.nnetcheck field.
DBSetProp('OWNHIST.nnetcheck', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nnetcheck', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nnetcheck', 'Field', 'UpdateName', 'appdata!disbhist.nnetcheck')
DBSetProp('OWNHIST.nnetcheck', 'Field', 'Caption', "Net Amount")
DBSetProp('OWNHIST.nnetcheck', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ntotale1 field.
DBSetProp('OWNHIST.ntotale1', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntotale1', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntotale1', 'Field', 'UpdateName', 'appdata!disbhist.ntotale1')
DBSetProp('OWNHIST.ntotale1', 'Field', 'Caption', "Expense Class 1 Amount")
DBSetProp('OWNHIST.ntotale1', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ntotale2 field.
DBSetProp('OWNHIST.ntotale2', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntotale2', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntotale2', 'Field', 'UpdateName', 'appdata!disbhist.ntotale2')
DBSetProp('OWNHIST.ntotale2', 'Field', 'Caption', "Expense Class 2 Amount")
DBSetProp('OWNHIST.ntotale2', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ntotale3 field.
DBSetProp('OWNHIST.ntotale3', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntotale3', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntotale3', 'Field', 'UpdateName', 'appdata!disbhist.ntotale3')
DBSetProp('OWNHIST.ntotale3', 'Field', 'Caption', "Expense Class 3 Amount")
DBSetProp('OWNHIST.ntotale3', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ntotale4 field.
DBSetProp('OWNHIST.ntotale4', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntotale4', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntotale4', 'Field', 'UpdateName', 'appdata!disbhist.ntotale4')
DBSetProp('OWNHIST.ntotale4', 'Field', 'Caption', "Expense Class 4 Amount")
DBSetProp('OWNHIST.ntotale4', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ntotale5 field.
DBSetProp('OWNHIST.ntotale5', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntotale5', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntotale5', 'Field', 'UpdateName', 'appdata!disbhist.ntotale5')
DBSetProp('OWNHIST.ntotale5', 'Field', 'Caption', "Expense Class 5 Amount")
DBSetProp('OWNHIST.ntotale5', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ntotalea field.
DBSetProp('OWNHIST.ntotalea', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntotalea', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntotalea', 'Field', 'UpdateName', 'appdata!disbhist.ntotalea')
DBSetProp('OWNHIST.ntotalea', 'Field', 'Caption', "After Casing Point Expenses")
DBSetProp('OWNHIST.ntotalea', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ntotaleb field.
DBSetProp('OWNHIST.ntotaleb', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntotaleb', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntotaleb', 'Field', 'UpdateName', 'appdata!disbhist.ntotaleb')
DBSetProp('OWNHIST.ntotaleb', 'Field', 'Caption', "Before Casing Point Expenses")
DBSetProp('OWNHIST.ntotaleb', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.nflatrate field.
DBSetProp('OWNHIST.nflatrate', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nflatrate', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nflatrate', 'Field', 'UpdateName', 'appdata!disbhist.nflatrate')
DBSetProp('OWNHIST.nflatrate', 'Field', 'Caption', "Flat Rate Amount")
DBSetProp('OWNHIST.nflatrate', 'Field', 'DataType', "N(7,2)")
* Props for the OWNHIST.noilrev field.
DBSetProp('OWNHIST.noilrev', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.noilrev', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.noilrev', 'Field', 'UpdateName', 'appdata!disbhist.noilrev')
DBSetProp('OWNHIST.noilrev', 'Field', 'Caption', "Oil Revenue")
DBSetProp('OWNHIST.noilrev', 'Field', 'DataType', "N(10,2)")
* Props for the OWNHIST.ngasrev field.
DBSetProp('OWNHIST.ngasrev', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ngasrev', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ngasrev', 'Field', 'UpdateName', 'appdata!disbhist.ngasrev')
DBSetProp('OWNHIST.ngasrev', 'Field', 'Caption', "Gas Revenue")
DBSetProp('OWNHIST.ngasrev', 'Field', 'DataType', "N(10,2)")
* Props for the OWNHIST.nothrev field.
DBSetProp('OWNHIST.nothrev', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nothrev', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nothrev', 'Field', 'UpdateName', 'appdata!disbhist.nothrev')
DBSetProp('OWNHIST.nothrev', 'Field', 'Caption', "Other Product Revenue")
DBSetProp('OWNHIST.nothrev', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ntrprev field.
DBSetProp('OWNHIST.ntrprev', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntrprev', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntrprev', 'Field', 'UpdateName', 'appdata!disbhist.ntrprev')
DBSetProp('OWNHIST.ntrprev', 'Field', 'Caption', "Transportation Revenue")
DBSetProp('OWNHIST.ntrprev', 'Field', 'DataType', "N(10,2)")
* Props for the OWNHIST.lprogram field.
DBSetProp('OWNHIST.lprogram', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lprogram', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lprogram', 'Field', 'UpdateName', 'appdata!disbhist.lprogram')
DBSetProp('OWNHIST.lprogram', 'Field', 'Caption', "Program Flag")
DBSetProp('OWNHIST.lprogram', 'Field', 'DataType', "L")
* Props for the OWNHIST.cprogcode field.
DBSetProp('OWNHIST.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cprogcode', 'Field', 'UpdateName', 'appdata!disbhist.cprogcode')
DBSetProp('OWNHIST.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('OWNHIST.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the OWNHIST.lprognet field.
DBSetProp('OWNHIST.lprognet', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lprognet', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lprognet', 'Field', 'UpdateName', 'appdata!disbhist.lprognet')
DBSetProp('OWNHIST.lprognet', 'Field', 'Caption', "Net Program")
DBSetProp('OWNHIST.lprognet', 'Field', 'DataType', "L")
* Props for the OWNHIST.nmiscrev1 field.
DBSetProp('OWNHIST.nmiscrev1', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nmiscrev1', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nmiscrev1', 'Field', 'UpdateName', 'appdata!disbhist.nmiscrev1')
DBSetProp('OWNHIST.nmiscrev1', 'Field', 'Caption', "Misc Revenue 1 Amount")
DBSetProp('OWNHIST.nmiscrev1', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.nmiscrev2 field.
DBSetProp('OWNHIST.nmiscrev2', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nmiscrev2', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nmiscrev2', 'Field', 'UpdateName', 'appdata!disbhist.nmiscrev2')
DBSetProp('OWNHIST.nmiscrev2', 'Field', 'Caption', "Misc Revenue 2 Amount")
DBSetProp('OWNHIST.nmiscrev2', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ljib field.
DBSetProp('OWNHIST.ljib', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ljib', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ljib', 'Field', 'UpdateName', 'appdata!disbhist.ljib')
DBSetProp('OWNHIST.ljib', 'Field', 'Caption', "JIB Interest")
DBSetProp('OWNHIST.ljib', 'Field', 'DataType', "L")
* Props for the OWNHIST.ngather field.
DBSetProp('OWNHIST.ngather', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ngather', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ngather', 'Field', 'UpdateName', 'appdata!disbhist.ngather')
DBSetProp('OWNHIST.ngather', 'Field', 'Caption', "Gathering Expense Amount")
DBSetProp('OWNHIST.ngather', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ncompress field.
DBSetProp('OWNHIST.ncompress', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ncompress', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ncompress', 'Field', 'UpdateName', 'appdata!disbhist.ncompress')
DBSetProp('OWNHIST.ncompress', 'Field', 'Caption', "Compression Expense Amount")
DBSetProp('OWNHIST.ncompress', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.lsevpurch field.
DBSetProp('OWNHIST.lsevpurch', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lsevpurch', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lsevpurch', 'Field', 'UpdateName', 'appdata!disbhist.lsevpurch')
DBSetProp('OWNHIST.lsevpurch', 'Field', 'Caption', "Purchaser Paid Sev Tax")
DBSetProp('OWNHIST.lsevpurch', 'Field', 'DataType', "L")
* Props for the OWNHIST.lhold field.
DBSetProp('OWNHIST.lhold', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lhold', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lhold', 'Field', 'UpdateName', 'appdata!disbhist.lhold')
DBSetProp('OWNHIST.lhold', 'Field', 'Caption', "Owner Held")
DBSetProp('OWNHIST.lhold', 'Field', 'DataType', "L")
* Props for the OWNHIST.lonhold field.
DBSetProp('OWNHIST.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lonhold', 'Field', 'UpdateName', 'appdata!disbhist.lonhold')
DBSetProp('OWNHIST.lonhold', 'Field', 'Caption', "Int Held")
DBSetProp('OWNHIST.lonhold', 'Field', 'DataType', "L")
* Props for the OWNHIST.noilexp field.
DBSetProp('OWNHIST.noilexp', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.noilexp', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.noilexp', 'Field', 'UpdateName', 'appdata!disbhist.noilexp')
DBSetProp('OWNHIST.noilexp', 'Field', 'Caption', "Oil Expenses")
DBSetProp('OWNHIST.noilexp', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.ngasexp field.
DBSetProp('OWNHIST.ngasexp', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ngasexp', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ngasexp', 'Field', 'UpdateName', 'appdata!disbhist.ngasexp')
DBSetProp('OWNHIST.ngasexp', 'Field', 'Caption', "Gas Expenses")
DBSetProp('OWNHIST.ngasexp', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.cacctyr field.
DBSetProp('OWNHIST.cacctyr', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cacctyr', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cacctyr', 'Field', 'UpdateName', 'appdata!disbhist.cacctyr')
DBSetProp('OWNHIST.cacctyr', 'Field', 'Caption', "Accounting Year")
DBSetProp('OWNHIST.cacctyr', 'Field', 'DataType', "C(4)")
* Props for the OWNHIST.cacctprd field.
DBSetProp('OWNHIST.cacctprd', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cacctprd', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cacctprd', 'Field', 'UpdateName', 'appdata!disbhist.cacctprd')
DBSetProp('OWNHIST.cacctprd', 'Field', 'Caption', "Accounting Period")
DBSetProp('OWNHIST.cacctprd', 'Field', 'DataType', "C(2)")
* Props for the OWNHIST.lflat field.
DBSetProp('OWNHIST.lflat', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lflat', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lflat', 'Field', 'UpdateName', 'appdata!disbhist.lflat')
DBSetProp('OWNHIST.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('OWNHIST.lflat', 'Field', 'DataType', "L")
* Props for the OWNHIST.nflatfreq field.
DBSetProp('OWNHIST.nflatfreq', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nflatfreq', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nflatfreq', 'Field', 'UpdateName', 'appdata!disbhist.nflatfreq')
DBSetProp('OWNHIST.nflatfreq', 'Field', 'Caption', "Flat Rate Frequency")
DBSetProp('OWNHIST.nflatfreq', 'Field', 'DataType', "I")
* Props for the OWNHIST.cflatstart field.
DBSetProp('OWNHIST.cflatstart', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cflatstart', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cflatstart', 'Field', 'UpdateName', 'appdata!disbhist.cflatstart')
DBSetProp('OWNHIST.cflatstart', 'Field', 'Caption', "Month Flat Rate Starts")
DBSetProp('OWNHIST.cflatstart', 'Field', 'DataType', "C(2)")
* Props for the OWNHIST.noiltax1 field.
DBSetProp('OWNHIST.noiltax1', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.noiltax1', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.noiltax1', 'Field', 'UpdateName', 'appdata!disbhist.noiltax1')
DBSetProp('OWNHIST.noiltax1', 'Field', 'Caption', "Oil Tax 1")
DBSetProp('OWNHIST.noiltax1', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.noiltax2 field.
DBSetProp('OWNHIST.noiltax2', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.noiltax2', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.noiltax2', 'Field', 'UpdateName', 'appdata!disbhist.noiltax2')
DBSetProp('OWNHIST.noiltax2', 'Field', 'Caption', "Oil Tax 2")
DBSetProp('OWNHIST.noiltax2', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.noiltax3 field.
DBSetProp('OWNHIST.noiltax3', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.noiltax3', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.noiltax3', 'Field', 'UpdateName', 'appdata!disbhist.noiltax3')
DBSetProp('OWNHIST.noiltax3', 'Field', 'Caption', "Oil Tax 3")
DBSetProp('OWNHIST.noiltax3', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.noiltax4 field.
DBSetProp('OWNHIST.noiltax4', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.noiltax4', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.noiltax4', 'Field', 'UpdateName', 'appdata!disbhist.noiltax4')
DBSetProp('OWNHIST.noiltax4', 'Field', 'Caption', "Oil Tax 4")
DBSetProp('OWNHIST.noiltax4', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.ngastax1 field.
DBSetProp('OWNHIST.ngastax1', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ngastax1', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ngastax1', 'Field', 'UpdateName', 'appdata!disbhist.ngastax1')
DBSetProp('OWNHIST.ngastax1', 'Field', 'Caption', "Gas Tax 1")
DBSetProp('OWNHIST.ngastax1', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.ngastax2 field.
DBSetProp('OWNHIST.ngastax2', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ngastax2', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ngastax2', 'Field', 'UpdateName', 'appdata!disbhist.ngastax2')
DBSetProp('OWNHIST.ngastax2', 'Field', 'Caption', "Gas Tax 2")
DBSetProp('OWNHIST.ngastax2', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.ngastax3 field.
DBSetProp('OWNHIST.ngastax3', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ngastax3', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ngastax3', 'Field', 'UpdateName', 'appdata!disbhist.ngastax3')
DBSetProp('OWNHIST.ngastax3', 'Field', 'Caption', "Gas Tax 3")
DBSetProp('OWNHIST.ngastax3', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.ngastax4 field.
DBSetProp('OWNHIST.ngastax4', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ngastax4', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ngastax4', 'Field', 'UpdateName', 'appdata!disbhist.ngastax4')
DBSetProp('OWNHIST.ngastax4', 'Field', 'Caption', "Gas Tax 4")
DBSetProp('OWNHIST.ngastax4', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.nothtax1 field.
DBSetProp('OWNHIST.nothtax1', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nothtax1', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nothtax1', 'Field', 'UpdateName', 'appdata!disbhist.nothtax1')
DBSetProp('OWNHIST.nothtax1', 'Field', 'Caption', "Other Tax 1")
DBSetProp('OWNHIST.nothtax1', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.nothtax2 field.
DBSetProp('OWNHIST.nothtax2', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nothtax2', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nothtax2', 'Field', 'UpdateName', 'appdata!disbhist.nothtax2')
DBSetProp('OWNHIST.nothtax2', 'Field', 'Caption', "Other Tax 2")
DBSetProp('OWNHIST.nothtax2', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.nothtax3 field.
DBSetProp('OWNHIST.nothtax3', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nothtax3', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nothtax3', 'Field', 'UpdateName', 'appdata!disbhist.nothtax3')
DBSetProp('OWNHIST.nothtax3', 'Field', 'Caption', "Other Tax 3")
DBSetProp('OWNHIST.nothtax3', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.nothtax4 field.
DBSetProp('OWNHIST.nothtax4', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nothtax4', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nothtax4', 'Field', 'UpdateName', 'appdata!disbhist.nothtax4')
DBSetProp('OWNHIST.nothtax4', 'Field', 'Caption', "Other Tax 4")
DBSetProp('OWNHIST.nothtax4', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.ntaxwith field.
DBSetProp('OWNHIST.ntaxwith', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntaxwith', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntaxwith', 'Field', 'UpdateName', 'appdata!disbhist.ntaxwith')
DBSetProp('OWNHIST.ntaxwith', 'Field', 'Caption', "Tax W/H")
DBSetProp('OWNHIST.ntaxwith', 'Field', 'DataType', "N(9,2)")
* Props for the OWNHIST.ntaxpct field.
DBSetProp('OWNHIST.ntaxpct', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ntaxpct', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ntaxpct', 'Field', 'UpdateName', 'appdata!disbhist.ntaxpct')
DBSetProp('OWNHIST.ntaxpct', 'Field', 'Caption', "State W/H Pct")
DBSetProp('OWNHIST.ntaxpct', 'Field', 'DataType', "N(5,2)")
* Props for the OWNHIST.nbackwith field.
DBSetProp('OWNHIST.nbackwith', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nbackwith', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nbackwith', 'Field', 'UpdateName', 'appdata!disbhist.nbackwith')
DBSetProp('OWNHIST.nbackwith', 'Field', 'Caption', "Backup W/H")
DBSetProp('OWNHIST.nbackwith', 'Field', 'DataType', "N(12,2)")
* Props for the OWNHIST.cidchec field.
DBSetProp('OWNHIST.cidchec', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cidchec', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cidchec', 'Field', 'UpdateName', 'appdata!disbhist.cidchec')
DBSetProp('OWNHIST.cidchec', 'Field', 'Caption', "Check Key")
DBSetProp('OWNHIST.cidchec', 'Field', 'DataType', "C(8)")
* Props for the OWNHIST.lused field.
DBSetProp('OWNHIST.lused', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lused', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lused', 'Field', 'UpdateName', 'appdata!disbhist.lused')
DBSetProp('OWNHIST.lused', 'Field', 'Caption', "Used Flag")
DBSetProp('OWNHIST.lused', 'Field', 'DataType', "L")
* Props for the OWNHIST.lpayout field.
DBSetProp('OWNHIST.lpayout', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lpayout', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lpayout', 'Field', 'UpdateName', 'appdata!disbhist.lpayout')
DBSetProp('OWNHIST.lpayout', 'Field', 'Caption', "Reached Payout")
DBSetProp('OWNHIST.lpayout', 'Field', 'DataType', "L")
* Props for the OWNHIST.csusptype field.
DBSetProp('OWNHIST.csusptype', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.csusptype', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.csusptype', 'Field', 'UpdateName', 'appdata!disbhist.csusptype')
DBSetProp('OWNHIST.csusptype', 'Field', 'Caption', "Susp Type")
DBSetProp('OWNHIST.csusptype', 'Field', 'DataType', "C(1)")
* Props for the OWNHIST.nrunno_in field.
DBSetProp('OWNHIST.nrunno_in', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrunno_in', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrunno_in', 'Field', 'UpdateName', 'appdata!disbhist.nrunno_in')
DBSetProp('OWNHIST.nrunno_in', 'Field', 'Caption', "Susp Run")
DBSetProp('OWNHIST.nrunno_in', 'Field', 'DataType', "I")
* Props for the OWNHIST.crunyear_in field.
DBSetProp('OWNHIST.crunyear_in', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.crunyear_in', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.crunyear_in', 'Field', 'UpdateName', 'appdata!disbhist.crunyear_in')
DBSetProp('OWNHIST.crunyear_in', 'Field', 'Caption', "Susp Run Year")
DBSetProp('OWNHIST.crunyear_in', 'Field', 'DataType', "C(4)")
* Props for the OWNHIST.linteggl field.
DBSetProp('OWNHIST.linteggl', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.linteggl', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.linteggl', 'Field', 'UpdateName', 'appdata!disbhist.linteggl')
DBSetProp('OWNHIST.linteggl', 'Field', 'Caption', "Post to G/L")
DBSetProp('OWNHIST.linteggl', 'Field', 'DataType', "L")
* Props for the OWNHIST.ndisbfreq field.
DBSetProp('OWNHIST.ndisbfreq', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.ndisbfreq', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ndisbfreq', 'Field', 'UpdateName', 'appdata!disbhist.ndisbfreq')
DBSetProp('OWNHIST.ndisbfreq', 'Field', 'Caption', "Pay Freq")
DBSetProp('OWNHIST.ndisbfreq', 'Field', 'DataType', "I")
* Props for the OWNHIST.lmanual field.
DBSetProp('OWNHIST.lmanual', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.lmanual', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.lmanual', 'Field', 'UpdateName', 'appdata!disbhist.lmanual')
DBSetProp('OWNHIST.lmanual', 'Field', 'Caption', "Manual Entry")
DBSetProp('OWNHIST.lmanual', 'Field', 'DataType', "L")
* Props for the OWNHIST.cbatch field.
DBSetProp('OWNHIST.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cbatch', 'Field', 'UpdateName', 'appdata!disbhist.cbatch')
DBSetProp('OWNHIST.cbatch', 'Field', 'Caption', "Batch No")
DBSetProp('OWNHIST.cbatch', 'Field', 'DataType', "C(8)")
* Props for the OWNHIST.nrevoil field.
DBSetProp('OWNHIST.nrevoil', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevoil', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevoil', 'Field', 'UpdateName', 'appdata!ownpcts.nrevoil')
DBSetProp('OWNHIST.nrevoil', 'Field', 'Caption', "Oil Revenue Interest")
DBSetProp('OWNHIST.nrevoil', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevgas field.
DBSetProp('OWNHIST.nrevgas', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevgas', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevgas', 'Field', 'UpdateName', 'appdata!ownpcts.nrevgas')
DBSetProp('OWNHIST.nrevgas', 'Field', 'Caption', "Gas Revenue Interest")
DBSetProp('OWNHIST.nrevgas', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevoth field.
DBSetProp('OWNHIST.nrevoth', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevoth', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevoth', 'Field', 'UpdateName', 'appdata!ownpcts.nrevoth')
DBSetProp('OWNHIST.nrevoth', 'Field', 'Caption', "Other Product Rev Pct")
DBSetProp('OWNHIST.nrevoth', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtrp field.
DBSetProp('OWNHIST.nrevtrp', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtrp', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtrp', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtrp')
DBSetProp('OWNHIST.nrevtrp', 'Field', 'Caption', "Trans Revenue Interest")
DBSetProp('OWNHIST.nrevtrp', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nworkint field.
DBSetProp('OWNHIST.nworkint', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nworkint', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nworkint', 'Field', 'UpdateName', 'appdata!ownpcts.nworkint')
DBSetProp('OWNHIST.nworkint', 'Field', 'Caption', "Working Interest")
DBSetProp('OWNHIST.nworkint', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nintclass1 field.
DBSetProp('OWNHIST.nintclass1', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nintclass1', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nintclass1', 'Field', 'UpdateName', 'appdata!ownpcts.nintclass1')
DBSetProp('OWNHIST.nintclass1', 'Field', 'Caption', "Expense Class 1 Pct")
DBSetProp('OWNHIST.nintclass1', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nintclass2 field.
DBSetProp('OWNHIST.nintclass2', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nintclass2', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nintclass2', 'Field', 'UpdateName', 'appdata!ownpcts.nintclass2')
DBSetProp('OWNHIST.nintclass2', 'Field', 'Caption', "Expense Class 2 Pct")
DBSetProp('OWNHIST.nintclass2', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nintclass3 field.
DBSetProp('OWNHIST.nintclass3', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nintclass3', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nintclass3', 'Field', 'UpdateName', 'appdata!ownpcts.nintclass3')
DBSetProp('OWNHIST.nintclass3', 'Field', 'Caption', "Expense Class 3 Pct")
DBSetProp('OWNHIST.nintclass3', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nintclass4 field.
DBSetProp('OWNHIST.nintclass4', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nintclass4', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nintclass4', 'Field', 'UpdateName', 'appdata!ownpcts.nintclass4')
DBSetProp('OWNHIST.nintclass4', 'Field', 'Caption', "Expense Class 4 Pct")
DBSetProp('OWNHIST.nintclass4', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nintclass5 field.
DBSetProp('OWNHIST.nintclass5', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nintclass5', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nintclass5', 'Field', 'UpdateName', 'appdata!ownpcts.nintclass5')
DBSetProp('OWNHIST.nintclass5', 'Field', 'Caption', "Expense Class 5 Pct")
DBSetProp('OWNHIST.nintclass5', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nacpint field.
DBSetProp('OWNHIST.nacpint', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nacpint', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nacpint', 'Field', 'UpdateName', 'appdata!ownpcts.nacpint')
DBSetProp('OWNHIST.nacpint', 'Field', 'Caption', "After Casing Point Interest")
DBSetProp('OWNHIST.nacpint', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nbcpint field.
DBSetProp('OWNHIST.nbcpint', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nbcpint', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nbcpint', 'Field', 'UpdateName', 'appdata!ownpcts.nbcpint')
DBSetProp('OWNHIST.nbcpint', 'Field', 'Caption', "Before Casing Point Interest")
DBSetProp('OWNHIST.nbcpint', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.napoint field.
DBSetProp('OWNHIST.napoint', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.napoint', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.napoint', 'Field', 'UpdateName', 'appdata!ownpcts.napoint')
DBSetProp('OWNHIST.napoint', 'Field', 'Caption', "After Payout Int")
DBSetProp('OWNHIST.napoint', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevmisc1 field.
DBSetProp('OWNHIST.nrevmisc1', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevmisc1', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevmisc1', 'Field', 'UpdateName', 'appdata!ownpcts.nrevmisc1')
DBSetProp('OWNHIST.nrevmisc1', 'Field', 'Caption', "Misc Revenue Interest 1")
DBSetProp('OWNHIST.nrevmisc1', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevmisc2 field.
DBSetProp('OWNHIST.nrevmisc2', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevmisc2', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevmisc2', 'Field', 'UpdateName', 'appdata!ownpcts.nrevmisc2')
DBSetProp('OWNHIST.nrevmisc2', 'Field', 'Caption', "Misc Revenue Interest 2")
DBSetProp('OWNHIST.nrevmisc2', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax1 field.
DBSetProp('OWNHIST.nrevtax1', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax1', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax1', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax1')
DBSetProp('OWNHIST.nrevtax1', 'Field', 'Caption', "Oil Tax 1 Pct")
DBSetProp('OWNHIST.nrevtax1', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax4 field.
DBSetProp('OWNHIST.nrevtax4', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax4', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax4', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax4')
DBSetProp('OWNHIST.nrevtax4', 'Field', 'Caption', "Oil Tax 2 Pct")
DBSetProp('OWNHIST.nrevtax4', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax7 field.
DBSetProp('OWNHIST.nrevtax7', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax7', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax7', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax7')
DBSetProp('OWNHIST.nrevtax7', 'Field', 'Caption', "Oil Tax 3 Pct")
DBSetProp('OWNHIST.nrevtax7', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax10 field.
DBSetProp('OWNHIST.nrevtax10', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax10', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax10', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax10')
DBSetProp('OWNHIST.nrevtax10', 'Field', 'Caption', "Oil Tax 4 Pct")
DBSetProp('OWNHIST.nrevtax10', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax2 field.
DBSetProp('OWNHIST.nrevtax2', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax2', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax2', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax2')
DBSetProp('OWNHIST.nrevtax2', 'Field', 'Caption', "Gas Tax 1 Pct")
DBSetProp('OWNHIST.nrevtax2', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax5 field.
DBSetProp('OWNHIST.nrevtax5', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax5', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax5', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax5')
DBSetProp('OWNHIST.nrevtax5', 'Field', 'Caption', "Gas Tax 2 Pct")
DBSetProp('OWNHIST.nrevtax5', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax8 field.
DBSetProp('OWNHIST.nrevtax8', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax8', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax8', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax8')
DBSetProp('OWNHIST.nrevtax8', 'Field', 'Caption', "Gas Tax 3 Pct")
DBSetProp('OWNHIST.nrevtax8', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax11 field.
DBSetProp('OWNHIST.nrevtax11', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax11', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax11', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax11')
DBSetProp('OWNHIST.nrevtax11', 'Field', 'Caption', "Gas Tax 4 Pct")
DBSetProp('OWNHIST.nrevtax11', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax3 field.
DBSetProp('OWNHIST.nrevtax3', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax3', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax3', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax3')
DBSetProp('OWNHIST.nrevtax3', 'Field', 'Caption', "Other Tax 1 Pct")
DBSetProp('OWNHIST.nrevtax3', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax6 field.
DBSetProp('OWNHIST.nrevtax6', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax6', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax6', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax6')
DBSetProp('OWNHIST.nrevtax6', 'Field', 'Caption', "Other Tax 2 Pct")
DBSetProp('OWNHIST.nrevtax6', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax9 field.
DBSetProp('OWNHIST.nrevtax9', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax9', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax9', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax9')
DBSetProp('OWNHIST.nrevtax9', 'Field', 'Caption', "Other Tax 3 Pct")
DBSetProp('OWNHIST.nrevtax9', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.nrevtax12 field.
DBSetProp('OWNHIST.nrevtax12', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.nrevtax12', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.nrevtax12', 'Field', 'UpdateName', 'appdata!ownpcts.nrevtax12')
DBSetProp('OWNHIST.nrevtax12', 'Field', 'Caption', "Other Tax 4 Pct")
DBSetProp('OWNHIST.nrevtax12', 'Field', 'DataType', "N(11,7)")
* Props for the OWNHIST.ciddisb_b field.
DBSetProp('OWNHIST.ciddisb_b', 'Field', 'KeyField', .T.)
DBSetProp('OWNHIST.ciddisb_b', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.ciddisb_b', 'Field', 'UpdateName', 'appdata!ownpcts.ciddisb')
DBSetProp('OWNHIST.ciddisb_b', 'Field', 'Caption', "Primary Key")
DBSetProp('OWNHIST.ciddisb_b', 'Field', 'DataType', "C(8)")
* Props for the OWNHIST.cdeck field.
DBSetProp('OWNHIST.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('OWNHIST.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('OWNHIST.cdeck', 'Field', 'UpdateName', 'appdata!disbhist.cdeck')
DBSetProp('OWNHIST.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('OWNHIST.cdeck', 'Field', 'DataType', "C(10)")
ENDFUNC
 
FUNCTION MakeView_UNCLEARED_CHECKS
***************** View setup for UNCLEARED_CHECKS ***************

CREATE SQL VIEW "UNCLEARED_CHECKS" ; 
   AS SELECT Checks.ccheckno, Checks.cidchec, Checks.dcheckdate,  Checks.namount, Checks.cpayee, .F. AS lclear, Checks.centrytype FROM appdata!checks WHERE Checks.lcleared = .F.   AND Checks.cacctno = ?lcAcctNo   AND Checks.lprinted = .T.   AND DELETED() = .F. ORDER BY Checks.centrytype DESC, Checks.dcheckdate, Checks.ccheckno

DBSetProp('UNCLEARED_CHECKS', 'View', 'UpdateType', 1)
DBSetProp('UNCLEARED_CHECKS', 'View', 'WhereType', 3)
DBSetProp('UNCLEARED_CHECKS', 'View', 'FetchMemo', .T.)
DBSetProp('UNCLEARED_CHECKS', 'View', 'SendUpdates', .T.)
DBSetProp('UNCLEARED_CHECKS', 'View', 'UseMemoSize', 255)
DBSetProp('UNCLEARED_CHECKS', 'View', 'FetchSize', 100)
DBSetProp('UNCLEARED_CHECKS', 'View', 'MaxRecords', -1)
DBSetProp('UNCLEARED_CHECKS', 'View', 'Tables', 'appdata!checks')
DBSetProp('UNCLEARED_CHECKS', 'View', 'Prepared', .F.)
DBSetProp('UNCLEARED_CHECKS', 'View', 'CompareMemo', .T.)
DBSetProp('UNCLEARED_CHECKS', 'View', 'FetchAsNeeded', .F.)
DBSetProp('UNCLEARED_CHECKS', 'View', 'Comment', "")
DBSetProp('UNCLEARED_CHECKS', 'View', 'BatchUpdateCount', 1)
DBSetProp('UNCLEARED_CHECKS', 'View', 'ShareConnection', .F.)
DBSetProp('UNCLEARED_CHECKS', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for UNCLEARED_CHECKS
* Props for the UNCLEARED_CHECKS.ccheckno field.
DBSetProp('UNCLEARED_CHECKS.ccheckno', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKS.ccheckno', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKS.ccheckno', 'Field', 'UpdateName', 'appdata!checks.ccheckno')
DBSetProp('UNCLEARED_CHECKS.ccheckno', 'Field', 'Caption', "Check No")
DBSetProp('UNCLEARED_CHECKS.ccheckno', 'Field', 'DataType', "C(10)")
* Props for the UNCLEARED_CHECKS.cidchec field.
DBSetProp('UNCLEARED_CHECKS.cidchec', 'Field', 'KeyField', .T.)
DBSetProp('UNCLEARED_CHECKS.cidchec', 'Field', 'Updatable', .F.)
DBSetProp('UNCLEARED_CHECKS.cidchec', 'Field', 'UpdateName', 'appdata!checks.cidchec')
DBSetProp('UNCLEARED_CHECKS.cidchec', 'Field', 'Caption', "Primary Key")
DBSetProp('UNCLEARED_CHECKS.cidchec', 'Field', 'DataType', "C(8)")
* Props for the UNCLEARED_CHECKS.dcheckdate field.
DBSetProp('UNCLEARED_CHECKS.dcheckdate', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKS.dcheckdate', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKS.dcheckdate', 'Field', 'UpdateName', 'appdata!checks.dcheckdate')
DBSetProp('UNCLEARED_CHECKS.dcheckdate', 'Field', 'Caption', "Date")
DBSetProp('UNCLEARED_CHECKS.dcheckdate', 'Field', 'DataType', "D")
* Props for the UNCLEARED_CHECKS.namount field.
DBSetProp('UNCLEARED_CHECKS.namount', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKS.namount', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKS.namount', 'Field', 'UpdateName', 'appdata!checks.namount')
DBSetProp('UNCLEARED_CHECKS.namount', 'Field', 'Caption', "Amount")
DBSetProp('UNCLEARED_CHECKS.namount', 'Field', 'DataType', "N(12,2)")
* Props for the UNCLEARED_CHECKS.cpayee field.
DBSetProp('UNCLEARED_CHECKS.cpayee', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKS.cpayee', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKS.cpayee', 'Field', 'UpdateName', 'appdata!checks.cpayee')
DBSetProp('UNCLEARED_CHECKS.cpayee', 'Field', 'Caption', "Payee")
DBSetProp('UNCLEARED_CHECKS.cpayee', 'Field', 'DataType', "C(40)")
* Props for the UNCLEARED_CHECKS.lclear field.
DBSetProp('UNCLEARED_CHECKS.lclear', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKS.lclear', 'Field', 'Updatable', .F.)
DBSetProp('UNCLEARED_CHECKS.lclear', 'Field', 'UpdateName', 'Checks.cpayee*')
DBSetProp('UNCLEARED_CHECKS.lclear', 'Field', 'DataType', "L")
* Props for the UNCLEARED_CHECKS.centrytype field.
DBSetProp('UNCLEARED_CHECKS.centrytype', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKS.centrytype', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKS.centrytype', 'Field', 'UpdateName', 'appdata!checks.centrytype')
DBSetProp('UNCLEARED_CHECKS.centrytype', 'Field', 'Caption', "Entry Type")
DBSetProp('UNCLEARED_CHECKS.centrytype', 'Field', 'DataType', "C(1)")
ENDFUNC
 
FUNCTION MakeView_UNCLEARED_CHECKSD
***************** View setup for UNCLEARED_CHECKSD ***************

CREATE SQL VIEW "UNCLEARED_CHECKSD" ; 
   AS SELECT Checks.ccheckno, Checks.cidchec, Checks.dcheckdate,  Checks.namount, Checks.cpayee, .F. AS lclear, Checks.centrytype FROM appdata!checks WHERE Checks.lcleared = .F.   AND Checks.lprinted = .T.   AND DELETED() = .F. ORDER BY Checks.centrytype DESC, Checks.dcheckdate, Checks.ccheckno

DBSetProp('UNCLEARED_CHECKSD', 'View', 'UpdateType', 1)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'WhereType', 3)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'FetchMemo', .T.)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'SendUpdates', .F.)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'UseMemoSize', 255)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'FetchSize', 100)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'MaxRecords', -1)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'Tables', 'appdata!checks')
DBSetProp('UNCLEARED_CHECKSD', 'View', 'Prepared', .F.)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'CompareMemo', .T.)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'FetchAsNeeded', .F.)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'Comment', "")
DBSetProp('UNCLEARED_CHECKSD', 'View', 'BatchUpdateCount', 1)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'ShareConnection', .F.)
DBSetProp('UNCLEARED_CHECKSD', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for UNCLEARED_CHECKSD
* Props for the UNCLEARED_CHECKSD.ccheckno field.
DBSetProp('UNCLEARED_CHECKSD.ccheckno', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKSD.ccheckno', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKSD.ccheckno', 'Field', 'UpdateName', 'appdata!checks.ccheckno')
DBSetProp('UNCLEARED_CHECKSD.ccheckno', 'Field', 'Caption', "Check No")
DBSetProp('UNCLEARED_CHECKSD.ccheckno', 'Field', 'DataType', "C(10)")
* Props for the UNCLEARED_CHECKSD.cidchec field.
DBSetProp('UNCLEARED_CHECKSD.cidchec', 'Field', 'KeyField', .T.)
DBSetProp('UNCLEARED_CHECKSD.cidchec', 'Field', 'Updatable', .F.)
DBSetProp('UNCLEARED_CHECKSD.cidchec', 'Field', 'UpdateName', 'appdata!checks.cidchec')
DBSetProp('UNCLEARED_CHECKSD.cidchec', 'Field', 'Caption', "Primary Key")
DBSetProp('UNCLEARED_CHECKSD.cidchec', 'Field', 'DataType', "C(8)")
* Props for the UNCLEARED_CHECKSD.dcheckdate field.
DBSetProp('UNCLEARED_CHECKSD.dcheckdate', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKSD.dcheckdate', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKSD.dcheckdate', 'Field', 'UpdateName', 'appdata!checks.dcheckdate')
DBSetProp('UNCLEARED_CHECKSD.dcheckdate', 'Field', 'Caption', "Date")
DBSetProp('UNCLEARED_CHECKSD.dcheckdate', 'Field', 'DataType', "D")
* Props for the UNCLEARED_CHECKSD.namount field.
DBSetProp('UNCLEARED_CHECKSD.namount', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKSD.namount', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKSD.namount', 'Field', 'UpdateName', 'appdata!checks.namount')
DBSetProp('UNCLEARED_CHECKSD.namount', 'Field', 'Caption', "Amount")
DBSetProp('UNCLEARED_CHECKSD.namount', 'Field', 'DataType', "N(12,2)")
* Props for the UNCLEARED_CHECKSD.cpayee field.
DBSetProp('UNCLEARED_CHECKSD.cpayee', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKSD.cpayee', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKSD.cpayee', 'Field', 'UpdateName', 'appdata!checks.cpayee')
DBSetProp('UNCLEARED_CHECKSD.cpayee', 'Field', 'Caption', "Payee")
DBSetProp('UNCLEARED_CHECKSD.cpayee', 'Field', 'DataType', "C(40)")
* Props for the UNCLEARED_CHECKSD.lclear field.
DBSetProp('UNCLEARED_CHECKSD.lclear', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKSD.lclear', 'Field', 'Updatable', .F.)
DBSetProp('UNCLEARED_CHECKSD.lclear', 'Field', 'UpdateName', '.F.')
DBSetProp('UNCLEARED_CHECKSD.lclear', 'Field', 'DataType', "L")
* Props for the UNCLEARED_CHECKSD.centrytype field.
DBSetProp('UNCLEARED_CHECKSD.centrytype', 'Field', 'KeyField', .F.)
DBSetProp('UNCLEARED_CHECKSD.centrytype', 'Field', 'Updatable', .T.)
DBSetProp('UNCLEARED_CHECKSD.centrytype', 'Field', 'UpdateName', 'appdata!checks.centrytype')
DBSetProp('UNCLEARED_CHECKSD.centrytype', 'Field', 'Caption', "Entry Type")
DBSetProp('UNCLEARED_CHECKSD.centrytype', 'Field', 'DataType', "C(1)")
ENDFUNC
 
FUNCTION MakeView_APINVOUTD
***************** View setup for APINVOUTD ***************

CREATE SQL VIEW "APINVOUTD" ; 
   AS SELECT Appurchh.cinvnum, Appurchh.cvendorid, Vendor.cvendname, Appurchh.dinvdate, Appurchh.ndisctot, Appurchh.ninvtot, Appurchh.ninvbal, Appurchh.dduedate, Appurchh.ddiscdate, Appurchh.cbatch, Appurchh.lapproved FROM appdata!appurchh JOIN appdata!vendor ON Appurchh.cvendorid = Vendor.cvendorid WHERE Appurchh.ninvbal <> ( 0 ) AND ( Appurchh.dduedate <= ( ?ldSelectBy ) OR (Appurchh.ddiscdate <= ( ?ldDiscBy ) AND Appurchh.ddiscdate <> Appurchh.dinvdate )) AND Appurchh.lapproved ORDER BY Appurchh.dduedate, Vendor.cvendname

DBSetProp('APINVOUTD', 'View', 'UpdateType', 1)
DBSetProp('APINVOUTD', 'View', 'WhereType', 3)
DBSetProp('APINVOUTD', 'View', 'FetchMemo', .T.)
DBSetProp('APINVOUTD', 'View', 'SendUpdates', .F.)
DBSetProp('APINVOUTD', 'View', 'UseMemoSize', 255)
DBSetProp('APINVOUTD', 'View', 'FetchSize', 100)
DBSetProp('APINVOUTD', 'View', 'MaxRecords', -1)
DBSetProp('APINVOUTD', 'View', 'Tables', 'appdata!appurchh,appdata!vendor')
DBSetProp('APINVOUTD', 'View', 'Prepared', .F.)
DBSetProp('APINVOUTD', 'View', 'CompareMemo', .T.)
DBSetProp('APINVOUTD', 'View', 'FetchAsNeeded', .F.)
DBSetProp('APINVOUTD', 'View', 'ParameterList', "ldselectby,'D';lddiscby,'D'")
DBSetProp('APINVOUTD', 'View', 'Comment', "")
DBSetProp('APINVOUTD', 'View', 'BatchUpdateCount', 1)
DBSetProp('APINVOUTD', 'View', 'ShareConnection', .F.)
DBSetProp('APINVOUTD', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for APINVOUTD
* Props for the APINVOUTD.cinvnum field.
DBSetProp('APINVOUTD.cinvnum', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.cinvnum', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.cinvnum', 'Field', 'UpdateName', 'appdata!appurchh.cinvnum')
DBSetProp('APINVOUTD.cinvnum', 'Field', 'Caption', "Invoice Number")
DBSetProp('APINVOUTD.cinvnum', 'Field', 'DataType', "C(20)")
* Props for the APINVOUTD.cvendorid field.
DBSetProp('APINVOUTD.cvendorid', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.cvendorid', 'Field', 'Updatable', .F.)
DBSetProp('APINVOUTD.cvendorid', 'Field', 'UpdateName', 'appdata!appurchh.cvendorid')
DBSetProp('APINVOUTD.cvendorid', 'Field', 'Caption', "Vendor ID")
DBSetProp('APINVOUTD.cvendorid', 'Field', 'DataType', "C(10)")
* Props for the APINVOUTD.cvendname field.
DBSetProp('APINVOUTD.cvendname', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.cvendname', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.cvendname', 'Field', 'UpdateName', 'appdata!vendor.cvendname')
DBSetProp('APINVOUTD.cvendname', 'Field', 'Caption', "Vendor Name")
DBSetProp('APINVOUTD.cvendname', 'Field', 'DataType', "C(60)")
* Props for the APINVOUTD.dinvdate field.
DBSetProp('APINVOUTD.dinvdate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.dinvdate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.dinvdate', 'Field', 'UpdateName', 'appdata!appurchh.dinvdate')
DBSetProp('APINVOUTD.dinvdate', 'Field', 'Caption', "Invoice Date")
DBSetProp('APINVOUTD.dinvdate', 'Field', 'DataType', "D")
* Props for the APINVOUTD.ndisctot field.
DBSetProp('APINVOUTD.ndisctot', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.ndisctot', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.ndisctot', 'Field', 'UpdateName', 'appdata!appurchh.ndisctot')
DBSetProp('APINVOUTD.ndisctot', 'Field', 'Caption', "Discounts Available Total")
DBSetProp('APINVOUTD.ndisctot', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTD.ninvtot field.
DBSetProp('APINVOUTD.ninvtot', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.ninvtot', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.ninvtot', 'Field', 'UpdateName', 'appdata!appurchh.ninvtot')
DBSetProp('APINVOUTD.ninvtot', 'Field', 'Caption', "Invoice Total")
DBSetProp('APINVOUTD.ninvtot', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTD.ninvbal field.
DBSetProp('APINVOUTD.ninvbal', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.ninvbal', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.ninvbal', 'Field', 'UpdateName', 'appdata!appurchh.ninvbal')
DBSetProp('APINVOUTD.ninvbal', 'Field', 'Caption', "Balance")
DBSetProp('APINVOUTD.ninvbal', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTD.dduedate field.
DBSetProp('APINVOUTD.dduedate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.dduedate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.dduedate', 'Field', 'UpdateName', 'appdata!appurchh.dduedate')
DBSetProp('APINVOUTD.dduedate', 'Field', 'Caption', "Due Date")
DBSetProp('APINVOUTD.dduedate', 'Field', 'DataType', "D")
* Props for the APINVOUTD.ddiscdate field.
DBSetProp('APINVOUTD.ddiscdate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.ddiscdate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.ddiscdate', 'Field', 'UpdateName', 'appdata!appurchh.ddiscdate')
DBSetProp('APINVOUTD.ddiscdate', 'Field', 'Caption', "Discount Date")
DBSetProp('APINVOUTD.ddiscdate', 'Field', 'DataType', "D")
* Props for the APINVOUTD.cbatch field.
DBSetProp('APINVOUTD.cbatch', 'Field', 'KeyField', .T.)
DBSetProp('APINVOUTD.cbatch', 'Field', 'Updatable', .F.)
DBSetProp('APINVOUTD.cbatch', 'Field', 'UpdateName', 'appdata!appurchh.cbatch')
DBSetProp('APINVOUTD.cbatch', 'Field', 'Caption', "Batch Number")
DBSetProp('APINVOUTD.cbatch', 'Field', 'DataType', "C(8)")
* Props for the APINVOUTD.lapproved field.
DBSetProp('APINVOUTD.lapproved', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTD.lapproved', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTD.lapproved', 'Field', 'UpdateName', 'appdata!appurchh.lapproved')
DBSetProp('APINVOUTD.lapproved', 'Field', 'Caption', "Approved?")
DBSetProp('APINVOUTD.lapproved', 'Field', 'DataType', "L")
ENDFUNC
 
FUNCTION MakeView_APINVOUTDD
***************** View setup for APINVOUTDD ***************

CREATE SQL VIEW "APINVOUTDD" ; 
   AS SELECT Appurchh.cinvnum, Appurchh.cvendorid, Vendor.cvendname, Appurchh.dinvdate, Appurchh.ndisctot, Appurchh.ninvtot, Appurchh.ninvbal, Appurchh.dduedate, Appurchh.ddiscdate, Appurchh.cbatch, Appurchh.lapproved FROM appdata!appurchh JOIN appdata!vendor ON Appurchh.cvendorid = Vendor.cvendorid WHERE Appurchh.ninvbal <> ( 0 ) AND ( Appurchh.dduedate <= ( ?ldSelectBy ) OR (Appurchh.ddiscdate <= ( ?ldDiscBy ) AND Appurchh.ddiscdate <> Appurchh.dinvdate )) AND Appurchh.lapproved ORDER BY Appurchh.dduedate DESC, Vendor.cvendname

DBSetProp('APINVOUTDD', 'View', 'UpdateType', 1)
DBSetProp('APINVOUTDD', 'View', 'WhereType', 3)
DBSetProp('APINVOUTDD', 'View', 'FetchMemo', .T.)
DBSetProp('APINVOUTDD', 'View', 'SendUpdates', .F.)
DBSetProp('APINVOUTDD', 'View', 'UseMemoSize', 255)
DBSetProp('APINVOUTDD', 'View', 'FetchSize', 100)
DBSetProp('APINVOUTDD', 'View', 'MaxRecords', -1)
DBSetProp('APINVOUTDD', 'View', 'Tables', 'appdata!appurchh,appdata!vendor')
DBSetProp('APINVOUTDD', 'View', 'Prepared', .F.)
DBSetProp('APINVOUTDD', 'View', 'CompareMemo', .T.)
DBSetProp('APINVOUTDD', 'View', 'FetchAsNeeded', .F.)
DBSetProp('APINVOUTDD', 'View', 'ParameterList', "ldselectby,'D';lddiscby,'D'")
DBSetProp('APINVOUTDD', 'View', 'Comment', "")
DBSetProp('APINVOUTDD', 'View', 'BatchUpdateCount', 1)
DBSetProp('APINVOUTDD', 'View', 'ShareConnection', .F.)
DBSetProp('APINVOUTDD', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for APINVOUTDD
* Props for the APINVOUTDD.cinvnum field.
DBSetProp('APINVOUTDD.cinvnum', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.cinvnum', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.cinvnum', 'Field', 'UpdateName', 'appdata!appurchh.cinvnum')
DBSetProp('APINVOUTDD.cinvnum', 'Field', 'Caption', "Invoice Number")
DBSetProp('APINVOUTDD.cinvnum', 'Field', 'DataType', "C(20)")
* Props for the APINVOUTDD.cvendorid field.
DBSetProp('APINVOUTDD.cvendorid', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.cvendorid', 'Field', 'Updatable', .F.)
DBSetProp('APINVOUTDD.cvendorid', 'Field', 'UpdateName', 'appdata!appurchh.cvendorid')
DBSetProp('APINVOUTDD.cvendorid', 'Field', 'Caption', "Vendor ID")
DBSetProp('APINVOUTDD.cvendorid', 'Field', 'DataType', "C(10)")
* Props for the APINVOUTDD.cvendname field.
DBSetProp('APINVOUTDD.cvendname', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.cvendname', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.cvendname', 'Field', 'UpdateName', 'appdata!vendor.cvendname')
DBSetProp('APINVOUTDD.cvendname', 'Field', 'Caption', "Vendor Name")
DBSetProp('APINVOUTDD.cvendname', 'Field', 'DataType', "C(60)")
* Props for the APINVOUTDD.dinvdate field.
DBSetProp('APINVOUTDD.dinvdate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.dinvdate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.dinvdate', 'Field', 'UpdateName', 'appdata!appurchh.dinvdate')
DBSetProp('APINVOUTDD.dinvdate', 'Field', 'Caption', "Invoice Date")
DBSetProp('APINVOUTDD.dinvdate', 'Field', 'DataType', "D")
* Props for the APINVOUTDD.ndisctot field.
DBSetProp('APINVOUTDD.ndisctot', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.ndisctot', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.ndisctot', 'Field', 'UpdateName', 'appdata!appurchh.ndisctot')
DBSetProp('APINVOUTDD.ndisctot', 'Field', 'Caption', "Discounts Available Total")
DBSetProp('APINVOUTDD.ndisctot', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTDD.ninvtot field.
DBSetProp('APINVOUTDD.ninvtot', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.ninvtot', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.ninvtot', 'Field', 'UpdateName', 'appdata!appurchh.ninvtot')
DBSetProp('APINVOUTDD.ninvtot', 'Field', 'Caption', "Invoice Total")
DBSetProp('APINVOUTDD.ninvtot', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTDD.ninvbal field.
DBSetProp('APINVOUTDD.ninvbal', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.ninvbal', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.ninvbal', 'Field', 'UpdateName', 'appdata!appurchh.ninvbal')
DBSetProp('APINVOUTDD.ninvbal', 'Field', 'Caption', "Balance")
DBSetProp('APINVOUTDD.ninvbal', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTDD.dduedate field.
DBSetProp('APINVOUTDD.dduedate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.dduedate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.dduedate', 'Field', 'UpdateName', 'appdata!appurchh.dduedate')
DBSetProp('APINVOUTDD.dduedate', 'Field', 'Caption', "Due Date")
DBSetProp('APINVOUTDD.dduedate', 'Field', 'DataType', "D")
* Props for the APINVOUTDD.ddiscdate field.
DBSetProp('APINVOUTDD.ddiscdate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.ddiscdate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.ddiscdate', 'Field', 'UpdateName', 'appdata!appurchh.ddiscdate')
DBSetProp('APINVOUTDD.ddiscdate', 'Field', 'Caption', "Discount Date")
DBSetProp('APINVOUTDD.ddiscdate', 'Field', 'DataType', "D")
* Props for the APINVOUTDD.cbatch field.
DBSetProp('APINVOUTDD.cbatch', 'Field', 'KeyField', .T.)
DBSetProp('APINVOUTDD.cbatch', 'Field', 'Updatable', .F.)
DBSetProp('APINVOUTDD.cbatch', 'Field', 'UpdateName', 'appdata!appurchh.cbatch')
DBSetProp('APINVOUTDD.cbatch', 'Field', 'Caption', "Batch Number")
DBSetProp('APINVOUTDD.cbatch', 'Field', 'DataType', "C(8)")
* Props for the APINVOUTDD.lapproved field.
DBSetProp('APINVOUTDD.lapproved', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTDD.lapproved', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTDD.lapproved', 'Field', 'UpdateName', 'appdata!appurchh.lapproved')
DBSetProp('APINVOUTDD.lapproved', 'Field', 'Caption', "Approved?")
DBSetProp('APINVOUTDD.lapproved', 'Field', 'DataType', "L")
ENDFUNC
 
FUNCTION MakeView_APINVOUTV
***************** View setup for APINVOUTV ***************

CREATE SQL VIEW "APINVOUTV" ; 
   AS SELECT Appurchh.cinvnum, Appurchh.cvendorid, Vendor.cvendname, Appurchh.dinvdate, Appurchh.ndisctot, Appurchh.ninvtot, Appurchh.ninvbal, Appurchh.dduedate, Appurchh.ddiscdate, Appurchh.cbatch, Appurchh.lapproved FROM appdata!appurchh JOIN appdata!vendor ON Appurchh.cvendorid = Vendor.cvendorid WHERE Appurchh.ninvbal <> ( 0 ) AND ( Appurchh.dduedate <= ( ?ldSelectBy ) OR (Appurchh.ddiscdate <= ( ?ldDiscBy ) AND Appurchh.ddiscdate <> Appurchh.dinvdate)) AND Appurchh.lapproved ORDER BY Vendor.cvendname, Appurchh.dduedate

DBSetProp('APINVOUTV', 'View', 'UpdateType', 1)
DBSetProp('APINVOUTV', 'View', 'WhereType', 3)
DBSetProp('APINVOUTV', 'View', 'FetchMemo', .T.)
DBSetProp('APINVOUTV', 'View', 'SendUpdates', .F.)
DBSetProp('APINVOUTV', 'View', 'UseMemoSize', 255)
DBSetProp('APINVOUTV', 'View', 'FetchSize', 100)
DBSetProp('APINVOUTV', 'View', 'MaxRecords', -1)
DBSetProp('APINVOUTV', 'View', 'Tables', 'appdata!appurchh,appdata!vendor')
DBSetProp('APINVOUTV', 'View', 'Prepared', .F.)
DBSetProp('APINVOUTV', 'View', 'CompareMemo', .T.)
DBSetProp('APINVOUTV', 'View', 'FetchAsNeeded', .F.)
DBSetProp('APINVOUTV', 'View', 'ParameterList', "ldSelectBy,'D';ldDiscBy,'D'")
DBSetProp('APINVOUTV', 'View', 'Comment', "")
DBSetProp('APINVOUTV', 'View', 'BatchUpdateCount', 1)
DBSetProp('APINVOUTV', 'View', 'ShareConnection', .F.)
DBSetProp('APINVOUTV', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for APINVOUTV
* Props for the APINVOUTV.cinvnum field.
DBSetProp('APINVOUTV.cinvnum', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.cinvnum', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.cinvnum', 'Field', 'UpdateName', 'appdata!appurchh.cinvnum')
DBSetProp('APINVOUTV.cinvnum', 'Field', 'Caption', "Invoice Number")
DBSetProp('APINVOUTV.cinvnum', 'Field', 'DataType', "C(20)")
* Props for the APINVOUTV.cvendorid field.
DBSetProp('APINVOUTV.cvendorid', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.cvendorid', 'Field', 'Updatable', .F.)
DBSetProp('APINVOUTV.cvendorid', 'Field', 'UpdateName', 'appdata!appurchh.cvendorid')
DBSetProp('APINVOUTV.cvendorid', 'Field', 'Caption', "Vendor ID")
DBSetProp('APINVOUTV.cvendorid', 'Field', 'DataType', "C(10)")
* Props for the APINVOUTV.cvendname field.
DBSetProp('APINVOUTV.cvendname', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.cvendname', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.cvendname', 'Field', 'UpdateName', 'appdata!vendor.cvendname')
DBSetProp('APINVOUTV.cvendname', 'Field', 'Caption', "Vendor Name")
DBSetProp('APINVOUTV.cvendname', 'Field', 'DataType', "C(60)")
* Props for the APINVOUTV.dinvdate field.
DBSetProp('APINVOUTV.dinvdate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.dinvdate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.dinvdate', 'Field', 'UpdateName', 'appdata!appurchh.dinvdate')
DBSetProp('APINVOUTV.dinvdate', 'Field', 'Caption', "Invoice Date")
DBSetProp('APINVOUTV.dinvdate', 'Field', 'DataType', "D")
* Props for the APINVOUTV.ndisctot field.
DBSetProp('APINVOUTV.ndisctot', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.ndisctot', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.ndisctot', 'Field', 'UpdateName', 'appdata!appurchh.ndisctot')
DBSetProp('APINVOUTV.ndisctot', 'Field', 'Caption', "Discounts Available Total")
DBSetProp('APINVOUTV.ndisctot', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTV.ninvtot field.
DBSetProp('APINVOUTV.ninvtot', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.ninvtot', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.ninvtot', 'Field', 'UpdateName', 'appdata!appurchh.ninvtot')
DBSetProp('APINVOUTV.ninvtot', 'Field', 'Caption', "Invoice Total")
DBSetProp('APINVOUTV.ninvtot', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTV.ninvbal field.
DBSetProp('APINVOUTV.ninvbal', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.ninvbal', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.ninvbal', 'Field', 'UpdateName', 'appdata!appurchh.ninvbal')
DBSetProp('APINVOUTV.ninvbal', 'Field', 'Caption', "Balance")
DBSetProp('APINVOUTV.ninvbal', 'Field', 'DataType', "N(12,2)")
* Props for the APINVOUTV.dduedate field.
DBSetProp('APINVOUTV.dduedate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.dduedate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.dduedate', 'Field', 'UpdateName', 'appdata!appurchh.dduedate')
DBSetProp('APINVOUTV.dduedate', 'Field', 'Caption', "Due Date")
DBSetProp('APINVOUTV.dduedate', 'Field', 'DataType', "D")
* Props for the APINVOUTV.ddiscdate field.
DBSetProp('APINVOUTV.ddiscdate', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.ddiscdate', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.ddiscdate', 'Field', 'UpdateName', 'appdata!appurchh.ddiscdate')
DBSetProp('APINVOUTV.ddiscdate', 'Field', 'Caption', "Discount Date")
DBSetProp('APINVOUTV.ddiscdate', 'Field', 'DataType', "D")
* Props for the APINVOUTV.cbatch field.
DBSetProp('APINVOUTV.cbatch', 'Field', 'KeyField', .T.)
DBSetProp('APINVOUTV.cbatch', 'Field', 'Updatable', .F.)
DBSetProp('APINVOUTV.cbatch', 'Field', 'UpdateName', 'appdata!appurchh.cbatch')
DBSetProp('APINVOUTV.cbatch', 'Field', 'Caption', "Batch Number")
DBSetProp('APINVOUTV.cbatch', 'Field', 'DataType', "C(8)")
* Props for the APINVOUTV.lapproved field.
DBSetProp('APINVOUTV.lapproved', 'Field', 'KeyField', .F.)
DBSetProp('APINVOUTV.lapproved', 'Field', 'Updatable', .T.)
DBSetProp('APINVOUTV.lapproved', 'Field', 'UpdateName', 'appdata!appurchh.lapproved')
DBSetProp('APINVOUTV.lapproved', 'Field', 'Caption', "Approved?")
DBSetProp('APINVOUTV.lapproved', 'Field', 'DataType', "L")
ENDFUNC
 
FUNCTION MakeView_APVENDCHK
***************** View setup for APVENDCHK ***************

CREATE SQL VIEW "APVENDCHK" ; 
   AS SELECT Checks.ccheckno, Checks.dcheckdate, Checks.cid, Vendor.cvendname,  Checks.namount, Checks.cidchec FROM  appdata!checks INNER JOIN appdata!vendor    ON  Checks.cid = Vendor.cvendorid WHERE Checks.cacctno = ?lcAcctNo   AND Checks.cidtype = "V"

DBSetProp('APVENDCHK', 'View', 'UpdateType', 1)
DBSetProp('APVENDCHK', 'View', 'WhereType', 3)
DBSetProp('APVENDCHK', 'View', 'FetchMemo', .T.)
DBSetProp('APVENDCHK', 'View', 'SendUpdates', .T.)
DBSetProp('APVENDCHK', 'View', 'UseMemoSize', 255)
DBSetProp('APVENDCHK', 'View', 'FetchSize', 100)
DBSetProp('APVENDCHK', 'View', 'MaxRecords', -1)
DBSetProp('APVENDCHK', 'View', 'Tables', 'appdata!checks,appdata!vendor')
DBSetProp('APVENDCHK', 'View', 'Prepared', .F.)
DBSetProp('APVENDCHK', 'View', 'CompareMemo', .T.)
DBSetProp('APVENDCHK', 'View', 'FetchAsNeeded', .F.)
DBSetProp('APVENDCHK', 'View', 'Comment', "")
DBSetProp('APVENDCHK', 'View', 'BatchUpdateCount', 1)
DBSetProp('APVENDCHK', 'View', 'ShareConnection', .F.)
DBSetProp('APVENDCHK', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for APVENDCHK
* Props for the APVENDCHK.ccheckno field.
DBSetProp('APVENDCHK.ccheckno', 'Field', 'KeyField', .F.)
DBSetProp('APVENDCHK.ccheckno', 'Field', 'Updatable', .T.)
DBSetProp('APVENDCHK.ccheckno', 'Field', 'UpdateName', 'appdata!checks.ccheckno')
DBSetProp('APVENDCHK.ccheckno', 'Field', 'Caption', "Check No")
DBSetProp('APVENDCHK.ccheckno', 'Field', 'DataType', "C(10)")
* Props for the APVENDCHK.dcheckdate field.
DBSetProp('APVENDCHK.dcheckdate', 'Field', 'KeyField', .F.)
DBSetProp('APVENDCHK.dcheckdate', 'Field', 'Updatable', .T.)
DBSetProp('APVENDCHK.dcheckdate', 'Field', 'UpdateName', 'appdata!checks.dcheckdate')
DBSetProp('APVENDCHK.dcheckdate', 'Field', 'Caption', "Date")
DBSetProp('APVENDCHK.dcheckdate', 'Field', 'DataType', "D")
* Props for the APVENDCHK.cid field.
DBSetProp('APVENDCHK.cid', 'Field', 'KeyField', .F.)
DBSetProp('APVENDCHK.cid', 'Field', 'Updatable', .T.)
DBSetProp('APVENDCHK.cid', 'Field', 'UpdateName', 'appdata!checks.cid')
DBSetProp('APVENDCHK.cid', 'Field', 'Caption', "ID Code")
DBSetProp('APVENDCHK.cid', 'Field', 'DataType', "C(10)")
* Props for the APVENDCHK.cvendname field.
DBSetProp('APVENDCHK.cvendname', 'Field', 'KeyField', .F.)
DBSetProp('APVENDCHK.cvendname', 'Field', 'Updatable', .T.)
DBSetProp('APVENDCHK.cvendname', 'Field', 'UpdateName', 'appdata!vendor.cvendname')
DBSetProp('APVENDCHK.cvendname', 'Field', 'Caption', "Vendor Name")
DBSetProp('APVENDCHK.cvendname', 'Field', 'DataType', "C(60)")
* Props for the APVENDCHK.namount field.
DBSetProp('APVENDCHK.namount', 'Field', 'KeyField', .F.)
DBSetProp('APVENDCHK.namount', 'Field', 'Updatable', .T.)
DBSetProp('APVENDCHK.namount', 'Field', 'UpdateName', 'appdata!checks.namount')
DBSetProp('APVENDCHK.namount', 'Field', 'Caption', "Amount")
DBSetProp('APVENDCHK.namount', 'Field', 'DataType', "N(12,2)")
* Props for the APVENDCHK.cidchec field.
DBSetProp('APVENDCHK.cidchec', 'Field', 'KeyField', .F.)
DBSetProp('APVENDCHK.cidchec', 'Field', 'Updatable', .T.)
DBSetProp('APVENDCHK.cidchec', 'Field', 'UpdateName', 'appdata!checks.cidchec')
DBSetProp('APVENDCHK.cidchec', 'Field', 'Caption', "Primary Key")
DBSetProp('APVENDCHK.cidchec', 'Field', 'DataType', "C(8)")
ENDFUNC
 
FUNCTION MakeView_EXPBYVENDOR
***************** View setup for EXPBYVENDOR ***************

CREATE SQL VIEW "EXPBYVENDOR" ; 
   AS SELECT Expense.cidexpe, Expense.cwellid, Expense.cyear, Expense.cperiod, Expense.ccateg, Expense.crefid, Expense.namount, Expense.cmemo, Expense.cvendorid, Expense.cpaidbyck, Expense.dexpdate, Expense.cpayee, Expense.cexpclass, Expense.nsaltwater, Expense.cprdpaid, Expense.lfixed, Expense.laptran, Expense.cbatch, Expense.cownerid, Expense.loneman, Expense.ccatcode, Expense.lclosed, Expense.cidexph, Expense.cacctyear, Expense.cacctprd, Wells.cwellname, Expense.cdeck FROM  appdata!expense  INNER JOIN appdata!wells  ON  Expense.cwellid = Wells.cwellid WHERE  Expense.cbatch = ( ?lcBatch ) ORDER BY Expense.cidexpe

DBSetProp('EXPBYVENDOR', 'View', 'UpdateType', 1)
DBSetProp('EXPBYVENDOR', 'View', 'WhereType', 3)
DBSetProp('EXPBYVENDOR', 'View', 'FetchMemo', .T.)
DBSetProp('EXPBYVENDOR', 'View', 'SendUpdates', .T.)
DBSetProp('EXPBYVENDOR', 'View', 'UseMemoSize', 255)
DBSetProp('EXPBYVENDOR', 'View', 'FetchSize', 100)
DBSetProp('EXPBYVENDOR', 'View', 'MaxRecords', -1)
DBSetProp('EXPBYVENDOR', 'View', 'Tables', 'appdata!expense')
DBSetProp('EXPBYVENDOR', 'View', 'Prepared', .F.)
DBSetProp('EXPBYVENDOR', 'View', 'CompareMemo', .T.)
DBSetProp('EXPBYVENDOR', 'View', 'FetchAsNeeded', .F.)
DBSetProp('EXPBYVENDOR', 'View', 'Comment', "")
DBSetProp('EXPBYVENDOR', 'View', 'BatchUpdateCount', 1)
DBSetProp('EXPBYVENDOR', 'View', 'ShareConnection', .F.)
DBSetProp('EXPBYVENDOR', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for EXPBYVENDOR
* Props for the EXPBYVENDOR.cidexpe field.
DBSetProp('EXPBYVENDOR.cidexpe', 'Field', 'KeyField', .T.)
DBSetProp('EXPBYVENDOR.cidexpe', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cidexpe', 'Field', 'UpdateName', 'appdata!expense.cidexpe')
DBSetProp('EXPBYVENDOR.cidexpe', 'Field', 'Caption', "Primary Key")
DBSetProp('EXPBYVENDOR.cidexpe', 'Field', 'DataType', "C(8)")
* Props for the EXPBYVENDOR.cwellid field.
DBSetProp('EXPBYVENDOR.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cwellid', 'Field', 'UpdateName', 'appdata!expense.cwellid')
DBSetProp('EXPBYVENDOR.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('EXPBYVENDOR.cwellid', 'Field', 'DataType', "C(10)")
* Props for the EXPBYVENDOR.cyear field.
DBSetProp('EXPBYVENDOR.cyear', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cyear', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cyear', 'Field', 'UpdateName', 'appdata!expense.cyear')
DBSetProp('EXPBYVENDOR.cyear', 'Field', 'Caption', "Year")
DBSetProp('EXPBYVENDOR.cyear', 'Field', 'DataType', "C(4)")
* Props for the EXPBYVENDOR.cperiod field.
DBSetProp('EXPBYVENDOR.cperiod', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cperiod', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cperiod', 'Field', 'UpdateName', 'appdata!expense.cperiod')
DBSetProp('EXPBYVENDOR.cperiod', 'Field', 'Caption', "Period")
DBSetProp('EXPBYVENDOR.cperiod', 'Field', 'DataType', "C(2)")
* Props for the EXPBYVENDOR.ccateg field.
DBSetProp('EXPBYVENDOR.ccateg', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.ccateg', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.ccateg', 'Field', 'UpdateName', 'appdata!expense.ccateg')
DBSetProp('EXPBYVENDOR.ccateg', 'Field', 'Caption', "Category")
DBSetProp('EXPBYVENDOR.ccateg', 'Field', 'DataType', "C(25)")
* Props for the EXPBYVENDOR.crefid field.
DBSetProp('EXPBYVENDOR.crefid', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.crefid', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.crefid', 'Field', 'UpdateName', 'appdata!expense.crefid')
DBSetProp('EXPBYVENDOR.crefid', 'Field', 'Caption', "Reference")
DBSetProp('EXPBYVENDOR.crefid', 'Field', 'DataType', "C(15)")
* Props for the EXPBYVENDOR.namount field.
DBSetProp('EXPBYVENDOR.namount', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.namount', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.namount', 'Field', 'UpdateName', 'appdata!expense.namount')
DBSetProp('EXPBYVENDOR.namount', 'Field', 'Caption', "Amount")
DBSetProp('EXPBYVENDOR.namount', 'Field', 'DataType', "N(12,2)")
* Props for the EXPBYVENDOR.cmemo field.
DBSetProp('EXPBYVENDOR.cmemo', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cmemo', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cmemo', 'Field', 'UpdateName', 'appdata!expense.cmemo')
DBSetProp('EXPBYVENDOR.cmemo', 'Field', 'Caption', "Notes")
DBSetProp('EXPBYVENDOR.cmemo', 'Field', 'DataType', "C(40)")
* Props for the EXPBYVENDOR.cvendorid field.
DBSetProp('EXPBYVENDOR.cvendorid', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cvendorid', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cvendorid', 'Field', 'UpdateName', 'appdata!expense.cvendorid')
DBSetProp('EXPBYVENDOR.cvendorid', 'Field', 'Caption', "Vendor ID")
DBSetProp('EXPBYVENDOR.cvendorid', 'Field', 'DataType', "C(10)")
* Props for the EXPBYVENDOR.cpaidbyck field.
DBSetProp('EXPBYVENDOR.cpaidbyck', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cpaidbyck', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cpaidbyck', 'Field', 'UpdateName', 'appdata!expense.cpaidbyck')
DBSetProp('EXPBYVENDOR.cpaidbyck', 'Field', 'Caption', "Check Key")
DBSetProp('EXPBYVENDOR.cpaidbyck', 'Field', 'DataType', "C(8)")
* Props for the EXPBYVENDOR.dexpdate field.
DBSetProp('EXPBYVENDOR.dexpdate', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.dexpdate', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.dexpdate', 'Field', 'UpdateName', 'appdata!expense.dexpdate')
DBSetProp('EXPBYVENDOR.dexpdate', 'Field', 'Caption', "Date")
DBSetProp('EXPBYVENDOR.dexpdate', 'Field', 'DataType', "D")
* Props for the EXPBYVENDOR.cpayee field.
DBSetProp('EXPBYVENDOR.cpayee', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cpayee', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cpayee', 'Field', 'UpdateName', 'appdata!expense.cpayee')
DBSetProp('EXPBYVENDOR.cpayee', 'Field', 'Caption', "Payee")
DBSetProp('EXPBYVENDOR.cpayee', 'Field', 'DataType', "C(40)")
* Props for the EXPBYVENDOR.cexpclass field.
DBSetProp('EXPBYVENDOR.cexpclass', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cexpclass', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cexpclass', 'Field', 'UpdateName', 'appdata!expense.cexpclass')
DBSetProp('EXPBYVENDOR.cexpclass', 'Field', 'Caption', "Exp Class")
DBSetProp('EXPBYVENDOR.cexpclass', 'Field', 'DataType', "C(1)")
* Props for the EXPBYVENDOR.nsaltwater field.
DBSetProp('EXPBYVENDOR.nsaltwater', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.nsaltwater', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.nsaltwater', 'Field', 'UpdateName', 'appdata!expense.nsaltwater')
DBSetProp('EXPBYVENDOR.nsaltwater', 'Field', 'Caption', "BBL of Water")
DBSetProp('EXPBYVENDOR.nsaltwater', 'Field', 'DataType', "I")
* Props for the EXPBYVENDOR.cprdpaid field.
DBSetProp('EXPBYVENDOR.cprdpaid', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cprdpaid', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cprdpaid', 'Field', 'UpdateName', 'appdata!expense.cprdpaid')
DBSetProp('EXPBYVENDOR.cprdpaid', 'Field', 'Caption', "Period Paid")
DBSetProp('EXPBYVENDOR.cprdpaid', 'Field', 'DataType', "C(6)")
* Props for the EXPBYVENDOR.lfixed field.
DBSetProp('EXPBYVENDOR.lfixed', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.lfixed', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.lfixed', 'Field', 'UpdateName', 'appdata!expense.lfixed')
DBSetProp('EXPBYVENDOR.lfixed', 'Field', 'Caption', "Fixed Expense")
DBSetProp('EXPBYVENDOR.lfixed', 'Field', 'DataType', "L")
* Props for the EXPBYVENDOR.laptran field.
DBSetProp('EXPBYVENDOR.laptran', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.laptran', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.laptran', 'Field', 'UpdateName', 'appdata!expense.laptran')
DBSetProp('EXPBYVENDOR.laptran', 'Field', 'Caption', "A/P Flag")
DBSetProp('EXPBYVENDOR.laptran', 'Field', 'DataType', "L")
* Props for the EXPBYVENDOR.cbatch field.
DBSetProp('EXPBYVENDOR.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cbatch', 'Field', 'UpdateName', 'appdata!expense.cbatch')
DBSetProp('EXPBYVENDOR.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('EXPBYVENDOR.cbatch', 'Field', 'DataType', "C(8)")
* Props for the EXPBYVENDOR.cownerid field.
DBSetProp('EXPBYVENDOR.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cownerid', 'Field', 'UpdateName', 'appdata!expense.cownerid')
DBSetProp('EXPBYVENDOR.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('EXPBYVENDOR.cownerid', 'Field', 'DataType', "C(10)")
* Props for the EXPBYVENDOR.loneman field.
DBSetProp('EXPBYVENDOR.loneman', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.loneman', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.loneman', 'Field', 'UpdateName', 'appdata!expense.loneman')
DBSetProp('EXPBYVENDOR.loneman', 'Field', 'Caption', "One Man Item")
DBSetProp('EXPBYVENDOR.loneman', 'Field', 'DataType', "L")
* Props for the EXPBYVENDOR.ccatcode field.
DBSetProp('EXPBYVENDOR.ccatcode', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.ccatcode', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.ccatcode', 'Field', 'UpdateName', 'appdata!expense.ccatcode')
DBSetProp('EXPBYVENDOR.ccatcode', 'Field', 'Caption', "Cat Code")
DBSetProp('EXPBYVENDOR.ccatcode', 'Field', 'DataType', "C(4)")
* Props for the EXPBYVENDOR.lclosed field.
DBSetProp('EXPBYVENDOR.lclosed', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.lclosed', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.lclosed', 'Field', 'UpdateName', 'appdata!expense.lclosed')
DBSetProp('EXPBYVENDOR.lclosed', 'Field', 'Caption', "Closed Flag")
DBSetProp('EXPBYVENDOR.lclosed', 'Field', 'DataType', "L")
* Props for the EXPBYVENDOR.cidexph field.
DBSetProp('EXPBYVENDOR.cidexph', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cidexph', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cidexph', 'Field', 'UpdateName', 'appdata!expense.cidexph')
DBSetProp('EXPBYVENDOR.cidexph', 'Field', 'Caption', "Hdr Key")
DBSetProp('EXPBYVENDOR.cidexph', 'Field', 'DataType', "C(8)")
* Props for the EXPBYVENDOR.cacctyear field.
DBSetProp('EXPBYVENDOR.cacctyear', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cacctyear', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cacctyear', 'Field', 'UpdateName', 'appdata!expense.cacctyear')
DBSetProp('EXPBYVENDOR.cacctyear', 'Field', 'Caption', "Acct Year")
DBSetProp('EXPBYVENDOR.cacctyear', 'Field', 'DataType', "C(4)")
* Props for the EXPBYVENDOR.cacctprd field.
DBSetProp('EXPBYVENDOR.cacctprd', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cacctprd', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cacctprd', 'Field', 'UpdateName', 'appdata!expense.cacctprd')
DBSetProp('EXPBYVENDOR.cacctprd', 'Field', 'Caption', "Acct Prd")
DBSetProp('EXPBYVENDOR.cacctprd', 'Field', 'DataType', "C(2)")
* Props for the EXPBYVENDOR.cwellname field.
DBSetProp('EXPBYVENDOR.cwellname', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cwellname', 'Field', 'Updatable', .F.)
DBSetProp('EXPBYVENDOR.cwellname', 'Field', 'UpdateName', 'appdata!wells.cwellname')
DBSetProp('EXPBYVENDOR.cwellname', 'Field', 'Caption', "Well Name")
DBSetProp('EXPBYVENDOR.cwellname', 'Field', 'DataType', "C(30)")
* Props for the EXPBYVENDOR.cdeck field.
DBSetProp('EXPBYVENDOR.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('EXPBYVENDOR.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('EXPBYVENDOR.cdeck', 'Field', 'UpdateName', 'appdata!expense.cdeck')
DBSetProp('EXPBYVENDOR.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('EXPBYVENDOR.cdeck', 'Field', 'DataType', "C(10)")
ENDFUNC
 
FUNCTION MakeView_PAYVEND
***************** View setup for PAYVEND ***************

CREATE SQL VIEW "PAYVEND" ; 
   AS SELECT Expense.cwellid, Expense.cperiod, Expense.cyear, Expense.dexpdate,  Expense.crefid, Expense.ccateg, Expense.cpayee, Expense.namount,  Expense.cvendorid, Expense.cpaidbyck, Wells.cwellname, Expense.cidexpe FROM  appdata!wells INNER JOIN appdata!expense    ON  Wells.cwellid = Expense.cwellid WHERE Expense.cpaidbyck = " "   AND Expense.cvendorid = ?lcVendor   AND Expense.nrunnorev = 0 ORDER BY Expense.cwellid

DBSetProp('PAYVEND', 'View', 'UpdateType', 1)
DBSetProp('PAYVEND', 'View', 'WhereType', 3)
DBSetProp('PAYVEND', 'View', 'FetchMemo', .T.)
DBSetProp('PAYVEND', 'View', 'SendUpdates', .F.)
DBSetProp('PAYVEND', 'View', 'UseMemoSize', 255)
DBSetProp('PAYVEND', 'View', 'FetchSize', 100)
DBSetProp('PAYVEND', 'View', 'MaxRecords', -1)
DBSetProp('PAYVEND', 'View', 'Tables', 'appdata!expense')
DBSetProp('PAYVEND', 'View', 'Prepared', .F.)
DBSetProp('PAYVEND', 'View', 'CompareMemo', .T.)
DBSetProp('PAYVEND', 'View', 'FetchAsNeeded', .F.)
DBSetProp('PAYVEND', 'View', 'Comment', "")
DBSetProp('PAYVEND', 'View', 'BatchUpdateCount', 1)
DBSetProp('PAYVEND', 'View', 'ShareConnection', .F.)
DBSetProp('PAYVEND', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for PAYVEND
* Props for the PAYVEND.cwellid field.
DBSetProp('PAYVEND.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.cwellid', 'Field', 'UpdateName', 'appdata!expense.cwellid')
DBSetProp('PAYVEND.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('PAYVEND.cwellid', 'Field', 'DataType', "C(10)")
* Props for the PAYVEND.cperiod field.
DBSetProp('PAYVEND.cperiod', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.cperiod', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.cperiod', 'Field', 'UpdateName', 'appdata!expense.cperiod')
DBSetProp('PAYVEND.cperiod', 'Field', 'Caption', "Period")
DBSetProp('PAYVEND.cperiod', 'Field', 'DataType', "C(2)")
* Props for the PAYVEND.cyear field.
DBSetProp('PAYVEND.cyear', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.cyear', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.cyear', 'Field', 'UpdateName', 'appdata!expense.cyear')
DBSetProp('PAYVEND.cyear', 'Field', 'Caption', "Year")
DBSetProp('PAYVEND.cyear', 'Field', 'DataType', "C(4)")
* Props for the PAYVEND.dexpdate field.
DBSetProp('PAYVEND.dexpdate', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.dexpdate', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.dexpdate', 'Field', 'UpdateName', 'appdata!expense.dexpdate')
DBSetProp('PAYVEND.dexpdate', 'Field', 'Caption', "Date")
DBSetProp('PAYVEND.dexpdate', 'Field', 'DataType', "D")
* Props for the PAYVEND.crefid field.
DBSetProp('PAYVEND.crefid', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.crefid', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.crefid', 'Field', 'UpdateName', 'appdata!expense.crefid')
DBSetProp('PAYVEND.crefid', 'Field', 'Caption', "Reference")
DBSetProp('PAYVEND.crefid', 'Field', 'DataType', "C(15)")
* Props for the PAYVEND.ccateg field.
DBSetProp('PAYVEND.ccateg', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.ccateg', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.ccateg', 'Field', 'UpdateName', 'appdata!expense.ccateg')
DBSetProp('PAYVEND.ccateg', 'Field', 'Caption', "Category")
DBSetProp('PAYVEND.ccateg', 'Field', 'DataType', "C(25)")
* Props for the PAYVEND.cpayee field.
DBSetProp('PAYVEND.cpayee', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.cpayee', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.cpayee', 'Field', 'UpdateName', 'appdata!expense.cpayee')
DBSetProp('PAYVEND.cpayee', 'Field', 'Caption', "Payee")
DBSetProp('PAYVEND.cpayee', 'Field', 'DataType', "C(40)")
* Props for the PAYVEND.namount field.
DBSetProp('PAYVEND.namount', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.namount', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.namount', 'Field', 'UpdateName', 'appdata!expense.namount')
DBSetProp('PAYVEND.namount', 'Field', 'Caption', "Amount")
DBSetProp('PAYVEND.namount', 'Field', 'DataType', "N(12,2)")
* Props for the PAYVEND.cvendorid field.
DBSetProp('PAYVEND.cvendorid', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.cvendorid', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.cvendorid', 'Field', 'UpdateName', 'appdata!expense.cvendorid')
DBSetProp('PAYVEND.cvendorid', 'Field', 'Caption', "Vendor ID")
DBSetProp('PAYVEND.cvendorid', 'Field', 'DataType', "C(10)")
* Props for the PAYVEND.cpaidbyck field.
DBSetProp('PAYVEND.cpaidbyck', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.cpaidbyck', 'Field', 'Updatable', .T.)
DBSetProp('PAYVEND.cpaidbyck', 'Field', 'UpdateName', 'appdata!expense.cpaidbyck')
DBSetProp('PAYVEND.cpaidbyck', 'Field', 'Caption', "Check Key")
DBSetProp('PAYVEND.cpaidbyck', 'Field', 'DataType', "C(8)")
* Props for the PAYVEND.cwellname field.
DBSetProp('PAYVEND.cwellname', 'Field', 'KeyField', .F.)
DBSetProp('PAYVEND.cwellname', 'Field', 'Updatable', .F.)
DBSetProp('PAYVEND.cwellname', 'Field', 'UpdateName', 'appdata!wells.cwellname')
DBSetProp('PAYVEND.cwellname', 'Field', 'Caption', "Well Name")
DBSetProp('PAYVEND.cwellname', 'Field', 'DataType', "C(30)")
* Props for the PAYVEND.cidexpe field.
DBSetProp('PAYVEND.cidexpe', 'Field', 'KeyField', .T.)
DBSetProp('PAYVEND.cidexpe', 'Field', 'Updatable', .F.)
DBSetProp('PAYVEND.cidexpe', 'Field', 'UpdateName', 'appdata!expense.cidexpe')
DBSetProp('PAYVEND.cidexpe', 'Field', 'Caption', "Primary Key")
DBSetProp('PAYVEND.cidexpe', 'Field', 'DataType', "C(8)")
ENDFUNC
 
FUNCTION MakeView_DOI_AC
***************** View setup for DOI_AC ***************

CREATE SQL VIEW "DOI_AC" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nacpint AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( ( (  Wellinv.cwellid = ( ?lcWellID ) AND  Wellinv.cdeck = (?lcDeck) ) AND  Wellinv.cownerid = Investor.cownerid ) AND  Wellinv.ctypeinv = ( "W" ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_AC', 'View', 'UpdateType', 1)
DBSetProp('DOI_AC', 'View', 'WhereType', 3)
DBSetProp('DOI_AC', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_AC', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_AC', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_AC', 'View', 'FetchSize', 100)
DBSetProp('DOI_AC', 'View', 'MaxRecords', -1)
DBSetProp('DOI_AC', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_AC', 'View', 'Prepared', .F.)
DBSetProp('DOI_AC', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_AC', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_AC', 'View', 'Comment', "")
DBSetProp('DOI_AC', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_AC', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_AC', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_AC
* Props for the DOI_AC.cownerid field.
DBSetProp('DOI_AC.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_AC.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_AC.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_AC.cownname field.
DBSetProp('DOI_AC.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_AC.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_AC.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_AC.cidwinv field.
DBSetProp('DOI_AC.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_AC.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_AC.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_AC.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_AC.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_AC.lonhold field.
DBSetProp('DOI_AC.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_AC.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_AC.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_AC.ljib field.
DBSetProp('DOI_AC.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_AC.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_AC.ljib', 'Field', 'DataType', "L")
* Props for the DOI_AC.ctypeinv field.
DBSetProp('DOI_AC.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_AC.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_AC.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_AC.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_AC.ctypeint field.
DBSetProp('DOI_AC.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_AC.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_AC.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_AC.cdirect field.
DBSetProp('DOI_AC.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_AC.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_AC.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_AC.lflat field.
DBSetProp('DOI_AC.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_AC.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_AC.lflat', 'Field', 'DataType', "L")
* Props for the DOI_AC.ctaxflag field.
DBSetProp('DOI_AC.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_AC.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_AC.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_AC.cprogcode field.
DBSetProp('DOI_AC.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_AC.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_AC.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_AC.interest field.
DBSetProp('DOI_AC.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_AC.interest', 'Field', 'UpdateName', 'appdata!wellinv.nacpint')
DBSetProp('DOI_AC.interest', 'Field', 'Caption', "After Casing Point Interest")
DBSetProp('DOI_AC.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_AC.cdeck field.
DBSetProp('DOI_AC.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_AC.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_AC.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_AC.nunits field.
DBSetProp('DOI_AC.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AC.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AC.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_AC.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_AC.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_AP
***************** View setup for DOI_AP ***************

CREATE SQL VIEW "DOI_AP" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, Wellinv.ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.napoint AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( (  Wellinv.cwellid = ( ?lcWellID ) AND  Wellinv.cownerid = Investor.cownerid ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.ctypeinv = ( "W" ) ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_AP', 'View', 'UpdateType', 1)
DBSetProp('DOI_AP', 'View', 'WhereType', 3)
DBSetProp('DOI_AP', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_AP', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_AP', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_AP', 'View', 'FetchSize', 100)
DBSetProp('DOI_AP', 'View', 'MaxRecords', -1)
DBSetProp('DOI_AP', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_AP', 'View', 'Prepared', .F.)
DBSetProp('DOI_AP', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_AP', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_AP', 'View', 'Comment', "")
DBSetProp('DOI_AP', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_AP', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_AP', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_AP
* Props for the DOI_AP.cownerid field.
DBSetProp('DOI_AP.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_AP.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_AP.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_AP.cownname field.
DBSetProp('DOI_AP.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_AP.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_AP.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_AP.cidwinv field.
DBSetProp('DOI_AP.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_AP.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_AP.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_AP.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_AP.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_AP.lonhold field.
DBSetProp('DOI_AP.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_AP.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_AP.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_AP.ljib field.
DBSetProp('DOI_AP.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_AP.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_AP.ljib', 'Field', 'DataType', "L")
* Props for the DOI_AP.ctypeinv field.
DBSetProp('DOI_AP.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.ctypeinv', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.ctypeinv', 'Field', 'UpdateName', 'appdata!wellinv.ctypeinv')
DBSetProp('DOI_AP.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_AP.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_AP.ctypeint field.
DBSetProp('DOI_AP.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_AP.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_AP.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_AP.cdirect field.
DBSetProp('DOI_AP.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_AP.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_AP.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_AP.lflat field.
DBSetProp('DOI_AP.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_AP.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_AP.lflat', 'Field', 'DataType', "L")
* Props for the DOI_AP.ctaxflag field.
DBSetProp('DOI_AP.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_AP.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_AP.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_AP.cprogcode field.
DBSetProp('DOI_AP.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_AP.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_AP.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_AP.interest field.
DBSetProp('DOI_AP.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_AP.interest', 'Field', 'UpdateName', 'appdata!wellinv.napoint')
DBSetProp('DOI_AP.interest', 'Field', 'Caption', "After Payout Interest")
DBSetProp('DOI_AP.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_AP.cdeck field.
DBSetProp('DOI_AP.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_AP.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_AP.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_AP.nunits field.
DBSetProp('DOI_AP.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_AP.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_AP.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_AP.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_AP.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_BC
***************** View setup for DOI_BC ***************

CREATE SQL VIEW "DOI_BC" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, Wellinv.ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nbcpint AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( (  Wellinv.cwellid = ( ?lcWellID ) AND  Wellinv.cownerid = Investor.cownerid ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.ctypeinv = ( "W" ) ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_BC', 'View', 'UpdateType', 1)
DBSetProp('DOI_BC', 'View', 'WhereType', 3)
DBSetProp('DOI_BC', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_BC', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_BC', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_BC', 'View', 'FetchSize', 100)
DBSetProp('DOI_BC', 'View', 'MaxRecords', -1)
DBSetProp('DOI_BC', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_BC', 'View', 'Prepared', .F.)
DBSetProp('DOI_BC', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_BC', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_BC', 'View', 'Comment', "")
DBSetProp('DOI_BC', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_BC', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_BC', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_BC
* Props for the DOI_BC.cownerid field.
DBSetProp('DOI_BC.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_BC.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_BC.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_BC.cownname field.
DBSetProp('DOI_BC.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_BC.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_BC.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_BC.cidwinv field.
DBSetProp('DOI_BC.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_BC.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_BC.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_BC.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_BC.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_BC.lonhold field.
DBSetProp('DOI_BC.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_BC.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_BC.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_BC.ljib field.
DBSetProp('DOI_BC.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_BC.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_BC.ljib', 'Field', 'DataType', "L")
* Props for the DOI_BC.ctypeinv field.
DBSetProp('DOI_BC.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.ctypeinv', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.ctypeinv', 'Field', 'UpdateName', 'appdata!wellinv.ctypeinv')
DBSetProp('DOI_BC.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_BC.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_BC.ctypeint field.
DBSetProp('DOI_BC.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_BC.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_BC.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_BC.cdirect field.
DBSetProp('DOI_BC.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_BC.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_BC.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_BC.lflat field.
DBSetProp('DOI_BC.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_BC.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_BC.lflat', 'Field', 'DataType', "L")
* Props for the DOI_BC.ctaxflag field.
DBSetProp('DOI_BC.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_BC.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_BC.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_BC.cprogcode field.
DBSetProp('DOI_BC.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_BC.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_BC.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_BC.interest field.
DBSetProp('DOI_BC.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_BC.interest', 'Field', 'UpdateName', 'appdata!wellinv.nbcpint')
DBSetProp('DOI_BC.interest', 'Field', 'Caption', "Before Casing Point Interest")
DBSetProp('DOI_BC.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_BC.cdeck field.
DBSetProp('DOI_BC.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_BC.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_BC.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_BC.nunits field.
DBSetProp('DOI_BC.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_BC.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_BC.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_BC.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_BC.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_DC
***************** View setup for DOI_DC ***************

CREATE SQL VIEW "DOI_DC" ; 
   AS SELECT Wellinv.cownerid, Wellinv.cidwinv, Investor.cownname, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nworkint AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( (  Wellinv.cwellid = ( ?lcWellID ) AND  Wellinv.cownerid = Investor.cownerid ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.ctypeinv = ( "W" ) ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_DC', 'View', 'UpdateType', 1)
DBSetProp('DOI_DC', 'View', 'WhereType', 3)
DBSetProp('DOI_DC', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_DC', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_DC', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_DC', 'View', 'FetchSize', 100)
DBSetProp('DOI_DC', 'View', 'MaxRecords', -1)
DBSetProp('DOI_DC', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_DC', 'View', 'Prepared', .F.)
DBSetProp('DOI_DC', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_DC', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_DC', 'View', 'Comment', "")
DBSetProp('DOI_DC', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_DC', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_DC', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_DC
* Props for the DOI_DC.cownerid field.
DBSetProp('DOI_DC.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_DC.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_DC.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_DC.cidwinv field.
DBSetProp('DOI_DC.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_DC.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_DC.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_DC.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_DC.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_DC.cownname field.
DBSetProp('DOI_DC.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_DC.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_DC.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_DC.lonhold field.
DBSetProp('DOI_DC.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_DC.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_DC.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_DC.ljib field.
DBSetProp('DOI_DC.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_DC.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_DC.ljib', 'Field', 'DataType', "L")
* Props for the DOI_DC.ctypeinv field.
DBSetProp('DOI_DC.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_DC.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_DC.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_DC.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_DC.ctypeint field.
DBSetProp('DOI_DC.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_DC.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_DC.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_DC.cdirect field.
DBSetProp('DOI_DC.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_DC.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_DC.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_DC.lflat field.
DBSetProp('DOI_DC.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_DC.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_DC.lflat', 'Field', 'DataType', "L")
* Props for the DOI_DC.ctaxflag field.
DBSetProp('DOI_DC.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_DC.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_DC.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_DC.cprogcode field.
DBSetProp('DOI_DC.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_DC.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_DC.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_DC.interest field.
DBSetProp('DOI_DC.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_DC.interest', 'Field', 'UpdateName', 'appdata!wellinv.nworkint')
DBSetProp('DOI_DC.interest', 'Field', 'Caption', "Working Interest")
DBSetProp('DOI_DC.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_DC.cdeck field.
DBSetProp('DOI_DC.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_DC.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_DC.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_DC.nunits field.
DBSetProp('DOI_DC.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_DC.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_DC.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_DC.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_DC.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_E1
***************** View setup for DOI_E1 ***************

CREATE SQL VIEW "DOI_E1" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nintclass1 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_E1', 'View', 'UpdateType', 1)
DBSetProp('DOI_E1', 'View', 'WhereType', 3)
DBSetProp('DOI_E1', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_E1', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_E1', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_E1', 'View', 'FetchSize', 100)
DBSetProp('DOI_E1', 'View', 'MaxRecords', -1)
DBSetProp('DOI_E1', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_E1', 'View', 'Prepared', .F.)
DBSetProp('DOI_E1', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_E1', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_E1', 'View', 'Comment', "")
DBSetProp('DOI_E1', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_E1', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_E1', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_E1
* Props for the DOI_E1.cownerid field.
DBSetProp('DOI_E1.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_E1.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_E1.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_E1.cownname field.
DBSetProp('DOI_E1.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_E1.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_E1.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_E1.cidwinv field.
DBSetProp('DOI_E1.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_E1.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E1.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_E1.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_E1.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_E1.lonhold field.
DBSetProp('DOI_E1.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_E1.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_E1.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_E1.ljib field.
DBSetProp('DOI_E1.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_E1.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_E1.ljib', 'Field', 'DataType', "L")
* Props for the DOI_E1.ctypeinv field.
DBSetProp('DOI_E1.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E1.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_E1.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_E1.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_E1.ctypeint field.
DBSetProp('DOI_E1.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_E1.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_E1.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_E1.cdirect field.
DBSetProp('DOI_E1.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_E1.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_E1.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_E1.lflat field.
DBSetProp('DOI_E1.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_E1.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_E1.lflat', 'Field', 'DataType', "L")
* Props for the DOI_E1.ctaxflag field.
DBSetProp('DOI_E1.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_E1.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_E1.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_E1.cprogcode field.
DBSetProp('DOI_E1.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_E1.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_E1.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_E1.interest field.
DBSetProp('DOI_E1.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E1.interest', 'Field', 'UpdateName', 'appdata!wellinv.nintclass1')
DBSetProp('DOI_E1.interest', 'Field', 'Caption', "Expense Class 1 Interest")
DBSetProp('DOI_E1.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_E1.cdeck field.
DBSetProp('DOI_E1.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_E1.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_E1.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_E1.nunits field.
DBSetProp('DOI_E1.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E1.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E1.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_E1.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_E1.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_E2
***************** View setup for DOI_E2 ***************

CREATE SQL VIEW "DOI_E2" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nintclass2 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_E2', 'View', 'UpdateType', 1)
DBSetProp('DOI_E2', 'View', 'WhereType', 3)
DBSetProp('DOI_E2', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_E2', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_E2', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_E2', 'View', 'FetchSize', 100)
DBSetProp('DOI_E2', 'View', 'MaxRecords', -1)
DBSetProp('DOI_E2', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_E2', 'View', 'Prepared', .F.)
DBSetProp('DOI_E2', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_E2', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_E2', 'View', 'Comment', "")
DBSetProp('DOI_E2', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_E2', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_E2', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_E2
* Props for the DOI_E2.cownerid field.
DBSetProp('DOI_E2.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_E2.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_E2.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_E2.cownname field.
DBSetProp('DOI_E2.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_E2.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_E2.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_E2.cidwinv field.
DBSetProp('DOI_E2.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_E2.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E2.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_E2.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_E2.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_E2.lonhold field.
DBSetProp('DOI_E2.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_E2.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_E2.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_E2.ljib field.
DBSetProp('DOI_E2.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_E2.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_E2.ljib', 'Field', 'DataType', "L")
* Props for the DOI_E2.ctypeinv field.
DBSetProp('DOI_E2.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E2.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_E2.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_E2.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_E2.ctypeint field.
DBSetProp('DOI_E2.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_E2.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_E2.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_E2.cdirect field.
DBSetProp('DOI_E2.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_E2.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_E2.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_E2.lflat field.
DBSetProp('DOI_E2.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_E2.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_E2.lflat', 'Field', 'DataType', "L")
* Props for the DOI_E2.ctaxflag field.
DBSetProp('DOI_E2.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_E2.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_E2.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_E2.cprogcode field.
DBSetProp('DOI_E2.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_E2.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_E2.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_E2.interest field.
DBSetProp('DOI_E2.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E2.interest', 'Field', 'UpdateName', 'appdata!wellinv.nintclass2')
DBSetProp('DOI_E2.interest', 'Field', 'Caption', "Expense Class 2 Interest")
DBSetProp('DOI_E2.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_E2.cdeck field.
DBSetProp('DOI_E2.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_E2.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_E2.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_E2.nunits field.
DBSetProp('DOI_E2.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E2.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E2.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_E2.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_E2.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_E3
***************** View setup for DOI_E3 ***************

CREATE SQL VIEW "DOI_E3" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nintclass3 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_E3', 'View', 'UpdateType', 1)
DBSetProp('DOI_E3', 'View', 'WhereType', 3)
DBSetProp('DOI_E3', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_E3', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_E3', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_E3', 'View', 'FetchSize', 100)
DBSetProp('DOI_E3', 'View', 'MaxRecords', -1)
DBSetProp('DOI_E3', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_E3', 'View', 'Prepared', .F.)
DBSetProp('DOI_E3', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_E3', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_E3', 'View', 'Comment', "")
DBSetProp('DOI_E3', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_E3', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_E3', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_E3
* Props for the DOI_E3.cownerid field.
DBSetProp('DOI_E3.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_E3.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_E3.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_E3.cownname field.
DBSetProp('DOI_E3.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_E3.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_E3.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_E3.cidwinv field.
DBSetProp('DOI_E3.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_E3.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E3.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_E3.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_E3.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_E3.lonhold field.
DBSetProp('DOI_E3.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_E3.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_E3.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_E3.ljib field.
DBSetProp('DOI_E3.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_E3.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_E3.ljib', 'Field', 'DataType', "L")
* Props for the DOI_E3.ctypeinv field.
DBSetProp('DOI_E3.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E3.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_E3.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_E3.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_E3.ctypeint field.
DBSetProp('DOI_E3.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_E3.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_E3.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_E3.cdirect field.
DBSetProp('DOI_E3.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_E3.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_E3.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_E3.lflat field.
DBSetProp('DOI_E3.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_E3.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_E3.lflat', 'Field', 'DataType', "L")
* Props for the DOI_E3.ctaxflag field.
DBSetProp('DOI_E3.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_E3.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_E3.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_E3.cprogcode field.
DBSetProp('DOI_E3.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_E3.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_E3.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_E3.interest field.
DBSetProp('DOI_E3.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E3.interest', 'Field', 'UpdateName', 'appdata!wellinv.nintclass3')
DBSetProp('DOI_E3.interest', 'Field', 'Caption', "Expense Class 3 Interest")
DBSetProp('DOI_E3.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_E3.cdeck field.
DBSetProp('DOI_E3.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_E3.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_E3.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_E3.nunits field.
DBSetProp('DOI_E3.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E3.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E3.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_E3.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_E3.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_E4
***************** View setup for DOI_E4 ***************

CREATE SQL VIEW "DOI_E4" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nintclass4 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_E4', 'View', 'UpdateType', 1)
DBSetProp('DOI_E4', 'View', 'WhereType', 3)
DBSetProp('DOI_E4', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_E4', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_E4', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_E4', 'View', 'FetchSize', 100)
DBSetProp('DOI_E4', 'View', 'MaxRecords', -1)
DBSetProp('DOI_E4', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_E4', 'View', 'Prepared', .F.)
DBSetProp('DOI_E4', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_E4', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_E4', 'View', 'Comment', "")
DBSetProp('DOI_E4', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_E4', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_E4', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_E4
* Props for the DOI_E4.cownerid field.
DBSetProp('DOI_E4.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_E4.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_E4.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_E4.cownname field.
DBSetProp('DOI_E4.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_E4.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_E4.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_E4.cidwinv field.
DBSetProp('DOI_E4.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_E4.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E4.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_E4.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_E4.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_E4.lonhold field.
DBSetProp('DOI_E4.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_E4.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_E4.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_E4.ljib field.
DBSetProp('DOI_E4.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_E4.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_E4.ljib', 'Field', 'DataType', "L")
* Props for the DOI_E4.ctypeinv field.
DBSetProp('DOI_E4.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E4.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_E4.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_E4.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_E4.ctypeint field.
DBSetProp('DOI_E4.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_E4.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_E4.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_E4.cdirect field.
DBSetProp('DOI_E4.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_E4.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_E4.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_E4.lflat field.
DBSetProp('DOI_E4.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_E4.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_E4.lflat', 'Field', 'DataType', "L")
* Props for the DOI_E4.ctaxflag field.
DBSetProp('DOI_E4.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_E4.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_E4.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_E4.cprogcode field.
DBSetProp('DOI_E4.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_E4.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_E4.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_E4.interest field.
DBSetProp('DOI_E4.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E4.interest', 'Field', 'UpdateName', 'appdata!wellinv.nintclass4')
DBSetProp('DOI_E4.interest', 'Field', 'Caption', "Expense Class 4 Interest")
DBSetProp('DOI_E4.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_E4.cdeck field.
DBSetProp('DOI_E4.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_E4.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_E4.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_E4.nunits field.
DBSetProp('DOI_E4.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E4.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E4.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_E4.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_E4.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_E5
***************** View setup for DOI_E5 ***************

CREATE SQL VIEW "DOI_E5" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nintclass5 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_E5', 'View', 'UpdateType', 1)
DBSetProp('DOI_E5', 'View', 'WhereType', 3)
DBSetProp('DOI_E5', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_E5', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_E5', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_E5', 'View', 'FetchSize', 100)
DBSetProp('DOI_E5', 'View', 'MaxRecords', -1)
DBSetProp('DOI_E5', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_E5', 'View', 'Prepared', .F.)
DBSetProp('DOI_E5', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_E5', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_E5', 'View', 'Comment', "")
DBSetProp('DOI_E5', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_E5', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_E5', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_E5
* Props for the DOI_E5.cownerid field.
DBSetProp('DOI_E5.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_E5.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_E5.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_E5.cownname field.
DBSetProp('DOI_E5.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_E5.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_E5.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_E5.cidwinv field.
DBSetProp('DOI_E5.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_E5.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E5.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_E5.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_E5.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_E5.lonhold field.
DBSetProp('DOI_E5.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_E5.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_E5.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_E5.ljib field.
DBSetProp('DOI_E5.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_E5.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_E5.ljib', 'Field', 'DataType', "L")
* Props for the DOI_E5.ctypeinv field.
DBSetProp('DOI_E5.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E5.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_E5.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_E5.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_E5.ctypeint field.
DBSetProp('DOI_E5.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_E5.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_E5.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_E5.cdirect field.
DBSetProp('DOI_E5.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_E5.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_E5.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_E5.lflat field.
DBSetProp('DOI_E5.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_E5.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_E5.lflat', 'Field', 'DataType', "L")
* Props for the DOI_E5.ctaxflag field.
DBSetProp('DOI_E5.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_E5.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_E5.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_E5.cprogcode field.
DBSetProp('DOI_E5.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_E5.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_E5.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_E5.interest field.
DBSetProp('DOI_E5.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_E5.interest', 'Field', 'UpdateName', 'appdata!wellinv.nintclass5')
DBSetProp('DOI_E5.interest', 'Field', 'Caption', "Expense Class 5 Interest")
DBSetProp('DOI_E5.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_E5.cdeck field.
DBSetProp('DOI_E5.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_E5.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_E5.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_E5.nunits field.
DBSetProp('DOI_E5.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_E5.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_E5.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_E5.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_E5.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_GR
***************** View setup for DOI_GR ***************

CREATE SQL VIEW "DOI_GR" ; 
   AS SELECT Wellinv.cownerid, Wellinv.cidwinv, Investor.cownname, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevgas AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  Wellinv.ctypeint <> ( "O" ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_GR', 'View', 'UpdateType', 1)
DBSetProp('DOI_GR', 'View', 'WhereType', 3)
DBSetProp('DOI_GR', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_GR', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_GR', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_GR', 'View', 'FetchSize', 100)
DBSetProp('DOI_GR', 'View', 'MaxRecords', -1)
DBSetProp('DOI_GR', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_GR', 'View', 'Prepared', .F.)
DBSetProp('DOI_GR', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_GR', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_GR', 'View', 'Comment', "")
DBSetProp('DOI_GR', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_GR', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_GR', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_GR
* Props for the DOI_GR.cownerid field.
DBSetProp('DOI_GR.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_GR.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_GR.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_GR.cidwinv field.
DBSetProp('DOI_GR.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_GR.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GR.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_GR.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_GR.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_GR.cownname field.
DBSetProp('DOI_GR.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_GR.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_GR.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_GR.lonhold field.
DBSetProp('DOI_GR.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_GR.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_GR.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_GR.ljib field.
DBSetProp('DOI_GR.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_GR.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_GR.ljib', 'Field', 'DataType', "L")
* Props for the DOI_GR.ctypeinv field.
DBSetProp('DOI_GR.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GR.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_GR.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_GR.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_GR.ctypeint field.
DBSetProp('DOI_GR.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_GR.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_GR.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_GR.cdirect field.
DBSetProp('DOI_GR.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_GR.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_GR.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_GR.lflat field.
DBSetProp('DOI_GR.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_GR.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_GR.lflat', 'Field', 'DataType', "L")
* Props for the DOI_GR.ctaxflag field.
DBSetProp('DOI_GR.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_GR.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_GR.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_GR.cprogcode field.
DBSetProp('DOI_GR.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_GR.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_GR.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_GR.interest field.
DBSetProp('DOI_GR.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GR.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevgas')
DBSetProp('DOI_GR.interest', 'Field', 'Caption', "Gas Revenue Interest")
DBSetProp('DOI_GR.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_GR.cdeck field.
DBSetProp('DOI_GR.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_GR.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_GR.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_GR.nunits field.
DBSetProp('DOI_GR.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GR.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GR.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_GR.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_GR.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_GT1
***************** View setup for DOI_GT1 ***************

CREATE SQL VIEW "DOI_GT1" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax2 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_GT1', 'View', 'UpdateType', 1)
DBSetProp('DOI_GT1', 'View', 'WhereType', 3)
DBSetProp('DOI_GT1', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_GT1', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_GT1', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_GT1', 'View', 'FetchSize', 100)
DBSetProp('DOI_GT1', 'View', 'MaxRecords', -1)
DBSetProp('DOI_GT1', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_GT1', 'View', 'Prepared', .F.)
DBSetProp('DOI_GT1', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_GT1', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_GT1', 'View', 'Comment', "")
DBSetProp('DOI_GT1', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_GT1', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_GT1', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_GT1
* Props for the DOI_GT1.cownerid field.
DBSetProp('DOI_GT1.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_GT1.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_GT1.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT1.cownname field.
DBSetProp('DOI_GT1.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_GT1.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_GT1.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_GT1.cidwinv field.
DBSetProp('DOI_GT1.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_GT1.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT1.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_GT1.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_GT1.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_GT1.lonhold field.
DBSetProp('DOI_GT1.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_GT1.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_GT1.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_GT1.ljib field.
DBSetProp('DOI_GT1.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_GT1.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_GT1.ljib', 'Field', 'DataType', "L")
* Props for the DOI_GT1.ctypeinv field.
DBSetProp('DOI_GT1.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT1.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_GT1.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_GT1.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT1.ctypeint field.
DBSetProp('DOI_GT1.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_GT1.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_GT1.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT1.cdirect field.
DBSetProp('DOI_GT1.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_GT1.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_GT1.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT1.lflat field.
DBSetProp('DOI_GT1.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_GT1.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_GT1.lflat', 'Field', 'DataType', "L")
* Props for the DOI_GT1.ctaxflag field.
DBSetProp('DOI_GT1.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_GT1.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_GT1.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT1.cprogcode field.
DBSetProp('DOI_GT1.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_GT1.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_GT1.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT1.interest field.
DBSetProp('DOI_GT1.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT1.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax2')
DBSetProp('DOI_GT1.interest', 'Field', 'Caption', "Gas Tax Interest")
DBSetProp('DOI_GT1.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_GT1.cdeck field.
DBSetProp('DOI_GT1.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_GT1.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_GT1.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT1.nunits field.
DBSetProp('DOI_GT1.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT1.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT1.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_GT1.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_GT1.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_GT2
***************** View setup for DOI_GT2 ***************

CREATE SQL VIEW "DOI_GT2" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax5 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_GT2', 'View', 'UpdateType', 1)
DBSetProp('DOI_GT2', 'View', 'WhereType', 3)
DBSetProp('DOI_GT2', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_GT2', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_GT2', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_GT2', 'View', 'FetchSize', 100)
DBSetProp('DOI_GT2', 'View', 'MaxRecords', -1)
DBSetProp('DOI_GT2', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_GT2', 'View', 'Prepared', .F.)
DBSetProp('DOI_GT2', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_GT2', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_GT2', 'View', 'Comment', "")
DBSetProp('DOI_GT2', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_GT2', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_GT2', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_GT2
* Props for the DOI_GT2.cownerid field.
DBSetProp('DOI_GT2.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_GT2.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_GT2.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT2.cownname field.
DBSetProp('DOI_GT2.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_GT2.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_GT2.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_GT2.cidwinv field.
DBSetProp('DOI_GT2.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_GT2.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT2.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_GT2.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_GT2.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_GT2.lonhold field.
DBSetProp('DOI_GT2.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_GT2.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_GT2.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_GT2.ljib field.
DBSetProp('DOI_GT2.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_GT2.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_GT2.ljib', 'Field', 'DataType', "L")
* Props for the DOI_GT2.ctypeinv field.
DBSetProp('DOI_GT2.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT2.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_GT2.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_GT2.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT2.ctypeint field.
DBSetProp('DOI_GT2.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_GT2.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_GT2.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT2.cdirect field.
DBSetProp('DOI_GT2.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_GT2.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_GT2.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT2.lflat field.
DBSetProp('DOI_GT2.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_GT2.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_GT2.lflat', 'Field', 'DataType', "L")
* Props for the DOI_GT2.ctaxflag field.
DBSetProp('DOI_GT2.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_GT2.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_GT2.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT2.cprogcode field.
DBSetProp('DOI_GT2.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_GT2.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_GT2.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT2.interest field.
DBSetProp('DOI_GT2.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT2.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax5')
DBSetProp('DOI_GT2.interest', 'Field', 'Caption', "Gas Tax 2")
DBSetProp('DOI_GT2.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_GT2.cdeck field.
DBSetProp('DOI_GT2.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_GT2.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_GT2.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT2.nunits field.
DBSetProp('DOI_GT2.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT2.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT2.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_GT2.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_GT2.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_GT3
***************** View setup for DOI_GT3 ***************

CREATE SQL VIEW "DOI_GT3" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax8 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_GT3', 'View', 'UpdateType', 1)
DBSetProp('DOI_GT3', 'View', 'WhereType', 3)
DBSetProp('DOI_GT3', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_GT3', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_GT3', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_GT3', 'View', 'FetchSize', 100)
DBSetProp('DOI_GT3', 'View', 'MaxRecords', -1)
DBSetProp('DOI_GT3', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_GT3', 'View', 'Prepared', .F.)
DBSetProp('DOI_GT3', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_GT3', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_GT3', 'View', 'Comment', "")
DBSetProp('DOI_GT3', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_GT3', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_GT3', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_GT3
* Props for the DOI_GT3.cownerid field.
DBSetProp('DOI_GT3.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_GT3.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_GT3.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT3.cownname field.
DBSetProp('DOI_GT3.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_GT3.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_GT3.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_GT3.cidwinv field.
DBSetProp('DOI_GT3.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_GT3.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT3.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_GT3.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_GT3.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_GT3.lonhold field.
DBSetProp('DOI_GT3.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_GT3.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_GT3.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_GT3.ljib field.
DBSetProp('DOI_GT3.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_GT3.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_GT3.ljib', 'Field', 'DataType', "L")
* Props for the DOI_GT3.ctypeinv field.
DBSetProp('DOI_GT3.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT3.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_GT3.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_GT3.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT3.ctypeint field.
DBSetProp('DOI_GT3.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_GT3.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_GT3.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT3.cdirect field.
DBSetProp('DOI_GT3.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_GT3.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_GT3.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT3.lflat field.
DBSetProp('DOI_GT3.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_GT3.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_GT3.lflat', 'Field', 'DataType', "L")
* Props for the DOI_GT3.ctaxflag field.
DBSetProp('DOI_GT3.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_GT3.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_GT3.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT3.cprogcode field.
DBSetProp('DOI_GT3.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_GT3.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_GT3.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT3.interest field.
DBSetProp('DOI_GT3.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT3.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax8')
DBSetProp('DOI_GT3.interest', 'Field', 'Caption', "Gas Tax 3")
DBSetProp('DOI_GT3.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_GT3.cdeck field.
DBSetProp('DOI_GT3.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_GT3.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_GT3.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT3.nunits field.
DBSetProp('DOI_GT3.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT3.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT3.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_GT3.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_GT3.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_GT4
***************** View setup for DOI_GT4 ***************

CREATE SQL VIEW "DOI_GT4" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax11 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_GT4', 'View', 'UpdateType', 1)
DBSetProp('DOI_GT4', 'View', 'WhereType', 3)
DBSetProp('DOI_GT4', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_GT4', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_GT4', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_GT4', 'View', 'FetchSize', 100)
DBSetProp('DOI_GT4', 'View', 'MaxRecords', -1)
DBSetProp('DOI_GT4', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_GT4', 'View', 'Prepared', .F.)
DBSetProp('DOI_GT4', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_GT4', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_GT4', 'View', 'Comment', "")
DBSetProp('DOI_GT4', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_GT4', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_GT4', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_GT4
* Props for the DOI_GT4.cownerid field.
DBSetProp('DOI_GT4.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_GT4.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_GT4.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT4.cownname field.
DBSetProp('DOI_GT4.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_GT4.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_GT4.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_GT4.cidwinv field.
DBSetProp('DOI_GT4.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_GT4.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT4.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_GT4.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_GT4.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_GT4.lonhold field.
DBSetProp('DOI_GT4.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_GT4.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_GT4.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_GT4.ljib field.
DBSetProp('DOI_GT4.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_GT4.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_GT4.ljib', 'Field', 'DataType', "L")
* Props for the DOI_GT4.ctypeinv field.
DBSetProp('DOI_GT4.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT4.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_GT4.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_GT4.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT4.ctypeint field.
DBSetProp('DOI_GT4.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_GT4.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_GT4.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT4.cdirect field.
DBSetProp('DOI_GT4.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_GT4.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_GT4.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT4.lflat field.
DBSetProp('DOI_GT4.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_GT4.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_GT4.lflat', 'Field', 'DataType', "L")
* Props for the DOI_GT4.ctaxflag field.
DBSetProp('DOI_GT4.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_GT4.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_GT4.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_GT4.cprogcode field.
DBSetProp('DOI_GT4.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_GT4.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_GT4.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT4.interest field.
DBSetProp('DOI_GT4.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_GT4.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax11')
DBSetProp('DOI_GT4.interest', 'Field', 'Caption', "Gas Tax 4")
DBSetProp('DOI_GT4.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_GT4.cdeck field.
DBSetProp('DOI_GT4.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_GT4.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_GT4.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_GT4.nunits field.
DBSetProp('DOI_GT4.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_GT4.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_GT4.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_GT4.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_GT4.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_M1
***************** View setup for DOI_M1 ***************

CREATE SQL VIEW "DOI_M1" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevmisc1 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cwellid = ( ?lcWellID ) ) AND  Wellinv.cownerid = Investor.cownerid ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_M1', 'View', 'UpdateType', 1)
DBSetProp('DOI_M1', 'View', 'WhereType', 3)
DBSetProp('DOI_M1', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_M1', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_M1', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_M1', 'View', 'FetchSize', 100)
DBSetProp('DOI_M1', 'View', 'MaxRecords', -1)
DBSetProp('DOI_M1', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_M1', 'View', 'Prepared', .F.)
DBSetProp('DOI_M1', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_M1', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_M1', 'View', 'Comment', "")
DBSetProp('DOI_M1', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_M1', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_M1', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_M1
* Props for the DOI_M1.cownerid field.
DBSetProp('DOI_M1.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_M1.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_M1.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_M1.cownname field.
DBSetProp('DOI_M1.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_M1.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_M1.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_M1.cidwinv field.
DBSetProp('DOI_M1.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_M1.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_M1.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_M1.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_M1.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_M1.lonhold field.
DBSetProp('DOI_M1.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_M1.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_M1.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_M1.ljib field.
DBSetProp('DOI_M1.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_M1.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_M1.ljib', 'Field', 'DataType', "L")
* Props for the DOI_M1.ctypeinv field.
DBSetProp('DOI_M1.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_M1.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_M1.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_M1.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_M1.ctypeint field.
DBSetProp('DOI_M1.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_M1.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_M1.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_M1.cdirect field.
DBSetProp('DOI_M1.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_M1.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_M1.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_M1.lflat field.
DBSetProp('DOI_M1.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_M1.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_M1.lflat', 'Field', 'DataType', "L")
* Props for the DOI_M1.ctaxflag field.
DBSetProp('DOI_M1.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_M1.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_M1.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_M1.cprogcode field.
DBSetProp('DOI_M1.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_M1.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_M1.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_M1.interest field.
DBSetProp('DOI_M1.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_M1.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevmisc1')
DBSetProp('DOI_M1.interest', 'Field', 'Caption', "Miscellaneous Revenue Interest 1")
DBSetProp('DOI_M1.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_M1.cdeck field.
DBSetProp('DOI_M1.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_M1.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_M1.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_M1.nunits field.
DBSetProp('DOI_M1.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M1.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M1.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_M1.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_M1.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_M2
***************** View setup for DOI_M2 ***************

CREATE SQL VIEW "DOI_M2" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevmisc2 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_M2', 'View', 'UpdateType', 1)
DBSetProp('DOI_M2', 'View', 'WhereType', 3)
DBSetProp('DOI_M2', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_M2', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_M2', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_M2', 'View', 'FetchSize', 100)
DBSetProp('DOI_M2', 'View', 'MaxRecords', -1)
DBSetProp('DOI_M2', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_M2', 'View', 'Prepared', .F.)
DBSetProp('DOI_M2', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_M2', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_M2', 'View', 'Comment', "")
DBSetProp('DOI_M2', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_M2', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_M2', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_M2
* Props for the DOI_M2.cownerid field.
DBSetProp('DOI_M2.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_M2.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_M2.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_M2.cownname field.
DBSetProp('DOI_M2.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_M2.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_M2.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_M2.cidwinv field.
DBSetProp('DOI_M2.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_M2.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_M2.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_M2.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_M2.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_M2.lonhold field.
DBSetProp('DOI_M2.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_M2.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_M2.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_M2.ljib field.
DBSetProp('DOI_M2.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_M2.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_M2.ljib', 'Field', 'DataType', "L")
* Props for the DOI_M2.ctypeinv field.
DBSetProp('DOI_M2.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_M2.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_M2.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_M2.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_M2.ctypeint field.
DBSetProp('DOI_M2.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_M2.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_M2.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_M2.cdirect field.
DBSetProp('DOI_M2.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_M2.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_M2.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_M2.lflat field.
DBSetProp('DOI_M2.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_M2.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_M2.lflat', 'Field', 'DataType', "L")
* Props for the DOI_M2.ctaxflag field.
DBSetProp('DOI_M2.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_M2.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_M2.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_M2.cprogcode field.
DBSetProp('DOI_M2.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_M2.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_M2.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_M2.interest field.
DBSetProp('DOI_M2.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_M2.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevmisc2')
DBSetProp('DOI_M2.interest', 'Field', 'Caption', "Miscellaneous Revenue Interest 2")
DBSetProp('DOI_M2.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_M2.cdeck field.
DBSetProp('DOI_M2.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_M2.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_M2.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_M2.nunits field.
DBSetProp('DOI_M2.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_M2.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_M2.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_M2.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_M2.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_OP
***************** View setup for DOI_OP ***************

CREATE SQL VIEW "DOI_OP" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevoth AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_OP', 'View', 'UpdateType', 1)
DBSetProp('DOI_OP', 'View', 'WhereType', 3)
DBSetProp('DOI_OP', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_OP', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_OP', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_OP', 'View', 'FetchSize', 100)
DBSetProp('DOI_OP', 'View', 'MaxRecords', -1)
DBSetProp('DOI_OP', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_OP', 'View', 'Prepared', .F.)
DBSetProp('DOI_OP', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_OP', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_OP', 'View', 'Comment', "")
DBSetProp('DOI_OP', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_OP', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_OP', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_OP
* Props for the DOI_OP.cownerid field.
DBSetProp('DOI_OP.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_OP.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_OP.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_OP.cownname field.
DBSetProp('DOI_OP.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_OP.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_OP.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_OP.cidwinv field.
DBSetProp('DOI_OP.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_OP.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OP.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_OP.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_OP.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_OP.lonhold field.
DBSetProp('DOI_OP.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_OP.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_OP.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_OP.ljib field.
DBSetProp('DOI_OP.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_OP.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_OP.ljib', 'Field', 'DataType', "L")
* Props for the DOI_OP.ctypeinv field.
DBSetProp('DOI_OP.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OP.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_OP.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_OP.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_OP.ctypeint field.
DBSetProp('DOI_OP.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_OP.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_OP.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_OP.cdirect field.
DBSetProp('DOI_OP.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_OP.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_OP.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_OP.lflat field.
DBSetProp('DOI_OP.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_OP.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_OP.lflat', 'Field', 'DataType', "L")
* Props for the DOI_OP.ctaxflag field.
DBSetProp('DOI_OP.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_OP.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_OP.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_OP.cprogcode field.
DBSetProp('DOI_OP.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_OP.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_OP.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_OP.interest field.
DBSetProp('DOI_OP.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OP.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevoth')
DBSetProp('DOI_OP.interest', 'Field', 'Caption', "Other Revenue Pct")
DBSetProp('DOI_OP.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OP.cdeck field.
DBSetProp('DOI_OP.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_OP.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_OP.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_OP.nunits field.
DBSetProp('DOI_OP.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OP.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OP.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_OP.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_OP.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_OR
***************** View setup for DOI_OR ***************

CREATE SQL VIEW "DOI_OR" ; 
   AS SELECT Wellinv.cownerid, Wellinv.cidwinv, Investor.cownname, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevoil AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( (  Wellinv.cwellid = ( ?lcWellID ) AND  Wellinv.cownerid = Investor.cownerid ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.ctypeint <> ( "G" ) ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_OR', 'View', 'UpdateType', 1)
DBSetProp('DOI_OR', 'View', 'WhereType', 3)
DBSetProp('DOI_OR', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_OR', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_OR', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_OR', 'View', 'FetchSize', 100)
DBSetProp('DOI_OR', 'View', 'MaxRecords', -1)
DBSetProp('DOI_OR', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_OR', 'View', 'Prepared', .F.)
DBSetProp('DOI_OR', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_OR', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_OR', 'View', 'Comment', "")
DBSetProp('DOI_OR', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_OR', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_OR', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_OR
* Props for the DOI_OR.cownerid field.
DBSetProp('DOI_OR.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_OR.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_OR.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_OR.cidwinv field.
DBSetProp('DOI_OR.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_OR.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OR.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_OR.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_OR.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_OR.cownname field.
DBSetProp('DOI_OR.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_OR.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_OR.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_OR.lonhold field.
DBSetProp('DOI_OR.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_OR.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_OR.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_OR.ljib field.
DBSetProp('DOI_OR.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_OR.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_OR.ljib', 'Field', 'DataType', "L")
* Props for the DOI_OR.ctypeinv field.
DBSetProp('DOI_OR.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OR.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_OR.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_OR.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_OR.ctypeint field.
DBSetProp('DOI_OR.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_OR.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_OR.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_OR.cdirect field.
DBSetProp('DOI_OR.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_OR.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_OR.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_OR.lflat field.
DBSetProp('DOI_OR.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_OR.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_OR.lflat', 'Field', 'DataType', "L")
* Props for the DOI_OR.ctaxflag field.
DBSetProp('DOI_OR.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_OR.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_OR.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_OR.cprogcode field.
DBSetProp('DOI_OR.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_OR.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_OR.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_OR.interest field.
DBSetProp('DOI_OR.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OR.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevoil')
DBSetProp('DOI_OR.interest', 'Field', 'Caption', "Oil Revenue Interest")
DBSetProp('DOI_OR.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OR.cdeck field.
DBSetProp('DOI_OR.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_OR.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_OR.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_OR.nunits field.
DBSetProp('DOI_OR.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OR.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OR.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_OR.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_OR.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_OT1
***************** View setup for DOI_OT1 ***************

CREATE SQL VIEW "DOI_OT1" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax1 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_OT1', 'View', 'UpdateType', 1)
DBSetProp('DOI_OT1', 'View', 'WhereType', 3)
DBSetProp('DOI_OT1', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_OT1', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_OT1', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_OT1', 'View', 'FetchSize', 100)
DBSetProp('DOI_OT1', 'View', 'MaxRecords', -1)
DBSetProp('DOI_OT1', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_OT1', 'View', 'Prepared', .F.)
DBSetProp('DOI_OT1', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_OT1', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_OT1', 'View', 'Comment', "")
DBSetProp('DOI_OT1', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_OT1', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_OT1', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_OT1
* Props for the DOI_OT1.cownerid field.
DBSetProp('DOI_OT1.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_OT1.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_OT1.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT1.cownname field.
DBSetProp('DOI_OT1.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_OT1.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_OT1.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_OT1.cidwinv field.
DBSetProp('DOI_OT1.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_OT1.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT1.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_OT1.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_OT1.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_OT1.lonhold field.
DBSetProp('DOI_OT1.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_OT1.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_OT1.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_OT1.ljib field.
DBSetProp('DOI_OT1.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_OT1.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_OT1.ljib', 'Field', 'DataType', "L")
* Props for the DOI_OT1.ctypeinv field.
DBSetProp('DOI_OT1.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT1.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_OT1.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_OT1.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT1.ctypeint field.
DBSetProp('DOI_OT1.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_OT1.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_OT1.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT1.cdirect field.
DBSetProp('DOI_OT1.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_OT1.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_OT1.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT1.lflat field.
DBSetProp('DOI_OT1.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_OT1.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_OT1.lflat', 'Field', 'DataType', "L")
* Props for the DOI_OT1.ctaxflag field.
DBSetProp('DOI_OT1.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_OT1.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_OT1.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT1.cprogcode field.
DBSetProp('DOI_OT1.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_OT1.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_OT1.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT1.interest field.
DBSetProp('DOI_OT1.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT1.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax1')
DBSetProp('DOI_OT1.interest', 'Field', 'Caption', "Oil Tax Interest")
DBSetProp('DOI_OT1.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OT1.cdeck field.
DBSetProp('DOI_OT1.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_OT1.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_OT1.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT1.nunits field.
DBSetProp('DOI_OT1.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT1.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT1.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_OT1.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_OT1.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_OT2
***************** View setup for DOI_OT2 ***************

CREATE SQL VIEW "DOI_OT2" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax4 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_OT2', 'View', 'UpdateType', 1)
DBSetProp('DOI_OT2', 'View', 'WhereType', 3)
DBSetProp('DOI_OT2', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_OT2', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_OT2', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_OT2', 'View', 'FetchSize', 100)
DBSetProp('DOI_OT2', 'View', 'MaxRecords', -1)
DBSetProp('DOI_OT2', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_OT2', 'View', 'Prepared', .F.)
DBSetProp('DOI_OT2', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_OT2', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_OT2', 'View', 'Comment', "")
DBSetProp('DOI_OT2', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_OT2', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_OT2', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_OT2
* Props for the DOI_OT2.cownerid field.
DBSetProp('DOI_OT2.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_OT2.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_OT2.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT2.cownname field.
DBSetProp('DOI_OT2.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_OT2.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_OT2.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_OT2.cidwinv field.
DBSetProp('DOI_OT2.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_OT2.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT2.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_OT2.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_OT2.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_OT2.lonhold field.
DBSetProp('DOI_OT2.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_OT2.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_OT2.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_OT2.ljib field.
DBSetProp('DOI_OT2.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_OT2.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_OT2.ljib', 'Field', 'DataType', "L")
* Props for the DOI_OT2.ctypeinv field.
DBSetProp('DOI_OT2.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT2.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_OT2.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_OT2.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT2.ctypeint field.
DBSetProp('DOI_OT2.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_OT2.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_OT2.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT2.cdirect field.
DBSetProp('DOI_OT2.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_OT2.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_OT2.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT2.lflat field.
DBSetProp('DOI_OT2.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_OT2.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_OT2.lflat', 'Field', 'DataType', "L")
* Props for the DOI_OT2.ctaxflag field.
DBSetProp('DOI_OT2.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_OT2.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_OT2.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT2.cprogcode field.
DBSetProp('DOI_OT2.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_OT2.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_OT2.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT2.interest field.
DBSetProp('DOI_OT2.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT2.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax4')
DBSetProp('DOI_OT2.interest', 'Field', 'Caption', "Oil Tax 2")
DBSetProp('DOI_OT2.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OT2.cdeck field.
DBSetProp('DOI_OT2.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_OT2.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_OT2.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT2.nunits field.
DBSetProp('DOI_OT2.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT2.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT2.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_OT2.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_OT2.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_OT3
***************** View setup for DOI_OT3 ***************

CREATE SQL VIEW "DOI_OT3" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax7 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_OT3', 'View', 'UpdateType', 1)
DBSetProp('DOI_OT3', 'View', 'WhereType', 3)
DBSetProp('DOI_OT3', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_OT3', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_OT3', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_OT3', 'View', 'FetchSize', 100)
DBSetProp('DOI_OT3', 'View', 'MaxRecords', -1)
DBSetProp('DOI_OT3', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_OT3', 'View', 'Prepared', .F.)
DBSetProp('DOI_OT3', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_OT3', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_OT3', 'View', 'Comment', "")
DBSetProp('DOI_OT3', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_OT3', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_OT3', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_OT3
* Props for the DOI_OT3.cownerid field.
DBSetProp('DOI_OT3.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_OT3.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_OT3.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT3.cownname field.
DBSetProp('DOI_OT3.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_OT3.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_OT3.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_OT3.cidwinv field.
DBSetProp('DOI_OT3.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_OT3.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT3.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_OT3.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_OT3.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_OT3.lonhold field.
DBSetProp('DOI_OT3.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_OT3.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_OT3.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_OT3.ljib field.
DBSetProp('DOI_OT3.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_OT3.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_OT3.ljib', 'Field', 'DataType', "L")
* Props for the DOI_OT3.ctypeinv field.
DBSetProp('DOI_OT3.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT3.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_OT3.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_OT3.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT3.ctypeint field.
DBSetProp('DOI_OT3.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_OT3.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_OT3.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT3.cdirect field.
DBSetProp('DOI_OT3.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_OT3.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_OT3.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT3.lflat field.
DBSetProp('DOI_OT3.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_OT3.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_OT3.lflat', 'Field', 'DataType', "L")
* Props for the DOI_OT3.ctaxflag field.
DBSetProp('DOI_OT3.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_OT3.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_OT3.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT3.cprogcode field.
DBSetProp('DOI_OT3.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_OT3.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_OT3.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT3.interest field.
DBSetProp('DOI_OT3.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT3.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax7')
DBSetProp('DOI_OT3.interest', 'Field', 'Caption', "Oil Tax 3")
DBSetProp('DOI_OT3.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OT3.cdeck field.
DBSetProp('DOI_OT3.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_OT3.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_OT3.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT3.nunits field.
DBSetProp('DOI_OT3.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT3.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT3.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_OT3.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_OT3.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_OT4
***************** View setup for DOI_OT4 ***************

CREATE SQL VIEW "DOI_OT4" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax10 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_OT4', 'View', 'UpdateType', 1)
DBSetProp('DOI_OT4', 'View', 'WhereType', 3)
DBSetProp('DOI_OT4', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_OT4', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_OT4', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_OT4', 'View', 'FetchSize', 100)
DBSetProp('DOI_OT4', 'View', 'MaxRecords', -1)
DBSetProp('DOI_OT4', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_OT4', 'View', 'Prepared', .F.)
DBSetProp('DOI_OT4', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_OT4', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_OT4', 'View', 'Comment', "")
DBSetProp('DOI_OT4', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_OT4', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_OT4', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_OT4
* Props for the DOI_OT4.cownerid field.
DBSetProp('DOI_OT4.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_OT4.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_OT4.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT4.cownname field.
DBSetProp('DOI_OT4.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_OT4.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_OT4.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_OT4.cidwinv field.
DBSetProp('DOI_OT4.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_OT4.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT4.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_OT4.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_OT4.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_OT4.lonhold field.
DBSetProp('DOI_OT4.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_OT4.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_OT4.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_OT4.ljib field.
DBSetProp('DOI_OT4.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_OT4.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_OT4.ljib', 'Field', 'DataType', "L")
* Props for the DOI_OT4.ctypeinv field.
DBSetProp('DOI_OT4.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT4.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_OT4.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_OT4.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT4.ctypeint field.
DBSetProp('DOI_OT4.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_OT4.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_OT4.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT4.cdirect field.
DBSetProp('DOI_OT4.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_OT4.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_OT4.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT4.lflat field.
DBSetProp('DOI_OT4.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_OT4.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_OT4.lflat', 'Field', 'DataType', "L")
* Props for the DOI_OT4.ctaxflag field.
DBSetProp('DOI_OT4.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_OT4.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_OT4.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_OT4.cprogcode field.
DBSetProp('DOI_OT4.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_OT4.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_OT4.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT4.interest field.
DBSetProp('DOI_OT4.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OT4.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax10')
DBSetProp('DOI_OT4.interest', 'Field', 'Caption', "Oil Tax 4")
DBSetProp('DOI_OT4.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OT4.cdeck field.
DBSetProp('DOI_OT4.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_OT4.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_OT4.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_OT4.nunits field.
DBSetProp('DOI_OT4.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OT4.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OT4.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_OT4.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_OT4.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_OWN
***************** View setup for DOI_OWN ***************

CREATE SQL VIEW "DOI_OWN" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nintclass1, Wellinv.nintclass2, Wellinv.nintclass3, Wellinv.nintclass4, Wellinv.nintclass5, Wellinv.nrevoil, Wellinv.nrevgas, Wellinv.nrevtrp, Wellinv.nrevmisc1, Wellinv.nrevmisc2, Wellinv.nrevtax1, Wellinv.nrevtax2, Wellinv.nacpint, Wellinv.nbcpint, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( (  Wellinv.cwellid = ( ?lcWellID ) AND  Wellinv.cownerid = Investor.cownerid ) AND  Wellinv.cownerid = ( ?lcOwnerID ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_OWN', 'View', 'UpdateType', 1)
DBSetProp('DOI_OWN', 'View', 'WhereType', 3)
DBSetProp('DOI_OWN', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_OWN', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_OWN', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_OWN', 'View', 'FetchSize', 100)
DBSetProp('DOI_OWN', 'View', 'MaxRecords', -1)
DBSetProp('DOI_OWN', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_OWN', 'View', 'Prepared', .F.)
DBSetProp('DOI_OWN', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_OWN', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_OWN', 'View', 'Comment', "")
DBSetProp('DOI_OWN', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_OWN', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_OWN', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_OWN
* Props for the DOI_OWN.cownerid field.
DBSetProp('DOI_OWN.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_OWN.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_OWN.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_OWN.cownname field.
DBSetProp('DOI_OWN.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_OWN.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_OWN.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_OWN.cidwinv field.
DBSetProp('DOI_OWN.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_OWN.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OWN.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_OWN.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_OWN.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_OWN.lonhold field.
DBSetProp('DOI_OWN.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_OWN.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_OWN.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_OWN.ljib field.
DBSetProp('DOI_OWN.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_OWN.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_OWN.ljib', 'Field', 'DataType', "L")
* Props for the DOI_OWN.ctypeinv field.
DBSetProp('DOI_OWN.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_OWN.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_OWN.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_OWN.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_OWN.ctypeint field.
DBSetProp('DOI_OWN.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_OWN.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_OWN.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_OWN.cdirect field.
DBSetProp('DOI_OWN.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_OWN.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_OWN.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_OWN.lflat field.
DBSetProp('DOI_OWN.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_OWN.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_OWN.lflat', 'Field', 'DataType', "L")
* Props for the DOI_OWN.ctaxflag field.
DBSetProp('DOI_OWN.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_OWN.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_OWN.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_OWN.cprogcode field.
DBSetProp('DOI_OWN.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_OWN.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_OWN.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_OWN.nintclass1 field.
DBSetProp('DOI_OWN.nintclass1', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nintclass1', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nintclass1', 'Field', 'UpdateName', 'appdata!wellinv.nintclass1')
DBSetProp('DOI_OWN.nintclass1', 'Field', 'Caption', "Expense Class 1 Interest")
DBSetProp('DOI_OWN.nintclass1', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nintclass2 field.
DBSetProp('DOI_OWN.nintclass2', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nintclass2', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nintclass2', 'Field', 'UpdateName', 'appdata!wellinv.nintclass2')
DBSetProp('DOI_OWN.nintclass2', 'Field', 'Caption', "Expense Class 2 Interest")
DBSetProp('DOI_OWN.nintclass2', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nintclass3 field.
DBSetProp('DOI_OWN.nintclass3', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nintclass3', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nintclass3', 'Field', 'UpdateName', 'appdata!wellinv.nintclass3')
DBSetProp('DOI_OWN.nintclass3', 'Field', 'Caption', "Expense Class 3 Interest")
DBSetProp('DOI_OWN.nintclass3', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nintclass4 field.
DBSetProp('DOI_OWN.nintclass4', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nintclass4', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nintclass4', 'Field', 'UpdateName', 'appdata!wellinv.nintclass4')
DBSetProp('DOI_OWN.nintclass4', 'Field', 'Caption', "Expense Class 4 Interest")
DBSetProp('DOI_OWN.nintclass4', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nintclass5 field.
DBSetProp('DOI_OWN.nintclass5', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nintclass5', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nintclass5', 'Field', 'UpdateName', 'appdata!wellinv.nintclass5')
DBSetProp('DOI_OWN.nintclass5', 'Field', 'Caption', "Expense Class 5 Interest")
DBSetProp('DOI_OWN.nintclass5', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nrevoil field.
DBSetProp('DOI_OWN.nrevoil', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nrevoil', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nrevoil', 'Field', 'UpdateName', 'appdata!wellinv.nrevoil')
DBSetProp('DOI_OWN.nrevoil', 'Field', 'Caption', "Oil Revenue Interest")
DBSetProp('DOI_OWN.nrevoil', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nrevgas field.
DBSetProp('DOI_OWN.nrevgas', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nrevgas', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nrevgas', 'Field', 'UpdateName', 'appdata!wellinv.nrevgas')
DBSetProp('DOI_OWN.nrevgas', 'Field', 'Caption', "Gas Revenue Interest")
DBSetProp('DOI_OWN.nrevgas', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nrevtrp field.
DBSetProp('DOI_OWN.nrevtrp', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nrevtrp', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nrevtrp', 'Field', 'UpdateName', 'appdata!wellinv.nrevtrp')
DBSetProp('DOI_OWN.nrevtrp', 'Field', 'Caption', "Transportation Revenue Interest")
DBSetProp('DOI_OWN.nrevtrp', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nrevmisc1 field.
DBSetProp('DOI_OWN.nrevmisc1', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nrevmisc1', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nrevmisc1', 'Field', 'UpdateName', 'appdata!wellinv.nrevmisc1')
DBSetProp('DOI_OWN.nrevmisc1', 'Field', 'Caption', "Miscellaneous Revenue Interest 1")
DBSetProp('DOI_OWN.nrevmisc1', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nrevmisc2 field.
DBSetProp('DOI_OWN.nrevmisc2', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nrevmisc2', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nrevmisc2', 'Field', 'UpdateName', 'appdata!wellinv.nrevmisc2')
DBSetProp('DOI_OWN.nrevmisc2', 'Field', 'Caption', "Miscellaneous Revenue Interest 2")
DBSetProp('DOI_OWN.nrevmisc2', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nrevtax1 field.
DBSetProp('DOI_OWN.nrevtax1', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nrevtax1', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nrevtax1', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax1')
DBSetProp('DOI_OWN.nrevtax1', 'Field', 'Caption', "Oil Tax Interest")
DBSetProp('DOI_OWN.nrevtax1', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nrevtax2 field.
DBSetProp('DOI_OWN.nrevtax2', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nrevtax2', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nrevtax2', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax2')
DBSetProp('DOI_OWN.nrevtax2', 'Field', 'Caption', "Gas Tax Interest")
DBSetProp('DOI_OWN.nrevtax2', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nacpint field.
DBSetProp('DOI_OWN.nacpint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nacpint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nacpint', 'Field', 'UpdateName', 'appdata!wellinv.nacpint')
DBSetProp('DOI_OWN.nacpint', 'Field', 'Caption', "After Casing Point Interest")
DBSetProp('DOI_OWN.nacpint', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.nbcpint field.
DBSetProp('DOI_OWN.nbcpint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nbcpint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nbcpint', 'Field', 'UpdateName', 'appdata!wellinv.nbcpint')
DBSetProp('DOI_OWN.nbcpint', 'Field', 'Caption', "Before Casing Point Interest")
DBSetProp('DOI_OWN.nbcpint', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_OWN.cdeck field.
DBSetProp('DOI_OWN.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_OWN.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_OWN.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_OWN.nunits field.
DBSetProp('DOI_OWN.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_OWN.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_OWN.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_OWN.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_OWN.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_PLG
***************** View setup for DOI_PLG ***************

CREATE SQL VIEW "DOI_PLG" ; 
   AS SELECT Wellinv.cownerid, Wellinv.cidwinv, Investor.cownname, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nplugpct AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_PLG', 'View', 'UpdateType', 1)
DBSetProp('DOI_PLG', 'View', 'WhereType', 3)
DBSetProp('DOI_PLG', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_PLG', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_PLG', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_PLG', 'View', 'FetchSize', 100)
DBSetProp('DOI_PLG', 'View', 'MaxRecords', -1)
DBSetProp('DOI_PLG', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_PLG', 'View', 'Prepared', .F.)
DBSetProp('DOI_PLG', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_PLG', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_PLG', 'View', 'Comment', "")
DBSetProp('DOI_PLG', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_PLG', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_PLG', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_PLG
* Props for the DOI_PLG.cownerid field.
DBSetProp('DOI_PLG.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_PLG.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_PLG.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_PLG.cidwinv field.
DBSetProp('DOI_PLG.cidwinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.cidwinv', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_PLG.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_PLG.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_PLG.cownname field.
DBSetProp('DOI_PLG.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_PLG.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_PLG.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_PLG.lonhold field.
DBSetProp('DOI_PLG.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_PLG.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_PLG.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_PLG.ljib field.
DBSetProp('DOI_PLG.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_PLG.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_PLG.ljib', 'Field', 'DataType', "L")
* Props for the DOI_PLG.ctypeinv field.
DBSetProp('DOI_PLG.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PLG.ctypeinv', 'Field', 'UpdateName', 'WELLINV.ctypeinv')
DBSetProp('DOI_PLG.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_PLG.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_PLG.ctypeint field.
DBSetProp('DOI_PLG.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_PLG.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_PLG.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_PLG.cdirect field.
DBSetProp('DOI_PLG.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_PLG.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_PLG.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_PLG.lflat field.
DBSetProp('DOI_PLG.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_PLG.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_PLG.lflat', 'Field', 'DataType', "L")
* Props for the DOI_PLG.ctaxflag field.
DBSetProp('DOI_PLG.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_PLG.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_PLG.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_PLG.cprogcode field.
DBSetProp('DOI_PLG.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_PLG.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_PLG.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_PLG.interest field.
DBSetProp('DOI_PLG.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.interest', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.interest', 'Field', 'UpdateName', 'appdata!wellinv.nplugpct')
DBSetProp('DOI_PLG.interest', 'Field', 'Caption', "Plugging Pct")
DBSetProp('DOI_PLG.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_PLG.cdeck field.
DBSetProp('DOI_PLG.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_PLG.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_PLG.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_PLG.nunits field.
DBSetProp('DOI_PLG.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PLG.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PLG.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_PLG.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_PLG.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_PT1
***************** View setup for DOI_PT1 ***************

CREATE SQL VIEW "DOI_PT1" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax3 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_PT1', 'View', 'UpdateType', 1)
DBSetProp('DOI_PT1', 'View', 'WhereType', 3)
DBSetProp('DOI_PT1', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_PT1', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_PT1', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_PT1', 'View', 'FetchSize', 100)
DBSetProp('DOI_PT1', 'View', 'MaxRecords', -1)
DBSetProp('DOI_PT1', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_PT1', 'View', 'Prepared', .F.)
DBSetProp('DOI_PT1', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_PT1', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_PT1', 'View', 'Comment', "")
DBSetProp('DOI_PT1', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_PT1', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_PT1', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_PT1
* Props for the DOI_PT1.cownerid field.
DBSetProp('DOI_PT1.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_PT1.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_PT1.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT1.cownname field.
DBSetProp('DOI_PT1.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_PT1.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_PT1.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_PT1.cidwinv field.
DBSetProp('DOI_PT1.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_PT1.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT1.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_PT1.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_PT1.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_PT1.lonhold field.
DBSetProp('DOI_PT1.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_PT1.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_PT1.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_PT1.ljib field.
DBSetProp('DOI_PT1.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_PT1.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_PT1.ljib', 'Field', 'DataType', "L")
* Props for the DOI_PT1.ctypeinv field.
DBSetProp('DOI_PT1.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT1.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_PT1.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_PT1.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT1.ctypeint field.
DBSetProp('DOI_PT1.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_PT1.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_PT1.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT1.cdirect field.
DBSetProp('DOI_PT1.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_PT1.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_PT1.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT1.lflat field.
DBSetProp('DOI_PT1.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_PT1.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_PT1.lflat', 'Field', 'DataType', "L")
* Props for the DOI_PT1.ctaxflag field.
DBSetProp('DOI_PT1.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_PT1.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_PT1.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT1.cprogcode field.
DBSetProp('DOI_PT1.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_PT1.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_PT1.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT1.interest field.
DBSetProp('DOI_PT1.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT1.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax3')
DBSetProp('DOI_PT1.interest', 'Field', 'Caption', "Other Tax 1")
DBSetProp('DOI_PT1.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_PT1.cdeck field.
DBSetProp('DOI_PT1.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_PT1.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_PT1.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT1.nunits field.
DBSetProp('DOI_PT1.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT1.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT1.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_PT1.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_PT1.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_PT2
***************** View setup for DOI_PT2 ***************

CREATE SQL VIEW "DOI_PT2" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax6 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_PT2', 'View', 'UpdateType', 1)
DBSetProp('DOI_PT2', 'View', 'WhereType', 3)
DBSetProp('DOI_PT2', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_PT2', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_PT2', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_PT2', 'View', 'FetchSize', 100)
DBSetProp('DOI_PT2', 'View', 'MaxRecords', -1)
DBSetProp('DOI_PT2', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_PT2', 'View', 'Prepared', .F.)
DBSetProp('DOI_PT2', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_PT2', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_PT2', 'View', 'Comment', "")
DBSetProp('DOI_PT2', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_PT2', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_PT2', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_PT2
* Props for the DOI_PT2.cownerid field.
DBSetProp('DOI_PT2.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_PT2.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_PT2.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT2.cownname field.
DBSetProp('DOI_PT2.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_PT2.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_PT2.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_PT2.cidwinv field.
DBSetProp('DOI_PT2.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_PT2.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT2.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_PT2.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_PT2.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_PT2.lonhold field.
DBSetProp('DOI_PT2.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_PT2.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_PT2.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_PT2.ljib field.
DBSetProp('DOI_PT2.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_PT2.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_PT2.ljib', 'Field', 'DataType', "L")
* Props for the DOI_PT2.ctypeinv field.
DBSetProp('DOI_PT2.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT2.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_PT2.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_PT2.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT2.ctypeint field.
DBSetProp('DOI_PT2.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_PT2.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_PT2.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT2.cdirect field.
DBSetProp('DOI_PT2.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_PT2.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_PT2.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT2.lflat field.
DBSetProp('DOI_PT2.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_PT2.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_PT2.lflat', 'Field', 'DataType', "L")
* Props for the DOI_PT2.ctaxflag field.
DBSetProp('DOI_PT2.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_PT2.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_PT2.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT2.cprogcode field.
DBSetProp('DOI_PT2.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_PT2.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_PT2.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT2.interest field.
DBSetProp('DOI_PT2.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT2.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax6')
DBSetProp('DOI_PT2.interest', 'Field', 'Caption', "Other Tax 2")
DBSetProp('DOI_PT2.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_PT2.cdeck field.
DBSetProp('DOI_PT2.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_PT2.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_PT2.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT2.nunits field.
DBSetProp('DOI_PT2.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT2.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT2.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_PT2.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_PT2.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_PT3
***************** View setup for DOI_PT3 ***************

CREATE SQL VIEW "DOI_PT3" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax9 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_PT3', 'View', 'UpdateType', 1)
DBSetProp('DOI_PT3', 'View', 'WhereType', 3)
DBSetProp('DOI_PT3', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_PT3', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_PT3', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_PT3', 'View', 'FetchSize', 100)
DBSetProp('DOI_PT3', 'View', 'MaxRecords', -1)
DBSetProp('DOI_PT3', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_PT3', 'View', 'Prepared', .F.)
DBSetProp('DOI_PT3', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_PT3', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_PT3', 'View', 'Comment', "")
DBSetProp('DOI_PT3', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_PT3', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_PT3', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_PT3
* Props for the DOI_PT3.cownerid field.
DBSetProp('DOI_PT3.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_PT3.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_PT3.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT3.cownname field.
DBSetProp('DOI_PT3.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_PT3.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_PT3.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_PT3.cidwinv field.
DBSetProp('DOI_PT3.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_PT3.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT3.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_PT3.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_PT3.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_PT3.lonhold field.
DBSetProp('DOI_PT3.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_PT3.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_PT3.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_PT3.ljib field.
DBSetProp('DOI_PT3.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_PT3.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_PT3.ljib', 'Field', 'DataType', "L")
* Props for the DOI_PT3.ctypeinv field.
DBSetProp('DOI_PT3.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT3.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_PT3.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_PT3.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT3.ctypeint field.
DBSetProp('DOI_PT3.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_PT3.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_PT3.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT3.cdirect field.
DBSetProp('DOI_PT3.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_PT3.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_PT3.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT3.lflat field.
DBSetProp('DOI_PT3.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_PT3.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_PT3.lflat', 'Field', 'DataType', "L")
* Props for the DOI_PT3.ctaxflag field.
DBSetProp('DOI_PT3.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_PT3.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_PT3.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT3.cprogcode field.
DBSetProp('DOI_PT3.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_PT3.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_PT3.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT3.interest field.
DBSetProp('DOI_PT3.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT3.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax9')
DBSetProp('DOI_PT3.interest', 'Field', 'Caption', "Other Tax 3")
DBSetProp('DOI_PT3.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_PT3.cdeck field.
DBSetProp('DOI_PT3.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_PT3.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_PT3.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT3.nunits field.
DBSetProp('DOI_PT3.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT3.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT3.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_PT3.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_PT3.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_PT4
***************** View setup for DOI_PT4 ***************

CREATE SQL VIEW "DOI_PT4" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.cidwinv, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtax12 AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE ( (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cwellid = ( ?lcWellID ) ) AND  Wellinv.cownerid = Investor.cownerid ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_PT4', 'View', 'UpdateType', 1)
DBSetProp('DOI_PT4', 'View', 'WhereType', 3)
DBSetProp('DOI_PT4', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_PT4', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_PT4', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_PT4', 'View', 'FetchSize', 100)
DBSetProp('DOI_PT4', 'View', 'MaxRecords', -1)
DBSetProp('DOI_PT4', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_PT4', 'View', 'Prepared', .F.)
DBSetProp('DOI_PT4', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_PT4', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_PT4', 'View', 'Comment', "")
DBSetProp('DOI_PT4', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_PT4', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_PT4', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_PT4
* Props for the DOI_PT4.cownerid field.
DBSetProp('DOI_PT4.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_PT4.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_PT4.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT4.cownname field.
DBSetProp('DOI_PT4.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_PT4.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_PT4.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_PT4.cidwinv field.
DBSetProp('DOI_PT4.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_PT4.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT4.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_PT4.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_PT4.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_PT4.lonhold field.
DBSetProp('DOI_PT4.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_PT4.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_PT4.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_PT4.ljib field.
DBSetProp('DOI_PT4.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_PT4.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_PT4.ljib', 'Field', 'DataType', "L")
* Props for the DOI_PT4.ctypeinv field.
DBSetProp('DOI_PT4.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT4.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_PT4.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_PT4.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT4.ctypeint field.
DBSetProp('DOI_PT4.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_PT4.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_PT4.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT4.cdirect field.
DBSetProp('DOI_PT4.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_PT4.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_PT4.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT4.lflat field.
DBSetProp('DOI_PT4.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_PT4.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_PT4.lflat', 'Field', 'DataType', "L")
* Props for the DOI_PT4.ctaxflag field.
DBSetProp('DOI_PT4.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_PT4.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_PT4.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_PT4.cprogcode field.
DBSetProp('DOI_PT4.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_PT4.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_PT4.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT4.interest field.
DBSetProp('DOI_PT4.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_PT4.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtax12')
DBSetProp('DOI_PT4.interest', 'Field', 'Caption', "Other Tax 4")
DBSetProp('DOI_PT4.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_PT4.cdeck field.
DBSetProp('DOI_PT4.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_PT4.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_PT4.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_PT4.nunits field.
DBSetProp('DOI_PT4.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_PT4.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_PT4.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_PT4.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_PT4.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_DOI_TR
***************** View setup for DOI_TR ***************

CREATE SQL VIEW "DOI_TR" ; 
   AS SELECT Wellinv.cownerid, Wellinv.cidwinv, Investor.cownname, Wellinv.lonhold, Wellinv.ljib, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.ctypeint, Wellinv.cdirect, Wellinv.lflat, Wellinv.ctaxflag, Wellinv.cprogcode, Wellinv.nrevtrp AS interest, Wellinv.cdeck, Wellinv.nunits FROM  wellinv, investor WHERE (  Wellinv.cwellid = ( ?lcWellID ) AND  (  Wellinv.cdeck = (?lcDeck) AND  Wellinv.cownerid = Investor.cownerid ) ) AND  NOT (DELETED() ) ORDER BY Wellinv.ctypeinv, Wellinv.cownerid

DBSetProp('DOI_TR', 'View', 'UpdateType', 1)
DBSetProp('DOI_TR', 'View', 'WhereType', 3)
DBSetProp('DOI_TR', 'View', 'FetchMemo', .T.)
DBSetProp('DOI_TR', 'View', 'SendUpdates', .F.)
DBSetProp('DOI_TR', 'View', 'UseMemoSize', 255)
DBSetProp('DOI_TR', 'View', 'FetchSize', 100)
DBSetProp('DOI_TR', 'View', 'MaxRecords', -1)
DBSetProp('DOI_TR', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('DOI_TR', 'View', 'Prepared', .F.)
DBSetProp('DOI_TR', 'View', 'CompareMemo', .T.)
DBSetProp('DOI_TR', 'View', 'FetchAsNeeded', .F.)
DBSetProp('DOI_TR', 'View', 'Comment', "")
DBSetProp('DOI_TR', 'View', 'BatchUpdateCount', 1)
DBSetProp('DOI_TR', 'View', 'ShareConnection', .F.)
DBSetProp('DOI_TR', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for DOI_TR
* Props for the DOI_TR.cownerid field.
DBSetProp('DOI_TR.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('DOI_TR.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('DOI_TR.cownerid', 'Field', 'DataType', "C(10)")
* Props for the DOI_TR.cidwinv field.
DBSetProp('DOI_TR.cidwinv', 'Field', 'KeyField', .T.)
DBSetProp('DOI_TR.cidwinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_TR.cidwinv', 'Field', 'UpdateName', 'appdata!wellinv.cidwinv')
DBSetProp('DOI_TR.cidwinv', 'Field', 'Caption', "Primary Key")
DBSetProp('DOI_TR.cidwinv', 'Field', 'DataType', "C(8)")
* Props for the DOI_TR.cownname field.
DBSetProp('DOI_TR.cownname', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.cownname', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('DOI_TR.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('DOI_TR.cownname', 'Field', 'DataType', "C(60)")
* Props for the DOI_TR.lonhold field.
DBSetProp('DOI_TR.lonhold', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.lonhold', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.lonhold', 'Field', 'UpdateName', 'appdata!wellinv.lonhold')
DBSetProp('DOI_TR.lonhold', 'Field', 'Caption', "Interest On Hold Flag")
DBSetProp('DOI_TR.lonhold', 'Field', 'DataType', "L")
* Props for the DOI_TR.ljib field.
DBSetProp('DOI_TR.ljib', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.ljib', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.ljib', 'Field', 'UpdateName', 'appdata!wellinv.ljib')
DBSetProp('DOI_TR.ljib', 'Field', 'Caption', "JIB Flag")
DBSetProp('DOI_TR.ljib', 'Field', 'DataType', "L")
* Props for the DOI_TR.ctypeinv field.
DBSetProp('DOI_TR.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('DOI_TR.ctypeinv', 'Field', 'UpdateName', 'wellinv.ctypeinv')
DBSetProp('DOI_TR.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('DOI_TR.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the DOI_TR.ctypeint field.
DBSetProp('DOI_TR.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('DOI_TR.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('DOI_TR.ctypeint', 'Field', 'DataType', "C(1)")
* Props for the DOI_TR.cdirect field.
DBSetProp('DOI_TR.cdirect', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.cdirect', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.cdirect', 'Field', 'UpdateName', 'appdata!wellinv.cdirect')
DBSetProp('DOI_TR.cdirect', 'Field', 'Caption', "Direct Pay Flag")
DBSetProp('DOI_TR.cdirect', 'Field', 'DataType', "C(1)")
* Props for the DOI_TR.lflat field.
DBSetProp('DOI_TR.lflat', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.lflat', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.lflat', 'Field', 'UpdateName', 'appdata!wellinv.lflat')
DBSetProp('DOI_TR.lflat', 'Field', 'Caption', "Flat Rate Flag")
DBSetProp('DOI_TR.lflat', 'Field', 'DataType', "L")
* Props for the DOI_TR.ctaxflag field.
DBSetProp('DOI_TR.ctaxflag', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.ctaxflag', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.ctaxflag', 'Field', 'UpdateName', 'appdata!wellinv.ctaxflag')
DBSetProp('DOI_TR.ctaxflag', 'Field', 'Caption', "Tax Paid Flag")
DBSetProp('DOI_TR.ctaxflag', 'Field', 'DataType', "C(1)")
* Props for the DOI_TR.cprogcode field.
DBSetProp('DOI_TR.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.cprogcode', 'Field', 'UpdateName', 'appdata!wellinv.cprogcode')
DBSetProp('DOI_TR.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('DOI_TR.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the DOI_TR.interest field.
DBSetProp('DOI_TR.interest', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.interest', 'Field', 'Updatable', .F.)
DBSetProp('DOI_TR.interest', 'Field', 'UpdateName', 'appdata!wellinv.nrevtrp')
DBSetProp('DOI_TR.interest', 'Field', 'Caption', "Transportation Revenue Interest")
DBSetProp('DOI_TR.interest', 'Field', 'DataType', "N(11,7)")
* Props for the DOI_TR.cdeck field.
DBSetProp('DOI_TR.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('DOI_TR.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('DOI_TR.cdeck', 'Field', 'DataType', "C(10)")
* Props for the DOI_TR.nunits field.
DBSetProp('DOI_TR.nunits', 'Field', 'KeyField', .F.)
DBSetProp('DOI_TR.nunits', 'Field', 'Updatable', .T.)
DBSetProp('DOI_TR.nunits', 'Field', 'UpdateName', 'appdata!wellinv.nunits')
DBSetProp('DOI_TR.nunits', 'Field', 'Caption', "JV Units")
DBSetProp('DOI_TR.nunits', 'Field', 'DataType', "N(8,4)")
ENDFUNC
 
FUNCTION MakeView_PROGOWNERS
***************** View setup for PROGOWNERS ***************

CREATE SQL VIEW "PROGOWNERS" ; 
   AS SELECT Progrel.cidprel, Progrel.cprogcode, Progrel.cownerid, Investor.cownname, Progrel.npercentage, Progrel.ddepositdate, Progrel.deffdate, Progrel.cqbtxnid, Progrel.ccheckno, Progrel.namount, Progrel.cbatch FROM  appdata!progrel  INNER JOIN appdata!investor  ON  Progrel.cownerid = Investor.cownerid WHERE  Progrel.cprogcode = ( ?lcProgCode ) ORDER BY Progrel.cownerid

DBSetProp('PROGOWNERS', 'View', 'UpdateType', 1)
DBSetProp('PROGOWNERS', 'View', 'WhereType', 3)
DBSetProp('PROGOWNERS', 'View', 'FetchMemo', .T.)
DBSetProp('PROGOWNERS', 'View', 'SendUpdates', .T.)
DBSetProp('PROGOWNERS', 'View', 'UseMemoSize', 255)
DBSetProp('PROGOWNERS', 'View', 'FetchSize', 100)
DBSetProp('PROGOWNERS', 'View', 'MaxRecords', -1)
DBSetProp('PROGOWNERS', 'View', 'Tables', 'appdata!progrel')
DBSetProp('PROGOWNERS', 'View', 'Prepared', .F.)
DBSetProp('PROGOWNERS', 'View', 'CompareMemo', .T.)
DBSetProp('PROGOWNERS', 'View', 'FetchAsNeeded', .F.)
DBSetProp('PROGOWNERS', 'View', 'Comment', "")
DBSetProp('PROGOWNERS', 'View', 'BatchUpdateCount', 1)
DBSetProp('PROGOWNERS', 'View', 'ShareConnection', .F.)
DBSetProp('PROGOWNERS', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for PROGOWNERS
* Props for the PROGOWNERS.cidprel field.
DBSetProp('PROGOWNERS.cidprel', 'Field', 'KeyField', .T.)
DBSetProp('PROGOWNERS.cidprel', 'Field', 'Updatable', .F.)
DBSetProp('PROGOWNERS.cidprel', 'Field', 'UpdateName', 'appdata!progrel.cidprel')
DBSetProp('PROGOWNERS.cidprel', 'Field', 'Caption', "Primary Key")
DBSetProp('PROGOWNERS.cidprel', 'Field', 'DataType', "C(8)")
* Props for the PROGOWNERS.cprogcode field.
DBSetProp('PROGOWNERS.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.cprogcode', 'Field', 'UpdateName', 'appdata!progrel.cprogcode')
DBSetProp('PROGOWNERS.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('PROGOWNERS.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the PROGOWNERS.cownerid field.
DBSetProp('PROGOWNERS.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.cownerid', 'Field', 'UpdateName', 'appdata!progrel.cownerid')
DBSetProp('PROGOWNERS.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('PROGOWNERS.cownerid', 'Field', 'DataType', "C(10)")
* Props for the PROGOWNERS.cownname field.
DBSetProp('PROGOWNERS.cownname', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.cownname', 'Field', 'Updatable', .F.)
DBSetProp('PROGOWNERS.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('PROGOWNERS.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('PROGOWNERS.cownname', 'Field', 'DataType', "C(60)")
* Props for the PROGOWNERS.npercentage field.
DBSetProp('PROGOWNERS.npercentage', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.npercentage', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.npercentage', 'Field', 'UpdateName', 'appdata!progrel.npercentage')
DBSetProp('PROGOWNERS.npercentage', 'Field', 'Caption', "Percent Ownership")
DBSetProp('PROGOWNERS.npercentage', 'Field', 'DataType', "N(11,7)")
* Props for the PROGOWNERS.ddepositdate field.
DBSetProp('PROGOWNERS.ddepositdate', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.ddepositdate', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.ddepositdate', 'Field', 'UpdateName', 'appdata!progrel.ddepositdate')
DBSetProp('PROGOWNERS.ddepositdate', 'Field', 'Caption', "Deposit Date")
DBSetProp('PROGOWNERS.ddepositdate', 'Field', 'DataType', "D")
* Props for the PROGOWNERS.deffdate field.
DBSetProp('PROGOWNERS.deffdate', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.deffdate', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.deffdate', 'Field', 'UpdateName', 'appdata!progrel.deffdate')
DBSetProp('PROGOWNERS.deffdate', 'Field', 'Caption', "Effective Date")
DBSetProp('PROGOWNERS.deffdate', 'Field', 'DataType', "D")
* Props for the PROGOWNERS.cqbtxnid field.
DBSetProp('PROGOWNERS.cqbtxnid', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.cqbtxnid', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.cqbtxnid', 'Field', 'UpdateName', 'appdata!progrel.cqbtxnid')
DBSetProp('PROGOWNERS.cqbtxnid', 'Field', 'Caption', "QB Txn Id")
DBSetProp('PROGOWNERS.cqbtxnid', 'Field', 'DataType', "C(36)")
* Props for the PROGOWNERS.ccheckno field.
DBSetProp('PROGOWNERS.ccheckno', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.ccheckno', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.ccheckno', 'Field', 'UpdateName', 'appdata!progrel.ccheckno')
DBSetProp('PROGOWNERS.ccheckno', 'Field', 'Caption', "Check No")
DBSetProp('PROGOWNERS.ccheckno', 'Field', 'DataType', "C(10)")
* Props for the PROGOWNERS.namount field.
DBSetProp('PROGOWNERS.namount', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.namount', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.namount', 'Field', 'UpdateName', 'appdata!progrel.namount')
DBSetProp('PROGOWNERS.namount', 'Field', 'Caption', "Amount")
DBSetProp('PROGOWNERS.namount', 'Field', 'DataType', "N(12,2)")
* Props for the PROGOWNERS.cbatch field.
DBSetProp('PROGOWNERS.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('PROGOWNERS.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('PROGOWNERS.cbatch', 'Field', 'UpdateName', 'appdata!progrel.cbatch')
DBSetProp('PROGOWNERS.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('PROGOWNERS.cbatch', 'Field', 'DataType', "C(8)")
ENDFUNC
 
FUNCTION MakeView_PROGRAM_PCTS
***************** View setup for PROGRAM_PCTS ***************

CREATE SQL VIEW "PROGRAM_PCTS" ; 
   AS SELECT Progrel.cidprel, Progrel.cprogcode, Progrel.cownerid, Investor.cownname, Progrel.npercentage, Progrel.namount, Progrel.cbatch, Progrel.ccashacct, Progrel.cqbtxnid, Progrel.deffdate, Progrel.lnotposted FROM  appdata!progrel  INNER JOIN appdata!investor  ON  Progrel.cownerid = Investor.cownerid WHERE  Progrel.cprogcode = ( ?lcProgCode ) ORDER BY Progrel.cownerid

DBSetProp('PROGRAM_PCTS', 'View', 'UpdateType', 1)
DBSetProp('PROGRAM_PCTS', 'View', 'WhereType', 3)
DBSetProp('PROGRAM_PCTS', 'View', 'FetchMemo', .T.)
DBSetProp('PROGRAM_PCTS', 'View', 'SendUpdates', .T.)
DBSetProp('PROGRAM_PCTS', 'View', 'UseMemoSize', 255)
DBSetProp('PROGRAM_PCTS', 'View', 'FetchSize', 100)
DBSetProp('PROGRAM_PCTS', 'View', 'MaxRecords', -1)
DBSetProp('PROGRAM_PCTS', 'View', 'Tables', 'appdata!progrel')
DBSetProp('PROGRAM_PCTS', 'View', 'Prepared', .F.)
DBSetProp('PROGRAM_PCTS', 'View', 'CompareMemo', .T.)
DBSetProp('PROGRAM_PCTS', 'View', 'FetchAsNeeded', .F.)
DBSetProp('PROGRAM_PCTS', 'View', 'Comment', "")
DBSetProp('PROGRAM_PCTS', 'View', 'BatchUpdateCount', 1)
DBSetProp('PROGRAM_PCTS', 'View', 'ShareConnection', .F.)
DBSetProp('PROGRAM_PCTS', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for PROGRAM_PCTS
* Props for the PROGRAM_PCTS.cidprel field.
DBSetProp('PROGRAM_PCTS.cidprel', 'Field', 'KeyField', .T.)
DBSetProp('PROGRAM_PCTS.cidprel', 'Field', 'Updatable', .F.)
DBSetProp('PROGRAM_PCTS.cidprel', 'Field', 'UpdateName', 'appdata!progrel.cidprel')
DBSetProp('PROGRAM_PCTS.cidprel', 'Field', 'Caption', "Primary Key")
DBSetProp('PROGRAM_PCTS.cidprel', 'Field', 'DataType', "C(8)")
* Props for the PROGRAM_PCTS.cprogcode field.
DBSetProp('PROGRAM_PCTS.cprogcode', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.cprogcode', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.cprogcode', 'Field', 'UpdateName', 'appdata!progrel.cprogcode')
DBSetProp('PROGRAM_PCTS.cprogcode', 'Field', 'Caption', "Program Code")
DBSetProp('PROGRAM_PCTS.cprogcode', 'Field', 'DataType', "C(10)")
* Props for the PROGRAM_PCTS.cownerid field.
DBSetProp('PROGRAM_PCTS.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.cownerid', 'Field', 'UpdateName', 'appdata!progrel.cownerid')
DBSetProp('PROGRAM_PCTS.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('PROGRAM_PCTS.cownerid', 'Field', 'DataType', "C(10)")
* Props for the PROGRAM_PCTS.cownname field.
DBSetProp('PROGRAM_PCTS.cownname', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.cownname', 'Field', 'Updatable', .F.)
DBSetProp('PROGRAM_PCTS.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('PROGRAM_PCTS.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('PROGRAM_PCTS.cownname', 'Field', 'DataType', "C(60)")
* Props for the PROGRAM_PCTS.npercentage field.
DBSetProp('PROGRAM_PCTS.npercentage', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.npercentage', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.npercentage', 'Field', 'UpdateName', 'appdata!progrel.npercentage')
DBSetProp('PROGRAM_PCTS.npercentage', 'Field', 'Caption', "Percent Ownership")
DBSetProp('PROGRAM_PCTS.npercentage', 'Field', 'DataType', "N(11,7)")
* Props for the PROGRAM_PCTS.namount field.
DBSetProp('PROGRAM_PCTS.namount', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.namount', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.namount', 'Field', 'UpdateName', 'appdata!progrel.namount')
DBSetProp('PROGRAM_PCTS.namount', 'Field', 'Caption', "Amount")
DBSetProp('PROGRAM_PCTS.namount', 'Field', 'DataType', "N(12,2)")
* Props for the PROGRAM_PCTS.cbatch field.
DBSetProp('PROGRAM_PCTS.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.cbatch', 'Field', 'UpdateName', 'appdata!progrel.cbatch')
DBSetProp('PROGRAM_PCTS.cbatch', 'Field', 'Caption', "Batch")
DBSetProp('PROGRAM_PCTS.cbatch', 'Field', 'DataType', "C(8)")
* Props for the PROGRAM_PCTS.ccashacct field.
DBSetProp('PROGRAM_PCTS.ccashacct', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.ccashacct', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.ccashacct', 'Field', 'UpdateName', 'appdata!progrel.ccashacct')
DBSetProp('PROGRAM_PCTS.ccashacct', 'Field', 'Caption', "Ccashacct")
DBSetProp('PROGRAM_PCTS.ccashacct', 'Field', 'DataType', "C(6)")
* Props for the PROGRAM_PCTS.cqbtxnid field.
DBSetProp('PROGRAM_PCTS.cqbtxnid', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.cqbtxnid', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.cqbtxnid', 'Field', 'UpdateName', 'appdata!progrel.cqbtxnid')
DBSetProp('PROGRAM_PCTS.cqbtxnid', 'Field', 'Caption', "QB Txn Id")
DBSetProp('PROGRAM_PCTS.cqbtxnid', 'Field', 'DataType', "C(36)")
* Props for the PROGRAM_PCTS.deffdate field.
DBSetProp('PROGRAM_PCTS.deffdate', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.deffdate', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.deffdate', 'Field', 'UpdateName', 'appdata!progrel.deffdate')
DBSetProp('PROGRAM_PCTS.deffdate', 'Field', 'Caption', "Effective Date")
DBSetProp('PROGRAM_PCTS.deffdate', 'Field', 'DataType', "D")
* Props for the PROGRAM_PCTS.lnotposted field.
DBSetProp('PROGRAM_PCTS.lnotposted', 'Field', 'KeyField', .F.)
DBSetProp('PROGRAM_PCTS.lnotposted', 'Field', 'Updatable', .T.)
DBSetProp('PROGRAM_PCTS.lnotposted', 'Field', 'UpdateName', 'appdata!progrel.lnotposted')
DBSetProp('PROGRAM_PCTS.lnotposted', 'Field', 'Caption', "Posted")
DBSetProp('PROGRAM_PCTS.lnotposted', 'Field', 'DataType', "L")
ENDFUNC
 
FUNCTION MakeView_WELL_OWNERS
***************** View setup for WELL OWNERS ***************

CREATE SQL VIEW "WELL OWNERS" ; 
   AS SELECT Wellinv.cownerid, Investor.cownname, Wellinv.ctypeint, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.nrevoil, Wellinv.nrevgas, IIF(Wellinv.ctypeinv="W",Wellinv.nworkint,0.0000000) AS nworkint, Wellinv.cdeck FROM  appdata!wellinv  INNER JOIN appdata!investor  ON  Wellinv.cownerid = Investor.cownerid WHERE  Wellinv.cwellid = ( ?lcWellID ) ORDER BY Wellinv.cownerid

DBSetProp('WELL OWNERS', 'View', 'UpdateType', 1)
DBSetProp('WELL OWNERS', 'View', 'WhereType', 3)
DBSetProp('WELL OWNERS', 'View', 'FetchMemo', .T.)
DBSetProp('WELL OWNERS', 'View', 'SendUpdates', .T.)
DBSetProp('WELL OWNERS', 'View', 'UseMemoSize', 255)
DBSetProp('WELL OWNERS', 'View', 'FetchSize', 100)
DBSetProp('WELL OWNERS', 'View', 'MaxRecords', -1)
DBSetProp('WELL OWNERS', 'View', 'Tables', 'appdata!wellinv,appdata!investor')
DBSetProp('WELL OWNERS', 'View', 'Prepared', .F.)
DBSetProp('WELL OWNERS', 'View', 'CompareMemo', .T.)
DBSetProp('WELL OWNERS', 'View', 'FetchAsNeeded', .F.)
DBSetProp('WELL OWNERS', 'View', 'Comment', "")
DBSetProp('WELL OWNERS', 'View', 'BatchUpdateCount', 1)
DBSetProp('WELL OWNERS', 'View', 'ShareConnection', .F.)
DBSetProp('WELL OWNERS', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for WELL OWNERS
* Props for the WELL OWNERS.cownerid field.
DBSetProp('WELL OWNERS.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('WELL OWNERS.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('WELL OWNERS.cownerid', 'Field', 'UpdateName', 'appdata!wellinv.cownerid')
DBSetProp('WELL OWNERS.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('WELL OWNERS.cownerid', 'Field', 'DataType', "C(10)")
* Props for the WELL OWNERS.cownname field.
DBSetProp('WELL OWNERS.cownname', 'Field', 'KeyField', .F.)
DBSetProp('WELL OWNERS.cownname', 'Field', 'Updatable', .T.)
DBSetProp('WELL OWNERS.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('WELL OWNERS.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('WELL OWNERS.cownname', 'Field', 'DataType', "C(60)")
* Props for the WELL OWNERS.ctypeint field.
DBSetProp('WELL OWNERS.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('WELL OWNERS.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('WELL OWNERS.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('WELL OWNERS.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('WELL OWNERS.ctypeint', 'Field', 'DataType', "C(1)")
DBSetProp('WELL OWNERS.ctypeint', 'Field', 'DefaultValue', "'B'")
* Props for the WELL OWNERS.ctypeinv field.
DBSetProp('WELL OWNERS.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('WELL OWNERS.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('WELL OWNERS.ctypeinv', 'Field', 'UpdateName', 'appdata!wellinv.ctypeinv')
DBSetProp('WELL OWNERS.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('WELL OWNERS.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the WELL OWNERS.nrevoil field.
DBSetProp('WELL OWNERS.nrevoil', 'Field', 'KeyField', .F.)
DBSetProp('WELL OWNERS.nrevoil', 'Field', 'Updatable', .T.)
DBSetProp('WELL OWNERS.nrevoil', 'Field', 'UpdateName', 'appdata!wellinv.nrevoil')
DBSetProp('WELL OWNERS.nrevoil', 'Field', 'Caption', "Oil Revenue Interest")
DBSetProp('WELL OWNERS.nrevoil', 'Field', 'DataType', "N(11,7)")
DBSetProp('WELL OWNERS.nrevoil', 'Field', 'DefaultValue', "0")
* Props for the WELL OWNERS.nrevgas field.
DBSetProp('WELL OWNERS.nrevgas', 'Field', 'KeyField', .F.)
DBSetProp('WELL OWNERS.nrevgas', 'Field', 'Updatable', .F.)
DBSetProp('WELL OWNERS.nrevgas', 'Field', 'UpdateName', 'appdata!wellinv.nrevgas')
DBSetProp('WELL OWNERS.nrevgas', 'Field', 'Caption', "Gas Revenue Interest")
DBSetProp('WELL OWNERS.nrevgas', 'Field', 'DataType', "N(11,7)")
DBSetProp('WELL OWNERS.nrevgas', 'Field', 'DefaultValue', "0")
* Props for the WELL OWNERS.nworkint field.
DBSetProp('WELL OWNERS.nworkint', 'Field', 'KeyField', .F.)
DBSetProp('WELL OWNERS.nworkint', 'Field', 'Updatable', .F.)
DBSetProp('WELL OWNERS.nworkint', 'Field', 'UpdateName', 'WELLINV.nworkint')
DBSetProp('WELL OWNERS.nworkint', 'Field', 'Caption', "Working Interest")
DBSetProp('WELL OWNERS.nworkint', 'Field', 'DataType', "N(9,7)")
* Props for the WELL OWNERS.cdeck field.
DBSetProp('WELL OWNERS.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('WELL OWNERS.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('WELL OWNERS.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('WELL OWNERS.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('WELL OWNERS.cdeck', 'Field', 'DataType', "C(10)")
ENDFUNC
 
FUNCTION MakeView_OWNERS_WELLS
***************** View setup for OWNERS_WELLS ***************

CREATE SQL VIEW "OWNERS_WELLS" ; 
   AS SELECT Investor.cownerid, Investor.cownname, Wellinv.cwellid, Wellinv.nworkint, Wellinv.ctypeint, IIF(Wellinv.ctypeinv="L","R",Wellinv.ctypeinv) AS ctypeinv, Wellinv.nrevoil, Wellinv.nrevgas, Wells.cwellname, Wellinv.cdeck FROM  appdata!investor  INNER JOIN  appdata!wellinv  INNER JOIN appdata!wells  ON  Wellinv.cwellid = Wells.cwellid  ON  Investor.cownerid = Wellinv.cownerid WHERE  Wellinv.cownerid = ( ?lcOwnerID ) ORDER BY Wellinv.cwellid

DBSetProp('OWNERS_WELLS', 'View', 'UpdateType', 1)
DBSetProp('OWNERS_WELLS', 'View', 'WhereType', 3)
DBSetProp('OWNERS_WELLS', 'View', 'FetchMemo', .T.)
DBSetProp('OWNERS_WELLS', 'View', 'SendUpdates', .T.)
DBSetProp('OWNERS_WELLS', 'View', 'UseMemoSize', 255)
DBSetProp('OWNERS_WELLS', 'View', 'FetchSize', 100)
DBSetProp('OWNERS_WELLS', 'View', 'MaxRecords', -1)
DBSetProp('OWNERS_WELLS', 'View', 'Tables', 'appdata!investor,appdata!wellinv,appdata!wells')
DBSetProp('OWNERS_WELLS', 'View', 'Prepared', .F.)
DBSetProp('OWNERS_WELLS', 'View', 'CompareMemo', .T.)
DBSetProp('OWNERS_WELLS', 'View', 'FetchAsNeeded', .F.)
DBSetProp('OWNERS_WELLS', 'View', 'Comment', "")
DBSetProp('OWNERS_WELLS', 'View', 'BatchUpdateCount', 1)
DBSetProp('OWNERS_WELLS', 'View', 'ShareConnection', .F.)
DBSetProp('OWNERS_WELLS', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for OWNERS_WELLS
* Props for the OWNERS_WELLS.cownerid field.
DBSetProp('OWNERS_WELLS.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.cownerid', 'Field', 'UpdateName', 'appdata!investor.cownerid')
DBSetProp('OWNERS_WELLS.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('OWNERS_WELLS.cownerid', 'Field', 'DataType', "C(10)")
* Props for the OWNERS_WELLS.cownname field.
DBSetProp('OWNERS_WELLS.cownname', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.cownname', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.cownname', 'Field', 'UpdateName', 'appdata!investor.cownname')
DBSetProp('OWNERS_WELLS.cownname', 'Field', 'Caption', "Owner Name")
DBSetProp('OWNERS_WELLS.cownname', 'Field', 'DataType', "C(60)")
* Props for the OWNERS_WELLS.cwellid field.
DBSetProp('OWNERS_WELLS.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.cwellid', 'Field', 'UpdateName', 'appdata!wellinv.cwellid')
DBSetProp('OWNERS_WELLS.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('OWNERS_WELLS.cwellid', 'Field', 'DataType', "C(10)")
* Props for the OWNERS_WELLS.nworkint field.
DBSetProp('OWNERS_WELLS.nworkint', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.nworkint', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.nworkint', 'Field', 'UpdateName', 'appdata!wellinv.nworkint')
DBSetProp('OWNERS_WELLS.nworkint', 'Field', 'Caption', "Working Interest")
DBSetProp('OWNERS_WELLS.nworkint', 'Field', 'DataType', "N(11,7)")
* Props for the OWNERS_WELLS.ctypeint field.
DBSetProp('OWNERS_WELLS.ctypeint', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.ctypeint', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.ctypeint', 'Field', 'UpdateName', 'appdata!wellinv.ctypeint')
DBSetProp('OWNERS_WELLS.ctypeint', 'Field', 'Caption', "Interest Type")
DBSetProp('OWNERS_WELLS.ctypeint', 'Field', 'DataType', "C(1)")
DBSetProp('OWNERS_WELLS.ctypeint', 'Field', 'DefaultValue', "'B'")
* Props for the OWNERS_WELLS.ctypeinv field.
DBSetProp('OWNERS_WELLS.ctypeinv', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.ctypeinv', 'Field', 'Updatable', .F.)
DBSetProp('OWNERS_WELLS.ctypeinv', 'Field', 'UpdateName', 'appdata!wellinv.ctypeinv')
DBSetProp('OWNERS_WELLS.ctypeinv', 'Field', 'Caption', "Owner Type")
DBSetProp('OWNERS_WELLS.ctypeinv', 'Field', 'DataType', "C(1)")
* Props for the OWNERS_WELLS.nrevoil field.
DBSetProp('OWNERS_WELLS.nrevoil', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.nrevoil', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.nrevoil', 'Field', 'UpdateName', 'appdata!wellinv.nrevoil')
DBSetProp('OWNERS_WELLS.nrevoil', 'Field', 'Caption', "Oil Revenue Interest")
DBSetProp('OWNERS_WELLS.nrevoil', 'Field', 'DataType', "N(11,7)")
DBSetProp('OWNERS_WELLS.nrevoil', 'Field', 'DefaultValue', "0")
* Props for the OWNERS_WELLS.nrevgas field.
DBSetProp('OWNERS_WELLS.nrevgas', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.nrevgas', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.nrevgas', 'Field', 'UpdateName', 'appdata!wellinv.nrevgas')
DBSetProp('OWNERS_WELLS.nrevgas', 'Field', 'Caption', "Gas Revenue Interest")
DBSetProp('OWNERS_WELLS.nrevgas', 'Field', 'DataType', "N(11,7)")
DBSetProp('OWNERS_WELLS.nrevgas', 'Field', 'DefaultValue', "0")
* Props for the OWNERS_WELLS.cwellname field.
DBSetProp('OWNERS_WELLS.cwellname', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.cwellname', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.cwellname', 'Field', 'UpdateName', 'appdata!wells.cwellname')
DBSetProp('OWNERS_WELLS.cwellname', 'Field', 'Caption', "Well Name")
DBSetProp('OWNERS_WELLS.cwellname', 'Field', 'DataType', "C(30)")
* Props for the OWNERS_WELLS.cdeck field.
DBSetProp('OWNERS_WELLS.cdeck', 'Field', 'KeyField', .F.)
DBSetProp('OWNERS_WELLS.cdeck', 'Field', 'Updatable', .T.)
DBSetProp('OWNERS_WELLS.cdeck', 'Field', 'UpdateName', 'appdata!wellinv.cdeck')
DBSetProp('OWNERS_WELLS.cdeck', 'Field', 'Caption', "DOI Deck")
DBSetProp('OWNERS_WELLS.cdeck', 'Field', 'DataType', "C(10)")
ENDFUNC
 
FUNCTION MakeView_CUSTOWN
***************** View setup for CUSTOWN ***************

CREATE SQL VIEW "CUSTOWN" ; 
   AS SELECT Custs.ccustid       AS cCustID,  Custs.cCustName     AS cCustName,  Custs.cbaddr1       AS cAddress1,  Custs.cbaddr2       AS cAddress2,  Custs.cbcity        AS cCity,  Custs.cbState       AS cState,  Custs.cbZip         AS cZip,  Custs.cidterm       AS cidterm,  'Customer'          AS cType,  Custs.cbContact     AS cContact,  Custs.cbPhone       AS cPhone FROM APPDATA!Custs  WHERE NOT DELETED()  UNION  SELECT Investor.cownerid      AS cCustId,  Investor.csortfield AS cCustName,  Investor.caddress1a AS cAddress1,  Investor.cAddress1b AS cAddress2,  Investor.cCity1     AS cCity,  Investor.cState1    AS cState,  Investor.cZip1      AS cZip,  Investor.cidterm    AS cidterm,  'Owner  '         AS cType,  SPACE(30)         AS cContact,  cphoneh           AS cPhone  FROM APPDATA!Investor  WHERE NOT DELETED()  ORDER BY 3, 1

DBSetProp('CUSTOWN', 'View', 'UpdateType', 1)
DBSetProp('CUSTOWN', 'View', 'WhereType', 3)
DBSetProp('CUSTOWN', 'View', 'FetchMemo', .T.)
DBSetProp('CUSTOWN', 'View', 'SendUpdates', .F.)
DBSetProp('CUSTOWN', 'View', 'UseMemoSize', 255)
DBSetProp('CUSTOWN', 'View', 'FetchSize', 100)
DBSetProp('CUSTOWN', 'View', 'MaxRecords', -1)
DBSetProp('CUSTOWN', 'View', 'Tables', 'APPDATA!Custs')
DBSetProp('CUSTOWN', 'View', 'Prepared', .F.)
DBSetProp('CUSTOWN', 'View', 'CompareMemo', .T.)
DBSetProp('CUSTOWN', 'View', 'FetchAsNeeded', .F.)
DBSetProp('CUSTOWN', 'View', 'Comment', "")
DBSetProp('CUSTOWN', 'View', 'BatchUpdateCount', 1)
DBSetProp('CUSTOWN', 'View', 'ShareConnection', .F.)
DBSetProp('CUSTOWN', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for CUSTOWN
* Props for the CUSTOWN.ccustid field.
DBSetProp('CUSTOWN.ccustid', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.ccustid', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.ccustid', 'Field', 'UpdateName', 'APPDATA!Custs.ccustid')
DBSetProp('CUSTOWN.ccustid', 'Field', 'Caption', "Customer ID")
DBSetProp('CUSTOWN.ccustid', 'Field', 'DataType', "C(10)")
* Props for the CUSTOWN.ccustname field.
DBSetProp('CUSTOWN.ccustname', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.ccustname', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.ccustname', 'Field', 'UpdateName', 'APPDATA!Custs.ccustname')
DBSetProp('CUSTOWN.ccustname', 'Field', 'Caption', "Customer Name")
DBSetProp('CUSTOWN.ccustname', 'Field', 'DataType', "C(60)")
* Props for the CUSTOWN.caddress1 field.
DBSetProp('CUSTOWN.caddress1', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.caddress1', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.caddress1', 'Field', 'UpdateName', 'APPDATA!Custs.caddress1')
DBSetProp('CUSTOWN.caddress1', 'Field', 'Caption', "Address 1")
DBSetProp('CUSTOWN.caddress1', 'Field', 'DataType', "C(60)")
* Props for the CUSTOWN.caddress2 field.
DBSetProp('CUSTOWN.caddress2', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.caddress2', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.caddress2', 'Field', 'UpdateName', 'APPDATA!Custs.caddress2')
DBSetProp('CUSTOWN.caddress2', 'Field', 'Caption', "Address 2")
DBSetProp('CUSTOWN.caddress2', 'Field', 'DataType', "C(60)")
* Props for the CUSTOWN.ccity field.
DBSetProp('CUSTOWN.ccity', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.ccity', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.ccity', 'Field', 'UpdateName', 'APPDATA!Custs.ccity')
DBSetProp('CUSTOWN.ccity', 'Field', 'Caption', "City")
DBSetProp('CUSTOWN.ccity', 'Field', 'DataType', "C(30)")
* Props for the CUSTOWN.cstate field.
DBSetProp('CUSTOWN.cstate', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.cstate', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.cstate', 'Field', 'UpdateName', 'APPDATA!Custs.cstate')
DBSetProp('CUSTOWN.cstate', 'Field', 'Caption', "State")
DBSetProp('CUSTOWN.cstate', 'Field', 'DataType', "C(2)")
* Props for the CUSTOWN.czip field.
DBSetProp('CUSTOWN.czip', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.czip', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.czip', 'Field', 'UpdateName', 'APPDATA!Custs.czip')
DBSetProp('CUSTOWN.czip', 'Field', 'Caption', "Zip")
DBSetProp('CUSTOWN.czip', 'Field', 'DataType', "C(10)")
* Props for the CUSTOWN.cidterm field.
DBSetProp('CUSTOWN.cidterm', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.cidterm', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.cidterm', 'Field', 'UpdateName', 'APPDATA!Custs.cidterm')
DBSetProp('CUSTOWN.cidterm', 'Field', 'DataType', "C(8)")
* Props for the CUSTOWN.ctype field.
DBSetProp('CUSTOWN.ctype', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.ctype', 'Field', 'Updatable', .F.)
DBSetProp('CUSTOWN.ctype', 'Field', 'UpdateName', 'ctype')
DBSetProp('CUSTOWN.ctype', 'Field', 'DataType', "C(8)")
* Props for the CUSTOWN.ccontact field.
DBSetProp('CUSTOWN.ccontact', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.ccontact', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.ccontact', 'Field', 'UpdateName', 'APPDATA!Custs.ccontact')
DBSetProp('CUSTOWN.ccontact', 'Field', 'Caption', "Contact")
DBSetProp('CUSTOWN.ccontact', 'Field', 'DataType', "C(30)")
* Props for the CUSTOWN.cphone field.
DBSetProp('CUSTOWN.cphone', 'Field', 'KeyField', .F.)
DBSetProp('CUSTOWN.cphone', 'Field', 'Updatable', .T.)
DBSetProp('CUSTOWN.cphone', 'Field', 'UpdateName', 'APPDATA!Custs.cphone')
DBSetProp('CUSTOWN.cphone', 'Field', 'Caption', "Phone")
DBSetProp('CUSTOWN.cphone', 'Field', 'DataType', "C(14)")
ENDFUNC
 
FUNCTION MakeView_NAMELOOKUP1
***************** View setup for NAMELOOKUP1 ***************

CREATE SQL VIEW "NAMELOOKUP1" ; 
   AS SELECT Vendor.cvendorid AS cId, Vendor.cSortField AS cName, 'Vendor ' AS cType FROM APPDATA!Vendor UNION SELECT custs.ccustid AS cId, custs.ccustname AS cName, 'Customer ' AS cType FROM APPDATA!custs UNION SELECT revsrc.crevkey as cid, revsrc.crevname as cname, 'Purchaser' as ctype FROM appdata!revsrc ORDER BY 3, 1

DBSetProp('NAMELOOKUP1', 'View', 'UpdateType', 1)
DBSetProp('NAMELOOKUP1', 'View', 'WhereType', 3)
DBSetProp('NAMELOOKUP1', 'View', 'FetchMemo', .T.)
DBSetProp('NAMELOOKUP1', 'View', 'SendUpdates', .F.)
DBSetProp('NAMELOOKUP1', 'View', 'UseMemoSize', 255)
DBSetProp('NAMELOOKUP1', 'View', 'FetchSize', 100)
DBSetProp('NAMELOOKUP1', 'View', 'MaxRecords', -1)
DBSetProp('NAMELOOKUP1', 'View', 'Tables', 'APPDATA!Vendor')
DBSetProp('NAMELOOKUP1', 'View', 'Prepared', .F.)
DBSetProp('NAMELOOKUP1', 'View', 'CompareMemo', .T.)
DBSetProp('NAMELOOKUP1', 'View', 'FetchAsNeeded', .F.)
DBSetProp('NAMELOOKUP1', 'View', 'Comment', "")
DBSetProp('NAMELOOKUP1', 'View', 'BatchUpdateCount', 1)
DBSetProp('NAMELOOKUP1', 'View', 'ShareConnection', .F.)
DBSetProp('NAMELOOKUP1', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for NAMELOOKUP1
* Props for the NAMELOOKUP1.cid field.
DBSetProp('NAMELOOKUP1.cid', 'Field', 'KeyField', .T.)
DBSetProp('NAMELOOKUP1.cid', 'Field', 'Updatable', .F.)
DBSetProp('NAMELOOKUP1.cid', 'Field', 'UpdateName', 'APPDATA!Vendor.cvendorid')
DBSetProp('NAMELOOKUP1.cid', 'Field', 'Caption', "Vendor ID")
DBSetProp('NAMELOOKUP1.cid', 'Field', 'DataType', "C(10)")
* Props for the NAMELOOKUP1.cname field.
DBSetProp('NAMELOOKUP1.cname', 'Field', 'KeyField', .F.)
DBSetProp('NAMELOOKUP1.cname', 'Field', 'Updatable', .T.)
DBSetProp('NAMELOOKUP1.cname', 'Field', 'UpdateName', 'APPDATA!Vendor.cSortField')
DBSetProp('NAMELOOKUP1.cname', 'Field', 'Caption', "Vendor Name")
DBSetProp('NAMELOOKUP1.cname', 'Field', 'DataType', "C(60)")
* Props for the NAMELOOKUP1.ctype field.
DBSetProp('NAMELOOKUP1.ctype', 'Field', 'KeyField', .F.)
DBSetProp('NAMELOOKUP1.ctype', 'Field', 'Updatable', .F.)
DBSetProp('NAMELOOKUP1.ctype', 'Field', 'UpdateName', "'Vendor '")
DBSetProp('NAMELOOKUP1.ctype', 'Field', 'DataType', "C(9)")
ENDFUNC
 
FUNCTION MakeView_NAMELOOKUP
***************** View setup for NAMELOOKUP ***************

CREATE SQL VIEW "NAMELOOKUP" ; 
   AS SELECT Investor.cownerid      AS cId,  Investor.cSortField AS cName,  'Owner    '          AS cType  FROM APPDATA!Investor  UNION  SELECT Vendor.cvendorid     AS cId,  Vendor.cSortField AS cName,  'Vendor   '         AS cType  FROM APPDATA!Vendor  UNION  SELECT custs.ccustid     AS cId,  custs.ccustname AS cName,  'Customer '      AS cType  FROM APPDATA!custs  UNION SELECT revsrc.crevkey as cid,  revsrc.crevname as cname,  'Purchaser' as ctype  FROM appdata!revsrc  ORDER BY 3, 1

DBSetProp('NAMELOOKUP', 'View', 'UpdateType', 1)
DBSetProp('NAMELOOKUP', 'View', 'WhereType', 3)
DBSetProp('NAMELOOKUP', 'View', 'FetchMemo', .T.)
DBSetProp('NAMELOOKUP', 'View', 'SendUpdates', .F.)
DBSetProp('NAMELOOKUP', 'View', 'UseMemoSize', 255)
DBSetProp('NAMELOOKUP', 'View', 'FetchSize', 100)
DBSetProp('NAMELOOKUP', 'View', 'MaxRecords', -1)
DBSetProp('NAMELOOKUP', 'View', 'Tables', 'APPDATA!Investor')
DBSetProp('NAMELOOKUP', 'View', 'Prepared', .F.)
DBSetProp('NAMELOOKUP', 'View', 'CompareMemo', .T.)
DBSetProp('NAMELOOKUP', 'View', 'FetchAsNeeded', .F.)
DBSetProp('NAMELOOKUP', 'View', 'Comment', "")
DBSetProp('NAMELOOKUP', 'View', 'BatchUpdateCount', 1)
DBSetProp('NAMELOOKUP', 'View', 'ShareConnection', .F.)
DBSetProp('NAMELOOKUP', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for NAMELOOKUP
* Props for the NAMELOOKUP.cid field.
DBSetProp('NAMELOOKUP.cid', 'Field', 'KeyField', .T.)
DBSetProp('NAMELOOKUP.cid', 'Field', 'Updatable', .F.)
DBSetProp('NAMELOOKUP.cid', 'Field', 'UpdateName', 'APPDATA!Investor.cownerid')
DBSetProp('NAMELOOKUP.cid', 'Field', 'Caption', "Owner ID")
DBSetProp('NAMELOOKUP.cid', 'Field', 'DataType', "C(10)")
* Props for the NAMELOOKUP.cname field.
DBSetProp('NAMELOOKUP.cname', 'Field', 'KeyField', .F.)
DBSetProp('NAMELOOKUP.cname', 'Field', 'Updatable', .T.)
DBSetProp('NAMELOOKUP.cname', 'Field', 'UpdateName', 'APPDATA!Investor.cSortField')
DBSetProp('NAMELOOKUP.cname', 'Field', 'Caption', "Owner Name (Alpha)")
DBSetProp('NAMELOOKUP.cname', 'Field', 'DataType', "C(60)")
* Props for the NAMELOOKUP.ctype field.
DBSetProp('NAMELOOKUP.ctype', 'Field', 'KeyField', .F.)
DBSetProp('NAMELOOKUP.ctype', 'Field', 'Updatable', .F.)
DBSetProp('NAMELOOKUP.ctype', 'Field', 'UpdateName', "'Owner    '")
DBSetProp('NAMELOOKUP.ctype', 'Field', 'DataType', "C(9)")
ENDFUNC
 
FUNCTION MakeView_AFE_COSTS
***************** View setup for AFE_COSTS ***************

CREATE SQL VIEW "AFE_COSTS" ; 
   AS SELECT Afedet.ccatcode, expcat.CCATEG, Afedet.nestcost, Afedet.nactcost,  Afedet.cidafed, Afedet.nvariance FROM  appdata!afedet INNER JOIN appdata!expcat    ON  Afedet.ccatcode = Expcat.ccatcode WHERE Afedet.cidafeh = ?lcidafeh GROUP BY Afedet.cidafed ORDER BY Afedet.ccatcode

DBSetProp('AFE_COSTS', 'View', 'UpdateType', 1)
DBSetProp('AFE_COSTS', 'View', 'WhereType', 3)
DBSetProp('AFE_COSTS', 'View', 'FetchMemo', .T.)
DBSetProp('AFE_COSTS', 'View', 'SendUpdates', .T.)
DBSetProp('AFE_COSTS', 'View', 'UseMemoSize', 255)
DBSetProp('AFE_COSTS', 'View', 'FetchSize', 100)
DBSetProp('AFE_COSTS', 'View', 'MaxRecords', -1)
DBSetProp('AFE_COSTS', 'View', 'Tables', 'appdata!afedet')
DBSetProp('AFE_COSTS', 'View', 'Prepared', .F.)
DBSetProp('AFE_COSTS', 'View', 'CompareMemo', .T.)
DBSetProp('AFE_COSTS', 'View', 'FetchAsNeeded', .F.)
DBSetProp('AFE_COSTS', 'View', 'Comment', "")
DBSetProp('AFE_COSTS', 'View', 'BatchUpdateCount', 1)
DBSetProp('AFE_COSTS', 'View', 'ShareConnection', .F.)
DBSetProp('AFE_COSTS', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for AFE_COSTS
* Props for the AFE_COSTS.ccatcode field.
DBSetProp('AFE_COSTS.ccatcode', 'Field', 'KeyField', .F.)
DBSetProp('AFE_COSTS.ccatcode', 'Field', 'Updatable', .T.)
DBSetProp('AFE_COSTS.ccatcode', 'Field', 'UpdateName', 'appdata!afedet.ccatcode')
DBSetProp('AFE_COSTS.ccatcode', 'Field', 'Caption', "Category Code")
DBSetProp('AFE_COSTS.ccatcode', 'Field', 'DataType', "C(4)")
* Props for the AFE_COSTS.ccateg field.
DBSetProp('AFE_COSTS.ccateg', 'Field', 'KeyField', .F.)
DBSetProp('AFE_COSTS.ccateg', 'Field', 'Updatable', .F.)
DBSetProp('AFE_COSTS.ccateg', 'Field', 'UpdateName', 'appdata!expcat.CCATEG')
DBSetProp('AFE_COSTS.ccateg', 'Field', 'Caption', "Category")
DBSetProp('AFE_COSTS.ccateg', 'Field', 'DataType', "C(25)")
* Props for the AFE_COSTS.nestcost field.
DBSetProp('AFE_COSTS.nestcost', 'Field', 'KeyField', .F.)
DBSetProp('AFE_COSTS.nestcost', 'Field', 'Updatable', .T.)
DBSetProp('AFE_COSTS.nestcost', 'Field', 'UpdateName', 'appdata!afedet.nestcost')
DBSetProp('AFE_COSTS.nestcost', 'Field', 'Caption', "Estimated Cost")
DBSetProp('AFE_COSTS.nestcost', 'Field', 'DataType', "N(12,2)")
* Props for the AFE_COSTS.nactcost field.
DBSetProp('AFE_COSTS.nactcost', 'Field', 'KeyField', .F.)
DBSetProp('AFE_COSTS.nactcost', 'Field', 'Updatable', .T.)
DBSetProp('AFE_COSTS.nactcost', 'Field', 'UpdateName', 'appdata!afedet.nactcost')
DBSetProp('AFE_COSTS.nactcost', 'Field', 'Caption', "Actual Cost")
DBSetProp('AFE_COSTS.nactcost', 'Field', 'DataType', "N(12,2)")
* Props for the AFE_COSTS.cidafed field.
DBSetProp('AFE_COSTS.cidafed', 'Field', 'KeyField', .T.)
DBSetProp('AFE_COSTS.cidafed', 'Field', 'Updatable', .F.)
DBSetProp('AFE_COSTS.cidafed', 'Field', 'UpdateName', 'appdata!afedet.cidafed')
DBSetProp('AFE_COSTS.cidafed', 'Field', 'Caption', "Primary Key")
DBSetProp('AFE_COSTS.cidafed', 'Field', 'DataType', "C(8)")
* Props for the AFE_COSTS.nvariance field.
DBSetProp('AFE_COSTS.nvariance', 'Field', 'KeyField', .F.)
DBSetProp('AFE_COSTS.nvariance', 'Field', 'Updatable', .T.)
DBSetProp('AFE_COSTS.nvariance', 'Field', 'UpdateName', 'appdata!afedet.nvariance')
DBSetProp('AFE_COSTS.nvariance', 'Field', 'Caption', "Variance")
DBSetProp('AFE_COSTS.nvariance', 'Field', 'DataType', "N(12,2)")
ENDFUNC
 
FUNCTION MakeView_PREPAYVIEW
***************** View setup for PREPAYVIEW ***************

CREATE SQL VIEW "PREPAYVIEW" ; 
   AS SELECT Prepayd.iprepaydpk, Prepayd.cbatch, Prepayd.cwellid, IIF(Prepayd.crectype='U' and not Prepayd.lManual, Prepayd.namount*-1, Prepayd.namount) as namount, Prepayd.cacctno, Prepayd.nrunno, Prepayd.crunyear, Prepayd.cownerid, Prepayd.deffdate, Prepayd.crectype, Prepayd.lmanual, Wells.cwellname FROM appdata!prepayd JOIN appdata!wells ON Prepayd.cwellid = Wells.cwellid WHERE prepayd.cbatch == ?lcBatch ORDER BY prepayd.cwellid, deffdate, crectype

DBSetProp('PREPAYVIEW', 'View', 'UpdateType', 1)
DBSetProp('PREPAYVIEW', 'View', 'WhereType', 3)
DBSetProp('PREPAYVIEW', 'View', 'FetchMemo', .T.)
DBSetProp('PREPAYVIEW', 'View', 'SendUpdates', .T.)
DBSetProp('PREPAYVIEW', 'View', 'UseMemoSize', 255)
DBSetProp('PREPAYVIEW', 'View', 'FetchSize', 100)
DBSetProp('PREPAYVIEW', 'View', 'MaxRecords', -1)
DBSetProp('PREPAYVIEW', 'View', 'Tables', 'appdata!prepayd')
DBSetProp('PREPAYVIEW', 'View', 'Prepared', .F.)
DBSetProp('PREPAYVIEW', 'View', 'CompareMemo', .T.)
DBSetProp('PREPAYVIEW', 'View', 'FetchAsNeeded', .F.)
DBSetProp('PREPAYVIEW', 'View', 'ParameterList', "lcbatch,'C'")
DBSetProp('PREPAYVIEW', 'View', 'Comment', "")
DBSetProp('PREPAYVIEW', 'View', 'BatchUpdateCount', 1)
DBSetProp('PREPAYVIEW', 'View', 'ShareConnection', .F.)
DBSetProp('PREPAYVIEW', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for PREPAYVIEW
* Props for the PREPAYVIEW.iprepaydpk field.
DBSetProp('PREPAYVIEW.iprepaydpk', 'Field', 'KeyField', .T.)
DBSetProp('PREPAYVIEW.iprepaydpk', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.iprepaydpk', 'Field', 'UpdateName', 'appdata!PREPAYD.IPREPAYDPK')
DBSetProp('PREPAYVIEW.iprepaydpk', 'Field', 'Caption', "Primary Key")
DBSetProp('PREPAYVIEW.iprepaydpk', 'Field', 'DataType', "I")
* Props for the PREPAYVIEW.cbatch field.
DBSetProp('PREPAYVIEW.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.cbatch', 'Field', 'UpdateName', 'appdata!prepayd.cbatch')
DBSetProp('PREPAYVIEW.cbatch', 'Field', 'Caption', "Hdr Foreign Key")
DBSetProp('PREPAYVIEW.cbatch', 'Field', 'DataType', "C(8)")
* Props for the PREPAYVIEW.cwellid field.
DBSetProp('PREPAYVIEW.cwellid', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.cwellid', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.cwellid', 'Field', 'UpdateName', 'appdata!prepayd.cwellid')
DBSetProp('PREPAYVIEW.cwellid', 'Field', 'Caption', "Well ID")
DBSetProp('PREPAYVIEW.cwellid', 'Field', 'DataType', "C(10)")
* Props for the PREPAYVIEW.namount field.
DBSetProp('PREPAYVIEW.namount', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.namount', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.namount', 'Field', 'UpdateName', 'appdata!prepayd.namount')
DBSetProp('PREPAYVIEW.namount', 'Field', 'Caption', "Prepay Amt")
DBSetProp('PREPAYVIEW.namount', 'Field', 'DataType', "N(12,2)")
* Props for the PREPAYVIEW.cacctno field.
DBSetProp('PREPAYVIEW.cacctno', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.cacctno', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.cacctno', 'Field', 'UpdateName', 'appdata!prepayd.cacctno')
DBSetProp('PREPAYVIEW.cacctno', 'Field', 'Caption', "Acct No")
DBSetProp('PREPAYVIEW.cacctno', 'Field', 'DataType', "C(6)")
* Props for the PREPAYVIEW.nrunno field.
DBSetProp('PREPAYVIEW.nrunno', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.nrunno', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.nrunno', 'Field', 'UpdateName', 'appdata!prepayd.nrunno')
DBSetProp('PREPAYVIEW.nrunno', 'Field', 'Caption', "Run No")
DBSetProp('PREPAYVIEW.nrunno', 'Field', 'DataType', "I")
* Props for the PREPAYVIEW.crunyear field.
DBSetProp('PREPAYVIEW.crunyear', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.crunyear', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.crunyear', 'Field', 'UpdateName', 'appdata!prepayd.crunyear')
DBSetProp('PREPAYVIEW.crunyear', 'Field', 'Caption', "Run Year")
DBSetProp('PREPAYVIEW.crunyear', 'Field', 'DataType', "C(4)")
* Props for the PREPAYVIEW.cownerid field.
DBSetProp('PREPAYVIEW.cownerid', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.cownerid', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.cownerid', 'Field', 'UpdateName', 'appdata!prepayd.cownerid')
DBSetProp('PREPAYVIEW.cownerid', 'Field', 'Caption', "Owner ID")
DBSetProp('PREPAYVIEW.cownerid', 'Field', 'DataType', "C(10)")
* Props for the PREPAYVIEW.deffdate field.
DBSetProp('PREPAYVIEW.deffdate', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.deffdate', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.deffdate', 'Field', 'UpdateName', 'appdata!prepayd.deffdate')
DBSetProp('PREPAYVIEW.deffdate', 'Field', 'Caption', "Effective Date")
DBSetProp('PREPAYVIEW.deffdate', 'Field', 'DataType', "D")
* Props for the PREPAYVIEW.crectype field.
DBSetProp('PREPAYVIEW.crectype', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.crectype', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.crectype', 'Field', 'UpdateName', 'appdata!prepayd.crectype')
DBSetProp('PREPAYVIEW.crectype', 'Field', 'Caption', "Pmt Type")
DBSetProp('PREPAYVIEW.crectype', 'Field', 'DataType', "C(1)")
* Props for the PREPAYVIEW.lmanual field.
DBSetProp('PREPAYVIEW.lmanual', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.lmanual', 'Field', 'Updatable', .T.)
DBSetProp('PREPAYVIEW.lmanual', 'Field', 'UpdateName', 'appdata!prepayd.lmanual')
DBSetProp('PREPAYVIEW.lmanual', 'Field', 'Caption', "Manual Entry")
DBSetProp('PREPAYVIEW.lmanual', 'Field', 'DataType', "L")
* Props for the PREPAYVIEW.cwellname field.
DBSetProp('PREPAYVIEW.cwellname', 'Field', 'KeyField', .F.)
DBSetProp('PREPAYVIEW.cwellname', 'Field', 'Updatable', .F.)
DBSetProp('PREPAYVIEW.cwellname', 'Field', 'UpdateName', 'appdata!wells.cwellname')
DBSetProp('PREPAYVIEW.cwellname', 'Field', 'Caption', "Well Name")
DBSetProp('PREPAYVIEW.cwellname', 'Field', 'DataType', "C(30)")
ENDFUNC
 
FUNCTION MakeView_CHECKREGISTER
***************** View setup for CHECKREGISTER ***************

CREATE SQL VIEW "CHECKREGISTER" ; 
   AS SELECT Checks.ccheckno, Checks.cid, Checks.cpayee, Checks.cidchec, Checks.cidtype, Checks.dcheckdate, Checks.namount, Checks.cperiod, Checks.cyear, Checks.cmemo, Checks.lprinted, Checks.lvoid, Checks.nvoidamt, Checks.cgroup, Checks.lcleared, Checks.cacctno, Checks.lmanual, Checks.centrytype, Checks.cbatch, Checks.dpostdate, Checks.lhist, Checks.csource, Checks.ldeleted, Checks.drecdate, Checks.ldeposited FROM appdata!checks WHERE  Checks.cacctno = ?pcAcctno

DBSetProp('CHECKREGISTER', 'View', 'UpdateType', 1)
DBSetProp('CHECKREGISTER', 'View', 'WhereType', 3)
DBSetProp('CHECKREGISTER', 'View', 'FetchMemo', .T.)
DBSetProp('CHECKREGISTER', 'View', 'SendUpdates', .F.)
DBSetProp('CHECKREGISTER', 'View', 'UseMemoSize', 255)
DBSetProp('CHECKREGISTER', 'View', 'FetchSize', 100)
DBSetProp('CHECKREGISTER', 'View', 'MaxRecords', -1)
DBSetProp('CHECKREGISTER', 'View', 'Tables', 'appdata!checks')
DBSetProp('CHECKREGISTER', 'View', 'Prepared', .F.)
DBSetProp('CHECKREGISTER', 'View', 'CompareMemo', .T.)
DBSetProp('CHECKREGISTER', 'View', 'FetchAsNeeded', .F.)
DBSetProp('CHECKREGISTER', 'View', 'Comment', "")
DBSetProp('CHECKREGISTER', 'View', 'BatchUpdateCount', 1)
DBSetProp('CHECKREGISTER', 'View', 'ShareConnection', .F.)
DBSetProp('CHECKREGISTER', 'View', 'AllowSimultaneousFetch', .F.)

*!* Field Level Properties for CHECKREGISTER
* Props for the CHECKREGISTER.ccheckno field.
DBSetProp('CHECKREGISTER.ccheckno', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.ccheckno', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.ccheckno', 'Field', 'UpdateName', 'appdata!checks.ccheckno')
DBSetProp('CHECKREGISTER.ccheckno', 'Field', 'Caption', "Check No")
DBSetProp('CHECKREGISTER.ccheckno', 'Field', 'DataType', "C(10)")
* Props for the CHECKREGISTER.cid field.
DBSetProp('CHECKREGISTER.cid', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cid', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cid', 'Field', 'UpdateName', 'appdata!checks.cid')
DBSetProp('CHECKREGISTER.cid', 'Field', 'Caption', "ID Code")
DBSetProp('CHECKREGISTER.cid', 'Field', 'DataType', "C(10)")
* Props for the CHECKREGISTER.cpayee field.
DBSetProp('CHECKREGISTER.cpayee', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cpayee', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cpayee', 'Field', 'UpdateName', 'appdata!checks.cpayee')
DBSetProp('CHECKREGISTER.cpayee', 'Field', 'Caption', "Payee")
DBSetProp('CHECKREGISTER.cpayee', 'Field', 'DataType', "C(60)")
* Props for the CHECKREGISTER.cidchec field.
DBSetProp('CHECKREGISTER.cidchec', 'Field', 'KeyField', .T.)
DBSetProp('CHECKREGISTER.cidchec', 'Field', 'Updatable', .F.)
DBSetProp('CHECKREGISTER.cidchec', 'Field', 'UpdateName', 'appdata!checks.cidchec')
DBSetProp('CHECKREGISTER.cidchec', 'Field', 'Caption', "Primary Key")
DBSetProp('CHECKREGISTER.cidchec', 'Field', 'DataType', "C(8)")
* Props for the CHECKREGISTER.cidtype field.
DBSetProp('CHECKREGISTER.cidtype', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cidtype', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cidtype', 'Field', 'UpdateName', 'appdata!checks.cidtype')
DBSetProp('CHECKREGISTER.cidtype', 'Field', 'Caption', "ID Type")
DBSetProp('CHECKREGISTER.cidtype', 'Field', 'DataType', "C(1)")
* Props for the CHECKREGISTER.dcheckdate field.
DBSetProp('CHECKREGISTER.dcheckdate', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.dcheckdate', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.dcheckdate', 'Field', 'UpdateName', 'appdata!checks.dcheckdate')
DBSetProp('CHECKREGISTER.dcheckdate', 'Field', 'Caption', "Date")
DBSetProp('CHECKREGISTER.dcheckdate', 'Field', 'DataType', "D")
* Props for the CHECKREGISTER.namount field.
DBSetProp('CHECKREGISTER.namount', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.namount', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.namount', 'Field', 'UpdateName', 'appdata!checks.namount')
DBSetProp('CHECKREGISTER.namount', 'Field', 'Caption', "Amount")
DBSetProp('CHECKREGISTER.namount', 'Field', 'DataType', "N(12,2)")
* Props for the CHECKREGISTER.cperiod field.
DBSetProp('CHECKREGISTER.cperiod', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cperiod', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cperiod', 'Field', 'UpdateName', 'appdata!checks.cperiod')
DBSetProp('CHECKREGISTER.cperiod', 'Field', 'Caption', "Period")
DBSetProp('CHECKREGISTER.cperiod', 'Field', 'DataType', "C(2)")
* Props for the CHECKREGISTER.cyear field.
DBSetProp('CHECKREGISTER.cyear', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cyear', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cyear', 'Field', 'UpdateName', 'appdata!checks.cyear')
DBSetProp('CHECKREGISTER.cyear', 'Field', 'Caption', "Year")
DBSetProp('CHECKREGISTER.cyear', 'Field', 'DataType', "C(4)")
* Props for the CHECKREGISTER.cmemo field.
DBSetProp('CHECKREGISTER.cmemo', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cmemo', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cmemo', 'Field', 'UpdateName', 'appdata!checks.cmemo')
DBSetProp('CHECKREGISTER.cmemo', 'Field', 'Caption', "Memo")
DBSetProp('CHECKREGISTER.cmemo', 'Field', 'DataType', "C(50)")
* Props for the CHECKREGISTER.lprinted field.
DBSetProp('CHECKREGISTER.lprinted', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.lprinted', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.lprinted', 'Field', 'UpdateName', 'appdata!checks.lprinted')
DBSetProp('CHECKREGISTER.lprinted', 'Field', 'Caption', "Printed")
DBSetProp('CHECKREGISTER.lprinted', 'Field', 'DataType', "L")
* Props for the CHECKREGISTER.lvoid field.
DBSetProp('CHECKREGISTER.lvoid', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.lvoid', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.lvoid', 'Field', 'UpdateName', 'appdata!checks.lvoid')
DBSetProp('CHECKREGISTER.lvoid', 'Field', 'Caption', "Void")
DBSetProp('CHECKREGISTER.lvoid', 'Field', 'DataType', "L")
* Props for the CHECKREGISTER.nvoidamt field.
DBSetProp('CHECKREGISTER.nvoidamt', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.nvoidamt', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.nvoidamt', 'Field', 'UpdateName', 'appdata!checks.nvoidamt')
DBSetProp('CHECKREGISTER.nvoidamt', 'Field', 'Caption', "Void Amount")
DBSetProp('CHECKREGISTER.nvoidamt', 'Field', 'DataType', "N(9,2)")
* Props for the CHECKREGISTER.cgroup field.
DBSetProp('CHECKREGISTER.cgroup', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cgroup', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cgroup', 'Field', 'UpdateName', 'appdata!checks.cgroup')
DBSetProp('CHECKREGISTER.cgroup', 'Field', 'Caption', "Group")
DBSetProp('CHECKREGISTER.cgroup', 'Field', 'DataType', "C(2)")
* Props for the CHECKREGISTER.lcleared field.
DBSetProp('CHECKREGISTER.lcleared', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.lcleared', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.lcleared', 'Field', 'UpdateName', 'appdata!checks.lcleared')
DBSetProp('CHECKREGISTER.lcleared', 'Field', 'Caption', "Cleared")
DBSetProp('CHECKREGISTER.lcleared', 'Field', 'DataType', "L")
* Props for the CHECKREGISTER.cacctno field.
DBSetProp('CHECKREGISTER.cacctno', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cacctno', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cacctno', 'Field', 'UpdateName', 'appdata!checks.cacctno')
DBSetProp('CHECKREGISTER.cacctno', 'Field', 'Caption', "Account No")
DBSetProp('CHECKREGISTER.cacctno', 'Field', 'DataType', "C(6)")
* Props for the CHECKREGISTER.lmanual field.
DBSetProp('CHECKREGISTER.lmanual', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.lmanual', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.lmanual', 'Field', 'UpdateName', 'appdata!checks.lmanual')
DBSetProp('CHECKREGISTER.lmanual', 'Field', 'Caption', "Manual Ck")
DBSetProp('CHECKREGISTER.lmanual', 'Field', 'DataType', "L")
* Props for the CHECKREGISTER.centrytype field.
DBSetProp('CHECKREGISTER.centrytype', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.centrytype', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.centrytype', 'Field', 'UpdateName', 'appdata!checks.centrytype')
DBSetProp('CHECKREGISTER.centrytype', 'Field', 'Caption', "Entry Type")
DBSetProp('CHECKREGISTER.centrytype', 'Field', 'DataType', "C(1)")
* Props for the CHECKREGISTER.cbatch field.
DBSetProp('CHECKREGISTER.cbatch', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.cbatch', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.cbatch', 'Field', 'UpdateName', 'appdata!checks.cbatch')
DBSetProp('CHECKREGISTER.cbatch', 'Field', 'Caption', "Batch No")
DBSetProp('CHECKREGISTER.cbatch', 'Field', 'DataType', "C(8)")
* Props for the CHECKREGISTER.dpostdate field.
DBSetProp('CHECKREGISTER.dpostdate', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.dpostdate', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.dpostdate', 'Field', 'UpdateName', 'appdata!checks.dpostdate')
DBSetProp('CHECKREGISTER.dpostdate', 'Field', 'Caption', "Post Date")
DBSetProp('CHECKREGISTER.dpostdate', 'Field', 'DataType', "D")
* Props for the CHECKREGISTER.lhist field.
DBSetProp('CHECKREGISTER.lhist', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.lhist', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.lhist', 'Field', 'UpdateName', 'appdata!checks.lhist')
DBSetProp('CHECKREGISTER.lhist', 'Field', 'Caption', "Historical Entry")
DBSetProp('CHECKREGISTER.lhist', 'Field', 'DataType', "L")
* Props for the CHECKREGISTER.csource field.
DBSetProp('CHECKREGISTER.csource', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.csource', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.csource', 'Field', 'UpdateName', 'appdata!checks.csource')
DBSetProp('CHECKREGISTER.csource', 'Field', 'Caption', "Source")
DBSetProp('CHECKREGISTER.csource', 'Field', 'DataType', "C(2)")
* Props for the CHECKREGISTER.ldeleted field.
DBSetProp('CHECKREGISTER.ldeleted', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.ldeleted', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.ldeleted', 'Field', 'UpdateName', 'appdata!checks.ldeleted')
DBSetProp('CHECKREGISTER.ldeleted', 'Field', 'Caption', "Deleted")
DBSetProp('CHECKREGISTER.ldeleted', 'Field', 'DataType', "L")
* Props for the CHECKREGISTER.drecdate field.
DBSetProp('CHECKREGISTER.drecdate', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.drecdate', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.drecdate', 'Field', 'UpdateName', 'appdata!checks.drecdate')
DBSetProp('CHECKREGISTER.drecdate', 'Field', 'Caption', "Reconciliation Date")
DBSetProp('CHECKREGISTER.drecdate', 'Field', 'DataType', "D")
* Props for the CHECKREGISTER.ldeposited field.
DBSetProp('CHECKREGISTER.ldeposited', 'Field', 'KeyField', .F.)
DBSetProp('CHECKREGISTER.ldeposited', 'Field', 'Updatable', .T.)
DBSetProp('CHECKREGISTER.ldeposited', 'Field', 'UpdateName', 'appdata!checks.ldeposited')
DBSetProp('CHECKREGISTER.ldeposited', 'Field', 'Caption', "Remove from Undepfunds")
DBSetProp('CHECKREGISTER.ldeposited', 'Field', 'DataType', "L")
ENDFUNC
 
*************** Begin Relations Setup **************

FUNCTION MakeRelation_1
ALTER TABLE 'AFEDET' ADD FOREIGN KEY TAG CIDAFEH REFERENCES AFEHDR TAG CIDAFEH
ENDFUNC


FUNCTION MakeRelation_2
ALTER TABLE 'AFEDET' ADD FOREIGN KEY TAG CCATCODE REFERENCES EXPCAT TAG CCATCODE
ENDFUNC


FUNCTION MakeRelation_3
ALTER TABLE 'AFEHDR' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_4
ALTER TABLE 'AFEOWNER' ADD FOREIGN KEY TAG CCATCODE REFERENCES EXPCAT TAG CCATCODE
ENDFUNC


FUNCTION MakeRelation_5
ALTER TABLE 'APPMTDET' ADD FOREIGN KEY TAG CBATCH REFERENCES APPMTHDR TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_6
ALTER TABLE 'APPMTDET' ADD FOREIGN KEY TAG VENDORID REFERENCES VENDOR TAG CVENDORID
ENDFUNC


FUNCTION MakeRelation_7
ALTER TABLE 'APPURCHH' ADD FOREIGN KEY TAG VENDORID REFERENCES VENDOR TAG CVENDORID
ENDFUNC


FUNCTION MakeRelation_8
ALTER TABLE 'APPURECD' ADD FOREIGN KEY TAG CCATCODE REFERENCES EXPCAT TAG CCATCODE
ENDFUNC


FUNCTION MakeRelation_9
ALTER TABLE 'APPURECD' ADD FOREIGN KEY TAG CBATCH REFERENCES APPURECH TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_10
ALTER TABLE 'APPURECD' ADD FOREIGN KEY TAG CACCTNO REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_11
ALTER TABLE 'APPURECD' ADD FOREIGN KEY TAG CITEMID REFERENCES ITEMS TAG CITEMID
ENDFUNC


FUNCTION MakeRelation_12
ALTER TABLE 'APPURECD' ADD FOREIGN KEY TAG CUNITNO REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_13
ALTER TABLE 'APPURECH' ADD FOREIGN KEY TAG VENDORID REFERENCES VENDOR TAG CVENDORID
ENDFUNC


FUNCTION MakeRelation_14
ALTER TABLE 'ARPMTDET' ADD FOREIGN KEY TAG CCUSTID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_15
ALTER TABLE 'ARPMTHDR' ADD FOREIGN KEY TAG CCUSTID REFERENCES CUSTS TAG CCUSTID
ENDFUNC


FUNCTION MakeRelation_16
ALTER TABLE 'ARPMTHDR' ADD FOREIGN KEY TAG CCUSTID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_17
ALTER TABLE 'BRINELOG' ADD FOREIGN KEY TAG DISPPERM REFERENCES DISPOSAL TAG PERMIT
ENDFUNC


FUNCTION MakeRelation_18
ALTER TABLE 'CHECKS' ADD FOREIGN KEY TAG CACCTNO REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_19
ALTER TABLE 'CHECKS' ADD FOREIGN KEY TAG ID REFERENCES CUSTS TAG CCUSTID
ENDFUNC


FUNCTION MakeRelation_20
ALTER TABLE 'CHECKS' ADD FOREIGN KEY TAG ID REFERENCES EMPS TAG CEMPID
ENDFUNC


FUNCTION MakeRelation_21
ALTER TABLE 'CHECKS' ADD FOREIGN KEY TAG ID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_22
ALTER TABLE 'CHECKS' ADD FOREIGN KEY TAG ID REFERENCES VENDOR TAG CVENDORID
ENDFUNC


FUNCTION MakeRelation_23
ALTER TABLE 'CSDISDET' ADD FOREIGN KEY TAG CUNITNO REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_24
ALTER TABLE 'CSDISDET' ADD FOREIGN KEY TAG CBATCH REFERENCES CSDISHDR TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_25
ALTER TABLE 'CSDISDET' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_26
ALTER TABLE 'CSRCTDET' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_27
ALTER TABLE 'CSRCTDET' ADD FOREIGN KEY TAG CBATCH REFERENCES CSRCTHDR TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_28
ALTER TABLE 'CSRCTDET' ADD FOREIGN KEY TAG CTYPE REFERENCES EXPCAT TAG CCATCODE
ENDFUNC


FUNCTION MakeRelation_29
ALTER TABLE 'CSRCTDET' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_30
ALTER TABLE 'DEPLFILE' ADD FOREIGN KEY TAG WELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_31
ALTER TABLE 'DEPOSITD' ADD FOREIGN KEY TAG CBATCH REFERENCES DEPOSITS TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_32
ALTER TABLE 'DISBHIST' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_33
ALTER TABLE 'DISBHIST' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_34
ALTER TABLE 'EXPCAT' ADD FOREIGN KEY TAG CDRACCTO REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_35
ALTER TABLE 'EXPCAT' ADD FOREIGN KEY TAG CCRACCTV REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_36
ALTER TABLE 'EXPCAT' ADD FOREIGN KEY TAG CCRACCTO REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_37
ALTER TABLE 'EXPCAT' ADD FOREIGN KEY TAG CTAXCODE REFERENCES TAXCODES TAG CTAXCODE
ENDFUNC


FUNCTION MakeRelation_38
ALTER TABLE 'EXPCAT' ADD FOREIGN KEY TAG CDRACCTV REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_39
ALTER TABLE 'FORM1065' ADD FOREIGN KEY TAG CPROGCODE REFERENCES PROGRAMS TAG CPROGCODE
ENDFUNC


FUNCTION MakeRelation_40
ALTER TABLE 'FORM6' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_41
ALTER TABLE 'GASINV' ADD FOREIGN KEY TAG CMETERNO REFERENCES GASOWN TAG CMETERNO
ENDFUNC


FUNCTION MakeRelation_42
ALTER TABLE 'GASOWN' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_43
ALTER TABLE 'GASUSE' ADD FOREIGN KEY TAG CMETER REFERENCES GASOWN TAG CMETERNO
ENDFUNC


FUNCTION MakeRelation_44
ALTER TABLE 'GASUSE' ADD FOREIGN KEY TAG CMETERNO REFERENCES GASOWN TAG CMETERNO
ENDFUNC


FUNCTION MakeRelation_45
ALTER TABLE 'GASUSE' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_46
ALTER TABLE 'GLMASTER' ADD FOREIGN KEY TAG CID REFERENCES CUSTS TAG CCUSTID
ENDFUNC


FUNCTION MakeRelation_47
ALTER TABLE 'GLMASTER' ADD FOREIGN KEY TAG CID REFERENCES EMPS TAG CEMPID
ENDFUNC


FUNCTION MakeRelation_48
ALTER TABLE 'GLMASTER' ADD FOREIGN KEY TAG CCATCODE REFERENCES EXPCAT TAG CCATCODE
ENDFUNC


FUNCTION MakeRelation_49
ALTER TABLE 'GLMASTER' ADD FOREIGN KEY TAG CID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_50
ALTER TABLE 'GLMASTER' ADD FOREIGN KEY TAG ACCTNO REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_51
ALTER TABLE 'GLMASTER' ADD FOREIGN KEY TAG CID REFERENCES VENDOR TAG CVENDORID
ENDFUNC


FUNCTION MakeRelation_52
ALTER TABLE 'GLMASTER' ADD FOREIGN KEY TAG CUNITNO REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_53
ALTER TABLE 'GLREDET' ADD FOREIGN KEY TAG CUNITNO REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_54
ALTER TABLE 'GLREDET' ADD FOREIGN KEY TAG BATCH REFERENCES GLRECUR TAG BATCH
ENDFUNC


FUNCTION MakeRelation_55
ALTER TABLE 'INVDET' ADD FOREIGN KEY TAG CACCTNO REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_56
ALTER TABLE 'INVDET' ADD FOREIGN KEY TAG CBATCH REFERENCES INVHDR TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_57
ALTER TABLE 'INVDET' ADD FOREIGN KEY TAG CITEMID REFERENCES ITEMS TAG CITEMID
ENDFUNC


FUNCTION MakeRelation_58
ALTER TABLE 'INVDET' ADD FOREIGN KEY TAG CUNITNO REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_59
ALTER TABLE 'INVHDR' ADD FOREIGN KEY TAG CCUSTID REFERENCES CUSTS TAG CCUSTID
ENDFUNC


FUNCTION MakeRelation_60
ALTER TABLE 'INVHDR' ADD FOREIGN KEY TAG CCUSTID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_61
ALTER TABLE 'INVRECD' ADD FOREIGN KEY TAG CBATCH REFERENCES INVRECH TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_62
ALTER TABLE 'INVTRANS' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_63
ALTER TABLE 'INVTRANS' ADD FOREIGN KEY TAG CITEMID REFERENCES ITEMS TAG CITEMID
ENDFUNC


FUNCTION MakeRelation_64
ALTER TABLE 'ITEMS' ADD FOREIGN KEY TAG CDISPERM REFERENCES DISPOSAL TAG PERMIT
ENDFUNC


FUNCTION MakeRelation_65
ALTER TABLE 'K1FILE' ADD FOREIGN KEY TAG CPROGCODE REFERENCES PROGRAMS TAG CPROGCODE
ENDFUNC


FUNCTION MakeRelation_66
ALTER TABLE 'LANDHIST' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_67
ALTER TABLE 'LANDHIST' ADD FOREIGN KEY TAG CLEASEID REFERENCES LAND TAG CLEASEID
ENDFUNC


FUNCTION MakeRelation_68
ALTER TABLE 'LANDOWNER' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_69
ALTER TABLE 'LANDOWNER' ADD FOREIGN KEY TAG CLEASEID REFERENCES LAND TAG CLEASEID
ENDFUNC


FUNCTION MakeRelation_70
ALTER TABLE 'LEASEWELL' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_71
ALTER TABLE 'LEASEWELL' ADD FOREIGN KEY TAG CLEASEID REFERENCES LAND TAG CLEASEID
ENDFUNC


FUNCTION MakeRelation_72
ALTER TABLE 'METERALL' ADD FOREIGN KEY TAG CMETERID REFERENCES METERS TAG METERID
ENDFUNC


FUNCTION MakeRelation_73
ALTER TABLE 'METERDATA' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_74
ALTER TABLE 'METERDATA' ADD FOREIGN KEY TAG CMETERID REFERENCES METERS TAG METERID
ENDFUNC


FUNCTION MakeRelation_75
ALTER TABLE 'METERSUB' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_76
ALTER TABLE 'METERSUB' ADD FOREIGN KEY TAG CBATCH REFERENCES METERALL TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_77
ALTER TABLE 'METERSUB' ADD FOREIGN KEY TAG CMETERID REFERENCES METERS TAG METERID
ENDFUNC


FUNCTION MakeRelation_78
ALTER TABLE 'PRCODES' ADD FOREIGN KEY TAG CEMPID REFERENCES EMPS TAG CEMPID
ENDFUNC


FUNCTION MakeRelation_79
ALTER TABLE 'PRDATA' ADD FOREIGN KEY TAG CEMPID REFERENCES EMPS TAG CEMPID
ENDFUNC


FUNCTION MakeRelation_80
ALTER TABLE 'PREMPTAX' ADD FOREIGN KEY TAG CEMPID REFERENCES EMPS TAG CEMPID
ENDFUNC


FUNCTION MakeRelation_81
ALTER TABLE 'PREPAYD' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_82
ALTER TABLE 'PREPAYD' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_83
ALTER TABLE 'PREPAYH' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_84
ALTER TABLE 'PROGHSTD' ADD FOREIGN KEY TAG CBATCH REFERENCES PROGHSTH TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_85
ALTER TABLE 'PROGHSTH' ADD FOREIGN KEY TAG CPROGCODE REFERENCES PROGRAMS TAG CPROGCODE
ENDFUNC


FUNCTION MakeRelation_86
ALTER TABLE 'PROGREL' ADD FOREIGN KEY TAG CPROGCODE REFERENCES PROGRAMS TAG CPROGCODE
ENDFUNC


FUNCTION MakeRelation_87
ALTER TABLE 'ROUNDTMP' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_88
ALTER TABLE 'STMTNOTE' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_89
ALTER TABLE 'SUSAUDIT' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_90
ALTER TABLE 'SUSAUDIT' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_91
ALTER TABLE 'SUSPENSE' ADD FOREIGN KEY TAG CGROUP REFERENCES GROUPS TAG CGROUP
ENDFUNC


FUNCTION MakeRelation_92
ALTER TABLE 'SUSPENSE' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_93
ALTER TABLE 'SUSPENSE' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_94
ALTER TABLE 'TAX1099' ADD FOREIGN KEY TAG CID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_95
ALTER TABLE 'VENDEXP' ADD FOREIGN KEY TAG VENDORID REFERENCES VENDOR TAG CVENDORID
ENDFUNC


FUNCTION MakeRelation_96
ALTER TABLE 'WELLHIST' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_97
ALTER TABLE 'WELLINV' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_98
ALTER TABLE 'WELLINV' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_99
ALTER TABLE 'WELLINV' ADD FOREIGN KEY TAG CPROGCODE REFERENCES PROGRAMS TAG CPROGCODE
ENDFUNC


FUNCTION MakeRelation_100
ALTER TABLE 'WELLS' ADD FOREIGN KEY TAG CGROUP REFERENCES GROUPS TAG CGROUP
ENDFUNC


FUNCTION MakeRelation_101
ALTER TABLE 'WELLS' ADD FOREIGN KEY TAG CLEASEID REFERENCES LAND TAG CLEASEID
ENDFUNC


FUNCTION MakeRelation_102
ALTER TABLE 'WELLS' ADD FOREIGN KEY TAG CMETERID REFERENCES METERS TAG METERID
ENDFUNC


FUNCTION MakeRelation_103
ALTER TABLE 'WELLS' ADD FOREIGN KEY TAG CIDPUMPER REFERENCES PUMPERS TAG CIDPUMPER
ENDFUNC


FUNCTION MakeRelation_104
ALTER TABLE 'WELLS' ADD FOREIGN KEY TAG CTABLE REFERENCES SEVTAX TAG CTABLE
ENDFUNC


FUNCTION MakeRelation_105
ALTER TABLE 'WELLTOTS' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_106
ALTER TABLE 'WORKORD' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_107
ALTER TABLE 'EXPENSE' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_108
ALTER TABLE 'EXPENSE' ADD FOREIGN KEY TAG CCATCODE REFERENCES EXPCAT TAG CCATCODE
ENDFUNC


FUNCTION MakeRelation_109
ALTER TABLE 'EXPENSE' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_110
ALTER TABLE 'EXPENSE' ADD FOREIGN KEY TAG CVENDORID REFERENCES VENDOR TAG CVENDORID
ENDFUNC


FUNCTION MakeRelation_111
ALTER TABLE 'INCOME' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_112
ALTER TABLE 'INCOME' ADD FOREIGN KEY TAG REVKEY REFERENCES REVSRC TAG CREVKEY
ENDFUNC


FUNCTION MakeRelation_113
ALTER TABLE 'EXPSUSP' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_114
ALTER TABLE 'EXPSUSP' ADD FOREIGN KEY TAG CCATCODE REFERENCES EXPCAT TAG CCATCODE
ENDFUNC


FUNCTION MakeRelation_115
ALTER TABLE 'EXPSUSP' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_116
ALTER TABLE 'INCSUSP' ADD FOREIGN KEY TAG CWELLID REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_117
ALTER TABLE 'INCSUSP' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC


FUNCTION MakeRelation_118
ALTER TABLE 'APPURCHD' ADD FOREIGN KEY TAG CACCTNO REFERENCES COA TAG ACCTNO
ENDFUNC


FUNCTION MakeRelation_119
ALTER TABLE 'APPURCHD' ADD FOREIGN KEY TAG CUNITNO REFERENCES WELLS TAG CWELLID
ENDFUNC


FUNCTION MakeRelation_120
ALTER TABLE 'APPURCHD' ADD FOREIGN KEY TAG CCATCODE REFERENCES EXPCAT TAG CCATCODE
ENDFUNC


FUNCTION MakeRelation_121
ALTER TABLE 'APPURCHD' ADD FOREIGN KEY TAG CBATCH REFERENCES APPURCHH TAG CBATCH
ENDFUNC


FUNCTION MakeRelation_122
ALTER TABLE 'APPURCHD' ADD FOREIGN KEY TAG COWNERID REFERENCES INVESTOR TAG COWNERID
ENDFUNC

FUNCTION MakeRI
***** Referential Integrity Setup *****
CLOSE DATABASE
USE 'APPDATA.DBC'
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'afedet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CIDAFEH'$Property AND 'AFEHDR'$Property AND 'CIDAFEH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'afedet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCATCODE'$Property AND 'EXPCAT'$Property AND 'CCATCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'afehdr'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'afeowner'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCATCODE'$Property AND 'EXPCAT'$Property AND 'CCATCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appmtdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'APPMTHDR'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appmtdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'VENDORID'$Property AND 'VENDOR'$Property AND 'CVENDORID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurchh'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'VENDORID'$Property AND 'VENDOR'$Property AND 'CVENDORID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurecd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCATCODE'$Property AND 'EXPCAT'$Property AND 'CCATCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurecd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'APPURECH'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurecd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CACCTNO'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurecd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CITEMID'$Property AND 'ITEMS'$Property AND 'CITEMID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurecd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CUNITNO'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurech'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'VENDORID'$Property AND 'VENDOR'$Property AND 'CVENDORID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'arpmtdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCUSTID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'arpmthdr'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCUSTID'$Property AND 'CUSTS'$Property AND 'CCUSTID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'arpmthdr'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCUSTID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'brinelog'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'DISPPERM'$Property AND 'DISPOSAL'$Property AND 'PERMIT'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'checks'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CACCTNO'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'checks'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'ID'$Property AND 'CUSTS'$Property AND 'CCUSTID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'checks'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'ID'$Property AND 'EMPS'$Property AND 'CEMPID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'checks'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'ID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'checks'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'ID'$Property AND 'VENDOR'$Property AND 'CVENDORID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'csdisdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CUNITNO'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'csdisdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'CSDISHDR'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'csdisdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'csrctdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'csrctdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'CSRCTHDR'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'csrctdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CTYPE'$Property AND 'EXPCAT'$Property AND 'CCATCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'csrctdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'deplfile'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'WELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'depositd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'DEPOSITS'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'disbhist'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'disbhist'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expcat'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CDRACCTO'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expcat'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCRACCTV'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expcat'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCRACCTO'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expcat'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CTAXCODE'$Property AND 'TAXCODES'$Property AND 'CTAXCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expcat'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CDRACCTV'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'form1065'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CPROGCODE'$Property AND 'PROGRAMS'$Property AND 'CPROGCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'form6'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'gasinv'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CMETERNO'$Property AND 'GASOWN'$Property AND 'CMETERNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'gasown'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'gasuse'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CMETER'$Property AND 'GASOWN'$Property AND 'CMETERNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'gasuse'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CMETERNO'$Property AND 'GASOWN'$Property AND 'CMETERNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'gasuse'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glmaster'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CID'$Property AND 'CUSTS'$Property AND 'CCUSTID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glmaster'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CID'$Property AND 'EMPS'$Property AND 'CEMPID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glmaster'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCATCODE'$Property AND 'EXPCAT'$Property AND 'CCATCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glmaster'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glmaster'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'ACCTNO'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glmaster'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CID'$Property AND 'VENDOR'$Property AND 'CVENDORID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glmaster'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CUNITNO'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glredet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CUNITNO'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'glredet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'BATCH'$Property AND 'GLRECUR'$Property AND 'BATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CACCTNO'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'INVHDR'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CITEMID'$Property AND 'ITEMS'$Property AND 'CITEMID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invdet'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CUNITNO'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invhdr'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCUSTID'$Property AND 'CUSTS'$Property AND 'CCUSTID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invhdr'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCUSTID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invrecd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'INVRECH'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invtrans'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'invtrans'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CITEMID'$Property AND 'ITEMS'$Property AND 'CITEMID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'items'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CDISPERM'$Property AND 'DISPOSAL'$Property AND 'PERMIT'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'k1file'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CPROGCODE'$Property AND 'PROGRAMS'$Property AND 'CPROGCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'landhist'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'landhist'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CLEASEID'$Property AND 'LAND'$Property AND 'CLEASEID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'landowner'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'landowner'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CLEASEID'$Property AND 'LAND'$Property AND 'CLEASEID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'leasewell'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'leasewell'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CLEASEID'$Property AND 'LAND'$Property AND 'CLEASEID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'meterall'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CMETERID'$Property AND 'METERS'$Property AND 'METERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'meterdata'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'meterdata'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CMETERID'$Property AND 'METERS'$Property AND 'METERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'metersub'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'metersub'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'METERALL'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'metersub'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CMETERID'$Property AND 'METERS'$Property AND 'METERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'prcodes'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CEMPID'$Property AND 'EMPS'$Property AND 'CEMPID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'prdata'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CEMPID'$Property AND 'EMPS'$Property AND 'CEMPID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'premptax'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CEMPID'$Property AND 'EMPS'$Property AND 'CEMPID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'prepayd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'prepayd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'prepayh'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'proghstd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'PROGHSTH'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'proghsth'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CPROGCODE'$Property AND 'PROGRAMS'$Property AND 'CPROGCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'progrel'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CPROGCODE'$Property AND 'PROGRAMS'$Property AND 'CPROGCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'roundtmp'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'stmtnote'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'susaudit'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'susaudit'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'suspense'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CGROUP'$Property AND 'GROUPS'$Property AND 'CGROUP'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'suspense'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'suspense'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'tax1099'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'vendexp'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'VENDORID'$Property AND 'VENDOR'$Property AND 'CVENDORID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wellhist'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wellinv'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wellinv'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wellinv'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CPROGCODE'$Property AND 'PROGRAMS'$Property AND 'CPROGCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wells'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CGROUP'$Property AND 'GROUPS'$Property AND 'CGROUP'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wells'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CLEASEID'$Property AND 'LAND'$Property AND 'CLEASEID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wells'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CMETERID'$Property AND 'METERS'$Property AND 'METERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wells'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CIDPUMPER'$Property AND 'PUMPERS'$Property AND 'CIDPUMPER'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'wells'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CTABLE'$Property AND 'SEVTAX'$Property AND 'CTABLE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'welltots'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'workord'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expense'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expense'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCATCODE'$Property AND 'EXPCAT'$Property AND 'CCATCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expense'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expense'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CVENDORID'$Property AND 'VENDOR'$Property AND 'CVENDORID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CRI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'income'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'income'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'REVKEY'$Property AND 'REVSRC'$Property AND 'CREVKEY'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expsusp'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expsusp'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCATCODE'$Property AND 'EXPCAT'$Property AND 'CCATCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'expsusp'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'incsusp'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CWELLID'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'incsusp'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurchd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CACCTNO'$Property AND 'COA'$Property AND 'ACCTNO'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurchd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CUNITNO'$Property AND 'WELLS'$Property AND 'CWELLID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurchd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CCATCODE'$Property AND 'EXPCAT'$Property AND 'CCATCODE'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurchd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'CBATCH'$Property AND 'APPURCHH'$Property AND 'CBATCH'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CCI   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
LOCATE FOR ObjectType = 'Table' AND ObjectName = 'appurchd'
IF FOUND()
    nObjectID = ObjectID
    LOCATE FOR ObjectType = 'Relation' AND 'COWNERID'$Property AND 'INVESTOR'$Property AND 'COWNERID'$Property AND ParentID = nObjectID
    IF FOUND()
	      REPLACE RiInfo WITH 'CII   '
    ELSE
       ? "Could not set RI Information."
    ENDIF
ENDIF
USE
ENDFUNC


FUNCTION DisplayStatus(lcMessage)
WAIT WINDOW NOWAIT lcMessage
ENDFUNC
