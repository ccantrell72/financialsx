// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
import {auth} from '../models';
import {company} from '../models';

export function AuditBankReconciliation(arg1:string):Promise<Record<string, any>>;

export function AuditCheckBatches(arg1:string):Promise<Record<string, any>>;

export function AuditSingleBankAccount(arg1:string,arg2:string):Promise<Record<string, any>>;

export function ClearMatchesAndRerun(arg1:string,arg2:string,arg3:Record<string, any>):Promise<Record<string, any>>;

export function CommitReconciliation(arg1:string,arg2:string):Promise<Record<string, any>>;

export function CreateUser(arg1:string,arg2:string,arg3:string,arg4:number):Promise<auth.User>;

export function DeleteBankStatement(arg1:string,arg2:string):Promise<void>;

export function DeleteReconciliationDraft(arg1:string,arg2:string):Promise<Record<string, any>>;

export function ExportNetDistribution(arg1:string,arg2:string,arg3:string):Promise<void>;

export function GetAPIKey(arg1:string):Promise<string>;

export function GetAccountBalance(arg1:string,arg2:string):Promise<number>;

export function GetAllRoles():Promise<Array<auth.Role>>;

export function GetAllUsers():Promise<Array<auth.User>>;

export function GetBalanceHistory(arg1:string,arg2:string,arg3:number):Promise<Array<Record<string, any>>>;

export function GetBankAccounts(arg1:string):Promise<Array<Record<string, any>>>;

export function GetBankAccountsForAudit(arg1:string):Promise<Array<Record<string, any>>>;

export function GetBankTransactions(arg1:string,arg2:string,arg3:string):Promise<Record<string, any>>;

export function GetCachedBalances(arg1:string):Promise<Array<Record<string, any>>>;

export function GetClosingStatus(arg1:string):Promise<string>;

export function GetCompanies():Promise<Array<company.Company>>;

export function GetConfig():Promise<Record<string, any>>;

export function GetDBFFiles(arg1:string):Promise<Array<string>>;

export function GetDBFTableData(arg1:string,arg2:string):Promise<Record<string, any>>;

export function GetDBFTableDataPaged(arg1:string,arg2:string,arg3:number,arg4:number,arg5:string,arg6:string):Promise<Record<string, any>>;

export function GetDashboardData(arg1:string):Promise<Record<string, any>>;

export function GetLastReconciliation(arg1:string,arg2:string):Promise<Record<string, any>>;

export function GetMatchedTransactions(arg1:string,arg2:string):Promise<Record<string, any>>;

export function GetNetDistributionStatus(arg1:string,arg2:string):Promise<Record<string, any>>;

export function GetOutstandingChecks(arg1:string,arg2:string):Promise<Record<string, any>>;

export function GetRecentBankStatements(arg1:string,arg2:string):Promise<Array<Record<string, any>>>;

export function GetReconciliationDraft(arg1:string,arg2:string):Promise<Record<string, any>>;

export function GetReconciliationHistory(arg1:string,arg2:string):Promise<Record<string, any>>;

export function Greet(arg1:string):Promise<string>;

export function ImportBankStatement(arg1:string,arg2:string,arg3:string):Promise<Record<string, any>>;

export function Login(arg1:string,arg2:string,arg3:string):Promise<Record<string, any>>;

export function Logout(arg1:string):Promise<void>;

export function ManualMatchTransaction(arg1:number,arg2:string,arg3:number):Promise<Record<string, any>>;

export function MigrateReconciliationData(arg1:string):Promise<Record<string, any>>;

export function RefreshAccountBalance(arg1:string,arg2:string):Promise<Record<string, any>>;

export function RefreshAllBalances(arg1:string):Promise<Record<string, any>>;

export function Register(arg1:string,arg2:string,arg3:string,arg4:string):Promise<Record<string, any>>;

export function ReopenPeriod(arg1:string,arg2:string):Promise<void>;

export function RetryMatching(arg1:string,arg2:string,arg3:number):Promise<Record<string, any>>;

export function RunClosingProcess(arg1:string,arg2:string,arg3:string,arg4:boolean):Promise<Record<string, any>>;

export function RunMatching(arg1:string,arg2:string,arg3:Record<string, any>):Promise<Record<string, any>>;

export function RunNetDistribution(arg1:string,arg2:string,arg3:string,arg4:boolean):Promise<Record<string, any>>;

export function SaveReconciliationDraft(arg1:string,arg2:Record<string, any>):Promise<Record<string, any>>;

export function SearchDBFTable(arg1:string,arg2:string,arg3:string):Promise<Record<string, any>>;

export function SetAPIKey(arg1:string,arg2:string):Promise<void>;

export function TestAPIKey(arg1:string,arg2:string):Promise<boolean>;

export function UnmatchTransaction(arg1:number):Promise<Record<string, any>>;

export function UpdateDBFRecord(arg1:string,arg2:string,arg3:number,arg4:number,arg5:string):Promise<void>;

export function UpdateUserRole(arg1:number,arg2:number):Promise<void>;

export function UpdateUserStatus(arg1:number,arg2:boolean):Promise<void>;

export function ValidateSession(arg1:string,arg2:string):Promise<auth.User>;
